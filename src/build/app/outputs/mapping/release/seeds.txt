io.sentry.MainEventProcessor
io.sentry.config.FilesystemPropertiesLoader
io.sentry.protocol.User
io.sentry.hints.SubmissionResult
androidx.window.layout.SidecarWindowBackend$ExtensionListenerImpl
androidx.window.layout.WindowMetricsCalculator$Companion
io.sentry.NoOpEnvelopeReader
io.sentry.protocol.SentryStackTrace
io.sentry.android.core.MainLooperHandler
com.google.gson.internal.bind.TreeTypeAdapter$GsonContextImpl
io.sentry.NoOpSentryClient
io.sentry.android.core.SentryAndroid
io.sentry.SentryOptions$BeforeBreadcrumbCallback
com.google.gson.LongSerializationPolicy
androidx.window.embedding.SplitRule$LayoutDir
com.google.gson.internal.ConstructorConstructor$7
io.sentry.android.core.AppComponentsBreadcrumbsIntegration
androidx.window.layout.SidecarCompat$FirstAttachAdapter
com.google.gson.internal.bind.SqlDateTypeAdapter
androidx.window.embedding.SplitPlaceholderRule
com.google.gson.JsonNull
com.google.android.gms.common.api.internal.LifecycleCallback
io.sentry.DateUtils
androidx.window.layout.ExtensionsWindowLayoutInfoAdapter
io.sentry.adapters.SentryIdDeserializerAdapter
io.sentry.hints.Retryable
com.google.android.gms.common.annotation.KeepName
io.sentry.SentryClient$1
io.sentry.HubAdapter
io.sentry.SentryEnvelope
com.google.gson.internal.LinkedHashTreeMap$LinkedTreeMapIterator
androidx.window.embedding.ActivityFilter
io.sentry.android.core.ANRWatchDog
io.sentry.IpAddressUtils
com.google.android.gms.common.api.GoogleApiActivity
com.google.gson.internal.ConstructorConstructor
io.sentry.CustomSamplingContext
androidx.window.layout.ExtensionInterfaceCompat
androidx.window.layout.WindowMetrics
com.google.gson.internal.bind.TypeAdapters$33
io.sentry.IEnvelopeReader
io.sentry.UncaughtExceptionHandlerIntegration
io.sentry.android.core.DefaultAndroidEventProcessor
io.sentry.adapters.OrientationDeserializerAdapter
com.google.gson.JsonSyntaxException
io.sentry.NoOpLogger
com.google.gson.JsonDeserializer
com.google.gson.stream.JsonWriter
com.google.gson.internal.bind.TypeAdapters$3
io.sentry.Integration
com.google.gson.internal.GsonBuildConfig
com.google.gson.internal.Streams
io.sentry.adapters.MapAdapter
io.sentry.Hub
io.sentry.android.core.IBuildInfoProvider
com.google.gson.ExclusionStrategy
io.sentry.EnvelopeReader
com.google.gson.internal.LinkedHashTreeMap$EntrySet$1
com.google.gson.internal.Streams$AppendableWriter$CurrentWrite
io.sentry.HostnameCache$1
io.sentry.adapters.DateDeserializerAdapter
io.sentry.TransactionContext
io.sentry.UnknownPropertiesTypeAdapterFactory$UnknownPropertiesTypeAdapter
com.google.gson.internal.LinkedTreeMap$LinkedTreeMapIterator
io.sentry.adapters.SpanIdDeserializerAdapter
io.sentry.Scope$SessionPair
io.sentry.adapters.SentryLevelSerializerAdapter
com.google.gson.stream.MalformedJsonException
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$8
com.google.gson.internal.bind.ArrayTypeAdapter$1
kotlinx.coroutines.android.AndroidExceptionPreHandler
io.sentry.android.core.LifecycleWatcher$1
com.google.gson.GsonBuilder
io.sentry.Session
io.sentry.cache.CacheStrategy
androidx.window.embedding.SplitRule$Api30Impl
io.sentry.Sentry
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$9
io.sentry.EventProcessor
com.google.gson.reflect.TypeToken
io.sentry.TracesSampler
com.google.gson.internal.bind.TypeAdapters$34
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback
io.sentry.SendCachedEnvelopeFireAndForgetIntegration$SendFireAndForget
io.sentry.CircularFifoQueue
io.sentry.Stack
com.google.gson.internal.ConstructorConstructor$9
io.sentry.UserFeedback
io.sentry.protocol.SdkVersion
com.google.gson.internal.bind.JsonTreeWriter$1
androidx.core.graphics.drawable.IconCompat
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$2
io.sentry.android.core.R
com.google.android.gms.common.util.DynamiteApi
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$13
io.sentry.transport.AuthenticatorWrapper
io.sentry.EnvelopeSender
io.sentry.IHub
io.sentry.SentryEnvelopeItem$CachedItem
com.google.gson.internal.ConstructorConstructor$3
androidx.activity.OnBackPressedDispatcher$LifecycleOnBackPressedCancellable
androidx.window.embedding.EmbeddingAdapter
io.sentry.SentryEnvelopeItemHeaderAdapter
com.google.gson.internal.ConstructorConstructor$12
io.sentry.transport.TransportResult$1
io.sentry.android.ndk.DebugImagesLoader
androidx.window.layout.FoldingFeature$State$Companion
androidx.lifecycle.LiveData$LifecycleBoundObserver
com.google.gson.internal.bind.TreeTypeAdapter
androidx.window.embedding.ExtensionEmbeddingBackend$Companion
io.sentry.HostnameCache$HostnameCacheThreadFactory
io.sentry.config.EnvironmentVariablePropertiesProvider
io.sentry.flutter.BuildConfig
io.sentry.util.CollectionUtils
io.sentry.android.core.util.ConnectivityChecker
io.sentry.SentryClient
io.sentry.transport.TransportResult$SuccessTransportResult
androidx.window.layout.WindowInfoTracker
com.google.gson.FieldNamingPolicy$6
io.sentry.flutter.R$color
io.sentry.OptionsContainer
com.google.gson.internal.UnsafeAllocator
io.sentry.flutter.R
com.google.gson.internal.LinkedTreeMap$1
io.sentry.SentryStackTraceFactory
android.support.v4.graphics.drawable.IconCompatParcelizer
androidx.window.layout.FoldingFeature
io.sentry.protocol.Message
com.google.gson.internal.ConstructorConstructor$11
com.google.gson.JsonParseException
androidx.window.embedding.EmbeddingCompat
com.google.gson.stream.JsonScope
androidx.window.layout.WindowInfoTrackerDecorator
io.sentry.IUnknownPropertiesConsumer
com.google.gson.internal.LinkedHashTreeMap$AvlBuilder
io.sentry.hints.SessionStart
io.sentry.Scope$IWithTransaction
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1
io.sentry.config.AbstractPropertiesProvider
com.google.android.gms.common.internal.ReflectedParcelable
com.google.gson.internal.LinkedHashTreeMap$AvlIterator
androidx.window.core.Bounds
io.sentry.protocol.Browser
com.google.gson.internal.bind.TypeAdapters$8
com.google.gson.JsonSerializer
io.sentry.hints.ApplyScopeData
io.sentry.hints.Cached
androidx.window.core.Version$bigInteger$2
io.sentry.config.PropertiesProvider
androidx.window.embedding.EmptyEmbeddingComponent
com.google.gson.FieldNamingPolicy$3
io.sentry.DiagnosticLogger
androidx.window.layout.WindowInfoTrackerImpl
io.sentry.SentryExecutorService
io.sentry.hints.Flushable
io.sentry.Session$State
androidx.window.layout.FoldingFeature$State
androidx.window.layout.EmptyDecorator
io.flutter.embedding.engine.FlutterOverlaySurface
io.sentry.android.core.SystemEventsBreadcrumbsIntegration$SystemEventsBroadcastReceiver
androidx.window.layout.WindowMetricsCalculator$Companion$reset$1
androidx.window.layout.DisplayCompatHelperApi17
io.sentry.util.StringUtils
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$14
io.sentry.DirectoryProcessor
androidx.annotation.Keep
com.google.gson.internal.bind.TypeAdapters$30
com.google.gson.internal.bind.TypeAdapters$12
com.google.gson.internal.ObjectConstructor
io.sentry.flutter.R$style
androidx.lifecycle.CompositeGeneratedAdaptersObserver
io.sentry.config.PropertiesProviderFactory
com.google.gson.JsonIOException
io.sentry.protocol.Device
androidx.window.layout.SidecarAdapter
com.google.gson.internal.bind.DateTypeAdapter
io.sentry.flutter.R$id
com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter
com.google.gson.internal.ConstructorConstructor$8
io.sentry.DateUtils$2
io.sentry.SentryBaseEvent
io.sentry.util.LogUtils
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$5
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter
androidx.window.layout.FoldingFeature$Orientation
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$12
io.sentry.SendFireAndForgetEnvelopeSender
io.sentry.android.core.SystemEventsBreadcrumbsIntegration
io.sentry.Scope$IWithSession
io.sentry.IEnvelopeSender
io.sentry.android.core.ManifestMetadataReader
io.sentry.adapters.CollectionAdapter
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField
com.google.gson.stream.JsonToken
io.sentry.UncaughtExceptionHandlerIntegration$UncaughtExceptionHint
io.sentry.OutboxSender
androidx.window.layout.FoldingFeature$OcclusionType$Companion
io.sentry.transport.HttpConnection
io.sentry.hints.SessionEnd
com.google.gson.JsonParser
com.google.gson.internal.LinkedTreeMap$KeySet
io.sentry.ILogger
androidx.window.layout.SidecarAdapter$Companion
io.sentry.protocol.Device$DeviceOrientation
com.google.gson.internal.bind.TypeAdapters$25
io.sentry.SentryEnvelopeItem
androidx.window.layout.WindowMetricsCalculatorDecorator
androidx.window.embedding.SplitController$Companion
io.sentry.cache.EnvelopeCache
androidx.window.embedding.EmbeddingTranslatingCallback
io.sentry.protocol.SentryId
com.google.gson.internal.$Gson$Types
com.google.gson.internal.bind.TypeAdapters$26
androidx.window.R
io.sentry.ITransaction
com.google.gson.internal.bind.TypeAdapters
androidx.versionedparcelable.CustomVersionedParcelable
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback
io.sentry.transport.ReusableCountLatch$Sync
androidx.window.embedding.SplitRule
io.sentry.transport.QueuedThreadPoolExecutor$CancelledFuture
androidx.window.layout.ExtensionWindowLayoutInfoBackend
com.google.gson.Gson$FutureTypeAdapter
androidx.window.layout.SidecarWindowBackend
io.sentry.Dsn
io.sentry.hints.SessionEndHint
androidx.window.layout.WindowMetricsCalculator$Companion$overrideDecorator$1
io.sentry.transport.TransportResult$ErrorTransportResult
io.sentry.android.core.AndroidTransportGate
io.flutter.plugins.urllauncher.WebViewActivity
io.flutter.view.AccessibilityViewEmbedder
io.sentry.ITransportFactory
androidx.lifecycle.ProcessLifecycleOwnerInitializer
com.google.gson.internal.LinkedHashTreeMap
io.sentry.protocol.Gpu
io.sentry.android.ndk.INativeScope
io.sentry.adapters.SpanIdSerializerAdapter
com.google.gson.internal.bind.ObjectTypeAdapter$1
com.google.gson.FieldNamingPolicy$1
io.sentry.android.core.ContextUtils
io.sentry.NoOpSentryExecutorService
com.google.gson.internal.ConstructorConstructor$1
io.sentry.DateUtils$1
io.flutter.plugins.googlemaps.GoogleMapController
io.sentry.Scope
com.google.gson.TypeAdapter$1
io.sentry.util.ApplyScopeUtils
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper
androidx.window.layout.HardwareFoldingFeature$Companion
io.flutter.embedding.android.FlutterSplashView$SavedState
androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback
io.flutter.plugins.GeneratedPluginRegistrant
io.sentry.SpanStatus
com.google.gson.internal.bind.ArrayTypeAdapter
com.google.gson.internal.bind.ObjectTypeAdapter
com.google.gson.internal.Streams$AppendableWriter
com.google.gson.DefaultDateTypeAdapter
androidx.window.layout.WindowInfoTrackerImpl$Companion
io.sentry.protocol.Request
io.sentry.android.core.util.Permissions
com.google.gson.TypeAdapterFactory
com.google.gson.JsonPrimitive
com.google.gson.Gson
androidx.window.layout.HardwareFoldingFeature$Type
io.sentry.SentryEnvelopeItemHeader
com.google.gson.internal.bind.TypeAdapters$19
io.sentry.flutter.R$integer
androidx.window.layout.DisplayCompatHelperApi28
androidx.window.core.Version$Companion
androidx.window.layout.FoldingFeature$Orientation$Companion
io.sentry.android.core.EnvelopeFileObserver$CachedEnvelopeHint
io.sentry.flutter.R$styleable
io.sentry.DuplicateEventDetectionEventProcessor
com.google.gson.internal.UnsafeAllocator$1
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$16
com.google.gson.internal.bind.TreeTypeAdapter$1
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$7
io.sentry.transport.ITransportGate
io.sentry.protocol.OperatingSystem
io.sentry.transport.StdoutTransport
io.sentry.flutter.SentryFlutterPluginKt
com.google.gson.internal.bind.ObjectTypeAdapter$2
io.sentry.Attachment
io.sentry.ScopeCallback
io.sentry.exception.InvalidSentryTraceHeaderException
com.google.gson.Gson$2
com.google.gson.internal.Excluder
io.sentry.adapters.SentryLevelDeserializerAdapter
androidx.core.graphics.drawable.IconCompatParcelizer
io.sentry.ISentryClient
com.google.gson.TypeAdapter
pt.up.fe.ni.uni.MainActivity
com.google.gson.internal.ConstructorConstructor$14
com.google.gson.Gson$1
io.sentry.android.core.TempSensorBreadcrumbsIntegration
io.sentry.android.core.SentryAndroidOptions
io.sentry.android.core.LifecycleWatcher
io.sentry.SendCachedEnvelopeFireAndForgetIntegration
io.sentry.android.core.AndroidLogger$1
com.google.gson.internal.LinkedHashTreeMap$KeySet
androidx.window.layout.SidecarCompat
androidx.window.embedding.ActivityStack
com.google.gson.internal.bind.JsonTreeReader$1
com.google.gson.internal.ConstructorConstructor$13
com.google.gson.annotations.Expose
androidx.window.layout.WindowLayoutInfo
com.google.gson.internal.bind.TypeAdapters$15
androidx.lifecycle.Lifecycling$1
androidx.lifecycle.FullLifecycleObserverAdapter
io.sentry.NoOpSpan
com.google.gson.internal.LinkedHashTreeMap$KeySet$1
com.google.gson.internal.reflect.ReflectionAccessor
com.google.gson.internal.bind.TypeAdapters$20
io.sentry.android.core.Installation
io.sentry.android.ndk.BuildConfig
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory
androidx.window.layout.SidecarCompat$DistinctElementCallback
com.google.gson.internal.bind.TypeAdapters$9
io.sentry.android.core.util.DeviceOrientations
io.sentry.android.core.EnvelopeFileObserverIntegration$1
com.google.gson.internal.ConstructorConstructor$6
io.sentry.protocol.SentryRuntime
com.google.gson.internal.bind.TypeAdapters$17
com.google.gson.internal.bind.TypeAdapters$32
androidx.versionedparcelable.ParcelImpl
io.sentry.GsonSerializer
io.sentry.config.SimplePropertiesProvider
com.google.gson.internal.bind.TypeAdapters$7
com.google.gson.internal.bind.TypeAdapters$16
com.google.gson.internal.bind.TypeAdapters$31
com.google.gson.FieldNamingPolicy$2
io.sentry.protocol.SentryStackFrame
com.google.gson.internal.LinkedTreeMap
io.sentry.protocol.SdkInfo
com.google.gson.internal.UnsafeAllocator$4
io.sentry.IScopeObserver
io.sentry.transport.AsyncHttpTransport
androidx.core.app.RemoteActionCompat
com.google.gson.annotations.Since
io.flutter.plugin.platform.SingleViewPresentation
com.google.gson.internal.bind.TypeAdapters$11
io.sentry.SentryOptions$BeforeSendCallback
io.flutter.view.FlutterCallbackInformation
io.sentry.adapters.DateSerializerAdapter
io.sentry.protocol.Contexts
com.google.gson.internal.$Gson$Types$WildcardTypeImpl
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$6
io.sentry.android.core.EnvelopeFileObserverIntegration
com.google.gson.internal.bind.TypeAdapters$36
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1$invokeSuspend$$inlined$collect$1
io.sentry.android.core.util.ConnectivityChecker$Status
androidx.savedstate.Recreator
io.sentry.transport.CurrentDateProvider
io.sentry.transport.NoOpTransportGate
com.google.gson.Gson$3
io.sentry.util.Objects
com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter
com.google.gson.internal.bind.TypeAdapters$22
androidx.window.embedding.SplitRuleParser
io.sentry.SentryItemType
io.sentry.SentryThreadFactory
io.sentry.android.core.EnvelopeFileObserver
io.sentry.android.core.EnvelopeFileObserverIntegration$OutboxEnvelopeFileObserverIntegration
com.google.gson.internal.bind.SqlDateTypeAdapter$1
io.sentry.SpanId
io.sentry.adapters.SpanStatusDeserializerAdapter
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1
io.sentry.protocol.SentryException
androidx.activity.ComponentActivity$3
io.sentry.config.ClasspathPropertiesLoader
com.google.gson.internal.bind.TypeAdapters$21
io.sentry.UncaughtExceptionHandler$Adapter
androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface
io.sentry.adapters.ContextsDeserializerAdapter
io.sentry.ShutdownHookIntegration
com.google.gson.internal.bind.TypeAdapters$2
com.google.gson.JsonSerializationContext
com.google.gson.internal.ConstructorConstructor$2
io.sentry.SendCachedEnvelopeFireAndForgetIntegration$SendFireAndForgetDirPath
com.google.gson.FieldNamingStrategy
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper
com.google.gson.internal.bind.TypeAdapters$35
io.sentry.android.core.AnrIntegration
androidx.lifecycle.SingleGeneratedAdapterObserver
io.sentry.hints.SessionStartHint
androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl
io.sentry.transport.RateLimiter$DataCategory
androidx.window.layout.WindowMetricsCalculatorCompat
androidx.window.layout.ActivityCompatHelperApi30
io.sentry.SystemOutLogger
io.sentry.SentryValues
androidx.lifecycle.ReflectiveGenericLifecycleObserver
io.sentry.NoOpHub
io.sentry.ISerializer
com.google.gson.internal.LinkedHashTreeMap$EntrySet
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer
io.sentry.android.core.AndroidLogger
io.sentry.transport.NoOpEnvelopeCache
androidx.window.layout.FoldingFeature$OcclusionType
io.sentry.SentryOptions$Proxy
com.google.gson.internal.ConstructorConstructor$5
io.sentry.android.core.util.MainThreadChecker
io.sentry.adapters.ContextsSerializerAdapter
androidx.window.layout.ActivityCompatHelperApi24
io.sentry.android.ndk.SentryNdk
io.sentry.SentryOptions
androidx.window.layout.HardwareFoldingFeature
io.sentry.protocol.Mechanism
com.google.gson.InstanceCreator
io.sentry.protocol.DebugMeta
com.google.gson.internal.bind.TypeAdapters$14
androidx.window.embedding.SplitPairRule
com.google.gson.FieldAttributes
io.sentry.SendFireAndForgetOutboxSender
io.sentry.protocol.SentryPackage
androidx.window.embedding.SplitInfo
com.google.gson.Gson$4
androidx.window.layout.SidecarCompat$Companion
androidx.window.layout.SidecarCompat$TranslatingCallback
io.sentry.SentryExceptionFactory
androidx.window.embedding.ActivityRule
io.sentry.NoOpTransaction
com.google.gson.internal.bind.TypeAdapters$1
io.sentry.transport.NoOpTransport
io.sentry.android.core.IDebugImagesLoader
com.google.gson.internal.JavaVersion
androidx.window.embedding.MatcherUtils
com.google.gson.LongSerializationPolicy$1
io.sentry.RequestDetails
io.sentry.config.CompositePropertiesProvider
io.sentry.protocol.SentryTransaction
io.sentry.transport.AsyncHttpTransport$AsyncConnectionThreadFactory
com.google.gson.stream.JsonReader
androidx.window.layout.HardwareFoldingFeature$Type$Companion
androidx.activity.ImmLeaksCleaner
io.sentry.android.core.ApplicationNotResponding
io.sentry.Breadcrumb
io.sentry.UncaughtExceptionHandler
io.sentry.hints.Resettable
io.sentry.SentryOptions$TracesSamplerCallback
io.sentry.android.R
io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference
io.sentry.transport.QueuedThreadPoolExecutor$1
io.sentry.android.core.PhoneStateBreadcrumbsIntegration$PhoneStateChangeListener
io.sentry.android.core.util.RootChecker
com.google.gson.internal.LinkedHashTreeMap$1
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$1
io.sentry.flutter.R$attr
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$10
androidx.activity.ComponentActivity$2
com.google.gson.internal.LinkedTreeMap$EntrySet$1
io.sentry.SentryLevel
io.sentry.android.ndk.NativeModuleListLoader
com.google.gson.internal.LinkedTreeMap$Node
io.sentry.RequestDetailsResolver
com.google.gson.LongSerializationPolicy$2
com.google.gson.internal.bind.CollectionTypeAdapterFactory
com.google.android.gms.dynamite.DynamiteModule$DynamiteLoaderClassLoader
androidx.lifecycle.DefaultLifecycleObserver
io.sentry.SynchronizedQueue
io.sentry.android.core.AppLifecycleIntegration
io.sentry.android.core.IHandler
io.sentry.NoOpTransportFactory
com.google.gson.internal.bind.TypeAdapters$28
com.google.gson.internal.bind.DateTypeAdapter$1
com.google.gson.internal.reflect.UnsafeReflectionAccessor
com.google.gson.annotations.JsonAdapter
androidx.window.core.ExperimentalWindowApi
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$3
androidx.window.core.Version
io.sentry.AsyncHttpTransportFactory
io.sentry.transport.ITransport
androidx.window.embedding.EmbeddingInterfaceCompat$EmbeddingCallbackInterface
io.sentry.hints.DiskFlushNotification
io.sentry.adapters.OrientationSerializerAdapter
io.sentry.protocol.App
io.sentry.flutter.R$string
io.sentry.SentryTracer
com.google.gson.internal.bind.TypeAdapters$23
io.sentry.flutter.R$drawable
io.sentry.android.core.DefaultAndroidEventProcessor$1
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter
com.google.gson.annotations.Until
com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter
com.google.gson.JsonDeserializationContext
com.google.gson.internal.bind.TimeTypeAdapter
androidx.window.embedding.SplitController
com.google.gson.FieldNamingPolicy$5
io.sentry.protocol.DebugImage
io.sentry.android.core.ActivityLifecycleIntegration
io.sentry.transport.ReusableCountLatch
androidx.window.layout.SidecarCompat$registerConfigurationChangeListener$configChangeObserver$1
com.google.gson.JsonStreamParser
com.google.gson.annotations.SerializedName
com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory
androidx.window.embedding.EmbeddingBackend
android.support.v4.app.RemoteActionCompatParcelizer
io.sentry.CircularFifoQueue$1
com.google.gson.internal.LinkedHashTreeMap$Node
androidx.window.embedding.EmbeddingInterfaceCompat
androidx.window.R$attr
io.sentry.android.core.PhoneStateBreadcrumbsIntegration
io.sentry.DirectoryProcessor$SendCachedEnvelopeHint
io.sentry.SentryEnvelopeHeader
com.google.gson.internal.ConstructorConstructor$4
io.sentry.SpanContext
com.google.gson.internal.bind.TypeAdapters$24
com.google.gson.internal.bind.TypeAdapters$35$1
com.google.gson.internal.bind.JsonTreeWriter
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack
androidx.window.embedding.EmbeddingRule
com.google.gson.internal.bind.TypeAdapters$10
androidx.window.R$id
io.sentry.Span
io.sentry.SendCachedEnvelopeFireAndForgetIntegration$SendFireAndForgetFactory
io.sentry.Sentry$OptionsConfiguration
io.sentry.protocol.SentryThread
androidx.window.layout.WindowBackend
com.google.gson.internal.PreJava9DateFormatProvider
io.sentry.SentryEvent
com.google.gson.internal.bind.JsonTreeReader
com.google.gson.JsonArray
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1
androidx.core.app.CoreComponentFactory
io.sentry.transport.AsyncHttpTransport$1
io.sentry.android.ndk.SentryNdkUtil
androidx.window.layout.WindowMetricsCalculator$Companion$decorator$1
com.google.gson.internal.ConstructorConstructor$10
kotlinx.coroutines.android.AndroidDispatcherFactory
io.sentry.config.PropertiesLoader
com.google.gson.internal.JsonReaderInternalAccess
io.sentry.HostnameCache
io.sentry.SentryEnvelopeHeaderAdapter
io.sentry.android.core.NoOpDebugImagesLoader
com.google.gson.internal.reflect.PreJava9ReflectionAccessor
io.sentry.SentryTraceHeader
com.google.gson.Gson$5
com.google.gson.internal.bind.MapTypeAdapterFactory
io.sentry.ISpan
io.sentry.cache.IEnvelopeCache
io.sentry.BuildConfig
com.google.gson.internal.bind.TreeTypeAdapter$SingleTypeFactory
androidx.fragment.app.Fragment$2
androidx.window.R$styleable
androidx.window.embedding.ExtensionEmbeddingBackend
io.sentry.Stack$StackItem
io.sentry.adapters.SpanStatusSerializerAdapter
io.sentry.protocol.SentrySpan
androidx.window.java.R
io.sentry.config.SystemPropertyPropertiesProvider
com.google.gson.internal.LazilyParsedNumber
com.google.gson.internal.bind.TypeAdapters$27
io.sentry.android.core.AndroidTransportGate$1
com.google.gson.internal.bind.TimeTypeAdapter$1
io.sentry.adapters.TimeZoneSerializerAdapter
com.google.gson.internal.bind.TypeAdapters$18
io.sentry.transport.ProxyAuthenticator
io.sentry.android.core.ANRWatchDog$ANRListener
io.sentry.transport.AsyncHttpTransport$EnvelopeSender
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$4
com.google.gson.internal.UnsafeAllocator$2
io.sentry.SamplingContext
io.sentry.util.CollectionUtils$Predicate
com.google.gson.internal.bind.TypeAdapters$5
androidx.window.layout.SidecarWindowBackend$Companion
io.flutter.embedding.engine.FlutterJNI
io.sentry.exception.SentryEnvelopeException
io.sentry.transport.RateLimiter
io.sentry.util.ExceptionUtils
io.sentry.android.core.BuildInfoProvider
io.sentry.transport.TransportResult
io.sentry.android.ndk.R
com.google.gson.internal.LinkedTreeMap$EntrySet
com.google.gson.internal.UnsafeAllocator$3
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$11
com.google.gson.internal.bind.TypeAdapters$4
com.google.gson.internal.Excluder$1
com.google.gson.internal.bind.TypeAdapters$26$1
io.sentry.flutter.R$layout
androidx.window.layout.WindowInfoTracker$Companion
io.sentry.android.ndk.NativeScope
io.sentry.android.core.SentryInitProvider
com.google.gson.internal.bind.TypeAdapters$13
com.google.gson.internal.bind.util.ISO8601Utils
androidx.window.layout.WindowMetricsCalculator
com.google.gson.internal.bind.TypeAdapters$6
androidx.core.app.RemoteActionCompatParcelizer
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$15
androidx.savedstate.SavedStateRegistry$1
com.google.gson.JsonObject
com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper
io.sentry.android.ndk.NdkScopeObserver
com.google.gson.FieldNamingPolicy$4
io.sentry.SentryClient$SortBreadcrumbsByDate
io.sentry.SynchronizedCollection
io.sentry.android.core.NdkIntegration
io.sentry.android.core.BuildConfig
io.sentry.android.core.ILoadClass
com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl
io.sentry.android.core.AndroidOptionsInitializer
io.sentry.flutter.SentryFlutterPlugin
androidx.window.layout.DisplayFeature
io.sentry.flutter.R$dimen
com.google.gson.FieldNamingPolicy
io.sentry.android.core.LoadClass
io.sentry.adapters.SentryIdSerializerAdapter
com.google.gson.internal.$Gson$Preconditions
io.sentry.adapters.TimeZoneDeserializerAdapter
androidx.window.embedding.SplitPairFilter
com.google.gson.JsonElement
io.sentry.UnknownPropertiesTypeAdapterFactory
com.google.gson.internal.LinkedTreeMap$KeySet$1
io.sentry.transport.QueuedThreadPoolExecutor
com.google.gson.stream.JsonReader$1
com.google.gson.internal.Primitives
com.google.gson.internal.$Gson$Types$GenericArrayTypeImpl
androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper
io.sentry.NoOpSerializer
com.google.gson.internal.bind.TypeAdapters$29
io.sentry.transport.ICurrentDateProvider
io.sentry.util.Pair
io.sentry.exception.ExceptionMechanismException
androidx.window.embedding.EmbeddingCompat$Companion
io.sentry.SessionAdapter
io.sentry.ISentryExecutorService
io.sentry.HostnameCache: long expirationTimestamp
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action SET_SELECTION
kotlinx.coroutines.scheduling.DefaultScheduler: kotlinx.coroutines.scheduling.DefaultScheduler INSTANCE
io.flutter.embedding.engine.systemchannels.PlatformChannel: io.flutter.plugin.common.MethodChannel channel
io.sentry.SentryOptions$Proxy: java.lang.String host
androidx.core.app.RemoteActionCompat: android.app.PendingIntent mActionIntent
com.google.gson.internal.bind.TreeTypeAdapter: com.google.gson.Gson gson
com.google.gson.stream.JsonScope: int NONEMPTY_OBJECT
com.google.gson.JsonNull: com.google.gson.JsonNull INSTANCE
androidx.fragment.app.FragmentManagerImpl: java.util.ArrayList mBackStackIndices
kotlin.Pair: java.lang.Object first
androidx.savedstate.SavedStateRegistryController: androidx.savedstate.SavedStateRegistry mRegistry
io.sentry.android.core.AndroidTransportGate: android.content.Context context
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics: int systemGestureInsetTop
kotlinx.coroutines.CompletedContinuation: java.lang.Throwable cancelCause
com.google.android.gms.maps.model.CameraPosition: float bearing
com.google.android.gms.base.R$string: int common_google_play_services_enable_button
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter CALENDAR
androidx.fragment.app.FragmentManagerImpl: java.util.ArrayList mAdded
io.sentry.protocol.SentryStackFrame: java.lang.String absPath
androidx.activity.ComponentActivity$NonConfigurationInstances: androidx.lifecycle.ViewModelStore viewModelStore
io.flutter.embedding.engine.systemchannels.PlatformChannel$2: int[] $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$SystemUiMode
io.flutter.embedding.android.FlutterActivity: io.flutter.embedding.android.FlutterActivityAndFragmentDelegate delegate
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation: io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation PORTRAIT_UP
kotlin.jvm.internal.Lambda: int arity
io.sentry.SendCachedEnvelopeFireAndForgetIntegration: io.sentry.SendCachedEnvelopeFireAndForgetIntegration$SendFireAndForgetFactory factory
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag SCOPES_ROUTE
com.google.android.gms.common.api.internal.GoogleApiManager: boolean zau
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration: boolean obscureText
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction: int resourceId
kotlinx.coroutines.CommonPool: kotlinx.coroutines.CommonPool INSTANCE
androidx.lifecycle.ViewModelStore: java.util.HashMap mMap
io.sentry.Scope: java.util.List attachments
com.google.gson.stream.JsonReader: int PEEKED_EOF
com.google.common.util.concurrent.AbstractFuture: java.lang.Object NULL
com.google.android.gms.maps.model.TileOverlayOptions: float zzd
com.google.android.gms.common.api.internal.GoogleApiManager: java.util.concurrent.atomic.AtomicInteger zao
io.sentry.transport.HttpConnection: io.sentry.SentryOptions options
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation: io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation PORTRAIT_DOWN
io.sentry.SentryEvent: io.sentry.protocol.Message message
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$11: io.sentry.android.core.SentryAndroidOptions $options
io.sentry.flutter.R$styleable: int ActivityRule_alwaysExpand
io.sentry.Scope: java.lang.String transactionName
io.sentry.android.core.NoOpDebugImagesLoader: io.sentry.android.core.NoOpDebugImagesLoader instance
kotlinx.coroutines.CancellableContinuationImpl: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU
io.flutter.embedding.engine.dart.DartExecutor: android.content.res.AssetManager assetManager
kotlin.internal.PlatformImplementations$ReflectThrowable: kotlin.internal.PlatformImplementations$ReflectThrowable INSTANCE
androidx.core.app.NotificationCompat$BigTextStyle: java.lang.CharSequence mBigText
io.flutter.embedding.android.MotionEventTracker$MotionEventId: long id
io.sentry.transport.RateLimiter: io.sentry.ILogger logger
io.flutter.embedding.android.FlutterView$3: io.flutter.embedding.android.FlutterView this$0
io.sentry.flutter.R$id: int accessibility_custom_action_2
io.flutter.plugin.editing.TextEditingDelta: int deltaEnd
io.sentry.SpanContext: io.sentry.SpanId spanId
io.sentry.protocol.Message: java.lang.String formatted
io.sentry.android.core.ManifestMetadataReader: java.lang.String SAMPLE_RATE
com.google.android.gms.common.internal.ConnectionTelemetryConfiguration: boolean zzb
androidx.fragment.app.FragmentManagerImpl: java.util.ArrayList mCreatedMenus
androidx.window.embedding.EmbeddingCompat: androidx.window.extensions.embedding.ActivityEmbeddingComponent embeddingExtension
com.google.android.gms.common.api.internal.zabu: boolean zaf
com.google.gson.stream.JsonReader: int PEEKED_NONE
com.google.common.hash.LittleEndianByteArray$UnsafeByteArray: int BYTE_ARRAY_BASE_OFFSET
kotlin.coroutines.AbstractCoroutineContextKey: kotlin.jvm.functions.Function1 safeCast
com.google.android.gms.common.internal.zzj: android.os.Parcelable$Creator CREATOR
com.google.gson.GsonBuilder: java.util.List hierarchyFactories
com.google.android.gms.common.Feature: java.lang.String zza
com.google.android.gms.common.api.GoogleApi$Settings: com.google.android.gms.common.api.internal.StatusExceptionMapper zaa
kotlin.text.Charsets: java.nio.charset.Charset UTF_16
androidx.core.app.NotificationCompat$Action: android.os.Bundle mExtras
kotlinx.coroutines.scheduling.WorkQueue: int consumerIndex
androidx.core.R$id: int accessibility_custom_action_5
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType URL
androidx.fragment.app.Fragment: java.lang.Object USE_DEFAULT_TRANSITION
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback animationCallback
io.flutter.embedding.engine.FlutterJNI: io.flutter.plugin.localization.LocalizationPlugin localizationPlugin
io.flutter.plugins.sharedpreferences.MethodCallHandlerImpl$1$1: io.flutter.plugins.sharedpreferences.MethodCallHandlerImpl$1 this$1
androidx.window.layout.WindowMetricsCalculator$Companion$reset$1: androidx.window.layout.WindowMetricsCalculator$Companion$reset$1 INSTANCE
kotlinx.coroutines.DebugKt: boolean RECOVER_STACK_TRACES
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutator: android.graphics.Matrix matrix
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event[] $VALUES
com.google.android.gms.maps.zzp: com.google.android.gms.maps.GoogleMap$OnPolylineClickListener zza
kotlin.ranges.IntProgressionIterator: int next
io.flutter.FlutterInjector$Builder: java.util.concurrent.ExecutorService executorService
com.google.android.gms.dynamic.ObjectWrapper: java.lang.Object zza
io.flutter.view.VsyncWaiter$1$1: long val$cookie
com.google.android.gms.common.api.internal.zaad: java.util.Map zaa
io.flutter.plugins.googlemaps.GoogleMapController$1: io.flutter.plugins.googlemaps.GoogleMapController this$0
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean globalGeometryDirty
kotlinx.coroutines.ExecutorCoroutineDispatcher: kotlinx.coroutines.ExecutorCoroutineDispatcher$Key Key
kotlinx.coroutines.scheduling.CoroutineScheduler$WhenMappings: int[] $EnumSwitchMapping$0
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.String increasedValue
com.google.common.collect.RegularImmutableSet: com.google.common.collect.RegularImmutableSet EMPTY
com.google.android.gms.maps.model.PolylineOptions: com.google.android.gms.maps.model.Cap zzi
androidx.window.layout.SidecarWindowBackend: boolean DEBUG
com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node right
io.flutter.plugin.editing.TextInputPlugin: io.flutter.embedding.engine.systemchannels.TextInputChannel textInputChannel
io.flutter.view.AccessibilityBridge$5: int[] $SwitchMap$io$flutter$view$AccessibilityBridge$StringAttributeType
androidx.core.app.NotificationCompat$Builder: boolean mShowWhen
com.google.gson.Gson: boolean DEFAULT_JSON_NON_EXECUTABLE
androidx.window.R$styleable: int ActivityFilter_activityName
androidx.core.view.ViewCompat: int[] ACCESSIBILITY_ACTIONS_RESOURCE_IDS
androidx.fragment.app.Fragment$AnimationInfo: int mNextAnim
com.google.android.gms.common.api.internal.GoogleApiManager: long zag
io.sentry.Session: java.lang.String distinctId
io.flutter.plugin.common.BasicMessageChannel: io.flutter.plugin.common.MessageCodec codec
com.google.android.gms.maps.model.Tile: android.os.Parcelable$Creator CREATOR
io.sentry.MainEventProcessor: io.sentry.SentryThreadFactory sentryThreadFactory
com.google.gson.internal.LinkedHashTreeMap$LinkedTreeMapIterator: com.google.gson.internal.LinkedHashTreeMap$Node lastReturned
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding: java.util.Set onActivityResultListeners
io.sentry.SentryEnvelopeItem: java.nio.charset.Charset UTF_8
io.sentry.Span: java.util.Date timestamp
androidx.window.layout.SidecarWindowBackend$ExtensionListenerImpl: androidx.window.layout.SidecarWindowBackend this$0
io.sentry.SentryOptions: io.sentry.IEnvelopeReader envelopeReader
io.sentry.SentryEvent: io.sentry.SentryLevel level
io.sentry.transport.NoOpEnvelopeCache: io.sentry.transport.NoOpEnvelopeCache instance
io.flutter.embedding.engine.dart.PlatformTaskQueue: android.os.Handler handler
io.flutter.view.AccessibilityViewEmbedder: java.util.Map embeddedViewToDisplayBounds
io.sentry.flutter.R$dimen: int notification_right_icon_size
androidx.fragment.app.FragmentManagerImpl: int mNextFragmentIndex
com.google.common.collect.MapMakerInternalMap$Segment: java.util.concurrent.atomic.AtomicInteger readCount
com.google.android.gms.common.internal.zzd: com.google.android.gms.common.internal.BaseGmsClient zza
com.google.android.gms.common.api.internal.zal: androidx.collection.ArrayMap zaa
com.tekartik.sqflite.SqflitePlugin$3: com.tekartik.sqflite.SqflitePlugin$BgResult val$bgResult
io.flutter.plugin.platform.PlatformPlugin: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle currentTheme
io.flutter.plugin.mouse.MouseCursorPlugin: io.flutter.embedding.engine.systemchannels.MouseCursorChannel mouseCursorChannel
io.sentry.flutter.R$id: int right_side
com.google.android.gms.common.internal.Objects$ToStringHelper: java.lang.Object zzb
androidx.fragment.app.FragmentTransition$4: java.util.ArrayList val$sharedElementsOut
com.google.android.gms.common.api.internal.zabk: android.os.Handler zaa
kotlin.random.FallbackThreadLocalRandom: kotlin.random.FallbackThreadLocalRandom$implStorage$1 implStorage
io.flutter.embedding.android.KeyboardManager$PerEventCallbackBuilder$Callback: io.flutter.embedding.android.KeyboardManager$PerEventCallbackBuilder this$1
io.sentry.DirectoryProcessor: io.sentry.ILogger logger
io.sentry.SentryOptions: java.lang.Boolean debug
io.sentry.android.core.AppComponentsBreadcrumbsIntegration: android.content.Context context
io.flutter.view.AccessibilityBridge$SemanticsNode: io.flutter.view.AccessibilityBridge$SemanticsNode parent
io.sentry.UnknownPropertiesTypeAdapterFactory$UnknownPropertiesTypeAdapter: java.util.Collection propertyNames
io.sentry.protocol.SdkVersion: java.util.List packages
io.flutter.FlutterInjector: io.flutter.embedding.engine.loader.FlutterLoader flutterLoader
androidx.fragment.app.FragmentTransaction: java.util.ArrayList mOps
com.google.android.gms.common.stats.ConnectionTracker: java.lang.Object zzb
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory CALENDAR_FACTORY
androidx.window.layout.HardwareFoldingFeature: androidx.window.layout.HardwareFoldingFeature$Companion Companion
io.sentry.flutter.R$dimen: int compat_notification_large_icon_max_width
io.sentry.SentryOptions$Proxy: java.lang.String port
io.sentry.android.core.ANRWatchDog: java.util.concurrent.atomic.AtomicLong tick
androidx.window.R$attr: int splitRatio
com.google.gson.internal.bind.TimeTypeAdapter: com.google.gson.TypeAdapterFactory FACTORY
io.sentry.protocol.SentryStackFrame: java.util.List framesOmitted
kotlin.internal.PlatformImplementationsKt: kotlin.internal.PlatformImplementations IMPLEMENTATIONS
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int indexInArray
io.flutter.plugin.platform.PlatformViewsController: io.flutter.embedding.android.AndroidTouchProcessor androidTouchProcessor
androidx.lifecycle.ProcessLifecycleOwner: androidx.lifecycle.ProcessLifecycleOwner sInstance
com.google.android.gms.common.internal.zzo: android.content.ComponentName zzg
com.google.android.gms.common.api.internal.zabq: com.google.android.gms.common.api.internal.zact zai
com.google.android.gms.internal.base.zal: int zaa
io.flutter.view.AccessibilityBridge: io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler accessibilityMessageHandler
androidx.activity.ComponentActivity: androidx.activity.OnBackPressedDispatcher mOnBackPressedDispatcher
io.sentry.DateUtils: java.lang.String UTC
com.google.gson.internal.bind.TypeAdapters$32: java.lang.Class val$type
androidx.window.embedding.ExtensionEmbeddingBackend: androidx.window.embedding.ExtensionEmbeddingBackend globalInstance
io.sentry.Scope: java.util.Map extra
io.sentry.NoOpSentryExecutorService: io.sentry.NoOpSentryExecutorService instance
io.flutter.embedding.engine.loader.FlutterLoader: io.flutter.embedding.engine.FlutterJNI flutterJNI
androidx.fragment.app.FragmentManagerImpl: java.util.ArrayList mAvailBackStackIndices
androidx.fragment.app.FragmentTransaction: java.lang.String mName
androidx.window.embedding.ActivityFilter: android.content.ComponentName componentName
io.flutter.plugins.googlemaps.GoogleMapController: boolean indoorEnabled
kotlinx.coroutines.JobSupport$Finishing: kotlinx.coroutines.NodeList list
io.sentry.flutter.R$id: int accessibility_custom_action_12
io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler$1: io.flutter.plugin.common.BinaryMessenger$BinaryReply val$callback
com.tekartik.sqflite.SqflitePlugin$5: com.tekartik.sqflite.Database val$database
io.flutter.plugins.googlemaps.PolygonController: java.lang.String googleMapsPolygonId
io.flutter.plugins.googlemaps.PolygonsController: com.google.android.gms.maps.GoogleMap googleMap
kotlinx.coroutines.flow.internal.DownstreamExceptionElement: java.lang.Throwable e
dev.fluttercommunity.plus.packageinfo.PackageInfoPlugin: android.content.Context applicationContext
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag IS_KEYBOARD_KEY
androidx.fragment.app.Fragment: boolean mDetached
io.sentry.SpanContext: io.sentry.SpanStatus status
androidx.lifecycle.ClassesInfoCache$CallbackInfo: java.util.Map mHandlerToEvent
androidx.loader.app.LoaderManagerImpl: androidx.loader.app.LoaderManagerImpl$LoaderViewModel mLoaderViewModel
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin: io.flutter.plugins.sharedpreferences.MethodCallHandlerImpl handler
io.flutter.plugins.pathprovider.PathProviderPlugin$UiThreadExecutor: android.os.Handler handler
com.tekartik.sqflite.SqflitePlugin$5: io.flutter.plugin.common.MethodCall val$call
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry: io.flutter.embedding.engine.renderer.FlutterRenderer this$0
io.sentry.SentryItemType: io.sentry.SentryItemType Session
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest: java.nio.ByteBuffer params
com.google.common.hash.Hashing$ChecksumType: com.google.common.hash.Hashing$ChecksumType CRC_32
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action MOVE_CURSOR_FORWARD_BY_CHARACTER
com.google.android.gms.common.internal.BaseGmsClient: com.google.android.gms.common.internal.BaseGmsClient$BaseOnConnectionFailedListener zzx
androidx.fragment.app.FragmentTransaction: boolean mAllowAddToBackStack
com.google.common.collect.ImmutableList$SubList: int offset
io.flutter.view.AccessibilityViewEmbedder: android.util.SparseArray flutterIdToOrigin
androidx.window.layout.ActivityCompatHelperApi24: androidx.window.layout.ActivityCompatHelperApi24 INSTANCE
io.sentry.SentryOptions: int maxBreadcrumbs
kotlinx.coroutines.android.AndroidExceptionPreHandler: java.lang.Object _preHandler
com.google.common.reflect.TypeToken$TypeFilter: com.google.common.reflect.TypeToken$TypeFilter INTERFACE_ONLY
com.google.gson.stream.JsonReader: java.lang.String peekedString
androidx.window.layout.SidecarCompat$DistinctElementCallback: java.util.concurrent.locks.ReentrantLock lock
androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.TaskExecutor mDefaultTaskExecutor
com.google.android.gms.common.api.internal.zacd: com.google.android.gms.common.api.internal.ApiKey zac
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag IS_SELECTED
com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper: long WAITERS_OFFSET
io.sentry.SpanStatus: io.sentry.SpanStatus UNAVAILABLE
androidx.core.app.NotificationCompat$Style: boolean mSummaryTextSet
io.flutter.embedding.android.AndroidTouchProcessor: boolean trackMotionEvents
androidx.window.layout.ExtensionWindowLayoutInfoBackend: java.util.Map listenerToActivity
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: android.content.BroadcastReceiver broadcastReceiver
com.google.gson.internal.bind.TreeTypeAdapter: com.google.gson.internal.bind.TreeTypeAdapter$GsonContextImpl context
io.sentry.HostnameCache: java.util.concurrent.ExecutorService executorService
io.sentry.protocol.Device: java.lang.String modelId
kotlin.text.DelimitedRangesSequence: int startIndex
androidx.core.app.Person: java.lang.String mUri
io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler: android.view.WindowManager delegate
com.google.gson.internal.ConstructorConstructor$5: com.google.gson.internal.ConstructorConstructor this$0
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter BIG_DECIMAL
io.sentry.SentryOptions: int readTimeoutMillis
io.sentry.cache.CacheStrategy: io.sentry.SentryOptions options
kotlin.ranges.IntProgressionIterator: int step
io.sentry.flutter.R$styleable: int SplitPairFilter_primaryActivityName
com.tekartik.sqflite.SqflitePlugin$BgResult$2: java.lang.String val$errorCode
io.sentry.UncaughtExceptionHandlerIntegration$UncaughtExceptionHint: java.util.concurrent.CountDownLatch latch
com.google.android.gms.common.GooglePlayServicesNotAvailableException: int errorCode
com.google.android.gms.maps.model.PolylineOptions: float zzb
androidx.lifecycle.FullLifecycleObserverAdapter: androidx.lifecycle.LifecycleEventObserver mLifecycleEventObserver
com.google.gson.stream.JsonToken: com.google.gson.stream.JsonToken BEGIN_OBJECT
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1: boolean val$jsonAdapterPresent
io.flutter.view.AccessibilityBridge$StringAttribute: int end
androidx.core.R$id: int accessibility_custom_action_10
androidx.fragment.app.FragmentTransition$4: boolean val$inIsPop
androidx.window.embedding.ExtensionEmbeddingBackend: java.lang.String TAG
com.google.gson.FieldNamingPolicy: com.google.gson.FieldNamingPolicy[] $VALUES
kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: kotlinx.coroutines.scheduling.CoroutineScheduler coroutineScheduler
io.flutter.embedding.engine.dart.DartExecutor: java.lang.String isolateServiceId
io.sentry.flutter.R$attr: int primaryActivityName
com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper: java.lang.reflect.Type type
com.google.common.collect.MapMakerInternalMap$AbstractStrongKeyEntry: java.lang.Object key
com.google.android.gms.common.api.internal.zabt: com.google.android.gms.common.api.internal.zabu zab
io.flutter.embedding.engine.systemchannels.SettingsChannel: io.flutter.plugin.common.BasicMessageChannel channel
io.flutter.plugins.googlemaps.GoogleMapBuilder: com.google.android.gms.maps.GoogleMapOptions options
io.flutter.embedding.android.FlutterTextureView: boolean isSurfaceAvailableForRendering
com.google.android.gms.common.internal.BaseGmsClient: boolean zzC
com.google.gson.stream.JsonReader: java.io.Reader in
io.flutter.embedding.android.FlutterImageView: android.media.ImageReader imageReader
androidx.fragment.app.BackStackState: int[] mCurrentMaxLifecycleStates
com.tekartik.sqflite.operation.BatchOperation$BatchOperationResult: java.lang.String errorMessage
androidx.activity.OnBackPressedDispatcher$LifecycleOnBackPressedCancellable: androidx.activity.OnBackPressedDispatcher this$0
io.flutter.embedding.engine.systemchannels.RestorationChannel: boolean engineHasProvidedData
kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.Continuation delegate
io.flutter.embedding.engine.loader.FlutterLoader: java.util.concurrent.Future initResultFuture
io.sentry.protocol.Device: java.lang.Long externalStorageSize
io.sentry.DiagnosticLogger: io.sentry.SentryOptions options
com.google.android.gms.common.zzj: byte[] zza
kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart ATOMIC
kotlinx.coroutines.CoroutineId: long id
io.sentry.config.EnvironmentVariablePropertiesProvider: java.lang.String PREFIX
io.sentry.UserFeedback: io.sentry.protocol.SentryId eventId
io.sentry.SentryBaseEvent: io.sentry.protocol.SdkVersion sdk
io.flutter.plugins.pathprovider.PathProviderPlugin$PathProviderPlatformThread$1: io.flutter.plugins.pathprovider.PathProviderPlugin$PathProviderPlatformThread this$1
androidx.core.view.ViewCompat$AccessibilityViewProperty: int mTagKey
kotlin.jvm.internal.CallableReference$NoReceiver: kotlin.jvm.internal.CallableReference$NoReceiver INSTANCE
io.flutter.plugin.editing.TextEditingDelta: int newComposingEnd
com.google.android.gms.maps.model.VisibleRegion: com.google.android.gms.maps.model.LatLng nearLeft
com.google.gson.GsonBuilder: java.lang.String datePattern
androidx.fragment.app.Fragment$AnimationInfo: android.view.View mAnimatingAway
com.google.gson.internal.LinkedHashTreeMap: int modCount
io.sentry.HubAdapter: io.sentry.HubAdapter INSTANCE
androidx.window.core.Bounds: int bottom
io.flutter.embedding.engine.dart.DartExecutor$DartEntrypoint: java.lang.String dartEntrypointLibrary
com.google.common.hash.BloomFilterStrategies: com.google.common.hash.BloomFilterStrategies MURMUR128_MITZ_32
androidx.collection.MapCollections$ArrayIterator: int mSize
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType NONE
io.flutter.plugins.urllauncher.UrlLauncher$LaunchStatus: io.flutter.plugins.urllauncher.UrlLauncher$LaunchStatus OK
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType[] $VALUES
androidx.window.layout.FoldingFeature$OcclusionType: androidx.window.layout.FoldingFeature$OcclusionType NONE
com.google.android.gms.common.internal.BaseGmsClient: int zzf
io.sentry.adapters.SpanStatusSerializerAdapter: io.sentry.SentryOptions options
androidx.window.core.Version: androidx.window.core.Version VERSION_1_0
com.google.gson.internal.ConstructorConstructor$9: com.google.gson.internal.ConstructorConstructor this$0
com.google.android.gms.common.api.internal.zacv: com.google.android.gms.common.api.internal.TaskApiCall$Builder zaa
io.flutter.plugins.googlemaps.CircleController: java.lang.String googleMapsCircleId
com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper: com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper INSTANCE
com.google.gson.internal.ConstructorConstructor$12: com.google.gson.internal.ConstructorConstructor this$0
androidx.window.R$id: int rtl
androidx.fragment.app.FragmentState: boolean mHidden
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.AccessibilityEventsDelegate accessibilityEventsDelegate
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1: com.google.gson.TypeAdapter val$typeAdapter
io.flutter.plugin.editing.ListenableEditingState: java.lang.String mTextWhenBeginBatchEdit
com.google.android.gms.signin.internal.zaa: android.os.Parcelable$Creator CREATOR
io.sentry.protocol.SentryException: java.lang.String type
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics: int width
com.google.android.gms.maps.model.PolylineOptions: int zzc
io.sentry.protocol.Request: java.util.Map headers
io.flutter.plugins.googlemaps.GoogleMapController: io.flutter.plugins.googlemaps.PolygonsController polygonsController
androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback: androidx.window.layout.SidecarAdapter sidecarAdapter
com.google.common.base.Throwables: java.lang.reflect.Method getStackTraceDepthMethod
io.flutter.plugin.platform.AccessibilityEventsDelegate: io.flutter.view.AccessibilityBridge accessibilityBridge
io.sentry.protocol.User: java.lang.String ipAddress
com.google.common.hash.LittleEndianByteArray$UnsafeByteArray: com.google.common.hash.LittleEndianByteArray$UnsafeByteArray[] $VALUES
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter ATOMIC_BOOLEAN
androidx.activity.OnBackPressedDispatcher$LifecycleOnBackPressedCancellable: androidx.activity.Cancellable mCurrentCancellable
androidx.collection.ArraySet: int[] INT
com.google.android.gms.common.api.GoogleApi: java.lang.String zac
io.flutter.view.AccessibilityBridge$SemanticsNode: float bottom
androidx.fragment.app.FragmentTransitionCompat21$3: java.lang.Object val$exitTransition
androidx.core.view.ViewCompat$AccessibilityViewProperty: int mContentChangeType
androidx.fragment.app.FragmentTransition: androidx.fragment.app.FragmentTransitionImpl PLATFORM_IMPL
io.flutter.plugins.googlemaps.PolylinesController: float density
io.sentry.android.core.SystemEventsBreadcrumbsIntegration: java.util.List actions
io.sentry.protocol.SdkInfo: java.lang.String sdkName
com.google.common.collect.MapMakerInternalMap$Segment: com.google.common.collect.MapMakerInternalMap map
androidx.collection.SimpleArrayMap: java.lang.Object[] mBaseCache
kotlinx.coroutines.android.HandlerContext: java.lang.String name
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter UUID
io.sentry.protocol.SentryException: java.lang.String value
com.google.common.collect.MapMakerInternalMap$WriteThroughEntry: java.lang.Object key
com.google.android.gms.maps.model.TileOverlayOptions: android.os.Parcelable$Creator CREATOR
com.google.android.gms.signin.internal.SignInClientImpl: java.lang.Integer zae
com.tekartik.sqflite.Database: boolean singleInstance
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState UNKNOWN
io.sentry.android.core.LifecycleWatcher$1: io.sentry.android.core.LifecycleWatcher this$0
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType DATETIME
io.sentry.SentryOptions: long shutdownTimeout
io.flutter.plugin.platform.PlatformViewsController: boolean synchronizeToNativeViewHierarchy
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: android.graphics.Matrix finalMatrix
androidx.core.R$id: int accessibility_custom_action_6
com.google.android.gms.common.api.GoogleApi: android.os.Looper zag
io.flutter.view.AccessibilityBridge: java.lang.Integer embeddedAccessibilityFocusedNodeId
androidx.window.R$attr: int secondaryActivityName
io.flutter.plugins.connectivity.ConnectivityMethodChannelHandler: io.flutter.plugins.connectivity.Connectivity connectivity
androidx.fragment.app.Fragment$1: androidx.fragment.app.Fragment this$0
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: java.util.concurrent.locks.ReentrantLock multicastConsumerLock
kotlinx.coroutines.flow.AbstractFlow$collect$1: kotlinx.coroutines.flow.AbstractFlow this$0
io.flutter.embedding.android.MotionEventTracker$MotionEventId: java.util.concurrent.atomic.AtomicLong ID_COUNTER
com.google.android.gms.common.api.internal.GoogleApiManager: long zaf
androidx.versionedparcelable.VersionedParcel: androidx.collection.ArrayMap mReadCache
com.google.android.gms.common.api.internal.zacd: long zae
com.google.android.gms.maps.model.MarkerOptions: float zzl
com.google.android.gms.common.ErrorDialogFragment: android.content.DialogInterface$OnCancelListener zab
com.google.android.gms.common.internal.zav: com.google.android.gms.common.ConnectionResult zac
androidx.window.layout.WindowInfoTracker$Companion: boolean DEBUG
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory STRING_FACTORY
kotlinx.coroutines.ExecutorCoroutineDispatcherImpl: java.util.concurrent.Executor executor
androidx.activity.ComponentActivity: androidx.lifecycle.LifecycleRegistry mLifecycleRegistry
com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry: com.google.common.collect.MapMakerInternalMap$WeakValueReference valueReference
com.google.gson.internal.ConstructorConstructor$4: com.google.gson.internal.ConstructorConstructor this$0
com.google.gson.internal.bind.JsonTreeReader: int[] pathIndices
kotlinx.coroutines.CoroutineExceptionHandler: kotlinx.coroutines.CoroutineExceptionHandler$Key Key
kotlinx.coroutines.android.HandlerContext: kotlinx.coroutines.android.HandlerContext immediate
androidx.window.R$styleable: int ActivityFilter_activityAction
com.google.android.gms.common.api.internal.zam: int zaa
com.tekartik.sqflite.SqflitePlugin: boolean QUERY_AS_MAP_LIST
com.google.android.gms.maps.model.VisibleRegion: com.google.android.gms.maps.model.LatLng farLeft
com.google.android.gms.common.api.internal.zacd: int zab
androidx.lifecycle.LiveData: int mActiveCount
io.sentry.exception.InvalidSentryTraceHeaderException: long serialVersionUID
androidx.fragment.app.BackStackRecord: boolean mCommitted
io.sentry.flutter.R$id: int accessibility_custom_action_10
androidx.collection.MapCollections$ArrayIterator: int mIndex
com.google.common.collect.MapMakerInternalMap$HashIterator: int nextTableIndex
androidx.activity.OnBackPressedDispatcher$LifecycleOnBackPressedCancellable: androidx.lifecycle.Lifecycle mLifecycle
io.flutter.embedding.android.FlutterSurfaceView: boolean renderTransparently
com.google.gson.internal.LinkedTreeMap$LinkedTreeMapIterator: com.google.gson.internal.LinkedTreeMap this$0
kotlinx.coroutines.ChildHandleNode: kotlinx.coroutines.ChildJob childJob
io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness: io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness[] $VALUES
com.google.android.gms.common.internal.zav: int zaa
androidx.fragment.app.FragmentTransitionImpl$1: androidx.fragment.app.FragmentTransitionImpl this$0
androidx.window.embedding.SplitController: boolean sDebug
androidx.fragment.app.FragmentTransition$4: java.lang.Object val$enterTransition
io.flutter.plugin.editing.ListenableEditingState$1: io.flutter.plugin.editing.ListenableEditingState this$0
androidx.collection.ArraySet: int sTwiceBaseCacheSize
androidx.core.app.NotificationCompat$Action: androidx.core.app.RemoteInput[] mDataOnlyRemoteInputs
com.google.android.gms.common.internal.GmsClientSupervisor: boolean zze
io.flutter.view.AccessibilityBridge: java.util.Map flutterSemanticsTree
kotlin.jvm.internal.CallableReference: java.lang.Class owner
io.flutter.plugins.urllauncher.WebViewActivity: android.content.IntentFilter closeIntentFilter
com.google.android.gms.common.api.internal.zacg: com.google.android.gms.common.api.internal.NonGmsServiceBrokerClient zaa
io.sentry.flutter.R$styleable: int GradientColor_android_startX
io.sentry.SentryEnvelopeItemHeader: java.lang.String contentType
androidx.window.layout.SidecarCompat$DistinctElementCallback: java.util.WeakHashMap activityWindowLayoutInfo
androidx.fragment.app.Fragment: androidx.fragment.app.Fragment mTarget
com.google.gson.FieldNamingPolicy: com.google.gson.FieldNamingPolicy UPPER_CAMEL_CASE
kotlinx.coroutines.InvokeOnCompletion: kotlin.jvm.functions.Function1 handler
io.flutter.plugin.editing.TextInputPlugin$2: double[] val$minMax
androidx.collection.MapCollections$ArrayIterator: androidx.collection.MapCollections this$0
com.google.android.gms.common.internal.GetServiceRequest: com.google.android.gms.common.Feature[] zzi
kotlinx.coroutines.channels.AbstractSendChannel$SendBuffered: java.lang.Object element
com.google.android.gms.tasks.zzw: boolean zzd
io.sentry.flutter.R$id: int ltr
com.google.android.gms.maps.zzah: android.view.ViewGroup zzb
io.flutter.plugin.platform.PlatformViewRegistryImpl: java.util.Map viewFactories
io.sentry.SentryEvent: java.util.Map unknown
com.google.android.gms.maps.model.CameraPosition: android.os.Parcelable$Creator CREATOR
com.google.android.gms.common.internal.zzb: com.google.android.gms.common.internal.BaseGmsClient zza
kotlinx.coroutines.internal.ArrayQueue: java.lang.Object[] elements
io.flutter.plugin.common.MethodChannel: io.flutter.plugin.common.BinaryMessenger messenger
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter LOCALE
com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper: java.util.concurrent.atomic.AtomicReferenceFieldUpdater waiterNextUpdater
androidx.lifecycle.LiveData: java.lang.Runnable mPostValueRunnable
androidx.core.view.ViewCompat$AccessibilityViewProperty: java.lang.Class mType
com.google.android.gms.base.R$drawable: int common_full_open_on_phone
com.google.common.collect.RegularImmutableList: java.lang.Object[] array
io.flutter.embedding.android.FlutterSplashView: android.os.Bundle splashScreenState
io.sentry.protocol.Request: java.lang.Object data
kotlinx.coroutines.CancelledContinuation: int _resumed
io.sentry.cache.CacheStrategy: int maxSize
io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType: io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType ALERT
com.google.common.collect.MapMakerInternalMap$HashIterator: com.google.common.collect.MapMakerInternalMap$Segment currentSegment
io.sentry.flutter.R$styleable: int FontFamilyFont_android_fontWeight
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.String hint
com.tekartik.sqflite.dev.Debug: boolean EXTRA_LOGV
io.flutter.view.VsyncWaiter$1$1: io.flutter.view.VsyncWaiter$1 this$1
kotlin.coroutines.ContinuationInterceptor$Key: kotlin.coroutines.ContinuationInterceptor$Key $$INSTANCE
io.sentry.SentryEvent: java.lang.String transaction
io.flutter.plugin.platform.PlatformPlugin: android.app.Activity activity
androidx.fragment.app.FragmentManagerImpl$5: android.view.ViewGroup val$container
com.google.android.gms.common.api.internal.LifecycleActivity: java.lang.Object zza
io.sentry.android.core.EnvelopeFileObserver$CachedEnvelopeHint: io.sentry.ILogger logger
io.sentry.flutter.R$drawable: int notification_bg_normal
com.google.gson.internal.bind.TimeTypeAdapter: java.text.DateFormat format
io.sentry.android.ndk.BuildConfig: java.lang.String VERSION_NAME
com.google.gson.FieldNamingPolicy: com.google.gson.FieldNamingPolicy LOWER_CASE_WITH_UNDERSCORES
io.sentry.android.core.ANRWatchDog: boolean reportInDebug
com.google.android.gms.maps.model.PolylineOptions: com.google.android.gms.maps.model.Cap zzh
com.google.android.gms.common.internal.GetServiceRequest: int zza
io.flutter.embedding.android.FlutterSurfaceView: io.flutter.embedding.engine.renderer.FlutterUiDisplayListener flutterUiDisplayListener
kotlinx.coroutines.CoroutineStart$WhenMappings: int[] $EnumSwitchMapping$0
kotlinx.coroutines.internal.ThreadContextKt$countAll$1: kotlinx.coroutines.internal.ThreadContextKt$countAll$1 INSTANCE
io.sentry.flutter.R$id: int accessibility_custom_action_0
com.google.gson.internal.ConstructorConstructor$2: com.google.gson.internal.ConstructorConstructor this$0
com.google.android.gms.common.GooglePlayServicesUtilLight: java.util.concurrent.atomic.AtomicBoolean zzc
androidx.core.R$id: int accessibility_custom_action_9
com.google.android.gms.common.internal.zzc: java.lang.Object zza
androidx.window.core.Version: kotlin.Lazy bigInteger$delegate
io.flutter.embedding.engine.systemchannels.RestorationChannel: boolean frameworkHasRequestedData
com.google.gson.GsonBuilder: java.util.Map instanceCreators
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType: io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType SELECTION_CLICK
io.sentry.cache.CacheStrategy: java.io.File directory
io.flutter.plugins.connectivity.ConnectivityMethodChannelHandler: boolean $assertionsDisabled
com.google.android.gms.maps.model.Polygon: com.google.android.gms.internal.maps.zzaa zza
com.google.gson.internal.bind.TypeAdapters$35$1: java.lang.Class val$requestedType
androidx.versionedparcelable.VersionedParcel: androidx.collection.ArrayMap mParcelizerCache
androidx.lifecycle.LifecycleRegistry: androidx.arch.core.internal.FastSafeIterableMap mObserverMap
io.sentry.SentryBaseEvent: io.sentry.protocol.Request request
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_RESUME
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics: int systemGestureInsetLeft
androidx.loader.app.LoaderManagerImpl$LoaderInfo: androidx.loader.app.LoaderManagerImpl$LoaderObserver mObserver
io.sentry.flutter.R$id: int accessibility_custom_action_20
com.tekartik.sqflite.operation.BatchOperation: java.util.Map map
com.google.android.gms.common.api.internal.zza: com.google.android.gms.common.api.internal.LifecycleCallback zza
io.sentry.protocol.SentryStackTrace: java.util.Map registers
androidx.fragment.app.FragmentTransitionImpl$3: java.util.Map val$nameOverrides
androidx.window.R$styleable: int SplitPairRule_splitLayoutDirection
io.sentry.protocol.SentryThread: java.lang.Boolean current
io.sentry.IpAddressUtils: java.lang.String DEFAULT_IP_ADDRESS
androidx.fragment.app.BackStackState: boolean mReorderingAllowed
io.sentry.SentryTracer: io.sentry.protocol.Contexts contexts
com.google.android.gms.common.SupportErrorDialogFragment: android.app.Dialog zaa
io.sentry.SentryOptions: java.lang.String release
androidx.core.R$id: int accessibility_custom_action_25
com.google.android.gms.maps.model.LatLngBounds: com.google.android.gms.maps.model.LatLng northeast
com.google.android.gms.maps.zzag: com.google.android.gms.maps.internal.IMapViewDelegate zzb
com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper: com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper INSTANCE
com.google.common.base.Joiner: java.lang.String separator
com.google.gson.internal.bind.TypeAdapters$27: java.lang.String MONTH
com.google.android.gms.common.api.internal.GoogleApiManager: com.google.android.gms.common.internal.zal zam
com.google.android.gms.maps.model.CameraPosition$Builder: com.google.android.gms.maps.model.LatLng zza
io.sentry.protocol.Request: java.util.Map env
com.google.gson.internal.LinkedHashTreeMap$AvlBuilder: int leavesToSkip
io.flutter.embedding.engine.FlutterJNI: io.flutter.plugin.platform.PlatformViewsController platformViewsController
io.flutter.view.AccessibilityViewEmbedder: java.util.Map originToFlutterId
io.sentry.Session: java.lang.Boolean init
androidx.core.os.LocaleListCompat: androidx.core.os.LocaleListCompat sEmptyLocaleList
io.sentry.flutter.R$layout: int custom_dialog
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization NONE
com.google.common.util.concurrent.CycleDetectingLockFactory$Policies: com.google.common.util.concurrent.CycleDetectingLockFactory$Policies DISABLED
io.sentry.android.core.ManifestMetadataReader: java.lang.String DEBUG
io.flutter.plugins.urllauncher.UrlLauncher$LaunchStatus: io.flutter.plugins.urllauncher.UrlLauncher$LaunchStatus[] $VALUES
io.flutter.plugin.editing.TextInputPlugin: android.view.autofill.AutofillManager afm
androidx.core.os.LocaleListCompatWrapper: java.util.Locale LOCALE_EN_XA
io.flutter.view.AccessibilityBridge$StringAttributeType: io.flutter.view.AccessibilityBridge$StringAttributeType LOCALE
io.flutter.embedding.engine.dart.DartMessenger: java.util.WeakHashMap createdTaskQueues
com.google.android.gms.common.internal.zzu: boolean zzd
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration$Autofill: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState editState
io.sentry.protocol.Device: java.lang.String family
io.sentry.SentryOptions: javax.net.ssl.HostnameVerifier hostnameVerifier
com.google.android.gms.common.internal.zzo: com.google.android.gms.common.internal.zzn zzf
io.flutter.plugin.editing.TextInputPlugin: io.flutter.plugin.platform.PlatformViewsController platformViewsController
kotlinx.coroutines.CancellableContinuationImpl: int _decision
com.google.android.gms.common.api.internal.zacf: com.google.android.gms.common.api.internal.NonGmsServiceBrokerClient zaa
io.sentry.android.core.util.RootChecker: java.nio.charset.Charset UTF_8
io.flutter.plugins.googlemaps.PolygonController: com.google.android.gms.maps.model.Polygon polygon
io.sentry.flutter.R$styleable: int Capability_queryPatterns
io.sentry.protocol.SdkInfo: java.lang.Integer versionMinor
io.sentry.SentryOptions$Proxy: java.lang.String pass
io.sentry.Session$State: io.sentry.Session$State[] $VALUES
kotlinx.coroutines.scheduling.WorkQueue: java.util.concurrent.atomic.AtomicIntegerFieldUpdater producerIndex$FU
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState POSTURE_HALF_OPENED
androidx.core.app.NotificationCompat$Builder: java.lang.CharSequence mSubText
io.flutter.plugin.platform.VirtualDisplayController$1$1: io.flutter.plugin.platform.VirtualDisplayController$1 this$1
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_PAUSE
io.sentry.UncaughtExceptionHandlerIntegration: io.sentry.UncaughtExceptionHandler threadAdapter
com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper: com.google.gson.TypeAdapter delegate
com.tekartik.sqflite.SqflitePlugin: java.lang.Object databaseMapLocker
io.flutter.embedding.android.FlutterView$ZeroSides: io.flutter.embedding.android.FlutterView$ZeroSides LEFT
com.google.android.gms.common.internal.GmsClient: com.google.android.gms.common.internal.ClientSettings zab
com.tekartik.sqflite.SqflitePlugin$6: io.flutter.plugin.common.MethodCall val$call
io.flutter.embedding.android.KeyboardManager: io.flutter.embedding.android.KeyboardManager$Responder[] responders
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration: java.lang.String actionLabel
io.flutter.plugin.editing.ListenableEditingState: int mComposingEndWhenBeginBatchEdit
com.google.gson.internal.LinkedTreeMap: boolean $assertionsDisabled
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: boolean isFirstFrameRendered
io.flutter.plugins.googlemaps.CirclesController: float density
com.google.common.util.concurrent.ThreadFactoryBuilder$1: java.lang.Boolean val$daemon
io.flutter.view.AccessibilityBridge$SemanticsNode: float[] transform
io.sentry.protocol.SentrySpan: io.sentry.protocol.SentryId traceId
io.flutter.embedding.engine.systemchannels.RestorationChannel: boolean waitForRestorationData
io.sentry.flutter.R$styleable: int SplitPairRule_splitRatio
kotlinx.coroutines.scheduling.LimitingDispatcher: int taskMode
com.google.android.gms.common.internal.RootTelemetryConfiguration: boolean zzc
kotlinx.coroutines.scheduling.CoroutineScheduler: java.lang.String schedulerName
kotlinx.coroutines.InvokeOnCancelling: int _invoked
com.google.gson.Gson: java.util.List builderHierarchyFactories
com.google.gson.stream.JsonToken: com.google.gson.stream.JsonToken END_OBJECT
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType CUTOUT
androidx.core.graphics.drawable.IconCompat: android.graphics.PorterDuff$Mode mTintMode
io.flutter.plugin.platform.SingleViewPresentation$PresentationState: io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup fakeWindowViewGroup
kotlin.jvm.internal.FunctionReference: int flags
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.SingleViewPresentation$PresentationState state
io.sentry.android.core.PhoneStateBreadcrumbsIntegration: io.sentry.android.core.SentryAndroidOptions options
kotlinx.coroutines.scheduling.TasksKt: long IDLE_WORKER_KEEP_ALIVE_NS
com.google.android.gms.common.api.internal.zap: java.util.concurrent.atomic.AtomicReference zab
com.google.android.gms.auth.api.signin.GoogleSignInAccount: java.lang.String zal
androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator: android.view.animation.Animation animation
kotlin.text.Charsets: java.nio.charset.Charset US_ASCII
io.sentry.SentryOptions: io.sentry.SentryOptions$TracesSamplerCallback tracesSampler
androidx.core.R$id: int accessibility_custom_action_13
io.sentry.SentryOptions: boolean attachStacktrace
io.sentry.Hub: io.sentry.TracesSampler tracesSampler
androidx.fragment.app.Fragment: int mTargetRequestCode
io.flutter.embedding.engine.loader.FlutterLoader$1: io.flutter.embedding.engine.loader.FlutterLoader this$0
com.google.android.gms.common.api.internal.zzb: java.util.Map zzb
io.sentry.SpanStatus: io.sentry.SpanStatus ALREADY_EXISTS
com.google.gson.JsonStreamParser: java.lang.Object lock
com.tekartik.sqflite.SqflitePlugin$6: com.tekartik.sqflite.Database val$database
io.flutter.plugins.googlemaps.CircleBuilder: float density
androidx.core.os.LocaleListCompatWrapper: java.util.Locale[] sEmptyList
kotlinx.coroutines.flow.internal.SafeCollector$collectContextSize$1: kotlinx.coroutines.flow.internal.SafeCollector$collectContextSize$1 INSTANCE
androidx.fragment.app.FragmentTransitionCompat21$4: android.graphics.Rect val$epicenter
androidx.window.layout.SidecarAdapter: androidx.window.layout.SidecarAdapter$Companion Companion
com.tekartik.sqflite.Database: android.database.sqlite.SQLiteDatabase sqliteDatabase
com.google.common.collect.MapMakerInternalMap$KeyIterator: com.google.common.collect.MapMakerInternalMap this$0
com.google.gson.Gson: com.google.gson.internal.ConstructorConstructor constructorConstructor
com.tekartik.sqflite.SqflitePlugin$4: com.tekartik.sqflite.Database val$database
com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl: long serialVersionUID
io.sentry.flutter.R$dimen: int compat_button_padding_horizontal_material
io.sentry.SentryStackTraceFactory: java.util.List inAppIncludes
com.google.gson.JsonPrimitive: java.lang.Object value
io.flutter.plugins.pathprovider.PathProviderPlugin: android.content.Context context
io.flutter.embedding.engine.dart.DartMessenger$Reply: int replyId
com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$Listener listeners
com.google.android.gms.dynamite.DynamiteModule: java.lang.ThreadLocal zzf
com.google.android.gms.common.internal.MethodInvocation: java.lang.String zaf
kotlin.coroutines.CombinedContext: kotlin.coroutines.CoroutineContext$Element element
com.google.android.gms.dynamite.DynamiteModule: int zze
androidx.core.R$id: int accessibility_custom_action_7
com.google.android.gms.maps.zzx: com.google.android.gms.maps.GoogleMap$OnCameraIdleListener zza
androidx.window.layout.WindowInfoTrackerImpl: androidx.window.layout.WindowBackend windowBackend
io.sentry.Session$State: io.sentry.Session$State Crashed
io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type: io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type VD_PLATFORM_VIEW
com.google.gson.internal.ConstructorConstructor$11: com.google.gson.internal.ConstructorConstructor this$0
io.sentry.android.ndk.DebugImagesLoader: java.util.List debugImages
com.google.gson.Gson: com.google.gson.LongSerializationPolicy longSerializationPolicy
io.sentry.android.core.DefaultAndroidEventProcessor: java.lang.String KERNEL_VERSION
com.google.gson.LongSerializationPolicy: com.google.gson.LongSerializationPolicy STRING
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean animating
androidx.window.R$styleable: int SplitPairFilter_secondaryActivityAction
io.flutter.plugins.googlemaps.GoogleMapController$1: io.flutter.plugin.common.MethodChannel$Result val$_result
com.tekartik.sqflite.SqflitePlugin$6: com.tekartik.sqflite.SqflitePlugin$BgResult val$bgResult
io.flutter.plugins.googlemaps.TileProviderController$Worker: int y
com.google.android.gms.common.api.internal.zal: androidx.collection.ArrayMap zab
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: androidx.window.layout.WindowInfoTracker tracker
androidx.window.layout.WindowInfoTrackerImpl: int BUFFER_CAPACITY
io.sentry.android.core.DefaultAndroidEventProcessor: io.sentry.android.core.IBuildInfoProvider buildInfoProvider
androidx.core.os.LocaleListCompatWrapper: java.lang.String mStringRepresentation
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.SettingsChannel settingsChannel
io.flutter.view.FlutterCallbackInformation: java.lang.String callbackName
androidx.collection.ArraySet: java.lang.Object[] sTwiceBaseCache
io.flutter.plugins.googlemaps.PolygonsController: java.util.Map polygonIdToController
io.sentry.util.Pair: java.lang.Object first
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType: io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType LIGHT_IMPACT
com.google.gson.TypeAdapter$1: com.google.gson.TypeAdapter this$0
dev.fluttercommunity.plus.packageinfo.PackageInfoPlugin: dev.fluttercommunity.plus.packageinfo.PackageInfoPlugin$Companion Companion
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType NAME
kotlinx.coroutines.internal.ThreadContextKt: kotlinx.coroutines.internal.Symbol NO_THREAD_ELEMENTS
com.google.gson.internal.LinkedHashTreeMap$LinkedTreeMapIterator: com.google.gson.internal.LinkedHashTreeMap this$0
io.sentry.android.core.LifecycleWatcher: java.util.concurrent.atomic.AtomicBoolean runningSession
kotlin.jvm.internal.CollectionToArray: java.lang.Object[] EMPTY
io.flutter.view.AccessibilityBridge$3: io.flutter.view.AccessibilityBridge this$0
io.flutter.plugins.googlemaps.GoogleMapController: boolean buildingsEnabled
com.tekartik.sqflite.SqflitePlugin: android.os.HandlerThread handlerThread
com.google.android.gms.maps.model.CameraPosition$Builder: float zzc
io.sentry.DateUtils: java.lang.String ISO_FORMAT_WITH_MILLIS
androidx.window.layout.WindowMetricsCalculatorCompat: androidx.window.layout.WindowMetricsCalculatorCompat INSTANCE
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewResizeRequest: double newLogicalWidth
com.tekartik.sqflite.SqflitePlugin$6: boolean val$singleInstance
io.sentry.SpanStatus: io.sentry.SpanStatus FAILED_PRECONDITION
com.google.android.gms.maps.model.CircleOptions: android.os.Parcelable$Creator CREATOR
kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol ENQUEUE_FAILED
kotlinx.coroutines.scheduling.Task: kotlinx.coroutines.scheduling.TaskContext taskContext
androidx.window.embedding.EmbeddingCompat: boolean DEBUG
io.sentry.android.core.DefaultAndroidEventProcessor: io.sentry.ILogger logger
io.flutter.embedding.android.RenderMode: io.flutter.embedding.android.RenderMode surface
io.flutter.embedding.android.AndroidTouchProcessor: io.flutter.embedding.engine.renderer.FlutterRenderer renderer
com.google.android.gms.common.internal.RootTelemetryConfiguration: int zze
io.flutter.view.AccessibilityBridge: io.flutter.view.AccessibilityBridge$SemanticsNode inputFocusedSemanticsNode
com.google.android.gms.common.internal.BaseGmsClient: java.lang.String zzA
androidx.fragment.app.Fragment: androidx.fragment.app.FragmentManagerImpl mFragmentManager
kotlinx.coroutines.ChildContinuation: kotlinx.coroutines.CancellableContinuationImpl child
com.google.android.gms.common.api.internal.GoogleApiManager: java.util.concurrent.atomic.AtomicInteger zan
com.google.android.gms.maps.model.MarkerOptions: float zzj
com.google.android.gms.maps.zzaf: com.google.android.gms.maps.OnMapReadyCallback zza
com.google.gson.Gson: java.util.List builderFactories
androidx.window.R$attr: int activityName
androidx.fragment.app.FragmentTransitionCompat21$4: androidx.fragment.app.FragmentTransitionCompat21 this$0
com.google.common.collect.MapMakerInternalMap: com.google.common.collect.MapMakerInternalMap$Segment[] segments
com.google.gson.internal.bind.TypeAdapters$26$1: com.google.gson.internal.bind.TypeAdapters$26 this$0
kotlinx.coroutines.CoroutineExceptionHandlerImplKt: java.util.List handlers
com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter: com.google.gson.internal.ObjectConstructor constructor
io.sentry.SentryOptions: boolean attachThreads
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay BOTTOM_OVERLAYS
io.sentry.MainEventProcessor: io.sentry.SentryOptions options
io.sentry.android.core.SentryAndroidOptions: io.sentry.android.core.IDebugImagesLoader debugImagesLoader
io.sentry.protocol.App: java.util.Date appStartTime
io.sentry.SentryBaseEvent: java.lang.String platform
io.sentry.HostnameCache: java.lang.String hostname
kotlin.coroutines.CoroutineContext$plus$1: kotlin.coroutines.CoroutineContext$plus$1 INSTANCE
androidx.lifecycle.LiveData: java.lang.Object NOT_SET
kotlinx.coroutines.CompletedContinuation: java.lang.Object idempotentResume
kotlinx.coroutines.internal.ConcurrentKt: java.lang.reflect.Method REMOVE_FUTURE_ON_CANCEL
androidx.activity.OnBackPressedDispatcher: java.util.ArrayDeque mOnBackPressedCallbacks
androidx.fragment.app.FragmentState: int mContainerId
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory: com.google.gson.internal.reflect.ReflectionAccessor accessor
io.flutter.plugin.platform.SingleViewPresentation: android.content.Context outerContext
androidx.fragment.app.Fragment: androidx.fragment.app.Fragment$AnimationInfo mAnimationInfo
androidx.window.embedding.SplitController: androidx.window.embedding.EmbeddingBackend embeddingBackend
androidx.window.embedding.SplitRule: float splitRatio
io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler: io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup fakeWindowRootView
com.google.android.gms.common.internal.zze: com.google.android.gms.common.internal.BaseGmsClient zza
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: java.util.List mutators
com.google.android.gms.maps.internal.zzca: android.content.Context zzb
kotlin.sequences.TransformingSequence: kotlin.sequences.Sequence sequence
com.google.android.gms.common.api.internal.zza: com.google.android.gms.common.api.internal.zzb zzc
com.google.android.gms.maps.model.Marker: com.google.android.gms.internal.maps.zzx zza
com.google.gson.Gson: java.util.Map instanceCreators
com.google.android.gms.signin.internal.zak: android.os.Parcelable$Creator CREATOR
kotlinx.coroutines.internal.LockFreeTaskQueueCore: kotlinx.coroutines.internal.Symbol REMOVE_FROZEN
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding: java.util.Set onSaveInstanceStateListeners
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.PlatformChannel platformChannel
io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler$1: io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler this$1
io.flutter.view.AccessibilityBridge$Action: int value
androidx.core.R$id: int accessibility_custom_action_21
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory NUMBER_FACTORY
androidx.fragment.app.FragmentTransitionImpl$2: androidx.fragment.app.FragmentTransitionImpl this$0
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: android.app.Activity $activity
io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType: java.lang.String encodedName
com.google.android.gms.common.ConnectionResult: com.google.android.gms.common.ConnectionResult RESULT_SUCCESS
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: androidx.window.layout.WindowLayoutInfo lastKnownValue
io.flutter.plugin.common.JSONMethodCodec: io.flutter.plugin.common.JSONMethodCodec INSTANCE
io.flutter.embedding.engine.systemchannels.LocalizationChannel$1: io.flutter.embedding.engine.systemchannels.LocalizationChannel this$0
com.google.android.gms.common.internal.TelemetryLoggingOptions$Builder: java.lang.String zaa
io.flutter.embedding.engine.renderer.FlutterRenderer$1: io.flutter.embedding.engine.renderer.FlutterRenderer this$0
androidx.window.embedding.EmbeddingCompat: androidx.window.embedding.EmbeddingAdapter adapter
androidx.core.app.NotificationCompat$Builder: android.graphics.Bitmap mLargeIcon
io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription: int color
io.flutter.plugins.googlemaps.CircleController: boolean consumeTapEvents
io.sentry.protocol.Gpu: java.lang.Integer memorySize
io.sentry.flutter.R$id: int tag_unhandled_key_event_manager
com.google.gson.internal.Excluder$1: com.google.gson.TypeAdapter delegate
com.google.common.base.Predicates$ObjectPredicate: com.google.common.base.Predicates$ObjectPredicate[] $VALUES
kotlinx.coroutines.CompletedContinuation: kotlinx.coroutines.CancelHandler cancelHandler
io.sentry.protocol.OperatingSystem: java.lang.Boolean rooted
androidx.window.core.Version$bigInteger$2: androidx.window.core.Version this$0
androidx.collection.MapCollections$MapIterator: int mEnd
io.sentry.android.core.BuildConfig: java.lang.String VERSION_NAME
io.sentry.protocol.DebugImage: java.lang.String codeId
io.sentry.SentryValues: java.util.List values
io.sentry.android.core.ManifestMetadataReader: java.lang.String AUTO_SESSION_TRACKING_ENABLE
androidx.core.R$id: int accessibility_custom_action_4
io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding: io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterAssets flutterAssets
androidx.fragment.app.FragmentManagerImpl: boolean DEBUG
androidx.window.embedding.SplitPairRule: boolean finishPrimaryWithSecondary
io.flutter.plugins.googlemaps.GoogleMapBuilder: boolean indoorEnabled
androidx.fragment.app.FragmentManagerImpl$4: android.view.View val$viewToAnimate
io.flutter.view.AccessibilityViewEmbedder$ViewAndId: int id
io.sentry.android.core.EnvelopeFileObserverIntegration: io.sentry.ILogger logger
com.google.android.gms.base.R$string: int common_google_play_services_updating_text
kotlinx.coroutines.DebugKt: boolean DEBUG
com.tekartik.sqflite.SqflitePlugin$BgResult: com.tekartik.sqflite.SqflitePlugin this$0
kotlinx.coroutines.channels.AbstractChannel$RemoveReceiveOnCancel: kotlinx.coroutines.channels.AbstractChannel this$0
androidx.window.embedding.MatcherUtils: boolean sDebugMatchers
androidx.fragment.app.FragmentTransaction: int mEnterAnim
io.flutter.Log: int INFO
com.google.android.gms.maps.zzy: com.google.android.gms.maps.GoogleMap$OnMapClickListener zza
androidx.collection.ArraySet: java.lang.Object[] mArray
io.flutter.embedding.engine.FlutterOverlaySurface: android.view.Surface surface
androidx.window.layout.SidecarCompat$registerConfigurationChangeListener$configChangeObserver$1: androidx.window.layout.SidecarCompat this$0
io.sentry.flutter.R$styleable: int GradientColor_android_endY
io.flutter.Log: int ASSERT
io.flutter.embedding.engine.renderer.FlutterRenderer: io.flutter.embedding.engine.FlutterJNI flutterJNI
androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: java.util.List lastValue
com.google.android.gms.common.Feature: int zzb
io.sentry.SpanStatus: io.sentry.SpanStatus ABORTED
io.flutter.plugins.urllauncher.UrlLauncher: android.content.Context applicationContext
io.flutter.embedding.engine.loader.ApplicationInfoLoader: java.lang.String PUBLIC_AOT_SHARED_LIBRARY_NAME
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory SHORT_FACTORY
kotlinx.coroutines.CompletedContinuation: kotlin.jvm.functions.Function1 onCancellation
com.google.android.gms.common.api.Status: int zzc
io.sentry.flutter.R$id: int notification_background
androidx.fragment.app.Fragment: boolean mInLayout
androidx.fragment.app.FragmentTransition$3: android.graphics.Rect val$epicenter
com.google.gson.stream.JsonReader: int[] stack
kotlinx.coroutines.CompletedExceptionally: java.util.concurrent.atomic.AtomicIntegerFieldUpdater _handled$FU
io.sentry.android.core.DefaultAndroidEventProcessor: android.content.Context context
androidx.window.core.Bounds: int right
io.sentry.android.core.AppLifecycleIntegration: io.sentry.android.core.SentryAndroidOptions options
io.sentry.protocol.SentryStackFrame: java.util.List postContext
com.google.gson.internal.$Gson$Types$WildcardTypeImpl: java.lang.reflect.Type lowerBound
io.sentry.protocol.DebugImage: java.lang.String debugId
com.google.gson.FieldNamingPolicy: com.google.gson.FieldNamingPolicy UPPER_CAMEL_CASE_WITH_SPACES
kotlinx.coroutines.channels.Channel$Factory: int CHANNEL_DEFAULT_CAPACITY
io.flutter.view.AccessibilityBridge: java.util.Map customAccessibilityActions
androidx.fragment.app.FragmentManagerImpl: java.util.HashMap mActive
androidx.fragment.app.Fragment$AnimationInfo: java.lang.Boolean mAllowEnterTransitionOverlap
kotlinx.coroutines.channels.ConflatedChannel: java.lang.Object value
io.flutter.plugins.googlemaps.MarkersController: com.google.android.gms.maps.GoogleMap googleMap
androidx.window.R$attr: int finishSecondaryWithPrimary
com.google.android.gms.maps.model.MarkerOptions: com.google.android.gms.maps.model.LatLng zza
io.sentry.SentryLevel: io.sentry.SentryLevel WARNING
io.sentry.UncaughtExceptionHandlerIntegration: boolean registered
androidx.fragment.app.Fragment: boolean mDeferStart
io.sentry.android.core.AppComponentsBreadcrumbsIntegration: io.sentry.android.core.SentryAndroidOptions options
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action DID_LOSE_ACCESSIBILITY_FOCUS
kotlinx.coroutines.Empty: boolean isActive
com.google.gson.stream.JsonReader: int stackSize
io.sentry.protocol.SentryException: java.lang.Long threadId
io.sentry.android.core.ANRWatchDog: java.lang.Runnable ticker
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory ATOMIC_BOOLEAN_FACTORY
io.sentry.protocol.OperatingSystem: java.lang.String build
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$1: io.flutter.embedding.android.FlutterActivityAndFragmentDelegate this$0
kotlin.coroutines.AbstractCoroutineContextKey: kotlin.coroutines.CoroutineContext$Key topmostKey
androidx.fragment.app.Fragment: androidx.savedstate.SavedStateRegistryController mSavedStateRegistryController
androidx.fragment.app.FragmentManagerImpl$EndViewTransitionAnimation: android.view.ViewGroup mParent
io.sentry.flutter.R$layout: int notification_action_tombstone
io.flutter.embedding.engine.systemchannels.NavigationChannel: io.flutter.plugin.common.MethodChannel channel
io.sentry.SentryItemType: io.sentry.SentryItemType Unknown
io.sentry.UserFeedback: java.lang.String comments
io.sentry.transport.QueuedThreadPoolExecutor: io.sentry.transport.ReusableCountLatch unfinishedTasksCount
com.google.android.gms.common.internal.BaseGmsClient: android.os.IInterface zzs
com.google.android.gms.common.api.internal.zam: com.google.android.gms.common.ConnectionResult zab
com.google.gson.internal.bind.TypeAdapters$26$1: com.google.gson.TypeAdapter val$dateTypeAdapter
com.google.android.gms.common.zzm: java.lang.Object zzf
com.google.android.gms.maps.model.PolygonOptions: float zzc
io.sentry.android.core.PhoneStateBreadcrumbsIntegration$PhoneStateChangeListener: io.sentry.IHub hub
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: android.graphics.SurfaceTexture surfaceTexture
io.sentry.SentryOptions: io.sentry.ITransportFactory transportFactory
com.google.android.gms.maps.GoogleMapOptions: android.os.Parcelable$Creator CREATOR
io.sentry.SentryClient: io.sentry.transport.ITransport transport
com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter: com.google.gson.TypeAdapter elementTypeAdapter
io.sentry.protocol.Device: java.lang.Boolean simulator
com.google.android.gms.common.ConnectionResult: java.lang.String zzd
io.flutter.embedding.engine.dart.DartExecutor: io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler isolateChannelMessageHandler
io.sentry.flutter.R$id: int locale
io.sentry.protocol.Device: java.lang.String language
com.google.android.gms.signin.internal.SignInClientImpl: int zaa
androidx.window.layout.FoldingFeature$Orientation: java.lang.String description
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: java.util.Set userLeaveHintListeners
androidx.fragment.app.FragmentManagerImpl: android.view.animation.Interpolator DECELERATE_QUINT
io.sentry.transport.ProxyAuthenticator: java.lang.String user
io.sentry.flutter.R$attr: int fontVariationSettings
kotlinx.coroutines.CoroutineDispatcher$Key$1: kotlinx.coroutines.CoroutineDispatcher$Key$1 INSTANCE
io.sentry.android.core.ActivityLifecycleIntegration: boolean performanceEnabled
kotlinx.coroutines.JobSupport$ChildCompletion: kotlinx.coroutines.ChildHandleNode child
com.google.android.gms.common.internal.BaseGmsClient: java.lang.String zzk
io.sentry.flutter.R$id: int time
com.google.android.gms.common.api.internal.zag: com.google.android.gms.common.api.internal.TaskApiCall zaa
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$1$1: io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$1 this$1
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry: io.flutter.embedding.engine.renderer.SurfaceTextureWrapper textureWrapper
com.google.gson.internal.LinkedHashTreeMap: int size
com.google.android.gms.maps.model.Cap: int zzb
io.sentry.android.core.TempSensorBreadcrumbsIntegration: io.sentry.IHub hub
io.sentry.transport.AsyncHttpTransport: io.sentry.transport.ITransportGate transportGate
androidx.core.view.ViewCompat$UnhandledKeyEventManager: java.util.WeakHashMap mViewsContainingListeners
io.flutter.view.AccessibilityBridge$SemanticsNode: int scrollIndex
androidx.lifecycle.LiveData$1: androidx.lifecycle.LiveData this$0
androidx.fragment.app.FragmentTransition$FragmentContainerTransition: boolean lastInIsPop
kotlinx.coroutines.internal.ThreadState: kotlinx.coroutines.ThreadContextElement[] elements
com.google.gson.Gson$FutureTypeAdapter: com.google.gson.TypeAdapter delegate
io.sentry.protocol.SentryRuntime: java.lang.String rawDescription
io.sentry.SentryBaseEvent: io.sentry.protocol.User user
io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler$1: io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler this$1
kotlin.coroutines.jvm.internal.ModuleNameRetriever: kotlin.coroutines.jvm.internal.ModuleNameRetriever INSTANCE
androidx.fragment.app.FragmentTransition$2: java.lang.Object val$enterTransition
io.sentry.flutter.R$color: int androidx_core_secondary_text_default_material_light
com.google.android.gms.signin.internal.zaa: int zaa
io.sentry.SpanStatus: int minHttpStatusCode
io.sentry.android.core.AppLifecycleIntegration: io.sentry.android.core.LifecycleWatcher watcher
io.sentry.protocol.SentryStackTrace: java.util.List frames
kotlinx.coroutines.Unconfined: kotlinx.coroutines.Unconfined INSTANCE
io.sentry.flutter.R$id: int async
com.google.android.gms.maps.zzv: com.google.android.gms.maps.GoogleMap$OnCameraMoveListener zza
io.flutter.embedding.engine.loader.FlutterLoader$Settings: java.lang.String logTag
com.google.common.collect.ImmutableCollection$ArrayBasedBuilder: boolean forceCopy
com.google.common.collect.SingletonImmutableSet: java.lang.Object element
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: io.flutter.embedding.engine.FlutterEngine flutterEngine
io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder: java.util.Map message
com.google.common.collect.MapMakerInternalMap$WriteThroughEntry: com.google.common.collect.MapMakerInternalMap this$0
io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry: io.flutter.embedding.engine.FlutterEngine flutterEngine
io.flutter.plugins.googlemaps.GoogleMapController: com.google.android.gms.maps.MapView mapView
kotlin.jvm.internal.ClassReference: kotlin.jvm.internal.ClassReference$Companion Companion
com.google.android.gms.tasks.zzr: boolean zzc
io.flutter.plugin.editing.TextEditingDelta: int newSelectionStart
kotlinx.coroutines.internal.FastServiceLoader: kotlinx.coroutines.internal.FastServiceLoader INSTANCE
androidx.fragment.app.FragmentHostCallback: int mWindowAnimations
io.sentry.flutter.R$id: int tag_unhandled_key_listeners
androidx.fragment.app.Fragment: boolean mAdded
androidx.core.app.NotificationCompat$Style: androidx.core.app.NotificationCompat$Builder mBuilder
androidx.fragment.app.FragmentTransaction$Op: androidx.fragment.app.Fragment mFragment
com.google.android.gms.maps.model.PolygonOptions: boolean zzh
com.google.android.gms.auth.api.signin.GoogleSignInAccount: com.google.android.gms.common.util.Clock zaa
io.sentry.flutter.R$dimen: int notification_main_column_padding_top
io.sentry.SentryOptions: io.sentry.transport.ITransportGate transportGate
com.google.common.collect.MapMakerInternalMap$Strength: com.google.common.collect.MapMakerInternalMap$Strength STRONG
io.sentry.android.core.ManifestMetadataReader: java.lang.String DSN
androidx.core.view.ViewCompat: java.util.WeakHashMap sTransitionNameMap
io.sentry.flutter.R$dimen: int notification_large_icon_width
kotlinx.coroutines.internal.DispatchedContinuation: kotlinx.coroutines.CoroutineDispatcher dispatcher
androidx.core.app.NotificationCompat$Action: int mSemanticAction
com.google.android.gms.internal.base.zaa: android.os.IBinder zaa
io.sentry.OutboxSender: io.sentry.IHub hub
io.sentry.protocol.Mechanism: java.lang.Boolean synthetic
io.sentry.transport.HttpConnection: java.nio.charset.Charset UTF_8
io.sentry.android.core.SystemEventsBreadcrumbsIntegration: io.sentry.android.core.SentryAndroidOptions options
com.google.android.gms.common.api.internal.zaae: androidx.collection.ArraySet zad
io.flutter.plugin.editing.TextInputPlugin: android.view.View mView
io.flutter.view.AccessibilityBridge$SemanticsNode: int previousNodeId
com.tekartik.sqflite.Database: int id
io.sentry.flutter.R$id: int tag_transition_group
io.sentry.android.core.AnrIntegration: io.sentry.android.core.ANRWatchDog anrWatchDog
io.flutter.embedding.android.FlutterSplashView: java.lang.Runnable onTransitionComplete
com.google.gson.internal.bind.JsonTreeReader: java.lang.Object SENTINEL_CLOSED
kotlinx.coroutines.internal.MissingMainCoroutineDispatcher: java.lang.String errorHint
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action CUT
io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType: io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType[] $VALUES
io.sentry.flutter.R$id: int text
androidx.window.layout.SidecarWindowBackend: java.lang.String TAG
com.google.gson.internal.bind.util.ISO8601Utils: java.util.TimeZone TIMEZONE_UTC
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: boolean attached
io.sentry.protocol.DebugMeta: java.util.Map unknown
com.google.gson.internal.LinkedTreeMap$LinkedTreeMapIterator: com.google.gson.internal.LinkedTreeMap$Node next
io.flutter.plugins.urllauncher.UrlLauncher: android.app.Activity activity
io.sentry.flutter.R$attr: int fontProviderFetchStrategy
kotlinx.coroutines.CommonPool: java.util.concurrent.Executor pool
androidx.window.core.Version: androidx.window.core.Version$Companion Companion
androidx.fragment.app.FragmentState: android.os.Bundle mArguments
androidx.collection.SparseArrayCompat: java.lang.Object[] mValues
io.sentry.SentryEnvelopeItemHeader: java.lang.String attachmentType
io.sentry.Scope$SessionPair: io.sentry.Session previous
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag IS_OBSCURED
io.sentry.flutter.R$styleable: int FontFamilyFont_android_ttcIndex
kotlinx.coroutines.DebugKt: java.util.concurrent.atomic.AtomicLong COROUTINE_ID
androidx.lifecycle.LiveData$ObserverWrapper: int mLastVersion
com.google.android.gms.common.api.GoogleApi$Settings: android.os.Looper zab
io.flutter.embedding.android.FlutterImageView: boolean isAttachedToFlutterRenderer
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization[] $VALUES
kotlin.jvm.internal.FunctionReference: int arity
com.google.common.hash.LittleEndianByteArray$UnsafeByteArray: com.google.common.hash.LittleEndianByteArray$UnsafeByteArray UNSAFE_LITTLE_ENDIAN
com.google.common.collect.MapMaker: com.google.common.collect.MapMakerInternalMap$Strength valueStrength
com.google.android.gms.common.internal.zzo: android.os.IBinder zze
kotlin.jvm.internal.ClassReference: java.util.HashMap primitiveWrapperFqNames
androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.ArchTaskExecutor sInstance
io.flutter.embedding.engine.FlutterJNI: java.lang.String observatoryUri
com.google.gson.FieldAttributes: java.lang.reflect.Field field
androidx.core.app.Person: boolean mIsBot
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView: io.flutter.embedding.android.AndroidTouchProcessor androidTouchProcessor
io.flutter.plugin.platform.VirtualDisplayController: int densityDpi
io.sentry.Dsn: java.net.URI sentryUri
com.google.gson.Gson: boolean serializeSpecialFloatingPointValues
io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type: io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type NO_TARGET
androidx.fragment.app.FragmentTransaction: java.lang.CharSequence mBreadCrumbTitleText
io.flutter.plugin.common.MethodChannel$IncomingResultHandler: io.flutter.plugin.common.MethodChannel this$0
kotlin.text.DelimitedRangesSequence: java.lang.CharSequence input
com.google.gson.internal.ConstructorConstructor$7: com.google.gson.internal.ConstructorConstructor this$0
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.String label
io.flutter.view.AccessibilityBridge: io.flutter.embedding.engine.systemchannels.AccessibilityChannel accessibilityChannel
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.View view
com.google.gson.JsonObject: com.google.gson.internal.LinkedTreeMap members
io.sentry.SentryBaseEvent: io.sentry.protocol.Contexts contexts
com.google.gson.internal.ConstructorConstructor$13: com.google.gson.internal.ConstructorConstructor this$0
androidx.lifecycle.LifecycleRegistry$ObserverWithState: androidx.lifecycle.Lifecycle$State mState
kotlinx.coroutines.DispatchedCoroutine: java.util.concurrent.atomic.AtomicIntegerFieldUpdater _decision$FU
kotlinx.coroutines.EventLoop_commonKt: kotlinx.coroutines.internal.Symbol DISPOSED_TASK
io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType: boolean isSigned
io.sentry.SentryOptions: java.lang.String distinctId
com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper: long WAITER_THREAD_OFFSET
com.google.android.gms.maps.model.zzt: com.google.android.gms.internal.maps.zzaj zzb
androidx.core.app.RemoteActionCompat: androidx.core.graphics.drawable.IconCompat mIcon
com.google.common.collect.MapMakerInternalMap$Segment: int modCount
io.flutter.embedding.engine.systemchannels.DeferredComponentChannel: io.flutter.plugin.common.MethodChannel channel
io.sentry.flutter.R$styleable: int FontFamilyFont_android_fontVariationSettings
io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat: java.lang.String encodedName
androidx.arch.core.internal.SafeIterableMap$ListIterator: androidx.arch.core.internal.SafeIterableMap$Entry mNext
io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding: android.content.Context applicationContext
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory CHARACTER_FACTORY
androidx.fragment.app.FragmentActivity: int mNextCandidateRequestIndex
io.sentry.android.core.DefaultAndroidEventProcessor: java.lang.String SIDE_LOADED
io.flutter.plugins.googlemaps.GoogleMapController: io.flutter.plugins.googlemaps.MarkersController markersController
androidx.fragment.app.FragmentTransitionImpl$3: java.util.ArrayList val$sharedElementsIn
com.google.android.gms.common.api.internal.TaskApiCall$Builder: int zad
com.google.android.gms.common.internal.zzn: java.lang.String zzc
androidx.versionedparcelable.VersionedParcelParcel: android.os.Parcel mParcel
androidx.window.embedding.SplitController: java.util.concurrent.locks.ReentrantLock globalLock
kotlinx.coroutines.internal.LockFreeTaskQueue: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _cur$FU
androidx.fragment.app.FragmentManagerImpl: boolean mDestroyed
io.sentry.SentryTracer: java.lang.String name
io.flutter.plugins.urllauncher.WebViewActivity: java.lang.String ENABLE_DOM_EXTRA
androidx.core.app.NotificationCompat$Builder: java.lang.CharSequence mSettingsText
io.sentry.SentryThreadFactory: io.sentry.SentryOptions options
io.flutter.embedding.engine.dart.DartMessenger: java.util.Map pendingReplies
androidx.fragment.app.FragmentTransitionCompat21$3: java.util.ArrayList val$sharedElementsIn
com.google.android.gms.maps.model.zzu: com.google.android.gms.maps.model.TileProvider zza
com.google.android.gms.common.api.Api: com.google.android.gms.common.api.Api$ClientKey zab
com.google.android.gms.common.api.internal.zzd: android.os.Bundle zzd
io.sentry.SentryBaseEvent: java.lang.Throwable throwable
com.google.android.gms.common.internal.BaseGmsClient: long zzj
androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback: java.util.WeakHashMap mActivityWindowLayoutInfo
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest: java.lang.String viewType
com.google.android.gms.common.internal.zac: java.util.Locale zab
androidx.collection.MapCollections$MapIterator: androidx.collection.MapCollections this$0
io.flutter.embedding.engine.dart.DartExecutor$1: io.flutter.embedding.engine.dart.DartExecutor this$0
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration: io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration$Autofill autofill
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: androidx.window.layout.WindowInfoTrackerImpl this$0
io.sentry.protocol.Browser: java.lang.String name
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter CLASS
com.google.android.gms.maps.zzah: com.google.android.gms.maps.GoogleMapOptions zzd
androidx.window.layout.HardwareFoldingFeature: androidx.window.layout.HardwareFoldingFeature$Type type
io.sentry.flutter.R$styleable: int GradientColor_android_type
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter LONG
androidx.window.layout.FoldingFeature$Orientation: androidx.window.layout.FoldingFeature$Orientation$Companion Companion
androidx.fragment.app.FragmentActivity: boolean mCreated
com.google.android.gms.common.api.internal.zaad: java.util.Map zab
androidx.loader.app.LoaderManagerImpl$LoaderInfo: androidx.lifecycle.LifecycleOwner mLifecycleOwner
androidx.window.R$attr: int alwaysExpand
com.google.gson.internal.bind.TypeAdapters$33: com.google.gson.TypeAdapter val$typeAdapter
com.google.android.gms.common.api.internal.TaskApiCall: boolean zab
com.google.gson.internal.bind.JsonTreeReader: int stackSize
androidx.window.core.Version: androidx.window.core.Version CURRENT
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState: int composingStart
androidx.core.os.ExecutorCompat$HandlerExecutor: android.os.Handler mHandler
io.sentry.android.core.ActivityLifecycleIntegration: android.app.Application application
androidx.collection.ContainerHelpers: int[] EMPTY_INTS
io.sentry.DateUtils: java.util.TimeZone UTC_TIMEZONE
com.google.android.gms.common.api.internal.zact: com.google.android.gms.common.api.Api$AbstractClientBuilder zad
io.sentry.Scope: io.sentry.Session session
androidx.loader.app.LoaderManagerImpl$LoaderInfo: androidx.loader.content.Loader mLoader
io.sentry.transport.HttpConnection: io.sentry.transport.RateLimiter rateLimiter
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean inverseTransformDirty
io.sentry.protocol.App: java.lang.String appVersion
io.sentry.SentryBaseEvent: java.util.List breadcrumbs
io.flutter.embedding.engine.FlutterOverlaySurface: int id
io.sentry.protocol.SentryStackFrame: java.lang.Boolean inApp
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter URI
io.sentry.Attachment: java.lang.String contentType
com.google.gson.internal.LinkedTreeMap: java.util.Comparator NATURAL_ORDER
io.flutter.embedding.android.KeyboardManager$PerEventCallbackBuilder: boolean isEventHandled
com.google.gson.internal.bind.TypeAdapters$34: java.lang.Class val$base
io.sentry.protocol.DebugImage: java.lang.Long imageSize
com.tekartik.sqflite.Database: java.lang.String path
io.sentry.Hub: java.util.Map throwableToSpan
io.flutter.embedding.engine.dart.DartMessenger$HandlerInfo: io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler handler
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel: io.flutter.plugin.common.MethodChannel channel
kotlinx.coroutines.CompletedContinuation: java.lang.Object result
io.sentry.flutter.R$dimen: int notification_small_icon_size_as_large
com.google.android.gms.maps.model.BitmapDescriptor: com.google.android.gms.dynamic.IObjectWrapper zza
com.google.gson.internal.LinkedTreeMap: java.util.Comparator comparator
io.flutter.plugins.urllauncher.WebViewActivity: android.webkit.WebViewClient webViewClient
io.sentry.android.core.DefaultAndroidEventProcessor: io.sentry.android.core.util.RootChecker rootChecker
io.sentry.SentryItemType: io.sentry.SentryItemType UserFeedback
androidx.fragment.app.FragmentTransaction: java.util.ArrayList mCommitRunnables
io.sentry.BuildConfig: java.lang.String VERSION_NAME
com.google.android.gms.common.api.internal.zabs: com.google.android.gms.common.api.internal.ApiKey zaa
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration: boolean autocorrect
com.google.android.gms.common.internal.zaf: com.google.android.gms.common.api.internal.LifecycleFragment zab
androidx.core.app.NotificationCompat$Builder: boolean mAllowSystemGeneratedContextualActions
io.sentry.Breadcrumb: java.lang.String type
io.sentry.Attachment: byte[] bytes
kotlinx.coroutines.flow.internal.SafeCollectorKt: kotlin.jvm.functions.Function3 emitFun
androidx.window.R$attr: int splitMinWidth
com.google.android.gms.common.zac: android.content.Context zab
io.flutter.plugins.sharedpreferences.MethodCallHandlerImpl: android.content.SharedPreferences preferences
com.google.android.gms.common.api.internal.TaskApiCall$Builder: com.google.android.gms.common.api.internal.RemoteCall zaa
io.flutter.embedding.engine.dart.DartMessenger: int nextReplyId
io.sentry.android.core.ANRWatchDog: android.content.Context context
com.google.android.gms.common.internal.zzt: android.net.Uri zzb
androidx.window.layout.SidecarCompat: androidx.window.layout.SidecarAdapter sidecarAdapter
io.sentry.Session$State: io.sentry.Session$State Ok
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1$invokeSuspend$$inlined$collect$1: androidx.core.util.Consumer $consumer$inlined
io.flutter.embedding.engine.dart.DartExecutor$DartEntrypoint: java.lang.String dartEntrypointFunctionName
com.google.android.gms.common.internal.MethodInvocation: int zai
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle: java.lang.Boolean systemStatusBarContrastEnforced
androidx.fragment.app.FragmentTransition$4: java.util.ArrayList val$sharedElementsIn
com.google.common.hash.Hashing: int GOOD_FAST_HASH_SEED
com.google.gson.internal.Primitives: java.util.Map WRAPPER_TO_PRIMITIVE_TYPE
io.flutter.plugin.editing.ListenableEditingState: int mSelectionStartWhenBeginBatchEdit
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action SCROLL_RIGHT
com.google.common.hash.HashCode$LongHashCode: long hash
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag[] $VALUES
io.sentry.protocol.SentryRuntime: java.lang.String TYPE
com.google.android.gms.common.api.internal.zabu: com.google.android.gms.common.api.internal.GoogleApiManager zaa
com.google.android.gms.common.internal.ConnectionTelemetryConfiguration: boolean zzc
io.flutter.embedding.engine.systemchannels.RestorationChannel$1: byte[] val$data
io.sentry.flutter.R$id: int accessibility_custom_action_22
com.google.android.gms.common.internal.TelemetryLoggingOptions: com.google.android.gms.common.internal.TelemetryLoggingOptions zaa
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewTouch: int source
com.google.android.gms.maps.model.zzt: com.google.android.gms.maps.model.TileOverlayOptions zza
io.sentry.flutter.R$id: int accessibility_custom_action_24
io.sentry.flutter.R$id: int tag_accessibility_actions
io.flutter.plugins.googlemaps.TileOverlaysController: java.util.Map tileOverlayIdToController
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics: int viewPaddingTop
com.google.android.gms.common.internal.zzo: com.google.android.gms.common.internal.zzr zza
io.flutter.view.AccessibilityBridge$SemanticsNode: int previousActions
androidx.core.R$id: int tag_unhandled_key_event_manager
com.google.android.gms.common.internal.zzf: android.os.IBinder zze
com.google.common.util.concurrent.CycleDetectingLockFactory: java.lang.ThreadLocal acquiredLocks
androidx.fragment.app.FragmentTransitionCompat21$3: androidx.fragment.app.FragmentTransitionCompat21 this$0
androidx.lifecycle.ProcessLifecycleOwner$3: androidx.lifecycle.ProcessLifecycleOwner this$0
io.sentry.flutter.R$dimen: int compat_button_inset_vertical_material
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean hadPreviousConfig
com.google.android.gms.maps.MapsInitializer$Renderer: com.google.android.gms.maps.MapsInitializer$Renderer[] zza
androidx.fragment.app.FragmentController: androidx.fragment.app.FragmentHostCallback mHost
com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry: java.lang.Object value
io.sentry.flutter.R$id: int icon
com.google.common.util.concurrent.ThreadFactoryBuilder$1: java.lang.Integer val$priority
kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache: java.lang.reflect.Method getDescriptorMethod
androidx.core.app.NotificationCompat$Action: boolean mAllowGeneratedReplies
androidx.window.embedding.SplitInfo: androidx.window.embedding.ActivityStack primaryActivityStack
androidx.lifecycle.ReflectiveGenericLifecycleObserver: java.lang.Object mWrapped
androidx.core.view.WindowInsetsControllerCompat$Impl30: androidx.collection.SimpleArrayMap mListeners
io.sentry.flutter.R$id: int rtl
kotlinx.coroutines.JobSupport$ChildCompletion: kotlinx.coroutines.JobSupport parent
com.google.android.gms.common.internal.BaseGmsClient: java.lang.Object zzq
kotlinx.coroutines.flow.internal.SafeCollector: kotlinx.coroutines.flow.FlowCollector collector
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding: java.util.Set onUserLeaveHintListeners
com.google.android.gms.common.internal.zah: com.google.android.gms.common.api.internal.ConnectionCallbacks zaa
io.flutter.plugins.googlemaps.PolylinesController: java.util.Map polylineIdToController
com.google.android.gms.common.api.internal.zzb: android.os.Bundle zzd
io.sentry.cache.CacheStrategy: java.nio.charset.Charset UTF_8
com.google.android.gms.common.internal.zzac: android.os.IBinder zza
io.flutter.plugins.pathprovider.PathProviderPlugin$PathProviderPlatformThread$1: io.flutter.plugin.common.MethodChannel$Result val$result
com.google.common.hash.LittleEndianByteArray$JavaLittleEndianBytes: com.google.common.hash.LittleEndianByteArray$JavaLittleEndianBytes[] $VALUES
io.sentry.android.core.TempSensorBreadcrumbsIntegration: io.sentry.android.core.SentryAndroidOptions options
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$DefaultFlutterAssets: io.flutter.embedding.engine.loader.FlutterLoader flutterLoader
kotlinx.coroutines.scheduling.TasksKt: int BLOCKING_DEFAULT_PARALLELISM
kotlinx.coroutines.internal.ThreadSafeHeap: kotlinx.coroutines.internal.ThreadSafeHeapNode[] a
kotlinx.coroutines.channels.ArrayChannel: java.util.concurrent.locks.ReentrantLock lock
io.sentry.SpanStatus: io.sentry.SpanStatus UNKNOWN_ERROR
com.google.gson.GsonBuilder: boolean escapeHtmlChars
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: java.util.Map globalRegistrarMap
com.google.android.gms.base.R$string: int common_google_play_services_install_button
io.flutter.embedding.android.TransparencyMode: io.flutter.embedding.android.TransparencyMode[] $VALUES
io.flutter.FlutterInjector$Builder$NamedThreadFactory: int threadId
kotlinx.coroutines.DispatchedTask: int resumeMode
com.google.android.gms.common.internal.zzn: android.net.Uri zza
com.google.android.gms.common.SupportErrorDialogFragment: android.app.Dialog zac
kotlin.text.StringsKt__StringsKt$rangesDelimitedBy$2: java.util.List $delimitersList
io.flutter.view.AccessibilityBridge: int accessibilityFeatureFlags
androidx.window.R$attr: int splitMinSmallestWidth
io.flutter.plugins.googlemaps.TileProviderController: java.lang.String tileOverlayId
com.google.common.collect.MapMakerInternalMap$Segment: int threshold
androidx.core.graphics.drawable.IconCompat: android.graphics.PorterDuff$Mode DEFAULT_TINT_MODE
androidx.fragment.app.Fragment$AnimationInfo: int mNextTransitionStyle
com.google.gson.stream.JsonToken: com.google.gson.stream.JsonToken NUMBER
io.sentry.flutter.R$styleable: int SplitPlaceholderRule_splitRatio
io.sentry.HostnameCache: java.util.concurrent.atomic.AtomicBoolean updateRunning
io.sentry.flutter.R$dimen: int notification_top_pad_large_text
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest: int direction
com.google.gson.internal.bind.TreeTypeAdapter: com.google.gson.JsonSerializer serializer
androidx.collection.ArraySet$1: androidx.collection.ArraySet this$0
com.google.android.gms.common.api.internal.GoogleApiManager: com.google.android.gms.common.internal.TelemetryData zai
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory: com.google.gson.FieldNamingStrategy fieldNamingPolicy
com.google.gson.internal.bind.TreeTypeAdapter$SingleTypeFactory: java.lang.Class hierarchyType
kotlinx.coroutines.flow.SafeFlow: kotlin.jvm.functions.Function2 block
io.flutter.embedding.engine.FlutterEngine: io.flutter.plugin.localization.LocalizationPlugin localizationPlugin
io.flutter.plugin.editing.InputConnectionAdaptor: android.view.inputmethod.CursorAnchorInfo$Builder mCursorAnchorInfoBuilder
io.sentry.ShutdownHookIntegration: java.lang.Thread thread
io.flutter.embedding.android.FlutterView: io.flutter.embedding.engine.FlutterEngine flutterEngine
io.sentry.SentryItemType: io.sentry.SentryItemType Attachment
com.google.android.gms.common.internal.zat: android.accounts.Account zab
kotlinx.coroutines.internal.LockFreeTaskQueueCore: java.util.concurrent.atomic.AtomicReferenceArray array
com.google.common.collect.MapMakerInternalMap$KeySet: com.google.common.collect.MapMakerInternalMap this$0
io.sentry.flutter.R$id: int accessibility_custom_action_25
com.google.android.gms.base.R$string: int common_google_play_services_enable_text
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType: io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType MEDIUM_IMPACT
com.google.android.gms.common.api.internal.zabu: java.util.Set zae
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView: int prevTop
kotlin.coroutines.intrinsics.CoroutineSingletons: kotlin.coroutines.intrinsics.CoroutineSingletons UNDECIDED
io.sentry.protocol.Device: java.lang.Long freeStorage
io.sentry.protocol.SentryTransaction: java.util.Date startTimestamp
io.flutter.plugin.common.MethodChannel$IncomingResultHandler: io.flutter.plugin.common.MethodChannel$Result callback
com.google.android.gms.common.api.internal.BackgroundDetector: java.util.concurrent.atomic.AtomicBoolean zzb
com.google.android.gms.common.api.GoogleApi$Settings$Builder: android.os.Looper zab
androidx.core.app.NotificationCompatJellybean: boolean sExtrasFieldAccessFailed
com.tekartik.sqflite.SqflitePlugin$4: io.flutter.plugin.common.MethodCall val$call
com.google.android.gms.dynamite.zzn: android.database.Cursor zza
kotlinx.coroutines.channels.ChannelResult$Closed: java.lang.Throwable cause
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding activityPluginBinding
com.google.android.gms.tasks.zzw: java.lang.Object zze
com.google.gson.internal.LinkedTreeMap: int size
io.flutter.embedding.android.FlutterView: io.flutter.embedding.android.FlutterImageView flutterImageView
io.flutter.embedding.android.RenderMode: io.flutter.embedding.android.RenderMode image
com.google.android.gms.maps.GoogleMapOptions: java.lang.Boolean zzg
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewTouch: java.lang.Number eventTime
io.sentry.SentryBaseEvent: java.lang.String dist
io.flutter.plugins.googlemaps.CircleBuilder: com.google.android.gms.maps.model.CircleOptions circleOptions
io.flutter.Log: int WARN
com.google.common.io.Files$FilePredicate: com.google.common.io.Files$FilePredicate IS_FILE
io.sentry.flutter.R$attr: int activityName
io.flutter.view.AccessibilityBridge: android.view.accessibility.AccessibilityManager accessibilityManager
com.google.gson.stream.JsonReader: long MIN_INCOMPLETE_INTEGER
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory ATOMIC_INTEGER_FACTORY
com.google.gson.stream.JsonReader: java.lang.String[] pathNames
androidx.core.os.LocaleListCompatWrapper: java.util.Locale LOCALE_AR_XB
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType TEXT
io.flutter.embedding.android.DrawableSplashScreen: io.flutter.embedding.android.DrawableSplashScreen$DrawableSplashScreenView splashView
io.flutter.embedding.engine.loader.ApplicationInfoLoader: java.lang.String PUBLIC_FLUTTER_ASSETS_DIR_KEY
kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState CPU_ACQUIRED
androidx.fragment.app.FragmentManagerState: java.util.ArrayList mAdded
io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener: android.view.View mView
io.sentry.SentryEvent: java.util.Date timestamp
io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat: io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat PLAIN_TEXT
androidx.versionedparcelable.VersionedParcelParcel: java.lang.String mPrefix
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.dart.PlatformMessageHandler platformMessageHandler
com.tekartik.sqflite.operation.BatchOperation$BatchOperationResult: java.lang.Object errorData
androidx.lifecycle.LifecycleRegistry: boolean mNewEventOccurred
io.sentry.flutter.R$attr: int fontWeight
com.google.common.util.concurrent.AbstractFuture$Waiter: com.google.common.util.concurrent.AbstractFuture$Waiter next
androidx.core.graphics.drawable.IconCompat: int mInt2
kotlinx.coroutines.internal.ThreadContextKt: kotlin.jvm.functions.Function2 findOne
io.sentry.flutter.R$styleable: int GradientColorItem_android_color
com.google.common.collect.MapMakerInternalMap$AbstractStrongKeyEntry: int hash
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action DISMISS
io.flutter.embedding.android.KeyChannelResponder: io.flutter.embedding.engine.systemchannels.KeyEventChannel keyEventChannel
androidx.fragment.app.FragmentManagerImpl$4: android.view.ViewGroup val$container
com.google.android.gms.common.internal.zza: int zza
kotlin.text.StringsKt__StringsKt$rangesDelimitedBy$2: boolean $ignoreCase
io.sentry.protocol.Mechanism: java.lang.String type
io.sentry.MainEventProcessor: io.sentry.SentryExceptionFactory sentryExceptionFactory
com.google.android.gms.common.api.internal.TaskApiCall$Builder: com.google.android.gms.common.Feature[] zac
com.google.common.util.concurrent.AbstractFuture$Cancellation: com.google.common.util.concurrent.AbstractFuture$Cancellation CAUSELESS_INTERRUPTED
com.google.gson.stream.JsonReader: int PEEKED_BEGIN_OBJECT
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action SCROLL_UP
kotlin.text.Charsets: java.nio.charset.Charset ISO_8859_1
com.google.android.gms.common.api.internal.zace: int zab
io.flutter.embedding.android.FlutterView$2: io.flutter.embedding.android.FlutterView this$0
com.google.android.gms.common.api.internal.LifecycleCallback: com.google.android.gms.common.api.internal.LifecycleFragment mLifecycleFragment
kotlinx.coroutines.CompletedExceptionally: java.lang.Throwable cause
com.google.android.gms.base.R$string: int common_google_play_services_unsupported_text
androidx.activity.ImmLeaksCleaner: java.lang.reflect.Field sServedViewField
com.google.android.gms.maps.zzz: com.google.android.gms.maps.GoogleMap$OnMapLongClickListener zza
io.sentry.adapters.SpanIdSerializerAdapter: io.sentry.SentryOptions options
kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart[] $VALUES
io.flutter.embedding.engine.dart.DartExecutor$DefaultBinaryMessenger: io.flutter.embedding.engine.dart.DartMessenger messenger
androidx.core.app.NotificationCompat$Builder: android.app.PendingIntent mContentIntent
io.flutter.view.AccessibilityBridge$TextDirection: io.flutter.view.AccessibilityBridge$TextDirection LTR
kotlinx.coroutines.internal.AtomicKt: java.lang.Object RETRY_ATOMIC
com.google.common.hash.BloomFilterStrategies: com.google.common.hash.BloomFilterStrategies[] $VALUES
io.sentry.flutter.R$style: int TextAppearance_Compat_Notification_Title
io.sentry.transport.RateLimiter$DataCategory: java.lang.String category
io.sentry.SentryEvent: io.sentry.protocol.DebugMeta debugMeta
kotlinx.coroutines.internal.AtomicOp: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _consensus$FU
com.google.common.hash.Hashing$ChecksumType: com.google.common.hash.Hashing$ChecksumType ADLER_32
io.flutter.view.AccessibilityBridge$4: android.view.accessibility.AccessibilityManager val$accessibilityManager
io.flutter.embedding.engine.FlutterJNI: boolean initCalled
com.google.android.gms.signin.internal.SignInClientImpl: com.google.android.gms.common.internal.ClientSettings zac
io.sentry.SentryBaseEvent: java.util.Map extra
io.flutter.embedding.engine.FlutterEngine: java.util.Set engineLifecycleListeners
com.google.android.gms.common.api.internal.zaci: com.google.android.gms.common.api.internal.RegisterListenerMethod zaa
kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart LAZY
androidx.fragment.app.Fragment: int mContainerId
io.sentry.android.core.AndroidTransportGate: io.sentry.ILogger logger
com.google.gson.stream.JsonWriter: int[] stack
com.google.gson.internal.LinkedTreeMap$Node: com.google.gson.internal.LinkedTreeMap$Node parent
io.sentry.protocol.SentryThread: java.lang.String state
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int workerCtl
io.flutter.plugins.googlemaps.CirclesController: java.util.Map circleIdToController
com.google.android.gms.common.api.internal.ListenerHolder$ListenerKey: java.lang.String zab
io.flutter.view.AccessibilityBridge$SemanticsNode: java.util.List valueAttributes
io.sentry.MainEventProcessor: io.sentry.HostnameCache hostnameCache
kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.internal.Symbol NOT_IN_STACK
com.google.android.gms.common.internal.zab: java.util.Set zaa
io.sentry.flutter.R$styleable: int ActivityFilter_activityName
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: android.app.Service service
io.flutter.plugins.googlemaps.GoogleMapController: java.util.List initialPolygons
io.flutter.plugin.editing.TextInputPlugin: io.flutter.plugin.editing.TextInputPlugin$InputTarget inputTarget
com.google.gson.internal.bind.TypeAdapters$32: com.google.gson.TypeAdapter val$typeAdapter
com.google.gson.stream.JsonReader: int[] pathIndices
androidx.activity.ImmLeaksCleaner: java.lang.reflect.Field sHField
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState state
com.google.android.gms.common.api.internal.zzd: int zzc
kotlinx.coroutines.channels.AbstractSendChannel: java.util.concurrent.atomic.AtomicReferenceFieldUpdater onCloseHandler$FU
io.flutter.view.AccessibilityBridge: android.database.ContentObserver animationScaleObserver
io.flutter.embedding.engine.loader.ApplicationInfoLoader: java.lang.String PUBLIC_VM_SNAPSHOT_DATA_KEY
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel: io.flutter.plugin.common.MethodChannel$MethodCallHandler parsingHandler
io.sentry.flutter.R$id: int tag_on_receive_content_listener
com.tekartik.sqflite.SqflitePlugin$2: com.tekartik.sqflite.SqflitePlugin this$0
com.google.android.gms.common.api.internal.zabl: com.google.android.gms.common.api.internal.GoogleApiManager zaa
io.flutter.view.AccessibilityBridge$AccessibilityFeature: io.flutter.view.AccessibilityBridge$AccessibilityFeature[] $VALUES
com.google.android.gms.common.api.internal.zabq: java.util.Set zaf
io.sentry.SentryEnvelopeItemHeader: java.util.concurrent.Callable getLength
io.sentry.protocol.Gpu: java.lang.Boolean multiThreadedRendering
androidx.window.embedding.SplitPairRule: boolean finishSecondaryWithPrimary
com.tekartik.sqflite.SqflitePlugin$6: int val$databaseId
androidx.collection.ArraySet: int[] mHashes
com.google.android.gms.maps.model.Gap: float length
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: java.util.Map plugins
androidx.fragment.app.FragmentTransition$4: android.view.View val$nonExistentView
com.google.android.gms.maps.GoogleMapOptions: java.lang.Boolean zza
androidx.fragment.app.FragmentTransition$FragmentContainerTransition: androidx.fragment.app.BackStackRecord firstOutTransaction
com.google.common.base.MoreObjects$ToStringHelper: java.lang.String className
com.google.android.gms.maps.model.PolylineOptions: boolean zzg
io.sentry.flutter.R$styleable: int[] ActivityFilter
com.google.gson.internal.Primitives: java.util.Map PRIMITIVE_TO_WRAPPER_TYPE
com.google.android.gms.dynamite.DynamiteModule$DynamiteLoaderClassLoader: java.lang.ClassLoader sClassLoader
com.google.android.gms.common.GoogleApiAvailability: java.lang.String zac
androidx.core.R$id: int accessibility_custom_action_2
io.flutter.plugins.googlemaps.CirclesController: io.flutter.plugin.common.MethodChannel methodChannel
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType MULTILINE
androidx.window.layout.WindowMetrics: androidx.window.core.Bounds _bounds
io.sentry.transport.HttpConnection: io.sentry.RequestDetails requestDetails
io.flutter.embedding.android.FlutterView$1: io.flutter.embedding.android.FlutterView this$0
kotlin.text.StringsKt__StringsKt$splitToSequence$1: java.lang.CharSequence $this_splitToSequence
io.sentry.protocol.DebugImage: java.util.Map unknown
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_DESTROY
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.FlutterJNI flutterJNI
androidx.core.R$id: int accessibility_custom_action_26
io.sentry.android.core.ManifestMetadataReader: java.lang.String TRACES_ACTIVITY_AUTO_FINISH_ENABLE
io.sentry.config.AbstractPropertiesProvider: java.lang.String prefix
kotlin.ranges.IntRange: kotlin.ranges.IntRange EMPTY
io.sentry.flutter.R$styleable: int ActivityFilter_activityAction
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding: java.util.Set onRequestPermissionsResultListeners
androidx.window.layout.FoldingFeature$State: androidx.window.layout.FoldingFeature$State FLAT
io.flutter.view.AccessibilityBridge$SemanticsNode: float scrollPosition
io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler$EventSinkImplementation: java.util.concurrent.atomic.AtomicBoolean hasEnded
androidx.fragment.app.Fragment: int mBackStackNesting
io.sentry.protocol.Gpu: java.lang.Integer id
androidx.versionedparcelable.VersionedParcelParcel: int mNextRead
io.sentry.android.core.AnrIntegration: java.lang.Object watchDogLock
io.sentry.flutter.R$styleable: int GradientColor_android_endX
kotlin.coroutines.jvm.internal.SuspendLambda: int arity
com.google.android.gms.maps.GoogleMapOptions: java.lang.Boolean zzm
com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl: java.lang.reflect.Type[] typeArguments
androidx.fragment.app.Fragment: boolean mRemoving
kotlinx.coroutines.scheduling.WorkQueue: int blockingTasksInBuffer
io.sentry.flutter.R$attr: int alwaysExpand
com.google.android.gms.common.internal.zav: boolean zad
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewTouch: int pointerCount
kotlin.text.DelimitedRangesSequence$iterator$1: int currentStartIndex
io.flutter.plugin.editing.TextInputPlugin: android.graphics.Rect lastClientRect
com.google.android.gms.common.api.GoogleApi: com.google.android.gms.common.api.internal.ApiKey zaf
io.flutter.embedding.engine.FlutterEngine$1: io.flutter.embedding.engine.FlutterEngine this$0
androidx.fragment.app.FragmentState: boolean mRetainInstance
io.flutter.plugins.googlemaps.MarkersController: java.util.Map markerIdToController
io.flutter.view.AccessibilityBridge$SemanticsNode: java.util.List decreasedValueAttributes
com.google.android.gms.maps.GoogleMapOptions: java.lang.Boolean zzh
io.sentry.android.core.ManifestMetadataReader: java.lang.String UNCAUGHT_EXCEPTION_HANDLER_ENABLE
io.flutter.embedding.android.FlutterSplashView$SavedState: java.lang.String previousCompletedSplashIsolate
io.sentry.android.core.EnvelopeFileObserver: io.sentry.IEnvelopeSender envelopeSender
io.flutter.view.AccessibilityBridge$SemanticsNode: io.flutter.view.AccessibilityBridge$CustomAccessibilityAction onLongPressOverride
com.google.android.gms.common.api.internal.zace: int zad
kotlin.text.DelimitedRangesSequence: kotlin.jvm.functions.Function2 getNextMatch
com.google.gson.stream.JsonScope: int NONEMPTY_DOCUMENT
io.sentry.SentryOptions: java.lang.String dsn
io.flutter.view.AccessibilityBridge$TextDirection: io.flutter.view.AccessibilityBridge$TextDirection[] $VALUES
androidx.versionedparcelable.VersionedParcelParcel: int mFieldId
com.google.android.gms.common.internal.ClientSettings$Builder: androidx.collection.ArraySet zab
io.sentry.flutter.R$styleable: int FontFamily_fontProviderFetchStrategy
androidx.lifecycle.Lifecycling: java.util.Map sClassToAdapters
androidx.fragment.app.FragmentTransaction: int mTransitionStyle
com.google.common.reflect.Types: com.google.common.base.Joiner COMMA_JOINER
kotlinx.coroutines.android.HandlerContext: android.os.Handler handler
androidx.window.layout.WindowMetricsCalculator: androidx.window.layout.WindowMetricsCalculator$Companion Companion
io.sentry.CircularFifoQueue: java.lang.Object[] elements
com.tekartik.sqflite.SqflitePlugin: int databaseId
com.google.android.gms.common.api.internal.TaskApiCall: int zac
androidx.window.layout.WindowMetricsCalculator$Companion: androidx.window.layout.WindowMetricsCalculator$Companion $$INSTANCE
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory INET_ADDRESS_FACTORY
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag IS_TOGGLED
kotlinx.coroutines.channels.BufferOverflow: kotlinx.coroutines.channels.BufferOverflow SUSPEND
com.google.gson.Gson: java.util.Map typeTokenCache
androidx.window.R$styleable: int ActivityRule_alwaysExpand
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType POSTAL_ADDRESS
io.sentry.transport.HttpConnection: java.net.Proxy proxy
io.flutter.plugin.editing.InputConnectionAdaptor: io.flutter.embedding.engine.systemchannels.TextInputChannel textInputChannel
com.google.android.gms.common.internal.GetServiceRequest: java.lang.String zzd
com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry: java.lang.Object value
androidx.core.R$id: int accessibility_custom_action_24
kotlinx.coroutines.EventLoopImplBase$DelayedTask: java.lang.Object _heap
io.flutter.embedding.android.FlutterView: io.flutter.plugin.localization.LocalizationPlugin localizationPlugin
io.flutter.plugins.googlemaps.GoogleMapBuilder: java.util.List initialTileOverlays
io.flutter.plugin.platform.VirtualDisplayController: android.view.Surface surface
androidx.fragment.app.FragmentTransition$3: androidx.collection.ArrayMap val$inSharedElements
androidx.core.graphics.drawable.IconCompat: java.lang.String mTintModeStr
io.sentry.protocol.Request: java.lang.String method
io.sentry.SentryStackTraceFactory: java.util.List inAppExcludes
androidx.fragment.app.FragmentManagerImpl: androidx.activity.OnBackPressedDispatcher mOnBackPressedDispatcher
androidx.activity.OnBackPressedCallback: java.util.concurrent.CopyOnWriteArrayList mCancellables
com.google.android.gms.auth.api.signin.internal.Storage: java.util.concurrent.locks.Lock zaa
androidx.window.layout.SidecarWindowBackend: androidx.window.layout.ExtensionInterfaceCompat windowExtension
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.SystemChannel systemChannel
androidx.core.view.ViewCompat$UnhandledKeyEventManager: java.util.ArrayList sViewsWithListeners
com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node left
com.google.android.gms.signin.internal.zag: java.lang.String zab
androidx.fragment.app.FragmentTransaction$Op: int mEnterAnim
io.flutter.plugin.common.MethodCall: java.lang.String method
io.sentry.flutter.R$attr: int secondaryActivityAction
com.google.gson.internal.bind.TreeTypeAdapter$GsonContextImpl: com.google.gson.internal.bind.TreeTypeAdapter this$0
kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext: kotlinx.coroutines.CancellableContinuation cont
androidx.arch.core.internal.SafeIterableMap$Entry: java.lang.Object mValue
com.google.gson.stream.JsonToken: com.google.gson.stream.JsonToken STRING
io.flutter.embedding.android.DrawableSplashScreen: android.graphics.drawable.Drawable drawable
com.google.common.collect.SingletonImmutableSet: int cachedHashCode
kotlinx.coroutines.DefaultExecutor: java.lang.Thread _thread
kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt$createCoroutineUnintercepted$$inlined$createCoroutineFromSuspendFunction$IntrinsicsKt__IntrinsicsJvmKt$2: int label
com.google.android.gms.common.internal.zzt: android.net.Uri zza
com.google.gson.internal.bind.TypeAdapters$35: com.google.gson.TypeAdapter val$typeAdapter
io.sentry.SessionAdapter: io.sentry.SentryOptions options
com.google.common.collect.RegularImmutableSet: java.lang.Object[] elements
com.google.android.gms.dynamite.DynamiteModule: com.google.android.gms.dynamite.DynamiteModule$VersionPolicy PREFER_LOCAL
androidx.core.app.NotificationCompat$Action: java.lang.CharSequence title
androidx.fragment.app.Fragment: boolean mRetainInstanceChangedWhileDetached
com.google.android.gms.dynamic.zac: android.os.Bundle zaa
io.sentry.android.core.AndroidLogger$1: int[] $SwitchMap$io$sentry$SentryLevel
com.google.gson.internal.ConstructorConstructor: java.util.Map instanceCreators
com.google.android.gms.common.api.internal.zaac: com.google.android.gms.tasks.TaskCompletionSource zaa
com.google.android.gms.maps.model.PolygonOptions: int zzd
com.google.android.gms.common.internal.zad: int zac
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding pluginBinding
androidx.versionedparcelable.ParcelImpl: android.os.Parcelable$Creator CREATOR
io.sentry.SentryOptions: java.util.List inAppIncludes
com.google.android.gms.signin.SignInOptions: boolean zah
io.sentry.protocol.SentrySpan: java.lang.String op
kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart UNDISPATCHED
io.flutter.plugin.platform.PlatformPlugin$3: int[] $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$SystemUiOverlay
androidx.fragment.app.BackStackState: java.util.ArrayList mFragmentWhos
com.tekartik.sqflite.operation.ExecuteOperation: java.lang.Boolean inTransaction
io.sentry.adapters.DateDeserializerAdapter: io.sentry.SentryOptions options
io.sentry.SpanContext: java.lang.String op
com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper: long VALUE_OFFSET
com.google.gson.stream.JsonReader: int PEEKED_UNQUOTED_NAME
kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.String baseContinuationImplClassName
io.flutter.view.AccessibilityBridge$AccessibilityFeature: int value
kotlinx.coroutines.EventLoop: kotlinx.coroutines.internal.ArrayQueue unconfinedQueue
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory TIMESTAMP_FACTORY
io.flutter.view.VsyncWaiter: io.flutter.embedding.engine.FlutterJNI flutterJNI
io.flutter.plugins.googlemaps.PolylineBuilder: boolean consumeTapEvents
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$2: io.flutter.embedding.android.FlutterView val$flutterView
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.FlutterEngine$EngineLifecycleListener engineLifecycleListener
androidx.fragment.app.FragmentTransition$4: java.lang.Object val$finalSharedElementTransition
io.sentry.flutter.R$layout: int notification_template_custom_big
io.flutter.plugins.pathprovider.PathProviderPlugin: io.flutter.plugin.common.MethodChannel channel
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag IS_HIDDEN
io.sentry.SentryTracer: io.sentry.protocol.Request request
androidx.lifecycle.LifecycleDispatcher: java.util.concurrent.atomic.AtomicBoolean sInitialized
io.sentry.android.core.AnrIntegration: io.sentry.SentryOptions options
androidx.fragment.app.DialogFragment: boolean mShowsDialog
io.flutter.embedding.android.FlutterView$ZeroSides: io.flutter.embedding.android.FlutterView$ZeroSides BOTH
com.google.android.gms.maps.model.PolygonOptions: java.util.List zzk
io.sentry.Span: io.sentry.SentryTracer transaction
com.google.android.gms.common.internal.zav: boolean zae
com.google.common.collect.MapMakerInternalMap: int concurrencyLevel
com.google.common.collect.MapMakerInternalMap$AbstractStrongKeyEntry: com.google.common.collect.MapMakerInternalMap$InternalEntry next
io.sentry.NoOpHub: io.sentry.SentryOptions emptyOptions
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest: double logicalWidth
com.google.android.gms.maps.CameraUpdateFactory: com.google.android.gms.maps.internal.ICameraUpdateFactoryDelegate zza
com.google.android.gms.common.api.internal.zal: int zad
io.sentry.android.core.ManifestMetadataReader: java.lang.String NDK_SCOPE_SYNC_ENABLE
kotlinx.coroutines.internal.Symbol: java.lang.String symbol
androidx.window.layout.SidecarWindowBackend: androidx.window.layout.SidecarWindowBackend globalInstance
kotlinx.coroutines.channels.AbstractChannel$RemoveReceiveOnCancel: kotlinx.coroutines.channels.Receive receive
com.google.android.gms.common.api.internal.zach: int zab
io.flutter.embedding.engine.systemchannels.LocalizationChannel: io.flutter.embedding.engine.systemchannels.LocalizationChannel$LocalizationMessageHandler localizationMessageHandler
com.google.android.gms.maps.model.LatLng: double latitude
com.google.gson.Gson$1: com.google.gson.Gson this$0
io.sentry.android.core.EnvelopeFileObserver$CachedEnvelopeHint: boolean retry
io.flutter.FlutterInjector$Builder: io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager deferredComponentManager
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewTouch: float xPrecision
io.flutter.plugins.googlemaps.MarkerBuilder: com.google.android.gms.maps.model.MarkerOptions markerOptions
com.google.android.gms.maps.model.MarkerOptions: java.lang.String zzb
com.google.gson.internal.bind.TypeAdapters$31: com.google.gson.TypeAdapter val$typeAdapter
io.sentry.Stack: io.sentry.ILogger logger
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: java.lang.String pluginId
io.sentry.transport.QueuedThreadPoolExecutor: io.sentry.ILogger logger
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.TextInputChannel textInputChannel
io.sentry.protocol.Device: java.lang.Integer screenWidthPixels
androidx.window.embedding.ActivityRule: boolean alwaysExpand
io.sentry.SentryOptions: java.lang.String cacheDirPath
androidx.core.view.ViewCompat: androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager sAccessibilityPaneVisibilityManager
kotlinx.coroutines.internal.LockFreeTaskQueueCore: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _next$FU
com.google.android.gms.common.api.internal.zao: com.google.android.gms.common.api.internal.zap zaa
com.google.android.gms.common.api.internal.zza: java.lang.String zzb
io.flutter.view.AccessibilityBridge$TextDirection: io.flutter.view.AccessibilityBridge$TextDirection RTL
com.google.gson.GsonBuilder: boolean serializeSpecialFloatingPointValues
io.flutter.view.AccessibilityBridge$SemanticsNode: io.flutter.view.AccessibilityBridge$CustomAccessibilityAction onTapOverride
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_START
androidx.window.embedding.SplitController: java.util.Set staticSplitRules
kotlin.reflect.KVisibility: kotlin.reflect.KVisibility PROTECTED
io.sentry.protocol.DebugImage: java.lang.String uuid
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory: com.google.gson.internal.ConstructorConstructor constructorConstructor
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter BOOLEAN
com.google.android.gms.maps.GoogleMapOptions: java.lang.Float zzn
io.sentry.NoOpLogger: io.sentry.NoOpLogger instance
kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol HANDLER_INVOKED
io.flutter.plugins.googlemaps.TileProviderController$Worker: io.flutter.plugins.googlemaps.TileProviderController this$0
com.google.gson.internal.ConstructorConstructor$14: com.google.gson.internal.UnsafeAllocator unsafeAllocator
androidx.lifecycle.ProcessLifecycleOwner: int mResumedCounter
kotlin.ranges.IntProgressionIterator: int finalElement
io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry$ShimRegistrarAggregate: io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding activityPluginBinding
io.flutter.plugin.editing.TextInputPlugin$2: io.flutter.plugin.editing.TextInputPlugin this$0
kotlin.text.Charsets: java.nio.charset.Charset UTF_16BE
com.google.android.gms.common.internal.ClientSettings$Builder: java.lang.String zad
com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory: com.google.gson.internal.ConstructorConstructor constructorConstructor
com.google.android.gms.common.internal.ClientSettings: int zae
io.sentry.NoOpHub: io.sentry.NoOpHub instance
androidx.window.layout.FoldingFeature$OcclusionType: androidx.window.layout.FoldingFeature$OcclusionType FULL
com.google.android.gms.common.api.internal.ApiKey: com.google.android.gms.common.api.Api zab
kotlin.jvm.internal.PackageReference: java.lang.Class jClass
io.flutter.embedding.android.FlutterView: io.flutter.embedding.engine.renderer.RenderSurface renderSurface
io.sentry.CircularFifoQueue$1: int index
io.sentry.android.core.SentryAndroidOptions: boolean anrReportInDebug
io.sentry.flutter.R$styleable: int FontFamilyFont_android_font
io.flutter.embedding.android.FlutterSplashView$SavedState: android.os.Bundle splashScreenState
androidx.core.R$id: int accessibility_custom_action_16
kotlin.text.StringsKt__IndentKt$getIndentFunction$2: java.lang.String $indent
com.google.android.gms.dynamic.DeferredLifecycleHelper: com.google.android.gms.dynamic.OnDelegateCreatedListener zad
com.google.android.gms.common.internal.ConnectionTelemetryConfiguration: int[] zzd
androidx.window.layout.SidecarCompat$TranslatingCallback: androidx.window.layout.SidecarCompat this$0
io.flutter.view.AccessibilityBridge: java.lang.Integer embeddedInputFocusedNodeId
androidx.lifecycle.ViewModelProvider: androidx.lifecycle.ViewModelProvider$Factory mFactory
io.flutter.plugin.editing.ListenableEditingState: java.util.ArrayList mPendingListeners
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry$1: io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry this$1
com.google.android.gms.maps.model.PolygonOptions: int zzj
androidx.window.layout.SidecarCompat$FirstAttachAdapter: androidx.window.layout.SidecarCompat sidecarCompat
io.sentry.protocol.SentryStackFrame: java.lang.String function
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory CURRENCY_FACTORY
io.sentry.flutter.R$id: int tag_accessibility_heading
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag IS_ENABLED
io.sentry.protocol.App: java.lang.String TYPE
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter SHORT
io.sentry.protocol.User: java.lang.String email
androidx.fragment.app.Fragment: java.lang.String mWho
androidx.core.app.NotificationCompat$Builder: java.util.ArrayList mInvisibleActions
io.sentry.SentryClient: java.lang.String SENTRY_PROTOCOL_VERSION
io.flutter.embedding.engine.dart.DartMessenger: io.flutter.embedding.engine.dart.DartMessenger$DartMessengerTaskQueue platformTaskQueue
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewTouch: long motionEventId
com.google.common.util.concurrent.ThreadFactoryBuilder$1: java.util.concurrent.atomic.AtomicLong val$count
io.flutter.view.AccessibilityBridge$SemanticsNode: int flags
io.flutter.embedding.android.FlutterView$4: io.flutter.embedding.android.FlutterView this$0
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter: com.google.gson.internal.ObjectConstructor constructor
androidx.arch.core.internal.SafeIterableMap$ListIterator: androidx.arch.core.internal.SafeIterableMap$Entry mExpectedEnd
io.sentry.EnvelopeSender: io.sentry.IHub hub
io.flutter.embedding.android.FlutterImageView$1: int[] $SwitchMap$io$flutter$embedding$android$FlutterImageView$SurfaceKind
io.sentry.transport.RateLimiter: io.sentry.transport.ICurrentDateProvider currentDateProvider
androidx.core.app.RemoteActionCompat: java.lang.CharSequence mContentDescription
com.google.android.gms.common.internal.GetServiceRequest: boolean zzm
com.google.gson.internal.ConstructorConstructor$2: com.google.gson.InstanceCreator val$rawTypeCreator
io.flutter.plugin.editing.TextInputPlugin: io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration configuration
com.google.android.gms.common.api.internal.NonGmsServiceBrokerClient: android.os.Handler zag
androidx.fragment.app.FragmentManagerImpl$2: androidx.fragment.app.FragmentManagerImpl this$0
kotlinx.coroutines.internal.LockFreeTaskQueue: java.lang.Object _cur
androidx.loader.app.LoaderManagerImpl$LoaderViewModel: androidx.lifecycle.ViewModelProvider$Factory FACTORY
com.google.android.gms.common.internal.ClientSettings$Builder: java.lang.String zac
androidx.fragment.app.Fragment: java.lang.Boolean mIsPrimaryNavigationFragment
com.google.android.gms.dynamite.DynamiteModule: boolean zzd
kotlinx.coroutines.DispatchedCoroutine: int _decision
io.sentry.DateUtils: java.lang.String ISO_FORMAT
androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback: java.util.concurrent.locks.ReentrantLock lock
com.google.android.gms.common.Feature: android.os.Parcelable$Creator CREATOR
androidx.window.layout.WindowLayoutInfo: java.util.List displayFeatures
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object L$2
kotlinx.coroutines.scheduling.DefaultScheduler: kotlinx.coroutines.CoroutineDispatcher IO
androidx.fragment.app.DialogFragment: int mTheme
com.google.android.gms.tasks.TaskExecutors: java.util.concurrent.Executor MAIN_THREAD
androidx.core.app.NotificationCompatJellybean: java.lang.reflect.Field sExtrasField
androidx.window.layout.HardwareFoldingFeature: androidx.window.layout.FoldingFeature$State state
androidx.fragment.app.Fragment: java.lang.Runnable mPostponedDurationRunnable
io.flutter.plugin.platform.PlatformPlugin: io.flutter.plugin.platform.PlatformPlugin$PlatformPluginDelegate platformPluginDelegate
com.google.android.gms.common.internal.zai: com.google.android.gms.common.api.internal.OnConnectionFailedListener zaa
kotlin.jvm.internal.CallableReference: java.lang.Object NO_RECEIVER
com.google.android.gms.common.internal.GetServiceRequest: int zzc
com.google.android.gms.common.internal.service.zao: com.google.android.gms.common.api.Api$AbstractClientBuilder zad
io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat: io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat[] $VALUES
androidx.fragment.app.Fragment$AnimationInfo: androidx.core.app.SharedElementCallback mEnterTransitionCallback
io.sentry.flutter.R$dimen: int compat_button_padding_vertical_material
io.flutter.embedding.engine.dart.DartMessenger$HandlerInfo: io.flutter.embedding.engine.dart.DartMessenger$DartMessengerTaskQueue taskQueue
androidx.fragment.app.FragmentManagerImpl: androidx.fragment.app.FragmentHostCallback mHost
androidx.fragment.app.BackStackState: int mBreadCrumbShortTitleRes
androidx.fragment.app.FragmentManagerImpl: boolean mHavePendingDeferredStart
com.google.gson.stream.JsonScope: int EMPTY_OBJECT
io.sentry.Attachment: java.lang.String filename
com.google.android.gms.maps.model.CircleOptions: com.google.android.gms.maps.model.LatLng zza
androidx.collection.MapCollections$EntrySet: androidx.collection.MapCollections this$0
io.sentry.Scope: io.sentry.protocol.User user
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory: com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory jsonAdapterFactory
io.sentry.android.core.SentryAndroidOptions: boolean enableAutoActivityLifecycleTracing
kotlinx.coroutines.internal.LockFreeLinkedListNode: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _next$FU
kotlinx.coroutines.CancellableContinuationImpl: kotlinx.coroutines.DisposableHandle parentHandle
com.google.android.gms.maps.model.PatternItem: java.lang.Float zzc
androidx.core.view.OneShotPreDrawListener: android.view.ViewTreeObserver mViewTreeObserver
com.google.gson.Gson: boolean DEFAULT_COMPLEX_MAP_KEYS
kotlin.text.DelimitedRangesSequence$iterator$1: kotlin.ranges.IntRange nextItem
androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator: android.animation.Animator animator
com.google.android.gms.common.api.internal.ApiKey: com.google.android.gms.common.api.Api$ApiOptions zac
io.flutter.view.AccessibilityBridge: int previousRouteId
androidx.fragment.app.FragmentActivity: androidx.collection.SparseArrayCompat mPendingFragmentActivityResults
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$14: io.sentry.android.core.SentryAndroidOptions $options
io.sentry.GsonSerializer: com.google.gson.Gson gson
io.sentry.SamplingContext: io.sentry.TransactionContext transactionContext
io.flutter.view.AccessibilityViewEmbedder: int nextFlutterId
com.google.gson.internal.LinkedTreeMap$Node: com.google.gson.internal.LinkedTreeMap$Node left
kotlin.Result: kotlin.Result$Companion Companion
io.flutter.embedding.android.FlutterView: io.flutter.plugin.mouse.MouseCursorPlugin mouseCursorPlugin
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView: android.view.ViewTreeObserver$OnGlobalFocusChangeListener activeFocusListener
io.sentry.config.ClasspathPropertiesLoader: io.sentry.ILogger logger
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewTouch: int action
com.google.android.gms.common.internal.BaseGmsClient: java.util.ArrayList zzt
com.google.common.collect.MapMakerInternalMap$HashIterator: com.google.common.collect.MapMakerInternalMap this$0
androidx.fragment.app.FragmentTransaction: java.lang.CharSequence mBreadCrumbShortTitleText
androidx.fragment.app.Fragment: android.view.View mView
com.google.android.gms.dynamite.zzb: java.lang.ClassLoader zza
com.google.android.gms.common.api.internal.zabq: int zam
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: java.util.concurrent.Executor executor
io.sentry.SpanStatus: io.sentry.SpanStatus UNIMPLEMENTED
com.google.android.gms.common.internal.BaseGmsClient: java.util.concurrent.atomic.AtomicInteger zzd
io.sentry.TransactionContext: java.lang.Boolean parentSampled
io.sentry.flutter.R$attr: int fontProviderCerts
io.sentry.flutter.R$id: int accessibility_custom_action_9
com.google.android.gms.maps.GoogleMapOptions: java.lang.String zzs
io.sentry.flutter.R$id: int accessibility_custom_action_21
com.google.android.gms.maps.GoogleMapOptions: java.lang.Integer zzr
com.google.android.gms.maps.model.BitmapDescriptorFactory: com.google.android.gms.internal.maps.zzi zza
io.sentry.Stack: java.util.Deque items
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction: java.lang.String hint
io.flutter.plugins.googlemaps.PolylineController: java.lang.String googleMapsPolylineId
kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater parkedWorkersStack$FU
androidx.savedstate.SavedStateRegistry$1: androidx.savedstate.SavedStateRegistry this$0
com.google.gson.reflect.TypeToken: java.lang.Class rawType
androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions: androidx.arch.core.internal.SafeIterableMap this$0
androidx.fragment.app.DialogFragment: java.lang.Runnable mDismissRunnable
com.google.gson.FieldNamingPolicy: com.google.gson.FieldNamingPolicy LOWER_CASE_WITH_DOTS
com.google.common.collect.ImmutableList$Itr: com.google.common.collect.ImmutableList list
io.sentry.protocol.Device: java.lang.Long memorySize
com.google.android.gms.dynamite.DynamiteModule: java.lang.Boolean zzb
androidx.fragment.app.FragmentTransition$4: androidx.fragment.app.FragmentTransitionImpl val$impl
com.google.common.util.concurrent.CycleDetectingLockFactory$Policies: com.google.common.util.concurrent.CycleDetectingLockFactory$Policies[] $VALUES
io.sentry.SentryOptions: boolean enableAutoSessionTracking
io.flutter.embedding.android.FlutterView: io.flutter.embedding.android.FlutterSurfaceView flutterSurfaceView
io.sentry.android.core.SystemEventsBreadcrumbsIntegration: io.sentry.android.core.SystemEventsBreadcrumbsIntegration$SystemEventsBroadcastReceiver receiver
io.flutter.plugins.sharedpreferences.MethodCallHandlerImpl$1: io.flutter.plugin.common.MethodChannel$Result val$result
kotlinx.coroutines.internal.MainDispatcherLoader: boolean FAST_SERVICE_LOADER_ENABLED
com.google.android.gms.auth.api.signin.GoogleSignInAccount: java.lang.String zai
com.google.common.hash.ChecksumHashFunction$ChecksumHasher: com.google.common.hash.ChecksumHashFunction this$0
io.sentry.UncaughtExceptionHandlerIntegration$UncaughtExceptionHint: io.sentry.ILogger logger
androidx.fragment.app.FragmentTransition$2: java.lang.Object val$exitTransition
androidx.lifecycle.ClassesInfoCache$MethodReference: int mCallType
com.google.common.base.MoreObjects$ToStringHelper: com.google.common.base.MoreObjects$ToStringHelper$ValueHolder holderTail
androidx.fragment.app.FragmentTransition$1: java.util.ArrayList val$exitingViews
kotlinx.coroutines.JobSupport$addLastAtomic$$inlined$addLastIf$1: kotlinx.coroutines.JobSupport this$0
com.google.gson.internal.bind.TypeAdapters$36: int[] $SwitchMap$com$google$gson$stream$JsonToken
androidx.fragment.app.FragmentTransition$4: androidx.fragment.app.Fragment val$outFragment
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: boolean isFlutterUiDisplayed
io.sentry.android.core.ManifestMetadataReader: java.lang.String DEBUG_LEVEL
androidx.core.app.NotificationCompat$Builder: android.widget.RemoteViews mContentView
com.google.android.gms.common.internal.GetServiceRequest: android.accounts.Account zzh
io.sentry.protocol.Browser: java.util.Map unknown
io.flutter.plugins.googlemaps.PolygonBuilder: float density
com.google.android.gms.common.internal.TelemetryLoggingOptions: java.lang.String zab
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback this$0
io.sentry.protocol.Gpu: java.lang.String apiType
io.flutter.plugins.connectivity.ConnectivityBroadcastReceiver: android.content.Context context
androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions: androidx.arch.core.internal.SafeIterableMap$Entry mCurrent
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: java.util.concurrent.atomic.AtomicIntegerFieldUpdater workerCtl$FU
io.sentry.cache.EnvelopeCache: java.lang.String SUFFIX_CURRENT_SESSION_FILE
com.google.android.gms.maps.model.CameraPosition$Builder: float zzb
androidx.activity.ComponentActivity: int mContentLayoutId
io.sentry.SentryTraceHeader: java.lang.Boolean sampled
io.sentry.DirectoryProcessor$SendCachedEnvelopeHint: java.util.concurrent.CountDownLatch latch
io.sentry.protocol.Device: java.lang.Float batteryLevel
com.google.android.gms.common.wrappers.Wrappers: com.google.android.gms.common.wrappers.PackageManagerWrapper zzb
androidx.versionedparcelable.VersionedParcelParcel: android.util.SparseIntArray mPositionLookup
com.google.android.gms.maps.Projection: com.google.android.gms.maps.internal.IProjectionDelegate zza
io.flutter.embedding.android.FlutterSplashView: java.lang.String previousCompletedSplashIsolate
io.sentry.protocol.SentryStackFrame: java.lang.String symbolAddr
com.tekartik.sqflite.SqflitePlugin: java.lang.String databasesPath
com.google.gson.stream.JsonWriter: int stackSize
com.google.android.gms.auth.api.signin.GoogleSignInAccount: android.os.Parcelable$Creator CREATOR
io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry: java.util.Map pluginMap
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag NAMES_ROUTE
androidx.fragment.app.FragmentManagerImpl: androidx.fragment.app.Fragment mPrimaryNav
com.google.android.gms.auth.api.signin.internal.Storage: android.content.SharedPreferences zad
io.sentry.protocol.Device: java.lang.Float batteryTemperature
io.sentry.protocol.SdkVersion: java.util.Map unknown
io.sentry.android.core.LifecycleWatcher: boolean enableSessionTracking
io.flutter.plugins.googlemaps.PolylineController: boolean consumeTapEvents
androidx.fragment.app.FragmentManagerImpl: androidx.activity.OnBackPressedCallback mOnBackPressedCallback
androidx.window.layout.FoldingFeature$Orientation: androidx.window.layout.FoldingFeature$Orientation HORIZONTAL
androidx.fragment.app.FragmentTransaction: java.util.ArrayList mSharedElementTargetNames
com.google.android.gms.common.internal.TelemetryData: android.os.Parcelable$Creator CREATOR
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration: boolean enableIMEPersonalizedLearning
com.google.gson.stream.JsonToken: com.google.gson.stream.JsonToken END_ARRAY
io.sentry.flutter.R$styleable: int SplitPairRule_splitMinSmallestWidth
io.flutter.embedding.android.FlutterSplashView$SavedState: android.os.Parcelable$Creator CREATOR
com.google.gson.internal.bind.TypeAdapters$27: java.lang.String HOUR_OF_DAY
io.sentry.android.core.ANRWatchDog: io.sentry.ILogger logger
io.sentry.protocol.SentryStackFrame: java.lang.String instructionAddr
io.flutter.plugin.common.StandardMessageCodec: io.flutter.plugin.common.StandardMessageCodec INSTANCE
io.sentry.HostnameCache$HostnameCacheThreadFactory: int cnt
kotlin.text.Charsets: kotlin.text.Charsets INSTANCE
androidx.lifecycle.ProcessLifecycleOwner$2: androidx.lifecycle.ProcessLifecycleOwner this$0
io.sentry.SentryExecutorService: java.util.concurrent.ExecutorService executorService
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.String previousLabel
io.flutter.view.VsyncWaiter$DisplayListener: io.flutter.view.VsyncWaiter this$0
androidx.window.embedding.SplitInfo: float splitRatio
kotlin.text.DelimitedRangesSequence$iterator$1: int nextState
com.google.android.gms.dynamite.zzb: java.lang.Thread zzb
io.flutter.plugin.editing.ListenableEditingState: java.util.ArrayList mListeners
com.google.android.gms.maps.GoogleMapOptions: java.lang.Boolean zzk
com.google.android.gms.maps.GoogleMap: com.google.android.gms.maps.internal.IGoogleMapDelegate zza
kotlinx.coroutines.internal.ExceptionsConstuctorKt$createConstructor$$inlined$safeCtor$1: java.lang.reflect.Constructor $constructor$inlined
com.google.android.gms.common.api.internal.zacg: android.os.IBinder zab
kotlinx.coroutines.scheduling.NonBlockingContext: kotlinx.coroutines.scheduling.NonBlockingContext INSTANCE
com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment: java.lang.ref.ReferenceQueue queueForValues
com.google.android.gms.common.api.UnsupportedApiCallException: com.google.android.gms.common.Feature zza
io.flutter.plugin.platform.SingleViewPresentation$AccessibilityDelegatingFrameLayout: io.flutter.plugin.platform.AccessibilityEventsDelegate accessibilityEventsDelegate
com.google.android.gms.common.api.internal.zace: long zac
androidx.core.os.LocaleListCompatWrapper: java.util.Locale[] mList
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1: java.lang.reflect.Field val$field
androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: android.app.Activity activity
androidx.fragment.app.BackStackState: java.lang.CharSequence mBreadCrumbTitleText
io.sentry.android.core.EnvelopeFileObserver$CachedEnvelopeHint: long flushTimeoutMillis
com.google.android.gms.maps.model.CustomCap: com.google.android.gms.maps.model.BitmapDescriptor bitmapDescriptor
io.sentry.TracesSampler: java.util.Random random
com.google.android.gms.common.api.internal.zace: com.google.android.gms.common.internal.MethodInvocation zaa
com.google.android.gms.common.GoogleApiAvailabilityLight: int GOOGLE_PLAY_SERVICES_VERSION_CODE
androidx.fragment.app.Fragment$AnimationInfo: java.lang.Object mExitTransition
io.sentry.android.core.NdkIntegration: java.lang.String SENTRY_NDK_CLASS_NAME
io.sentry.android.core.util.RootChecker: java.lang.String[] rootFiles
io.sentry.transport.AsyncHttpTransport: io.sentry.SentryOptions options
com.google.android.gms.signin.SignInOptions: java.lang.Long zaj
io.flutter.embedding.engine.systemchannels.RestorationChannel: io.flutter.plugin.common.MethodChannel channel
io.sentry.android.core.TempSensorBreadcrumbsIntegration: android.hardware.SensorManager sensorManager
androidx.window.R$styleable: int[] ActivityFilter
androidx.fragment.app.FragmentManagerViewModel: java.util.HashSet mRetainedFragments
io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler: io.flutter.plugin.common.EventChannel$StreamHandler handler
io.flutter.plugin.platform.PlatformViewFactory: io.flutter.plugin.common.MessageCodec createArgsCodec
kotlinx.coroutines.Job: kotlinx.coroutines.Job$Key Key
androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State[] $VALUES
androidx.core.R$id: int tag_transition_group
com.google.gson.Gson: com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory jsonAdapterFactory
com.google.android.gms.common.util.DefaultClock: com.google.android.gms.common.util.DefaultClock zza
com.google.android.gms.common.api.internal.zzd: java.util.Map zzb
com.tekartik.sqflite.SqflitePlugin$7: com.tekartik.sqflite.SqflitePlugin$BgResult val$bgResult
kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache: java.lang.reflect.Method getModuleMethod
io.sentry.transport.RateLimiter$DataCategory: io.sentry.transport.RateLimiter$DataCategory Attachment
io.flutter.plugin.platform.VirtualDisplayController$1: io.flutter.plugin.platform.VirtualDisplayController this$0
com.google.android.gms.common.api.internal.zzc: com.google.android.gms.common.api.internal.LifecycleCallback zza
io.sentry.SentryLevel: io.sentry.SentryLevel INFO
io.sentry.flutter.R$styleable: int GradientColor_android_centerColor
kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object _state
com.google.android.gms.common.api.internal.NonGmsServiceBrokerClient: java.lang.String zac
io.flutter.plugins.urllauncher.MethodCallHandlerImpl: io.flutter.plugins.urllauncher.UrlLauncher urlLauncher
androidx.fragment.app.Fragment: androidx.fragment.app.Fragment mParentFragment
com.tekartik.sqflite.SqflitePlugin$5: com.tekartik.sqflite.SqflitePlugin this$0
io.sentry.SentryEvent: io.sentry.SentryValues threads
io.sentry.flutter.R$drawable: int notification_bg_low_normal
io.flutter.view.AccessibilityBridge: android.view.View rootAccessibilityView
io.flutter.view.AccessibilityBridge$AccessibilityFeature: io.flutter.view.AccessibilityBridge$AccessibilityFeature INVERT_COLORS
io.sentry.SentryTraceHeader: java.lang.String SENTRY_TRACE_HEADER
io.sentry.protocol.SentryException: io.sentry.protocol.Mechanism mechanism
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration: boolean enableDeltaModel
androidx.activity.ComponentActivity$3: androidx.activity.ComponentActivity this$0
androidx.window.embedding.ExtensionEmbeddingBackend: androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl splitInfoEmbeddingCallback
com.google.android.gms.base.R$string: int common_google_play_services_install_title
com.google.android.gms.common.internal.BaseGmsClient: com.google.android.gms.common.internal.zzu zza
com.google.android.gms.common.internal.zav: android.os.Parcelable$Creator CREATOR
io.flutter.view.AccessibilityBridge: io.flutter.view.AccessibilityBridge$SemanticsNode lastInputFocusedSemanticsNode
io.sentry.Hub: io.sentry.protocol.SentryId lastEventId
androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback: androidx.window.sidecar.SidecarInterface$SidecarCallback callbackInterface
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics: int viewInsetRight
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView: float screenDensity
androidx.lifecycle.LiveData: int mVersion
androidx.collection.SimpleArrayMap: int mBaseCacheSize
androidx.core.app.NotificationCompat$Builder: boolean mSilent
io.sentry.flutter.R$id: int tag_on_apply_window_listener
com.google.android.gms.maps.model.LatLngBounds: android.os.Parcelable$Creator CREATOR
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: java.util.Set requestPermissionsResultListeners
io.flutter.embedding.engine.FlutterJNI: android.os.Looper mainLooper
com.google.gson.internal.$Gson$Types$WildcardTypeImpl: long serialVersionUID
com.google.android.gms.common.api.internal.zabs: com.google.android.gms.common.Feature zab
io.sentry.adapters.SentryLevelDeserializerAdapter: io.sentry.SentryOptions options
kotlin.jvm.internal.ClassReference: java.lang.Class jClass
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$12: io.sentry.android.core.SentryAndroidOptions $options
io.sentry.UncaughtExceptionHandlerIntegration: java.lang.Thread$UncaughtExceptionHandler defaultExceptionHandler
com.google.android.gms.base.R$string: int common_google_play_services_update_text
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineContentProviderPluginBinding contentProviderPluginBinding
androidx.collection.SparseArrayCompat: boolean mGarbage
io.sentry.Breadcrumb: java.util.Map data
com.google.android.gms.common.api.internal.zabm: com.google.android.gms.common.api.internal.zabq zaa
com.google.android.gms.common.internal.BaseGmsClient: int zzi
kotlinx.coroutines.NonDisposableHandle: kotlinx.coroutines.NonDisposableHandle INSTANCE
io.flutter.embedding.android.FlutterSplashView$1: io.flutter.embedding.android.FlutterSplashView this$0
kotlinx.coroutines.internal.LockFreeTaskQueueCore: long _state
com.google.android.gms.common.GooglePlayServicesUtilLight: boolean zzb
kotlinx.coroutines.scheduling.CoroutineScheduler: long idleWorkerKeepAliveNs
androidx.fragment.app.FragmentManagerImpl$1: androidx.fragment.app.FragmentManagerImpl this$0
kotlinx.coroutines.internal.LockFreeTaskQueueCore: int mask
com.google.android.gms.maps.model.MarkerOptions: float zzm
androidx.lifecycle.LifecycleRegistry$1: int[] $SwitchMap$androidx$lifecycle$Lifecycle$Event
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: java.util.Set activityResultListeners
io.flutter.embedding.engine.systemchannels.TextInputChannel: io.flutter.plugin.common.MethodChannel$MethodCallHandler parsingMethodHandler
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding: io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference hiddenLifecycleReference
androidx.fragment.app.FragmentTransition$FragmentContainerTransition: boolean firstOutIsPop
com.google.gson.internal.bind.TypeAdapters$33: java.lang.Class val$unboxed
com.google.common.hash.LittleEndianByteArray$UnsafeByteArray: com.google.common.hash.LittleEndianByteArray$UnsafeByteArray UNSAFE_BIG_ENDIAN
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory INTEGER_FACTORY
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: boolean isAttached
io.flutter.view.AccessibilityBridge: android.view.accessibility.AccessibilityManager$TouchExplorationStateChangeListener touchExplorationStateChangeListener
io.flutter.view.AccessibilityBridge: io.flutter.view.AccessibilityBridge$SemanticsNode accessibilityFocusedSemanticsNode
androidx.savedstate.SavedStateRegistry: boolean mRestored
io.sentry.exception.ExceptionMechanismException: java.lang.Throwable throwable
io.flutter.plugins.googlemaps.PolygonBuilder: com.google.android.gms.maps.model.PolygonOptions polygonOptions
io.flutter.plugins.googlemaps.GoogleMapBuilder: java.lang.Object initialPolylines
com.google.android.gms.dynamite.DynamiteModule: com.google.android.gms.dynamite.DynamiteModule$VersionPolicy PREFER_REMOTE_VERSION_NO_FORCE_STAGING
io.sentry.SentryOptions: io.sentry.ISentryExecutorService executorService
kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol POLL_FAILED
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory JSON_ELEMENT_FACTORY
io.sentry.CircularFifoQueue$1: int lastReturnedIndex
com.google.gson.internal.bind.TreeTypeAdapter$SingleTypeFactory: com.google.gson.JsonSerializer serializer
io.sentry.GsonSerializer: io.sentry.SentryOptions options
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineBroadcastReceiverPluginBinding broadcastReceiverPluginBinding
com.google.android.gms.common.GooglePlayServicesUtilLight: java.util.concurrent.atomic.AtomicBoolean sCanceledAvailabilityNotification
io.sentry.Scope: io.sentry.protocol.Contexts contexts
androidx.lifecycle.MethodCallsLogger: java.util.Map mCalledMethods
com.google.android.gms.common.api.internal.NonGmsServiceBrokerClient: boolean zaj
com.google.android.gms.common.internal.zzj: com.google.android.gms.common.internal.ConnectionTelemetryConfiguration zzd
com.google.android.gms.common.internal.GetServiceRequest: int zzl
androidx.fragment.app.FragmentState: boolean mDetached
io.flutter.plugin.editing.TextInputPlugin$1: io.flutter.plugin.editing.TextInputPlugin this$0
androidx.core.app.NotificationCompat$Builder: java.util.ArrayList mPeople
kotlinx.coroutines.scheduling.WorkQueue: java.util.concurrent.atomic.AtomicReferenceArray buffer
kotlin.reflect.KVisibility: kotlin.reflect.KVisibility PRIVATE
io.sentry.SpanStatus: io.sentry.SpanStatus UNKNOWN
com.google.common.reflect.TypeToken$4: com.google.common.reflect.TypeToken this$0
com.google.gson.internal.LinkedTreeMap: com.google.gson.internal.LinkedTreeMap$KeySet keySet
kotlinx.coroutines.flow.internal.SafeCollector: kotlin.coroutines.CoroutineContext lastEmissionContext
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay TOP_OVERLAYS
io.flutter.view.AccessibilityBridge$SemanticsNode: float right
com.tekartik.sqflite.SqflitePlugin$1: com.tekartik.sqflite.SqflitePlugin$BgResult val$bgResult
kotlinx.coroutines.scheduling.NanoTimeSource: kotlinx.coroutines.scheduling.NanoTimeSource INSTANCE
com.google.android.gms.maps.internal.zzca: com.google.android.gms.maps.internal.zzf zzc
io.flutter.plugins.googlemaps.GoogleMapController: boolean zoomControlsEnabled
io.sentry.SentryEnvelopeItem$CachedItem: java.util.concurrent.Callable dataFactory
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$9: io.sentry.android.core.SentryAndroidOptions $options
io.sentry.protocol.SentryStackFrame: java.lang.String platform
kotlinx.coroutines.JobSupport$addLastAtomic$$inlined$addLastIf$1: java.lang.Object $expect$inlined
dev.fluttercommunity.plus.packageinfo.PackageInfoPlugin: io.flutter.plugin.common.MethodChannel methodChannel
io.sentry.protocol.Device: java.lang.String[] archs
io.flutter.embedding.android.FlutterView: io.flutter.embedding.engine.renderer.FlutterUiDisplayListener flutterUiDisplayListener
androidx.fragment.app.DialogFragment: boolean mShownByMe
androidx.window.layout.SidecarWindowBackend: java.util.concurrent.locks.ReentrantLock globalLock
io.sentry.android.core.ApplicationNotResponding: long serialVersionUID
com.google.android.gms.common.api.internal.GoogleApiManager: java.util.Map zap
com.google.android.gms.tasks.zzj: java.lang.Object zzb
io.sentry.Hub: io.sentry.SentryOptions options
io.sentry.SentryOptions: java.lang.Boolean enableDeduplication
io.sentry.flutter.R$style: int Widget_Compat_NotificationActionContainer
io.sentry.protocol.SentryException: io.sentry.protocol.SentryStackTrace stacktrace
io.sentry.UncaughtExceptionHandlerIntegration: io.sentry.IHub hub
io.sentry.SpanStatus: io.sentry.SpanStatus NOT_FOUND
io.sentry.DirectoryProcessor$SendCachedEnvelopeHint: long flushTimeoutMillis
androidx.core.R$id: int accessibility_custom_action_11
io.sentry.protocol.Request: java.util.Map other
com.google.android.gms.common.api.internal.NonGmsServiceBrokerClient: java.lang.String zab
androidx.core.app.NotificationCompat$Builder: java.lang.CharSequence[] mRemoteInputHistory
io.sentry.SentryOptions: java.lang.String serverName
com.tekartik.sqflite.SqflitePlugin$6: java.lang.Boolean val$readOnly
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType: io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType CLIP_RECT
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag IS_TEXT_FIELD
com.google.gson.stream.JsonReader: int PEEKED_TRUE
com.google.android.gms.maps.model.MarkerOptions: float zze
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter NUMBER
com.google.android.gms.common.api.internal.BasePendingResult: com.google.android.gms.common.api.Result zaj
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag IS_HEADER
com.google.gson.internal.GsonBuildConfig: java.lang.String VERSION
com.google.gson.stream.JsonReader: int PEEKED_NUMBER
com.google.android.gms.common.internal.zzq: com.google.android.gms.common.internal.zzr zza
kotlinx.coroutines.internal.AtomicOp: java.lang.Object _consensus
com.google.gson.GsonBuilder: com.google.gson.FieldNamingStrategy fieldNamingPolicy
io.sentry.protocol.SentryStackTrace: java.util.Map unknown
androidx.core.app.NotificationCompat$Builder: android.graphics.drawable.Icon mSmallIcon
com.google.android.gms.common.internal.ClientSettings: com.google.android.gms.signin.SignInOptions zai
androidx.window.layout.SidecarCompat: androidx.window.sidecar.SidecarInterface sidecar
io.sentry.Scope: java.lang.Object sessionLock
kotlinx.coroutines.channels.ArrayChannel: int size
io.flutter.embedding.engine.systemchannels.DeferredComponentChannel: io.flutter.plugin.common.MethodChannel$MethodCallHandler parsingMethodHandler
com.google.android.gms.auth.api.signin.GoogleSignInAccount: java.lang.String zak
androidx.window.layout.WindowInfoTracker$Companion: androidx.window.layout.WindowInfoTrackerDecorator decorator
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory BOOLEAN_FACTORY
io.sentry.protocol.DebugImage: java.lang.String type
io.sentry.SentryClient: boolean enabled
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: io.flutter.embedding.engine.FlutterEngine flutterEngine
kotlinx.coroutines.CompletedWithCancellation: kotlin.jvm.functions.Function1 onCancellation
kotlinx.coroutines.JobSupport$Finishing: int _isCompleting
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter JSON_ELEMENT
io.flutter.embedding.engine.systemchannels.TextInputChannel$1: io.flutter.embedding.engine.systemchannels.TextInputChannel this$0
com.google.gson.internal.LinkedTreeMap$Node: com.google.gson.internal.LinkedTreeMap$Node next
io.sentry.exception.InvalidSentryTraceHeaderException: java.lang.String sentryTraceHeader
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay[] $VALUES
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType: io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType[] $VALUES
androidx.core.R$id: int accessibility_custom_action_30
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter BYTE
io.flutter.plugin.editing.TextEditingDelta: int newComposingStart
kotlinx.coroutines.internal.ThreadContextKt: kotlin.jvm.functions.Function2 updateState
io.flutter.embedding.engine.loader.FlutterLoader: io.flutter.embedding.engine.loader.FlutterApplicationInfo flutterApplicationInfo
androidx.fragment.app.FragmentManagerViewModel: boolean mStateAutomaticallySaved
com.google.common.util.concurrent.ThreadFactoryBuilder: java.lang.Integer priority
com.google.android.gms.common.internal.BaseGmsClient: android.os.Handler zzb
androidx.fragment.app.Fragment$AnimationInfo: boolean mIsHideReplaced
io.flutter.embedding.android.KeyboardManager: android.view.View view
androidx.core.view.OneShotPreDrawListener: java.lang.Runnable mRunnable
io.sentry.protocol.SentryException: java.lang.String module
kotlin.Pair: java.lang.Object second
io.flutter.embedding.android.FlutterTextureView$1: io.flutter.embedding.android.FlutterTextureView this$0
androidx.window.R$styleable: int[] SplitPairRule
io.sentry.config.ClasspathPropertiesLoader: java.lang.String fileName
io.flutter.plugins.googlemaps.GoogleMapController: boolean disposed
io.flutter.embedding.engine.dart.DartMessenger: java.util.Map bufferedMessages
com.google.android.gms.tasks.zzw: boolean zzc
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization SENTENCES
com.google.android.gms.common.SupportErrorDialogFragment: android.content.DialogInterface$OnCancelListener zab
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode EDGE_TO_EDGE
androidx.lifecycle.Lifecycle: java.util.concurrent.atomic.AtomicReference mInternalScopeRef
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: android.app.Activity activity
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: java.util.Map consumerToJobMap
io.sentry.protocol.App: java.lang.String deviceAppHash
io.sentry.flutter.R$styleable: int SplitPlaceholderRule_splitLayoutDirection
io.sentry.Hub: boolean isEnabled
kotlinx.coroutines.android.HandlerContext: kotlinx.coroutines.android.HandlerContext _immediate
androidx.window.embedding.SplitPlaceholderRule: android.content.Intent placeholderIntent
kotlinx.coroutines.flow.internal.DownstreamExceptionElement: kotlinx.coroutines.flow.internal.DownstreamExceptionElement$Key Key
com.google.android.gms.common.api.internal.zact: com.google.android.gms.common.api.internal.zacs zah
androidx.core.app.NotificationCompat$Builder: android.content.Context mContext
io.flutter.view.AccessibilityBridge$SemanticsNode: float scrollExtentMax
io.flutter.embedding.android.KeyChannelResponder: int combiningCharacter
kotlinx.coroutines.Dispatchers: kotlinx.coroutines.CoroutineDispatcher Default
androidx.fragment.app.FragmentTransition$2: androidx.fragment.app.FragmentTransitionImpl val$impl
io.flutter.embedding.android.KeyboardManager$PerEventCallbackBuilder$Callback: boolean isCalled
io.sentry.flutter.R$styleable: int FontFamilyFont_fontStyle
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation: io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation[] $VALUES
com.google.android.gms.common.internal.zav: android.os.IBinder zab
com.google.android.gms.maps.model.PatternItem: int zzb
io.sentry.Scope: java.lang.Object transactionLock
com.google.common.hash.LittleEndianByteArray$UnsafeByteArray: sun.misc.Unsafe theUnsafe
com.google.common.collect.MapMakerInternalMap$WriteThroughEntry: java.lang.Object value
io.sentry.SentryOptions: java.lang.String dist
com.google.gson.internal.ConstructorConstructor: com.google.gson.internal.reflect.ReflectionAccessor accessor
io.sentry.android.core.NdkIntegration: java.lang.Class sentryNdkClass
io.sentry.HostnameCache: java.util.concurrent.Callable getLocalhost
io.sentry.protocol.SentryThread: java.util.Map unknown
io.flutter.embedding.android.FlutterTextureView: boolean isPaused
kotlinx.coroutines.JobSupportKt: kotlinx.coroutines.internal.Symbol COMPLETING_RETRY
androidx.fragment.app.Fragment: android.view.ViewGroup mContainer
kotlinx.coroutines.channels.BufferOverflow: kotlinx.coroutines.channels.BufferOverflow DROP_OLDEST
kotlinx.coroutines.YieldContext: kotlinx.coroutines.YieldContext$Key Key
androidx.fragment.app.FragmentManagerImpl: java.util.ArrayList mBackStackChangeListeners
androidx.fragment.app.FragmentTransitionImpl$1: java.util.ArrayList val$sharedElementsOut
io.sentry.protocol.Gpu: java.lang.Integer vendorId
com.google.common.util.concurrent.AbstractFuture$Failure: java.lang.Throwable exception
io.sentry.protocol.SentryStackFrame: java.lang.String filename
com.google.android.gms.dynamite.DynamiteModule$VersionPolicy$SelectionResult: int selection
com.google.common.collect.Maps$EntryFunction: com.google.common.collect.Maps$EntryFunction KEY
com.google.android.gms.common.internal.ClientSettings: android.view.View zaf
com.google.android.gms.common.internal.zal: com.google.android.gms.common.GoogleApiAvailabilityLight zab
io.flutter.plugin.common.FlutterException: java.lang.Object details
androidx.fragment.app.FragmentManagerImpl$4: androidx.fragment.app.Fragment val$fragment
io.flutter.plugins.sharedpreferences.MethodCallHandlerImpl: java.util.concurrent.ExecutorService executor
com.google.gson.stream.JsonReader: int PEEKED_SINGLE_QUOTED_NAME
com.google.android.gms.common.internal.GetServiceRequest: java.lang.String zzn
com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node prev
io.flutter.plugins.googlemaps.GoogleMapBuilder: boolean trackCameraPosition
com.google.gson.internal.bind.MapTypeAdapterFactory: boolean complexMapKeySerialization
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle: java.lang.Integer systemNavigationBarColor
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag IS_LINK
io.flutter.embedding.android.FlutterTextureView: android.view.TextureView$SurfaceTextureListener surfaceTextureListener
io.flutter.view.AccessibilityViewEmbedder: java.lang.String TAG
io.sentry.SpanContext: io.sentry.protocol.SentryId traceId
kotlinx.coroutines.channels.BufferOverflow: kotlinx.coroutines.channels.BufferOverflow DROP_LATEST
io.sentry.RequestDetailsResolver: io.sentry.SentryOptions options
io.sentry.android.ndk.DebugImagesLoader: io.sentry.android.ndk.NativeModuleListLoader moduleListLoader
io.flutter.view.AccessibilityBridge: int FOCUSABLE_FLAGS
io.flutter.embedding.engine.systemchannels.AccessibilityChannel: io.flutter.plugin.common.BasicMessageChannel channel
androidx.activity.ComponentActivity: androidx.savedstate.SavedStateRegistryController mSavedStateRegistryController
com.google.gson.internal.JsonReaderInternalAccess: com.google.gson.internal.JsonReaderInternalAccess INSTANCE
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField: boolean serialized
io.sentry.SentryOptions: io.sentry.SentryLevel DEFAULT_DIAGNOSTIC_LEVEL
io.sentry.Attachment: boolean addToTransactions
androidx.lifecycle.ReflectiveGenericLifecycleObserver: androidx.lifecycle.ClassesInfoCache$CallbackInfo mInfo
io.flutter.plugin.editing.ListenableEditingState: int mBatchEditNestDepth
io.sentry.TracesSampler: io.sentry.SentryOptions options
com.google.android.gms.common.util.DeviceProperties: java.lang.Boolean zzi
androidx.core.R$id: int accessibility_custom_action_18
io.flutter.plugin.editing.TextEditingDelta: int deltaStart
kotlinx.coroutines.InvokeOnCancelling: java.util.concurrent.atomic.AtomicIntegerFieldUpdater _invoked$FU
io.flutter.plugin.editing.InputConnectionAdaptor: int mClient
io.flutter.view.AccessibilityBridge$2: io.flutter.view.AccessibilityBridge this$0
com.google.gson.stream.JsonReader: int NUMBER_CHAR_EXP_DIGIT
io.flutter.plugin.platform.PlatformViewsController: android.util.SparseArray overlayLayerViews
kotlinx.coroutines.internal.Removed: kotlinx.coroutines.internal.LockFreeLinkedListNode ref
kotlin.text.DelimitedRangesSequence$iterator$1: kotlin.text.DelimitedRangesSequence this$0
com.google.gson.stream.JsonWriter: java.io.Writer out
kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt$createCoroutineUnintercepted$$inlined$createCoroutineFromSuspendFunction$IntrinsicsKt__IntrinsicsJvmKt$1: int label
io.sentry.Session: java.lang.Object sessionLock
com.google.android.gms.common.internal.zza: com.google.android.gms.common.internal.BaseGmsClient zzc
com.google.android.gms.common.api.internal.zabq: java.util.List zak
com.google.gson.GsonBuilder: int dateStyle
io.sentry.protocol.DebugImage: java.lang.String arch
com.google.gson.GsonBuilder: com.google.gson.LongSerializationPolicy longSerializationPolicy
com.google.android.gms.common.internal.service.zam: com.google.android.gms.common.internal.TelemetryData zaa
androidx.window.layout.EmptyDecorator: androidx.window.layout.EmptyDecorator INSTANCE
com.google.android.gms.common.api.internal.BasePendingResult: com.google.android.gms.common.api.internal.zas mResultGuardian
com.google.common.util.concurrent.Futures$CallbackListener: java.util.concurrent.Future future
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeature: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType type
io.sentry.protocol.Device: java.lang.Float screenDensity
com.google.gson.internal.bind.ObjectTypeAdapter: com.google.gson.Gson gson
com.google.android.gms.common.GoogleApiAvailability: java.lang.Object zaa
io.sentry.protocol.SdkVersion: java.lang.String version
io.sentry.flutter.R$styleable: int SplitPlaceholderRule_splitMinSmallestWidth
com.google.gson.internal.LinkedHashTreeMap$KeySet$1: com.google.gson.internal.LinkedHashTreeMap$KeySet this$1
androidx.window.R$attr: int primaryActivityName
io.sentry.Session: java.lang.Long sequence
androidx.lifecycle.ClassesInfoCache: androidx.lifecycle.ClassesInfoCache sInstance
io.sentry.flutter.R$styleable: int ColorStateListItem_android_color
io.flutter.plugin.platform.SingleViewPresentation$ImmContext: android.view.inputmethod.InputMethodManager inputMethodManager
com.google.android.gms.common.api.internal.zaag: java.lang.String zaa
io.flutter.embedding.engine.loader.FlutterApplicationInfo: java.lang.String flutterAssetsDir
androidx.collection.SimpleArrayMap: java.lang.Object[] mArray
kotlinx.coroutines.internal.DispatchedContinuationKt: kotlinx.coroutines.internal.Symbol UNDEFINED
kotlinx.coroutines.scheduling.TaskImpl: java.lang.Runnable block
androidx.core.app.NotificationCompat$Builder: int mGroupAlertBehavior
io.flutter.plugin.editing.TextInputPlugin: io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback imeSyncCallback
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$16: io.sentry.android.core.SentryAndroidOptions $options
io.sentry.util.Pair: java.lang.Object second
com.google.gson.internal.bind.JsonTreeWriter: java.util.List stack
io.flutter.plugins.googlemaps.GoogleMapController: boolean trafficEnabled
com.google.gson.stream.JsonReader: int NUMBER_CHAR_EXP_SIGN
io.sentry.OutboxSender: io.sentry.ILogger logger
io.sentry.android.core.AndroidTransportGate$1: int[] $SwitchMap$io$sentry$android$core$util$ConnectivityChecker$Status
kotlinx.coroutines.internal.DispatchedContinuation: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _reusableCancellableContinuation$FU
io.flutter.view.AccessibilityBridge$SemanticsNode: int platformViewId
io.flutter.plugins.pathprovider.PathProviderPlugin$PathProviderBackgroundThread: io.flutter.plugins.pathprovider.PathProviderPlugin this$0
io.flutter.plugins.googlemaps.GoogleMapController: java.util.List initialCircles
io.sentry.SentryItemType: java.lang.String itemType
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory ATOMIC_INTEGER_ARRAY_FACTORY
com.google.android.gms.common.api.internal.BasePendingResult: boolean zan
io.sentry.android.ndk.NdkScopeObserver: io.sentry.android.ndk.INativeScope nativeScope
com.google.android.gms.common.api.Status: android.app.PendingIntent zze
com.google.common.collect.MapMaker: com.google.common.collect.MapMakerInternalMap$Strength keyStrength
com.google.common.collect.AbstractIndexedListIterator: int size
com.google.gson.internal.bind.util.ISO8601Utils: java.lang.String UTC_ID
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: android.view.ViewTreeObserver$OnPreDrawListener activePreDrawListener
androidx.window.layout.HardwareFoldingFeature$Type: java.lang.String description
androidx.fragment.app.FragmentState: int mFragmentId
io.sentry.Stack$StackItem: io.sentry.ISentryClient client
io.flutter.plugins.googlemaps.GoogleMapController: io.flutter.plugins.googlemaps.PolylinesController polylinesController
androidx.lifecycle.LifecycleRegistry: java.util.ArrayList mParentStates
com.tekartik.sqflite.SqflitePlugin$4: com.tekartik.sqflite.SqflitePlugin this$0
com.google.android.gms.maps.model.CircleOptions: int zze
androidx.window.layout.SidecarCompat$FirstAttachAdapter: java.lang.ref.WeakReference activityWeakReference
com.google.gson.Gson: boolean DEFAULT_LENIENT
com.google.gson.internal.Excluder: boolean serializeInnerClasses
io.sentry.cache.EnvelopeCache: java.lang.String CRASH_MARKER_FILE
io.flutter.embedding.engine.systemchannels.RestorationChannel: io.flutter.plugin.common.MethodChannel$Result pendingFrameworkRestorationChannelRequest
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.String tooltip
androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.TaskExecutor mDelegate
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewTouch: float yPrecision
com.google.android.gms.common.api.internal.zzc: com.google.android.gms.common.api.internal.zzd zzc
io.sentry.android.core.ANRWatchDog: java.util.concurrent.atomic.AtomicBoolean reported
io.flutter.view.FlutterCallbackInformation: java.lang.String callbackLibraryPath
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.LifecycleChannel lifecycleChannel
com.google.android.gms.maps.model.PatternItem: java.lang.String zza
com.google.gson.stream.JsonWriter: boolean serializeNulls
com.google.android.gms.common.api.internal.zag: com.google.android.gms.common.api.internal.StatusExceptionMapper zad
kotlin.coroutines.ContinuationInterceptor: kotlin.coroutines.ContinuationInterceptor$Key Key
androidx.arch.core.internal.SafeIterableMap: androidx.arch.core.internal.SafeIterableMap$Entry mEnd
io.flutter.plugins.googlemaps.TileProviderController: io.flutter.plugin.common.MethodChannel methodChannel
io.sentry.config.FilesystemPropertiesLoader: java.lang.String filePath
androidx.window.layout.FoldingFeature$State: androidx.window.layout.FoldingFeature$State HALF_OPENED
io.flutter.embedding.engine.FlutterJNI: java.lang.String TAG
com.google.android.gms.common.internal.zzj: android.os.Bundle zza
io.sentry.protocol.SentryStackFrame: java.lang.Boolean _native
io.flutter.view.AccessibilityBridge$SemanticsNode: int currentValueLength
androidx.core.app.NotificationCompat$Builder: androidx.core.app.NotificationCompat$BubbleMetadata mBubbleMetadata
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode IMMERSIVE_STICKY
androidx.fragment.app.Fragment: boolean mHidden
com.google.common.base.Joiner$1: com.google.common.base.Joiner this$0
com.google.gson.internal.Streams$AppendableWriter: com.google.gson.internal.Streams$AppendableWriter$CurrentWrite currentWrite
io.flutter.embedding.android.FlutterTextureView: android.view.Surface renderSurface
io.flutter.embedding.android.MotionEventTracker: android.util.LongSparseArray eventById
com.google.common.hash.HashCode: char[] hexDigits
io.sentry.transport.AsyncHttpTransport$EnvelopeSender: java.lang.Object hint
com.google.gson.stream.JsonReader: int pos
com.google.android.gms.common.internal.RootTelemetryConfigManager: com.google.android.gms.common.internal.RootTelemetryConfigManager zza
kotlinx.coroutines.internal.ScopeCoroutine: kotlin.coroutines.Continuation uCont
com.google.android.gms.common.api.internal.zact: android.os.Handler zac
com.google.android.gms.common.api.internal.GoogleApiManager: long zae
io.sentry.protocol.SdkVersion: java.util.List integrations
com.google.android.gms.common.api.internal.BasePendingResult: com.google.android.gms.common.api.Status zak
androidx.fragment.app.FragmentManagerImpl$EndViewTransitionAnimation: boolean mAnimating
io.flutter.plugin.editing.ListenableEditingState: int mChangeNotificationDepth
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory BIT_SET_FACTORY
io.sentry.SentryEnvelopeItemHeader: io.sentry.SentryItemType type
com.google.gson.Gson: boolean serializeNulls
androidx.fragment.app.Fragment$AnimationInfo: java.lang.Object mSharedElementReturnTransition
com.google.android.gms.maps.model.Tile: byte[] data
androidx.window.R$styleable: int SplitPlaceholderRule_placeholderActivityName
io.sentry.transport.ProxyAuthenticator: java.lang.String password
com.google.android.gms.common.api.Scope: android.os.Parcelable$Creator CREATOR
io.sentry.android.core.ApplicationNotResponding: java.lang.Thread thread
com.google.android.gms.signin.zad: com.google.android.gms.common.api.Api$ClientKey zaa
androidx.fragment.app.FragmentTransitionImpl$1: java.util.ArrayList val$inNames
com.google.android.gms.dynamic.zaf: com.google.android.gms.dynamic.DeferredLifecycleHelper zaa
io.sentry.android.core.util.ConnectivityChecker$Status: io.sentry.android.core.util.ConnectivityChecker$Status NOT_CONNECTED
io.sentry.SentryOptions: io.sentry.protocol.SdkVersion sdkVersion
io.sentry.cache.EnvelopeCache: java.util.Map fileNameMap
kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: int maxPoolSize
kotlinx.coroutines.internal.FastServiceLoaderKt: boolean ANDROID_DETECTED
com.google.gson.internal.LinkedTreeMap: com.google.gson.internal.LinkedTreeMap$EntrySet entrySet
androidx.loader.app.LoaderManagerImpl: boolean DEBUG
io.sentry.protocol.SentryThread: java.lang.String name
kotlinx.coroutines.JobSupportKt: kotlinx.coroutines.internal.Symbol SEALED
io.flutter.plugin.platform.PlatformViewsController: java.util.HashMap contextToPlatformView
io.sentry.flutter.R$color: int notification_action_color_filter
io.sentry.flutter.R$attr: int alpha
kotlinx.coroutines.internal.ExceptionsConstuctorKt: int throwableFields
com.google.android.gms.tasks.zzi: com.google.android.gms.tasks.Task zza
io.sentry.protocol.SentrySpan: java.util.Map tags
kotlinx.coroutines.flow.internal.NoOpContinuation: kotlinx.coroutines.flow.internal.NoOpContinuation INSTANCE
androidx.activity.OnBackPressedDispatcher$OnBackPressedCancellable: androidx.activity.OnBackPressedDispatcher this$0
com.google.android.gms.common.api.internal.BasePendingResult: com.google.android.gms.common.api.ResultCallback zah
androidx.savedstate.SavedStateRegistry: boolean mAllowingSavingState
io.sentry.protocol.Device: io.sentry.protocol.Device$DeviceOrientation orientation
androidx.fragment.app.FragmentTransaction: boolean mAddToBackStack
io.sentry.SentryItemType: io.sentry.SentryItemType Transaction
kotlinx.coroutines.EventLoopImplBase: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _delayed$FU
com.google.android.gms.maps.model.PolygonOptions: boolean zzi
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.renderer.FlutterRenderer renderer
kotlinx.coroutines.scheduling.WorkQueue: java.util.concurrent.atomic.AtomicReferenceFieldUpdater lastScheduledTask$FU
com.google.gson.internal.LinkedTreeMap$Node: com.google.gson.internal.LinkedTreeMap$Node prev
io.sentry.flutter.R$attr: int splitLayoutDirection
com.google.android.gms.common.api.internal.zach: com.google.android.gms.common.api.GoogleApi zac
androidx.fragment.app.FragmentManagerImpl: java.util.ArrayList mPendingActions
com.google.android.gms.common.api.internal.NonGmsServiceBrokerClient: com.google.android.gms.common.api.internal.ConnectionCallbacks zaf
io.flutter.plugins.googlemaps.GoogleMapController: io.flutter.plugin.common.MethodChannel$Result mapReadyResult
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: long terminationDeadline
androidx.collection.ArraySet: java.lang.Object[] OBJECT
io.flutter.embedding.engine.systemchannels.SystemChannel: io.flutter.plugin.common.BasicMessageChannel channel
androidx.lifecycle.FullLifecycleObserverAdapter: androidx.lifecycle.FullLifecycleObserver mFullLifecycleObserver
com.google.gson.internal.Excluder$1: com.google.gson.internal.Excluder this$0
io.sentry.Sentry: boolean globalHubMode
com.google.gson.internal.bind.MapTypeAdapterFactory: com.google.gson.internal.ConstructorConstructor constructorConstructor
androidx.core.app.NotificationCompat$Builder: boolean mUseChronometer
com.google.android.gms.maps.zzq: com.google.android.gms.maps.GoogleMap$SnapshotReadyCallback zza
io.sentry.protocol.SentryStackFrame: java.lang.String contextLine
com.google.android.gms.common.api.internal.zabq: int zah
io.flutter.embedding.engine.systemchannels.NavigationChannel: io.flutter.plugin.common.MethodChannel$MethodCallHandler defaultHandler
com.google.android.gms.common.api.internal.zacq: com.google.android.gms.common.api.internal.zact zaa
com.google.android.gms.maps.model.MarkerOptions: boolean zzi
kotlin.Unit: kotlin.Unit INSTANCE
io.sentry.android.core.BuildConfig: java.lang.String LIBRARY_PACKAGE_NAME
io.flutter.plugin.platform.PlatformViewsController: io.flutter.plugin.platform.AccessibilityEventsDelegate accessibilityEventsDelegate
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureFinalizerRunnable: long id
com.google.common.collect.MapMakerInternalMap$WeakValueReferenceImpl: com.google.common.collect.MapMakerInternalMap$InternalEntry entry
androidx.window.layout.SidecarCompat: java.util.Map windowListenerRegisteredContexts
com.google.android.gms.signin.internal.zag: java.util.List zaa
io.sentry.android.core.SentryAndroidOptions: long anrTimeoutIntervalMillis
io.flutter.embedding.android.FlutterSplashView: io.flutter.embedding.android.FlutterView flutterView
androidx.fragment.app.FragmentManagerImpl$5: androidx.fragment.app.Fragment val$fragment
com.google.gson.stream.JsonReader: int PEEKED_END_ARRAY
com.google.common.collect.MapMakerInternalMap$Strength: com.google.common.collect.MapMakerInternalMap$Strength[] $VALUES
com.google.android.gms.common.api.internal.NonGmsServiceBrokerClient: java.lang.String zaa
io.flutter.view.AccessibilityBridge$SemanticsNode: float left
com.google.common.collect.MapMakerInternalMap$HashIterator: com.google.common.collect.MapMakerInternalMap$WriteThroughEntry lastReturned
io.flutter.embedding.android.FlutterView: java.util.Set flutterEngineAttachmentListeners
kotlinx.coroutines.flow.internal.SafeCollector: kotlin.coroutines.Continuation completion
io.flutter.plugin.common.MethodChannel: io.flutter.plugin.common.BinaryMessenger$TaskQueue taskQueue
com.google.android.gms.tasks.zzw: java.lang.Exception zzf
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$10: io.sentry.android.core.SentryAndroidOptions $options
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType: java.lang.String encodedName
com.google.android.gms.common.api.GoogleApi$Settings$Builder: com.google.android.gms.common.api.internal.StatusExceptionMapper zaa
io.sentry.SentryEvent: java.lang.String logger
com.google.android.gms.maps.model.Polyline: com.google.android.gms.internal.maps.zzad zza
io.sentry.protocol.Device: java.lang.Integer screenDpi
com.google.common.collect.MapMakerInternalMap$EntryIterator: com.google.common.collect.MapMakerInternalMap this$0
io.sentry.flutter.R$styleable: int GradientColor_android_endColor
io.sentry.SentryEnvelopeHeader: io.sentry.protocol.SentryId eventId
com.tekartik.sqflite.SqflitePlugin$BgResult: io.flutter.plugin.common.MethodChannel$Result result
io.flutter.view.AccessibilityBridge$SemanticsNode: java.util.List childrenInTraversalOrder
io.sentry.SentryOptions: int maxQueueSize
com.google.android.gms.common.api.GoogleApi: com.google.android.gms.common.api.GoogleApiClient zai
io.sentry.adapters.OrientationDeserializerAdapter: io.sentry.SentryOptions options
io.sentry.flutter.R$id: int accessibility_custom_action_7
com.google.gson.Gson: java.lang.ThreadLocal calls
androidx.core.graphics.drawable.IconCompat: java.lang.Object mObj1
io.sentry.flutter.R$layout: int notification_template_part_time
io.flutter.plugin.common.BasicMessageChannel: io.flutter.plugin.common.BinaryMessenger$TaskQueue taskQueue
io.sentry.android.core.ManifestMetadataReader: java.lang.String BREADCRUMBS_APP_LIFECYCLE_ENABLE
androidx.window.core.Version: int major
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay: java.lang.String encodedName
io.sentry.protocol.Mechanism: java.lang.Boolean handled
io.sentry.flutter.R$dimen: int compat_control_corner_material
io.flutter.view.AccessibilityBridge$AccessibilityFeature: io.flutter.view.AccessibilityBridge$AccessibilityFeature DISABLE_ANIMATIONS
androidx.lifecycle.ClassesInfoCache$MethodReference: java.lang.reflect.Method mMethod
com.google.gson.Gson: boolean prettyPrinting
io.flutter.plugins.urllauncher.UrlLauncherPlugin: io.flutter.plugins.urllauncher.UrlLauncher urlLauncher
androidx.fragment.app.FragmentTransition$3: androidx.fragment.app.Fragment val$inFragment
io.sentry.protocol.Device: java.lang.String model
androidx.fragment.app.FragmentState: java.lang.String mTag
io.sentry.SentryOptions$Proxy: java.lang.String user
androidx.arch.core.internal.SafeIterableMap$Entry: androidx.arch.core.internal.SafeIterableMap$Entry mPrevious
io.flutter.plugins.googlemaps.GoogleMapBuilder: java.lang.Object initialMarkers
io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding: io.flutter.plugin.common.BinaryMessenger binaryMessenger
io.sentry.adapters.ContextsDeserializerAdapter: io.sentry.SentryOptions options
androidx.fragment.app.FragmentTransaction: int mPopExitAnim
com.tekartik.sqflite.SqflitePlugin$1: io.flutter.plugin.common.MethodCall val$call
io.flutter.view.AccessibilityBridge$SemanticsNode: java.util.List hintAttributes
io.sentry.SentryOptions: java.lang.String environment
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action LONG_PRESS
com.google.android.gms.maps.model.CameraPosition: com.google.android.gms.maps.model.LatLng target
io.flutter.plugins.googlemaps.MarkerController: boolean consumeTapEvents
io.sentry.exception.SentryEnvelopeException: long serialVersionUID
kotlinx.coroutines.scheduling.CoroutineScheduler: int _isTerminated
io.sentry.android.core.PhoneStateBreadcrumbsIntegration: io.sentry.android.core.PhoneStateBreadcrumbsIntegration$PhoneStateChangeListener listener
com.google.android.gms.common.api.internal.zap: boolean zaa
io.sentry.flutter.R$id: int accessibility_action_clickable_span
androidx.core.app.NotificationCompat$Builder: java.lang.CharSequence mContentText
androidx.fragment.app.FragmentManagerImpl$StartEnterTransitionListener: int mNumPostponed
io.sentry.android.core.EnvelopeFileObserver$CachedEnvelopeHint: java.util.concurrent.CountDownLatch latch
androidx.window.core.Version: java.lang.String description
io.sentry.SpanStatus: int maxHttpStatusCode
io.sentry.protocol.Device: java.lang.Long freeMemory
io.sentry.SentryOptions: long maxAttachmentSize
io.flutter.plugin.common.EventChannel: io.flutter.plugin.common.MethodCodec codec
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$15: io.sentry.android.core.SentryAndroidOptions $options
androidx.window.embedding.SplitPairRule: boolean clearTop
io.sentry.android.core.LifecycleWatcher: io.sentry.transport.ICurrentDateProvider currentDateProvider
com.google.android.gms.common.internal.zzr: android.os.Handler zzd
androidx.fragment.app.FragmentManagerViewModel: androidx.lifecycle.ViewModelProvider$Factory FACTORY
io.sentry.flutter.R$attr: int fontProviderQuery
androidx.core.content.ContextCompat: java.lang.Object sLock
io.flutter.plugin.editing.TextInputPlugin: boolean isInputConnectionLocked
io.flutter.plugin.editing.InputConnectionAdaptor: android.view.inputmethod.ExtractedText mExtractedText
androidx.core.app.Person: boolean mIsImportant
io.sentry.protocol.SentryId: java.util.UUID uuid
com.google.gson.GsonBuilder: boolean lenient
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory UUID_FACTORY
androidx.fragment.app.Fragment$AnimationInfo: java.lang.Object mReturnTransition
androidx.core.app.NotificationCompat$Builder: android.app.Notification mNotification
com.google.gson.internal.UnsafeAllocator$1: java.lang.Object val$unsafe
com.google.gson.internal.bind.TypeAdapters$27: java.lang.String YEAR
androidx.fragment.app.FragmentTransaction: boolean mReorderingAllowed
io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup: android.graphics.Rect viewBounds
io.sentry.RequestDetailsResolver: java.lang.String USER_AGENT
io.flutter.plugin.editing.ListenableEditingState$1: android.text.Editable val$self
io.flutter.view.AccessibilityBridge$StringAttributeType: io.flutter.view.AccessibilityBridge$StringAttributeType[] $VALUES
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: java.lang.reflect.Method getRecordSourceNodeId
com.google.android.gms.common.api.GoogleApi: com.google.android.gms.common.api.Api zad
io.sentry.OutboxSender: io.sentry.ISerializer serializer
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization WORDS
kotlinx.coroutines.channels.AbstractChannel$Itr: java.lang.Object result
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.AccessibilityChannel accessibilityChannel
com.google.android.gms.common.internal.service.zao: com.google.android.gms.common.api.Api zae
androidx.core.R$id: int accessibility_custom_action_31
com.google.android.gms.common.internal.BaseGmsClient: java.lang.String[] GOOGLE_PLUS_REQUIRED_FEATURES
io.sentry.Dsn: java.lang.String path
io.flutter.plugin.editing.TextInputPlugin: boolean mRestartInputPending
com.google.gson.LongSerializationPolicy: com.google.gson.LongSerializationPolicy DEFAULT
androidx.core.R$id: int accessibility_custom_action_3
io.sentry.flutter.R$attr: int activityAction
androidx.window.layout.SidecarCompat: java.lang.String TAG
androidx.arch.core.executor.DefaultTaskExecutor$1: java.util.concurrent.atomic.AtomicInteger mThreadId
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag IS_BUTTON
androidx.fragment.app.FragmentState: android.os.Parcelable$Creator CREATOR
androidx.core.content.res.ResourcesCompat: java.lang.Object sColorStateCacheLock
com.google.android.gms.common.internal.RootTelemetryConfigManager: com.google.android.gms.common.internal.RootTelemetryConfiguration zzc
com.google.android.gms.common.Feature: long zzc
androidx.activity.OnBackPressedDispatcher: java.lang.Runnable mFallbackOnBackPressed
io.flutter.plugins.connectivity.ConnectivityPlugin: io.flutter.plugin.common.MethodChannel methodChannel
com.google.gson.stream.JsonReader: int PEEKED_BEGIN_ARRAY
com.google.gson.internal.bind.TypeAdapters$27: java.lang.String MINUTE
com.google.android.gms.common.api.internal.TaskApiCall$Builder: boolean zab
com.google.android.gms.dynamite.DynamiteModule: com.google.android.gms.dynamite.DynamiteModule$VersionPolicy zza
io.sentry.protocol.Device: java.lang.String TYPE
com.google.gson.Gson: java.lang.String JSON_NON_EXECUTABLE_PREFIX
com.google.android.gms.dynamite.DynamiteModule: com.google.android.gms.dynamite.DynamiteModule$VersionPolicy PREFER_HIGHEST_OR_LOCAL_VERSION
androidx.core.view.WindowInsetsControllerCompat: androidx.core.view.WindowInsetsControllerCompat$Impl mImpl
kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: java.lang.String schedulerName
com.google.android.gms.common.api.internal.zabo: com.google.android.gms.common.api.internal.zabp zaa
io.flutter.plugins.googlemaps.MarkerController: java.lang.String googleMapsMarkerId
com.google.android.gms.common.api.internal.GoogleApiManager: android.os.Handler zat
io.sentry.flutter.R$drawable: int notification_template_icon_low_bg
com.google.gson.internal.LazilyParsedNumber: java.lang.String value
androidx.collection.ContainerHelpers: java.lang.Object[] EMPTY_OBJECTS
io.sentry.transport.NoOpTransport: io.sentry.transport.NoOpTransport instance
com.google.common.hash.Murmur3_128HashFunction: int seed
io.sentry.flutter.R$styleable: int SplitPairRule_finishPrimaryWithSecondary
io.sentry.CircularFifoQueue: int maxElements
com.google.android.gms.common.GoogleSignatureVerifier: com.google.android.gms.common.GoogleSignatureVerifier zza
androidx.activity.OnBackPressedDispatcher$OnBackPressedCancellable: androidx.activity.OnBackPressedCallback mOnBackPressedCallback
io.flutter.plugin.editing.InputConnectionAdaptor: android.view.inputmethod.ExtractedTextRequest mExtractRequest
androidx.lifecycle.ViewModelProvider: androidx.lifecycle.ViewModelStore mViewModelStore
io.sentry.MainEventProcessor: java.lang.String DEFAULT_ENVIRONMENT
io.flutter.plugin.common.JSONMessageCodec: io.flutter.plugin.common.JSONMessageCodec INSTANCE
kotlinx.coroutines.scheduling.TasksKt: int MAX_POOL_SIZE
io.flutter.plugin.common.StringCodec: java.nio.charset.Charset UTF8
com.google.common.util.concurrent.AbstractFuture$Failure: com.google.common.util.concurrent.AbstractFuture$Failure FALLBACK_INSTANCE
io.sentry.flutter.R$id: int dialog_button
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField: java.lang.String name
io.sentry.flutter.SentryFlutterPlugin: io.flutter.plugin.common.MethodChannel channel
io.flutter.plugins.urllauncher.WebViewActivity: java.lang.String URL_EXTRA
io.flutter.plugin.editing.TextInputPlugin: android.view.inputmethod.InputConnection lastInputConnection
io.sentry.UserFeedback: java.lang.String email
com.google.gson.internal.ConstructorConstructor$1: com.google.gson.internal.ConstructorConstructor this$0
io.sentry.android.ndk.DebugImagesLoader: io.sentry.SentryOptions options
com.google.android.gms.common.internal.service.zap: com.google.android.gms.common.internal.TelemetryLoggingOptions zaa
androidx.core.app.NotificationCompat$Builder: android.widget.RemoteViews mBigContentView
io.flutter.plugins.googlemaps.TileProviderController: android.os.Handler handler
kotlin.coroutines.AbstractCoroutineContextElement: kotlin.coroutines.CoroutineContext$Key key
com.google.android.gms.dynamite.DynamiteModule: com.google.android.gms.dynamite.zzq zzj
io.flutter.view.AccessibilityBridge: int FIRST_RESOURCE_ID
com.google.android.gms.common.zac: com.google.android.gms.common.GoogleApiAvailability zaa
com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableList asList
io.sentry.SentryBaseEvent: java.lang.String serverName
com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper: java.util.concurrent.atomic.AtomicReferenceFieldUpdater valueUpdater
androidx.core.os.LocaleListCompat: androidx.core.os.LocaleListInterface mImpl
androidx.window.layout.DisplayCompatHelperApi28: androidx.window.layout.DisplayCompatHelperApi28 INSTANCE
androidx.fragment.app.Fragment: boolean mCalled
androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State INITIALIZED
com.google.android.gms.common.zzm: android.content.Context zzg
io.sentry.android.core.BuildConfig: java.lang.String BUILD_TYPE
com.google.android.gms.tasks.TaskExecutors: java.util.concurrent.Executor zza
io.flutter.Log: int logLevel
io.sentry.flutter.R$dimen: int notification_right_side_padding_top
com.google.android.gms.common.internal.zal: android.util.SparseIntArray zaa
com.google.gson.internal.LinkedHashTreeMap$AvlBuilder: int size
io.flutter.embedding.android.FlutterActivity: int FLUTTER_VIEW_ID
androidx.versionedparcelable.VersionedParcelParcel: int mCurrentField
com.google.android.gms.tasks.TaskCompletionSource: com.google.android.gms.tasks.zzw zza
com.google.android.gms.common.internal.BaseGmsClient: int zzv
io.sentry.flutter.R$id: int accessibility_custom_action_16
io.flutter.embedding.android.FlutterView$4: io.flutter.embedding.engine.renderer.FlutterRenderer val$renderer
io.flutter.Log: int ERROR
androidx.lifecycle.LiveData$ObserverWrapper: androidx.lifecycle.LiveData this$0
com.google.android.gms.maps.model.PolylineOptions: int zzj
com.google.android.gms.common.internal.zat: android.os.Parcelable$Creator CREATOR
io.sentry.DateUtils: java.lang.ThreadLocal SDF_ISO_FORMAT_WITH_MILLIS_UTC
androidx.core.graphics.drawable.IconCompat: byte[] mData
androidx.window.embedding.ActivityFilter: java.lang.String intentAction
kotlinx.coroutines.AbstractTimeSourceKt: kotlinx.coroutines.AbstractTimeSource timeSource
androidx.fragment.app.FragmentTransition$FragmentContainerTransition: androidx.fragment.app.Fragment lastIn
com.google.android.gms.maps.MapsInitializer: com.google.android.gms.maps.MapsInitializer$Renderer zzc
androidx.lifecycle.LifecycleRegistry: int mAddingObserverCounter
androidx.fragment.app.FragmentTransaction: int mExitAnim
com.google.gson.internal.reflect.UnsafeReflectionAccessor: java.lang.Object theUnsafe
com.google.common.hash.ChecksumHashFunction: com.google.common.hash.ImmutableSupplier checksumSupplier
com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry: com.google.common.collect.MapMakerInternalMap$WeakValueReference valueReference
com.google.gson.internal.bind.DateTypeAdapter: com.google.gson.TypeAdapterFactory FACTORY
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory CLASS_FACTORY
io.sentry.android.core.DefaultAndroidEventProcessor$1: int[] $SwitchMap$io$sentry$android$core$util$ConnectivityChecker$Status
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.WindowInsets lastWindowInsets
androidx.core.app.NotificationCompat$Builder: java.lang.String mShortcutId
androidx.core.app.NotificationCompat$Builder: boolean mColorized
io.sentry.transport.ReusableCountLatch: io.sentry.transport.ReusableCountLatch$Sync sync
io.sentry.flutter.R$drawable: int notification_bg_normal_pressed
io.sentry.BuildConfig: java.lang.String SENTRY_JAVA_SDK_NAME
androidx.core.util.LogWriter: java.lang.String mTag
io.flutter.plugins.googlemaps.GoogleMapController: java.util.List initialPolylines
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration$Autofill: java.lang.String uniqueIdentifier
com.google.android.gms.common.internal.GmsClientSupervisor: int zzb
com.google.android.gms.common.api.GoogleApi$Settings: com.google.android.gms.common.api.GoogleApi$Settings DEFAULT_SETTINGS
com.google.android.gms.common.zzk: java.lang.ref.WeakReference zza
com.google.android.gms.maps.model.LatLng: android.os.Parcelable$Creator CREATOR
io.sentry.protocol.SentryStackTrace: java.lang.Boolean snapshot
kotlinx.coroutines.internal.ThreadState: java.lang.Object[] values
com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$Waiter waiters
com.google.common.base.Equivalence$Identity: com.google.common.base.Equivalence$Identity INSTANCE
com.google.gson.internal.bind.TypeAdapters$27: java.lang.String DAY_OF_MONTH
io.sentry.android.core.ActivityLifecycleIntegration: io.sentry.android.core.SentryAndroidOptions options
kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt$createCoroutineUnintercepted$$inlined$createCoroutineFromSuspendFunction$IntrinsicsKt__IntrinsicsJvmKt$3: java.lang.Object $receiver$inlined
com.google.gson.internal.Excluder: double IGNORE_VERSIONS
com.google.android.gms.common.api.GoogleApi: android.content.Context zab
io.flutter.embedding.engine.FlutterJNI: java.util.Set flutterUiDisplayListeners
io.flutter.plugin.platform.PlatformViewsController: io.flutter.plugin.editing.TextInputPlugin textInputPlugin
io.flutter.plugin.editing.InputConnectionAdaptor: io.flutter.embedding.android.KeyboardManager keyboardManager
io.sentry.protocol.DebugImage: java.lang.String imageAddr
io.sentry.DirectoryProcessor: long flushTimeoutMillis
kotlin.jvm.internal.CallableReference: java.lang.Object receiver
kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState[] $VALUES
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView: int top
io.sentry.flutter.R$styleable: int GradientColorItem_android_offset
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewTouch: int viewId
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory STRING_BUILDER_FACTORY
io.flutter.embedding.android.FlutterSurfaceView: boolean isAttachedToFlutterRenderer
androidx.core.app.Person: java.lang.CharSequence mName
com.google.android.gms.maps.GoogleMapOptions: java.lang.Boolean zzl
io.flutter.embedding.engine.renderer.FlutterRenderer: boolean isDisplayingFlutterUi
androidx.collection.SparseArrayCompat: java.lang.Object DELETED
io.sentry.android.ndk.BuildConfig: java.lang.String BUILD_TYPE
com.google.gson.internal.$Gson$Types$WildcardTypeImpl: java.lang.reflect.Type upperBound
com.google.gson.internal.bind.ArrayTypeAdapter: com.google.gson.TypeAdapter componentTypeAdapter
io.sentry.SentryEnvelopeItem$CachedItem: byte[] bytes
io.flutter.plugins.urllauncher.UrlLauncher$LaunchStatus: io.flutter.plugins.urllauncher.UrlLauncher$LaunchStatus NO_ACTIVITY
androidx.window.core.Version: androidx.window.core.Version VERSION_0_1
androidx.lifecycle.LifecycleRegistry: java.lang.ref.WeakReference mLifecycleOwner
kotlin.ranges.IntProgression: kotlin.ranges.IntProgression$Companion Companion
io.flutter.view.AccessibilityBridge: int SCROLLABLE_ACTIONS
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView$1: android.view.View$OnFocusChangeListener val$userFocusListener
com.google.android.gms.maps.MapsInitializer: boolean zzb
kotlinx.coroutines.JobSupport: java.lang.Object _parentHandle
kotlinx.coroutines.internal.OnUndeliveredElementKt$bindCancellationFun$1: java.lang.Object $element
io.sentry.protocol.SentryPackage: java.lang.String name
io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode: io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode opaque
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$8: io.sentry.android.core.SentryAndroidOptions $options
io.flutter.embedding.engine.dart.DartExecutor$DartEntrypoint: java.lang.String pathToBundle
com.google.android.gms.internal.base.zad: com.google.android.gms.common.Feature[] zab
androidx.collection.MapCollections$ValuesCollection: androidx.collection.MapCollections this$0
androidx.window.embedding.ActivityStack: boolean isEmpty
io.sentry.flutter.R$styleable: int GradientColor_android_tileMode
com.google.gson.internal.bind.JsonTreeReader: java.lang.Object[] stack
io.sentry.flutter.SentryFlutterPlugin: java.lang.String androidSdk
com.google.android.gms.common.api.internal.zabq: java.util.Queue zab
androidx.core.graphics.drawable.IconCompat: int mType
kotlinx.coroutines.EventLoopImplBase: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _queue$FU
io.sentry.flutter.R$attr: int secondaryActivityName
com.google.android.gms.common.internal.ConnectionTelemetryConfiguration: int zze
kotlinx.coroutines.internal.LockFreeTaskQueueCore: java.lang.Object _next
io.flutter.view.AccessibilityBridge$SemanticsNode: float previousScrollPosition
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle: java.lang.Boolean systemNavigationBarContrastEnforced
io.flutter.plugins.googlemaps.GoogleMapFactory: io.flutter.plugins.googlemaps.LifecycleProvider lifecycleProvider
androidx.fragment.app.FragmentTransition$FragmentContainerTransition: androidx.fragment.app.Fragment firstOut
androidx.core.app.Person: androidx.core.graphics.drawable.IconCompat mIcon
com.google.android.gms.common.api.Status: android.os.Parcelable$Creator CREATOR
io.sentry.flutter.R$styleable: int FontFamilyFont_font
com.google.gson.GsonBuilder: java.util.List factories
com.google.common.reflect.Types$JavaVersion: com.google.common.reflect.Types$JavaVersion JAVA8
com.google.gson.internal.ConstructorConstructor$6: com.google.gson.internal.ConstructorConstructor this$0
io.flutter.embedding.engine.loader.FlutterApplicationInfo: boolean automaticallyRegisterPlugins
io.flutter.plugin.platform.VirtualDisplayController: android.view.View$OnFocusChangeListener focusChangeListener
com.google.common.collect.Iterators$9: boolean done
io.sentry.protocol.SentryStackFrame: java.util.Map vars
androidx.fragment.app.Fragment: boolean mMenuVisible
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewTouch: java.lang.Object rawPointerCoords
io.sentry.flutter.R$dimen: int notification_action_text_size
io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry: io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry$ShimRegistrarAggregate shimRegistrarAggregate
com.tekartik.sqflite.SqflitePlugin$3: io.flutter.plugin.common.MethodCall val$call
com.google.android.gms.maps.model.VisibleRegion: com.google.android.gms.maps.model.LatLngBounds latLngBounds
io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription: java.lang.String label
kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.CoroutineScheduler$Companion Companion
androidx.collection.MapCollections$MapIterator: boolean mEntryValid
kotlinx.coroutines.internal.LockFreeLinkedListKt: java.lang.Object CONDITION_FALSE
io.sentry.flutter.R$color: int androidx_core_ripple_material_light
com.google.android.gms.common.util.CrashUtils: java.lang.String[] zza
io.sentry.SentryClient: io.sentry.SentryClient$SortBreadcrumbsByDate sortBreadcrumbsByDate
kotlin.coroutines.jvm.internal.BaseContinuationImpl: kotlin.coroutines.Continuation completion
io.flutter.view.AccessibilityBridge: android.content.ContentResolver contentResolver
io.flutter.plugins.googlemaps.GoogleMapController: com.google.android.gms.maps.GoogleMap googleMap
kotlinx.coroutines.EventLoopImplBase$DelayedTask: int index
kotlinx.coroutines.InvokeOnCancelling: kotlin.jvm.functions.Function1 handler
com.google.android.gms.common.internal.GetServiceRequest: android.os.IBinder zze
io.sentry.protocol.Mechanism: java.util.Map data
com.google.android.gms.common.internal.BaseGmsClient: long zzg
io.flutter.plugins.googlemaps.GoogleMapBuilder: java.lang.Object initialCircles
com.google.android.gms.maps.model.PolylineOptions: boolean zzf
com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node parent
com.google.gson.stream.JsonReader: int PEEKED_DOUBLE_QUOTED_NAME
com.google.common.collect.Maps$EntryFunction: com.google.common.collect.Maps$EntryFunction[] $VALUES
io.flutter.embedding.engine.renderer.FlutterRenderer: io.flutter.embedding.engine.renderer.FlutterUiDisplayListener flutterUiDisplayListener
io.sentry.SpanContext: io.sentry.SpanId parentSpanId
io.sentry.flutter.R$id: int accessibility_custom_action_17
androidx.activity.OnBackPressedCallback: boolean mEnabled
com.google.android.gms.maps.GoogleMapOptions: com.google.android.gms.maps.model.LatLngBounds zzp
androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions: boolean mBeforeStart
io.sentry.flutter.R$id: int actions
com.google.gson.stream.JsonWriter: java.lang.String separator
io.sentry.protocol.User: java.lang.String id
kotlin.collections.EmptyList: kotlin.collections.EmptyList INSTANCE
io.sentry.SpanStatus: io.sentry.SpanStatus OUT_OF_RANGE
io.sentry.protocol.SentryTransaction: java.lang.String type
com.google.android.gms.common.internal.BaseGmsClient: com.google.android.gms.common.internal.BaseGmsClient$ConnectionProgressReportCallbacks zzc
androidx.fragment.app.BackStackState: int mTransitionStyle
io.flutter.plugins.googlemaps.PolylineController: com.google.android.gms.maps.model.Polyline polyline
com.google.android.gms.common.internal.zzu: java.lang.String zza
io.sentry.transport.AsyncHttpTransport: io.sentry.cache.IEnvelopeCache envelopeCache
com.google.android.gms.common.api.GoogleApi: com.google.android.gms.common.api.Api$ApiOptions zae
com.google.common.util.concurrent.ThreadFactoryBuilder: java.util.concurrent.ThreadFactory backingThreadFactory
io.flutter.view.VsyncWaiter: io.flutter.view.VsyncWaiter$DisplayListener listener
kotlinx.coroutines.Dispatchers: kotlinx.coroutines.CoroutineDispatcher IO
io.sentry.protocol.Browser: java.lang.String TYPE
io.sentry.android.core.DefaultAndroidEventProcessor: java.util.concurrent.Future contextData
androidx.fragment.app.Fragment: androidx.fragment.app.FragmentViewLifecycleOwner mViewLifecycleOwner
com.google.gson.internal.Excluder: boolean requireExpose
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView: int left
androidx.arch.core.executor.DefaultTaskExecutor: java.lang.Object mLock
androidx.fragment.app.Fragment$AnimationInfo: java.lang.Object mReenterTransition
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.dart.DartExecutor dartExecutor
kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicLongFieldUpdater controlState$FU
androidx.fragment.app.FragmentManagerImpl$4: androidx.fragment.app.FragmentManagerImpl this$0
io.flutter.embedding.engine.FlutterJNI: boolean loadLibraryCalled
com.google.android.gms.maps.model.CircleOptions: float zzf
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutator: io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType type
androidx.core.app.NotificationCompat$Action: int icon
com.google.common.base.Predicates$ObjectPredicate: com.google.common.base.Predicates$ObjectPredicate IS_NULL
com.google.common.hash.Hashing$ChecksumType: com.google.common.hash.Hashing$ChecksumType[] $VALUES
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag IS_READ_ONLY
com.google.android.gms.common.api.internal.GoogleApiManager: java.util.Set zas
androidx.window.layout.WindowInfoTrackerImpl: androidx.window.layout.WindowMetricsCalculator windowMetricsCalculator
androidx.fragment.app.BackStackRecord: androidx.fragment.app.FragmentManagerImpl mManager
com.google.android.gms.dynamic.DeferredLifecycleHelper: android.os.Bundle zab
com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$Node[] table
io.flutter.embedding.android.KeyboardManager: io.flutter.plugin.editing.TextInputPlugin textInputPlugin
io.flutter.embedding.engine.systemchannels.TextInputChannel: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputMethodHandler textInputMethodHandler
com.google.gson.DefaultDateTypeAdapter: java.lang.Class dateType
io.sentry.protocol.Mechanism: java.lang.Thread thread
io.sentry.Sentry: boolean GLOBAL_HUB_DEFAULT_MODE
io.flutter.plugin.common.StandardMessageCodec: java.nio.charset.Charset UTF8
com.google.android.gms.common.api.internal.zabq: com.google.android.gms.common.api.internal.GoogleApiManager zaa
androidx.core.app.NotificationCompat$Builder: java.util.ArrayList mPersonList
com.tekartik.sqflite.SqflitePlugin$BgResult$3: com.tekartik.sqflite.SqflitePlugin$BgResult this$1
androidx.window.R$styleable: int SplitPairRule_splitMinWidth
com.google.common.hash.ChecksumHashFunction: int bits
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewTouch: int edgeFlags
androidx.core.R$id: int accessibility_custom_action_28
com.google.android.gms.common.internal.ConnectionTelemetryConfiguration: com.google.android.gms.common.internal.RootTelemetryConfiguration zza
com.google.android.gms.common.internal.RootTelemetryConfiguration: int zzd
kotlinx.coroutines.JobSupport$Finishing: java.lang.Object _exceptionsHolder
com.google.android.gms.signin.SignInOptions: boolean zae
androidx.fragment.app.FragmentManagerImpl$FragmentLifecycleCallbacksHolder: boolean mRecursive
com.google.android.gms.maps.model.VisibleRegion: com.google.android.gms.maps.model.LatLng nearRight
androidx.fragment.app.FragmentManagerImpl: java.util.ArrayList mBackStack
io.flutter.view.VsyncWaiter: long refreshPeriodNanos
kotlinx.coroutines.channels.Channel$Factory: kotlinx.coroutines.channels.Channel$Factory $$INSTANCE
kotlinx.coroutines.channels.AbstractSendChannel: kotlin.jvm.functions.Function1 onUndeliveredElement
androidx.fragment.app.BackStackState: int[] mOldMaxLifecycleStates
com.google.android.gms.common.api.internal.zabn: int zaa
io.sentry.android.ndk.BuildConfig: boolean DEBUG
io.flutter.plugins.connectivity.ConnectivityBroadcastReceiver: io.flutter.plugin.common.EventChannel$EventSink events
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.DeferredComponentChannel deferredComponentChannel
io.sentry.protocol.Browser: java.lang.String version
kotlinx.coroutines.flow.internal.DownstreamExceptionElement: kotlin.coroutines.CoroutineContext$Key key
io.sentry.flutter.R$id: int icon_group
io.flutter.embedding.engine.dart.DartMessenger$BufferedMessageInfo: long messageData
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation: io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation LANDSCAPE_RIGHT
androidx.window.layout.WindowMetricsCalculatorCompat: java.lang.String TAG
androidx.fragment.app.FragmentTransaction$Op: int mCmd
com.google.android.gms.base.R$string: int common_google_play_services_update_title
com.google.android.gms.common.internal.zzu: int zzc
com.google.gson.stream.JsonToken: com.google.gson.stream.JsonToken NULL
io.sentry.SentryTracer: java.util.List children
io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode: io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode transparent
io.flutter.embedding.android.FlutterActivity: androidx.lifecycle.LifecycleRegistry lifecycle
com.google.android.gms.common.api.internal.zas: com.google.android.gms.common.api.internal.BasePendingResult zaa
com.tekartik.sqflite.operation.MethodCallOperation: com.tekartik.sqflite.operation.MethodCallOperation$Result result
androidx.arch.core.internal.FastSafeIterableMap: java.util.HashMap mHashMap
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: java.util.Map serviceAwarePlugins
com.google.gson.Gson$2: com.google.gson.Gson this$0
io.sentry.android.core.SentryAndroidOptions: boolean enableActivityLifecycleBreadcrumbs
com.google.gson.internal.LinkedHashTreeMap$AvlBuilder: int leavesSkipped
io.sentry.flutter.R$drawable: int notification_bg
androidx.fragment.app.FragmentHostCallback: android.os.Handler mHandler
kotlinx.coroutines.DefaultExecutor: kotlinx.coroutines.DefaultExecutor INSTANCE
androidx.core.app.NotificationCompat$Builder: int mProgress
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$1: io.flutter.embedding.engine.systemchannels.PlatformViewsChannel this$0
io.sentry.flutter.R$drawable: int notification_bg_low
io.sentry.flutter.R$style: int TextAppearance_Compat_Notification_Info
androidx.core.R$id: int accessibility_custom_action_23
androidx.core.app.NotificationCompatBuilder: int mGroupAlertBehavior
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.CoroutineScheduler this$0
androidx.window.layout.SidecarCompat: androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface extensionCallback
com.google.android.gms.common.api.internal.GoogleApiManager: com.google.android.gms.common.GoogleApiAvailability zal
com.google.gson.internal.LinkedHashTreeMap$LinkedTreeMapIterator: int expectedModCount
io.flutter.embedding.android.FlutterTextureView: boolean isAttachedToFlutterRenderer
io.sentry.flutter.R$styleable: int SplitPairRule_splitMinWidth
androidx.arch.core.executor.ArchTaskExecutor: java.util.concurrent.Executor sMainThreadExecutor
io.flutter.embedding.android.FlutterImageView$SurfaceKind: io.flutter.embedding.android.FlutterImageView$SurfaceKind overlay
com.google.gson.internal.bind.TreeTypeAdapter$SingleTypeFactory: boolean matchRawType
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineServicePluginBinding servicePluginBinding
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewTouch: int deviceId
com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment: java.lang.ref.ReferenceQueue queueForKeys
com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$EntrySet entrySet
com.google.android.gms.common.api.Status: com.google.android.gms.common.api.Status RESULT_SUCCESS
androidx.core.app.RemoteActionCompat: boolean mShouldShowIcon
kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalCpuQueue
io.sentry.flutter.R$id: int right_icon
androidx.fragment.app.FragmentTransaction$Op: int mPopExitAnim
androidx.core.app.NotificationCompat$Builder: java.lang.String mChannelId
io.flutter.plugins.googlemaps.TileProviderController$Worker: int x
io.sentry.protocol.Device: java.lang.String brand
io.sentry.SendFireAndForgetEnvelopeSender: io.sentry.SendCachedEnvelopeFireAndForgetIntegration$SendFireAndForgetDirPath sendFireAndForgetDirPath
kotlinx.coroutines.UndispatchedCoroutine: kotlin.coroutines.CoroutineContext savedContext
io.sentry.transport.AsyncHttpTransport: io.sentry.transport.HttpConnection connection
io.sentry.android.core.LifecycleWatcher: boolean enableAppLifecycleBreadcrumbs
io.sentry.cache.EnvelopeCache: java.lang.String SUFFIX_ENVELOPE_FILE
androidx.window.R$styleable: int SplitPairRule_splitMinSmallestWidth
io.sentry.protocol.OperatingSystem: java.lang.String kernelVersion
androidx.window.layout.SidecarAdapter: java.lang.String TAG
com.google.gson.internal.reflect.UnsafeReflectionAccessor: java.lang.reflect.Field overrideField
io.flutter.plugin.editing.InputConnectionAdaptor: android.view.inputmethod.InputMethodManager mImm
com.google.android.gms.maps.model.PolygonOptions: android.os.Parcelable$Creator CREATOR
io.flutter.plugins.googlemaps.TileOverlayBuilder: com.google.android.gms.maps.model.TileOverlayOptions tileOverlayOptions
io.flutter.plugins.googlemaps.MarkerBuilder: boolean consumeTapEvents
io.sentry.Breadcrumb: java.util.Map unknown
androidx.core.R$id: int accessibility_custom_action_17
com.google.android.gms.common.ErrorDialogFragment: android.app.Dialog zac
androidx.fragment.app.FragmentManagerImpl: java.util.concurrent.CopyOnWriteArrayList mLifecycleCallbacks
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction: int id
kotlinx.coroutines.internal.AtomicKt: java.lang.Object NO_DECISION
com.google.android.gms.common.api.internal.zah: com.google.android.gms.common.api.internal.ListenerHolder$ListenerKey zab
com.google.android.gms.common.internal.zzr: com.google.android.gms.common.stats.ConnectionTracker zzf
com.google.common.base.MoreObjects$ToStringHelper$ValueHolder: com.google.common.base.MoreObjects$ToStringHelper$ValueHolder next
com.google.gson.internal.bind.TypeAdapters$34: java.lang.Class val$sub
androidx.fragment.app.FragmentActivity: boolean mStartedActivityFromFragment
io.sentry.android.core.AppLifecycleIntegration: io.sentry.android.core.IHandler handler
kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState BLOCKING
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeature: android.graphics.Rect bounds
androidx.activity.ComponentActivity$1: androidx.activity.ComponentActivity this$0
kotlinx.coroutines.internal.ContextScope: kotlin.coroutines.CoroutineContext coroutineContext
androidx.core.app.NotificationCompat$Builder: androidx.core.content.LocusIdCompat mLocusId
io.flutter.plugins.connectivity.Connectivity: android.net.wifi.WifiManager wifiManager
androidx.fragment.app.FragmentTransitionImpl$3: androidx.fragment.app.FragmentTransitionImpl this$0
com.google.common.util.concurrent.AbstractFuture$SetFuture: com.google.common.util.concurrent.AbstractFuture owner
com.google.android.gms.dynamite.DynamiteModule: com.google.android.gms.dynamite.zzr zzk
androidx.fragment.app.DialogFragment: int mBackStackId
io.sentry.flutter.R$styleable: int FontFamily_fontProviderAuthority
com.google.android.gms.common.api.internal.zal: boolean zae
io.flutter.view.AccessibilityBridge: io.flutter.plugin.platform.PlatformViewsAccessibilityDelegate platformViewsAccessibilityDelegate
io.flutter.embedding.engine.dart.DartMessenger$BufferedMessageInfo: java.nio.ByteBuffer message
androidx.core.R$id: int accessibility_custom_action_15
androidx.fragment.app.FragmentManagerImpl: boolean mExecutingActions
androidx.fragment.app.FragmentManagerImpl$StartEnterTransitionListener: androidx.fragment.app.BackStackRecord mRecord
com.google.common.reflect.TypeToken: java.lang.reflect.Type runtimeType
io.flutter.embedding.engine.loader.ApplicationInfoLoader: java.lang.String PUBLIC_ISOLATE_SNAPSHOT_DATA_KEY
com.tekartik.sqflite.operation.BatchOperation$BatchOperationResult: java.lang.String errorCode
com.google.android.gms.maps.model.Cap: java.lang.Float zzd
com.google.android.gms.common.api.ApiException: com.google.android.gms.common.api.Status mStatus
com.google.android.gms.common.api.internal.zabq: boolean zaj
com.google.android.gms.maps.GoogleMapOptions: com.google.android.gms.maps.model.CameraPosition zzd
io.sentry.android.ndk.BuildConfig: java.lang.String LIBRARY_PACKAGE_NAME
io.sentry.flutter.R$id: int androidx_window_activity_scope
com.google.gson.internal.LinkedTreeMap: int modCount
androidx.collection.ContainerHelpers: long[] EMPTY_LONGS
com.tekartik.sqflite.SqflitePlugin: android.content.Context context
io.flutter.view.AccessibilityBridge$SemanticsNode: float scrollExtentMin
androidx.fragment.app.FragmentState: int mMaxLifecycleState
io.flutter.plugins.googlemaps.CirclesController: com.google.android.gms.maps.GoogleMap googleMap
com.google.common.collect.MapMakerInternalMap: int segmentMask
com.google.common.collect.MapMakerInternalMap$HashIterator: com.google.common.collect.MapMakerInternalMap$InternalEntry nextEntry
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter ATOMIC_INTEGER
com.google.android.gms.common.api.internal.zabq: com.google.android.gms.common.api.internal.zaad zae
com.google.android.gms.maps.model.Cap: java.lang.String zza
com.google.common.base.Joiner$1: java.lang.String val$nullText
io.flutter.embedding.android.FlutterView: io.flutter.embedding.engine.renderer.RenderSurface previousRenderSurface
io.flutter.plugin.editing.TextEditingDelta: java.lang.CharSequence oldText
com.google.android.gms.common.internal.GetServiceRequest: com.google.android.gms.common.Feature[] zzj
io.sentry.config.AbstractPropertiesProvider: java.util.Properties properties
com.tekartik.sqflite.SqflitePlugin$2: com.tekartik.sqflite.SqflitePlugin$BgResult val$bgResult
com.tekartik.sqflite.SqflitePlugin$1: com.tekartik.sqflite.SqflitePlugin this$0
androidx.window.embedding.ActivityRule: java.util.Set filters
com.google.gson.internal.LinkedHashTreeMap$KeySet: com.google.gson.internal.LinkedHashTreeMap this$0
androidx.collection.MapCollections: androidx.collection.MapCollections$EntrySet mEntrySet
io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding: io.flutter.plugin.platform.PlatformViewRegistry platformViewRegistry
androidx.fragment.app.FragmentTransaction$Op: androidx.lifecycle.Lifecycle$State mOldMaxState
com.google.android.gms.dynamic.zaa: com.google.android.gms.dynamic.DeferredLifecycleHelper zaa
io.sentry.protocol.SentryStackFrame: java.util.Map unknown
io.sentry.android.core.util.RootChecker: java.lang.String[] rootPackages
androidx.activity.ImmLeaksCleaner: android.app.Activity mActivity
com.google.common.collect.MapMaker: int concurrencyLevel
androidx.core.view.LayoutInflaterCompat: java.lang.reflect.Field sLayoutInflaterFactory2Field
com.google.android.gms.signin.internal.zai: android.os.Parcelable$Creator CREATOR
androidx.core.app.NotificationCompat$Builder: java.lang.CharSequence mContentInfo
io.flutter.embedding.engine.FlutterJNI: boolean prefetchDefaultFontManagerCalled
com.google.common.base.Equivalence$Equals: com.google.common.base.Equivalence$Equals INSTANCE
io.sentry.flutter.R$id: int accessibility_custom_action_6
com.tekartik.sqflite.SqflitePlugin$6: boolean val$inMemory
androidx.fragment.app.FragmentActivity$HostCallbacks: androidx.fragment.app.FragmentActivity this$0
com.google.common.util.concurrent.AbstractFuture$Listener: com.google.common.util.concurrent.AbstractFuture$Listener TOMBSTONE
io.flutter.embedding.engine.loader.FlutterApplicationInfo: java.lang.String isolateSnapshotData
io.sentry.SentryOptions: java.lang.String PROXY_PORT_DEFAULT
com.google.gson.internal.ConstructorConstructor$3: java.lang.reflect.Constructor val$constructor
com.google.android.gms.common.api.internal.zan: android.app.Dialog zaa
io.flutter.embedding.android.DrawableSplashScreen$1: io.flutter.embedding.android.DrawableSplashScreen this$0
androidx.fragment.app.BackStackState: android.os.Parcelable$Creator CREATOR
com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter: com.google.gson.internal.bind.MapTypeAdapterFactory this$0
kotlinx.coroutines.CancellableContinuationImplKt: kotlinx.coroutines.internal.Symbol RESUME_TOKEN
kotlin.ranges.IntRange: kotlin.ranges.IntRange$Companion Companion
io.flutter.embedding.engine.systemchannels.PlatformChannel: io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler platformMessageHandler
androidx.lifecycle.ProcessLifecycleOwner: boolean mPauseSent
io.flutter.plugins.googlemaps.GoogleMapController: boolean myLocationEnabled
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest: double logicalHeight
io.flutter.embedding.android.FlutterSplashView$2: io.flutter.embedding.android.FlutterSplashView this$0
com.google.common.util.concurrent.AbstractFuture$Listener: java.util.concurrent.Executor executor
io.flutter.embedding.engine.systemchannels.PlatformChannel$2: int[] $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$SystemUiOverlay
io.sentry.flutter.R$styleable: int SplitPairRule_finishSecondaryWithPrimary
com.google.android.gms.common.api.internal.zact: java.util.Set zae
com.google.android.gms.maps.GoogleMapOptions: int zzc
io.flutter.embedding.engine.loader.FlutterApplicationInfo: java.lang.String aotSharedLibraryName
androidx.core.app.NotificationCompatBuilder: androidx.core.app.NotificationCompat$Builder mBuilderCompat
com.google.common.hash.ChecksumHashFunction: java.lang.String toString
io.sentry.DiagnosticLogger: io.sentry.ILogger logger
com.google.gson.internal.LinkedHashTreeMap$Node: java.lang.Object value
androidx.fragment.app.BackStackState: java.util.ArrayList mSharedElementTargetNames
androidx.arch.core.internal.SafeIterableMap: androidx.arch.core.internal.SafeIterableMap$Entry mStart
androidx.window.layout.SidecarCompat: androidx.window.layout.SidecarCompat$Companion Companion
com.google.common.util.concurrent.CycleDetectingLockFactory$Policies: com.google.common.util.concurrent.CycleDetectingLockFactory$Policies WARN
androidx.fragment.app.FragmentActivity: androidx.lifecycle.LifecycleRegistry mFragmentLifecycleRegistry
com.google.android.gms.common.internal.zzag: java.lang.Object zza
io.flutter.embedding.android.FlutterView$4: java.lang.Runnable val$onDone
com.google.android.gms.common.zzm: com.google.android.gms.common.zzk zzc
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.KeyEventChannel keyEventChannel
io.sentry.flutter.R$id: int notification_main_column_container
io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler: io.flutter.plugin.common.BasicMessageChannel this$0
io.sentry.android.core.ManifestMetadataReader: java.lang.String BREADCRUMBS_SYSTEM_EVENTS_ENABLE
io.sentry.transport.AuthenticatorWrapper: io.sentry.transport.AuthenticatorWrapper instance
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration$Autofill: java.lang.String hintText
com.google.android.gms.maps.model.TileOverlay: com.google.android.gms.internal.maps.zzag zza
io.flutter.plugin.common.BasicMessageChannel$IncomingReplyHandler: io.flutter.plugin.common.BasicMessageChannel$Reply callback
com.google.common.util.concurrent.AbstractFuture: boolean GENERATE_CANCELLATION_CAUSES
io.sentry.CircularFifoQueue: boolean full
androidx.collection.ArraySet: java.lang.Object[] sBaseCache
androidx.lifecycle.LiveData$ObserverWrapper: androidx.lifecycle.Observer mObserver
com.google.android.gms.common.api.internal.zacd: long zad
androidx.fragment.app.DialogFragment: boolean mCancelable
io.sentry.protocol.User: java.util.Map unknown
com.google.gson.stream.JsonToken: com.google.gson.stream.JsonToken NAME
io.flutter.plugins.googlemaps.GoogleMapBuilder: android.graphics.Rect padding
io.sentry.NoOpSerializer: io.sentry.NoOpSerializer instance
io.flutter.view.AccessibilityBridge: android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener accessibilityStateChangeListener
io.sentry.protocol.Gpu: java.lang.String version
com.google.android.gms.common.api.internal.NonGmsServiceBrokerClient: android.content.Context zae
io.flutter.embedding.engine.FlutterJNI: java.util.concurrent.locks.ReentrantReadWriteLock shellHolderLock
com.google.gson.internal.reflect.UnsafeReflectionAccessor: java.lang.Class unsafeClass
com.google.gson.internal.LinkedHashTreeMap: java.util.Comparator comparator
kotlinx.coroutines.flow.internal.SafeCollectorKt$emitFun$1: kotlinx.coroutines.flow.internal.SafeCollectorKt$emitFun$1 INSTANCE
com.google.android.gms.common.internal.BaseGmsClient: android.content.Context zzl
com.tekartik.sqflite.SqflitePlugin$BgResult$1: java.lang.Object val$results
io.sentry.protocol.Device: java.lang.String name
io.sentry.transport.AsyncHttpTransport: io.sentry.transport.RateLimiter rateLimiter
io.flutter.plugin.platform.PlatformPlugin: io.flutter.embedding.engine.systemchannels.PlatformChannel platformChannel
androidx.core.content.ContextCompat: java.lang.Object sSync
com.google.gson.internal.bind.TreeTypeAdapter: com.google.gson.JsonDeserializer deserializer
kotlinx.coroutines.internal.LockFreeTaskQueueCore$Placeholder: int index
com.google.gson.internal.Excluder: int modifiers
com.google.gson.JsonStreamParser: com.google.gson.stream.JsonReader parser
androidx.fragment.app.FragmentFactory: androidx.collection.SimpleArrayMap sClassMap
com.google.android.gms.common.internal.BaseGmsClient: com.google.android.gms.common.GoogleApiAvailabilityLight zzo
com.google.gson.internal.LinkedTreeMap$EntrySet$1: com.google.gson.internal.LinkedTreeMap$EntrySet this$1
com.google.gson.internal.UnsafeAllocator$2: java.lang.reflect.Method val$newInstance
io.flutter.embedding.engine.systemchannels.AccessibilityChannel: io.flutter.embedding.engine.FlutterJNI flutterJNI
androidx.fragment.app.FragmentHostCallback: android.app.Activity mActivity
io.flutter.embedding.engine.systemchannels.MouseCursorChannel: io.flutter.embedding.engine.systemchannels.MouseCursorChannel$MouseCursorMethodHandler mouseCursorMethodHandler
com.google.android.gms.common.api.internal.BackgroundDetector: java.util.concurrent.atomic.AtomicBoolean zzc
com.google.android.gms.signin.SignInOptions: com.google.android.gms.signin.SignInOptions zaa
androidx.core.app.NotificationCompatJellybean: java.lang.Object sActionsLock
androidx.fragment.app.FragmentTransition$FragmentContainerTransition: androidx.fragment.app.BackStackRecord lastInTransaction
io.sentry.flutter.R$styleable: int ColorStateListItem_alpha
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType: int encodedValue
com.google.android.gms.signin.SignInOptions: boolean zac
io.sentry.protocol.SentryThread: java.lang.Boolean crashed
com.google.android.gms.common.api.internal.zabx: com.google.android.gms.common.api.internal.zabw zab
io.sentry.SentryOptions: boolean enableNdk
kotlinx.coroutines.CompletedWithCancellation: java.lang.Object result
androidx.collection.MapCollections$ArrayIterator: int mOffset
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField: boolean deserialized
io.sentry.protocol.SentryTransaction: java.util.List spans
com.google.android.gms.tasks.zzj: com.google.android.gms.tasks.OnCompleteListener zzc
com.google.gson.internal.bind.ObjectTypeAdapter: com.google.gson.TypeAdapterFactory FACTORY
io.sentry.android.core.Installation: java.nio.charset.Charset UTF_8
com.google.android.gms.common.api.internal.BasePendingResult: com.google.android.gms.common.api.internal.BasePendingResult$CallbackHandler zab
androidx.fragment.app.Fragment$AnimationInfo: boolean mEnterTransitionPostponed
kotlin.ranges.IntProgression: int last
io.sentry.EnvelopeReader: java.nio.charset.Charset UTF_8
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag HAS_IMPLICIT_SCROLLING
io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode: io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode[] $VALUES
com.google.android.gms.maps.model.Dash: float length
io.sentry.SentryLevel: io.sentry.SentryLevel DEBUG
io.sentry.config.FilesystemPropertiesLoader: io.sentry.ILogger logger
com.google.android.gms.common.internal.ClientSettings: java.lang.String zag
com.google.android.gms.common.internal.zzj: com.google.android.gms.common.Feature[] zzb
io.sentry.adapters.TimeZoneSerializerAdapter: io.sentry.SentryOptions options
io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness: java.lang.String name
com.google.common.util.concurrent.ThreadFactoryBuilder$1: java.lang.String val$nameFormat
io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type: io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type[] $VALUES
androidx.fragment.app.FragmentTransition: int[] INVERSE_OPS
io.sentry.cache.CacheStrategy: io.sentry.ISerializer serializer
io.sentry.flutter.R$drawable: int notification_tile_bg
androidx.core.app.NotificationCompatJellybean: java.lang.Object sExtrasLock
com.tekartik.sqflite.SqflitePlugin$BgResult$2: com.tekartik.sqflite.SqflitePlugin$BgResult this$1
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1: com.google.gson.reflect.TypeToken val$fieldType
io.flutter.plugins.googlemaps.TileOverlaysController: io.flutter.plugin.common.MethodChannel methodChannel
androidx.fragment.app.FragmentTransitionImpl$2: java.util.ArrayList val$sharedElementsIn
io.sentry.protocol.User: java.lang.String username
com.google.common.collect.ImmutableList: com.google.common.collect.UnmodifiableListIterator EMPTY_ITR
com.google.android.gms.maps.GoogleMapOptions: java.lang.Boolean zzb
androidx.fragment.app.FragmentManagerImpl: int mCurState
kotlinx.coroutines.EventLoopImplBase: int _isCompleted
kotlinx.coroutines.JobSupportKt: kotlinx.coroutines.Empty EMPTY_ACTIVE
kotlinx.coroutines.scheduling.CoroutineScheduler: int corePoolSize
io.flutter.plugins.googlemaps.PolylineController: float density
com.google.android.gms.maps.model.PolylineOptions: java.util.List zzk
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics: int physicalTouchSlop
io.flutter.embedding.engine.loader.FlutterLoader$1: android.content.Context val$appContext
com.google.common.hash.ChecksumHashFunction$ChecksumHasher: java.util.zip.Checksum checksum
com.google.android.gms.common.internal.BaseGmsClient: com.google.android.gms.common.internal.GmsClientSupervisor zzn
com.google.android.gms.common.internal.MethodInvocation: android.os.Parcelable$Creator CREATOR
io.sentry.protocol.Gpu: java.lang.String name
androidx.fragment.app.FragmentTransition$4: androidx.fragment.app.FragmentTransition$FragmentContainerTransition val$fragments
com.google.android.gms.internal.maps.zza: android.os.IBinder zza
com.google.android.gms.maps.model.MarkerOptions: android.os.Parcelable$Creator CREATOR
io.sentry.flutter.R$styleable: int GradientColor_android_startY
io.sentry.flutter.R$attr: int splitRatio
io.sentry.UncaughtExceptionHandler$Adapter: io.sentry.UncaughtExceptionHandler$Adapter INSTANCE
io.sentry.RequestDetails: java.net.URL url
com.google.android.gms.common.api.internal.GoogleApiManager: com.google.android.gms.common.api.Status zaa
kotlinx.coroutines.flow.internal.NoOpContinuation: kotlin.coroutines.CoroutineContext context
io.flutter.plugin.platform.SingleViewPresentation$PresentationState: io.flutter.plugin.platform.PlatformView platformView
kotlin.jvm.internal.Reflection: kotlin.reflect.KClass[] EMPTY_K_CLASS_ARRAY
kotlinx.coroutines.CoroutineName: java.lang.String name
com.google.android.gms.common.internal.zzo: boolean zzd
io.sentry.flutter.R$attr: int font
com.google.android.gms.common.internal.RootTelemetryConfiguration: int zza
com.google.gson.internal.LinkedHashTreeMap$EntrySet: com.google.gson.internal.LinkedHashTreeMap this$0
io.flutter.view.AccessibilityBridge$AccessibilityFeature: io.flutter.view.AccessibilityBridge$AccessibilityFeature ACCESSIBLE_NAVIGATION
com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher: int length
io.flutter.embedding.engine.dart.DartExecutor: boolean isApplicationRunning
io.sentry.EnvelopeReader: com.google.gson.Gson gson
com.google.android.gms.base.R$string: int common_google_play_services_wear_update_text
kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.String stackTraceRecoveryClassName
kotlinx.coroutines.channels.Closed: java.lang.Throwable closeCause
io.flutter.view.FlutterCallbackInformation: java.lang.String callbackClassName
io.flutter.plugin.platform.PlatformPlugin: io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler mPlatformMessageHandler
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag HAS_ENABLED_STATE
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action COPY
io.sentry.flutter.R$styleable: int[] SplitPlaceholderRule
com.google.gson.internal.UnsafeAllocator$3: java.lang.reflect.Method val$newInstance
com.google.gson.internal.bind.DateTypeAdapter: java.util.List dateFormats
io.sentry.protocol.SentryStackFrame: java.lang.Integer colno
androidx.lifecycle.ProcessLifecycleOwner: androidx.lifecycle.LifecycleRegistry mRegistry
androidx.collection.ArraySet: int mSize
com.google.common.base.MoreObjects$ToStringHelper: boolean omitNullValues
com.google.android.gms.common.internal.ClientSettings: java.util.Set zac
androidx.core.app.ComponentActivity: androidx.lifecycle.LifecycleRegistry mLifecycleRegistry
com.google.gson.internal.bind.ArrayTypeAdapter: java.lang.Class componentType
io.sentry.android.core.AppComponentsBreadcrumbsIntegration: io.sentry.IHub hub
androidx.core.app.NotificationCompat$Builder: boolean mGroupSummary
androidx.arch.core.executor.ArchTaskExecutor: java.util.concurrent.Executor sIOThreadExecutor
com.google.gson.internal.bind.TypeAdapters$35$1: com.google.gson.internal.bind.TypeAdapters$35 this$0
com.google.android.gms.maps.zza: com.google.android.gms.maps.GoogleMap$OnMarkerClickListener zza
com.google.gson.internal.JavaVersion: int majorJavaVersion
androidx.loader.app.LoaderManagerImpl$LoaderInfo: androidx.loader.content.Loader mPriorLoader
com.google.common.io.Files$FilePredicate: com.google.common.io.Files$FilePredicate[] $VALUES
androidx.lifecycle.ViewModel: boolean mCleared
androidx.fragment.app.FragmentManagerImpl$PopBackStackState: int mFlags
androidx.fragment.app.FragmentTransition$2: java.util.ArrayList val$sharedElementsIn
io.sentry.flutter.R$string: int status_bar_notification_info_overflow
io.flutter.plugin.platform.PlatformPlugin$2: io.flutter.plugin.platform.PlatformPlugin this$0
io.sentry.android.core.ManifestMetadataReader: java.lang.String ATTACH_THREADS
io.sentry.protocol.Device: java.lang.Long externalFreeStorage
io.sentry.flutter.R$id: int tag_window_insets_animation_callback
io.sentry.transport.ReusableCountLatch$Sync: long serialVersionUID
io.sentry.SentryOptions: boolean enableShutdownHook
io.sentry.SentryExceptionFactory: io.sentry.SentryStackTraceFactory sentryStackTraceFactory
com.google.gson.internal.LinkedHashTreeMap: java.util.Comparator NATURAL_ORDER
kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.CoroutineContext context
androidx.fragment.app.Fragment: boolean mIsCreated
androidx.fragment.app.FragmentManagerImpl$3: androidx.fragment.app.FragmentManagerImpl this$0
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter CHARACTER
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: io.flutter.embedding.android.ExclusiveAppComponent exclusiveActivity
androidx.savedstate.Recreator: androidx.savedstate.SavedStateRegistryOwner mOwner
com.google.common.collect.ImmutableList$SubList: com.google.common.collect.ImmutableList this$0
io.sentry.Scope: io.sentry.SentryOptions options
io.sentry.android.core.AndroidLogger: java.lang.String tag
io.sentry.transport.TransportResult$SuccessTransportResult: io.sentry.transport.TransportResult$SuccessTransportResult INSTANCE
io.sentry.SentryEvent: io.sentry.SentryValues exception
com.google.gson.Gson: java.lang.String datePattern
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState: int selectionEnd
kotlinx.coroutines.channels.AbstractChannel$enqueueReceiveInternal$$inlined$addLastIfPrevAndIf$1: kotlinx.coroutines.channels.AbstractChannel this$0
androidx.window.embedding.ActivityStack: java.util.List activities
kotlinx.coroutines.scheduling.LimitingDispatcher: java.util.concurrent.ConcurrentLinkedQueue queue
io.flutter.plugin.platform.PlatformViewsController: io.flutter.view.TextureRegistry textureRegistry
androidx.fragment.app.FragmentManagerState: java.lang.String mPrimaryNavActiveWho
com.google.android.gms.common.internal.zzf: com.google.android.gms.common.internal.BaseGmsClient zzf
io.flutter.plugin.platform.PlatformViewsController: io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewsHandler channelHandler
androidx.window.R$attr: int activityAction
com.google.android.gms.auth.api.signin.GoogleSignInAccount: java.util.Set zan
androidx.core.R$id: int accessibility_custom_action_12
io.sentry.SentryOptions: boolean enableScopeSync
com.google.gson.internal.LinkedHashTreeMap: boolean $assertionsDisabled
com.google.android.gms.signin.internal.zak: int zaa
com.google.android.gms.common.stats.ConnectionTracker: com.google.android.gms.common.stats.ConnectionTracker zzc
com.google.common.hash.AbstractStreamingHasher: int chunkSize
androidx.window.embedding.SplitPlaceholderRule: java.util.Set filters
io.sentry.protocol.DebugImage: java.lang.String debugFile
io.sentry.cache.EnvelopeCache: java.lang.String PREFIX_CURRENT_SESSION_FILE
io.flutter.embedding.android.FlutterSurfaceView: android.view.SurfaceHolder$Callback surfaceCallback
androidx.fragment.app.Fragment: int mFragmentId
androidx.fragment.app.Fragment: android.os.Bundle mArguments
androidx.fragment.app.FragmentTransitionCompat21$2: androidx.fragment.app.FragmentTransitionCompat21 this$0
com.google.android.gms.internal.maps.zza: java.lang.String zzb
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: java.util.concurrent.locks.ReentrantLock lock
com.google.common.collect.MapMakerInternalMap: int segmentShift
io.sentry.SpanStatus: io.sentry.SpanStatus INTERNAL_ERROR
com.google.gson.stream.MalformedJsonException: long serialVersionUID
com.google.gson.internal.bind.TypeAdapters$27: java.lang.String SECOND
kotlin.UNINITIALIZED_VALUE: kotlin.UNINITIALIZED_VALUE INSTANCE
io.sentry.DuplicateEventDetectionEventProcessor: io.sentry.SentryOptions options
io.flutter.embedding.engine.dart.DartExecutor: io.flutter.plugin.common.BinaryMessenger binaryMessenger
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterJNI$AccessibilityDelegate accessibilityDelegate
io.flutter.plugin.editing.InputConnectionAdaptor: int batchEditNestDepth
com.google.common.hash.AbstractStreamingHasher: int bufferSize
io.sentry.adapters.TimeZoneDeserializerAdapter: io.sentry.SentryOptions options
io.flutter.embedding.engine.systemchannels.AccessibilityChannel$1: io.flutter.embedding.engine.systemchannels.AccessibilityChannel this$0
com.google.android.gms.common.api.internal.zaci: java.lang.Runnable zac
com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper: com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper INSTANCE
androidx.window.layout.ExtensionWindowLayoutInfoBackend: androidx.window.extensions.layout.WindowLayoutComponent component
androidx.fragment.app.Fragment$AnimationInfo: java.lang.Object mEnterTransition
androidx.window.R$id: int androidx_window_activity_scope
com.google.common.reflect.Types$JavaVersion: com.google.common.reflect.Types$JavaVersion JAVA7
androidx.core.app.NotificationCompat$Builder: int mBadgeIcon
io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler: io.flutter.plugin.common.BasicMessageChannel$MessageHandler handler
com.google.android.gms.common.api.internal.NonGmsServiceBrokerClient: com.google.android.gms.common.api.internal.OnConnectionFailedListener zah
com.google.gson.internal.bind.TypeAdapters$34: com.google.gson.TypeAdapter val$typeAdapter
io.flutter.embedding.android.TransparencyMode: io.flutter.embedding.android.TransparencyMode transparent
com.google.common.base.Throwables: java.lang.reflect.Method getStackTraceElementMethod
io.sentry.SentryBaseEvent: java.lang.String DEFAULT_PLATFORM
io.sentry.flutter.R$id: int accessibility_custom_action_23
io.sentry.flutter.R$id: int accessibility_custom_action_1
com.google.common.collect.MapMakerInternalMap: java.util.Set entrySet
androidx.fragment.app.FragmentTransitionCompat21$2: java.util.ArrayList val$exitingViews
io.flutter.plugins.googlemaps.CirclesController: java.util.Map googleMapsCircleIdToDartCircleId
com.google.android.gms.maps.model.Cap: com.google.android.gms.maps.model.BitmapDescriptor zzc
io.flutter.plugins.googlemaps.GoogleMapController: io.flutter.plugins.googlemaps.TileOverlaysController tileOverlaysController
androidx.fragment.app.FragmentTransition$3: android.view.View val$epicenterView
com.google.android.gms.maps.zzo: com.google.android.gms.maps.GoogleMap$OnPolygonClickListener zza
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType VISIBLE_PASSWORD
androidx.lifecycle.LiveData: java.lang.Object mDataLock
androidx.loader.app.LoaderManagerImpl$LoaderInfo: android.os.Bundle mArgs
io.flutter.embedding.android.FlutterView: androidx.core.util.Consumer windowInfoListener
io.sentry.flutter.R$attr: int shortcutMatchRequired
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$InsetsListener insetsListener
io.sentry.flutter.R$id: int tag_accessibility_pane_title
io.sentry.TransactionContext: java.lang.String name
androidx.window.embedding.SplitPairFilter: android.content.ComponentName secondaryActivityName
com.google.gson.stream.JsonReader: int limit
androidx.fragment.app.FragmentManagerImpl: androidx.fragment.app.FragmentContainer mContainer
io.sentry.android.core.DefaultAndroidEventProcessor: java.lang.String PROGUARD_UUID
io.flutter.embedding.engine.loader.FlutterLoader$InitResult: java.lang.String appStoragePath
io.flutter.view.AccessibilityBridge: java.lang.Integer lastLeftFrameInset
io.sentry.flutter.R$id: int accessibility_custom_action_27
androidx.fragment.app.FragmentState: boolean mFromLayout
androidx.collection.SimpleArrayMap: java.lang.Object[] mTwiceBaseCache
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.String decreasedValue
androidx.collection.SimpleArrayMap: int mTwiceBaseCacheSize
androidx.fragment.app.Fragment: int mState
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action DID_GAIN_ACCESSIBILITY_FOCUS
kotlinx.coroutines.internal.OnUndeliveredElementKt$bindCancellationFun$1: kotlin.jvm.functions.Function1 $this_bindCancellationFun
androidx.fragment.app.BackStackState: java.lang.CharSequence mBreadCrumbShortTitleText
androidx.fragment.app.Fragment: boolean mHasMenu
io.sentry.exception.ExceptionMechanismException: io.sentry.protocol.Mechanism exceptionMechanism
io.flutter.embedding.android.FlutterImageView: io.flutter.embedding.android.FlutterImageView$SurfaceKind kind
com.google.android.gms.common.wrappers.PackageManagerWrapper: android.content.Context zza
io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness: io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness LIGHT
io.sentry.Breadcrumb: java.lang.String message
io.sentry.protocol.SdkInfo: java.lang.Integer versionMajor
com.google.android.gms.common.api.internal.zaac: com.google.android.gms.common.api.internal.zaad zab
io.flutter.plugins.googlemaps.TileProviderController$Worker: int zoom
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: android.content.ContentProvider contentProvider
androidx.core.view.ViewCompat: androidx.core.view.OnReceiveContentViewBehavior NO_OP_ON_RECEIVE_CONTENT_VIEW_BEHAVIOR
com.google.android.gms.maps.CameraUpdate: com.google.android.gms.dynamic.IObjectWrapper zza
com.google.gson.internal.bind.JsonTreeWriter: java.lang.String pendingName
com.google.android.gms.common.internal.GetServiceRequest: android.os.Bundle zzg
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType: io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType CLIP_RRECT
com.google.common.reflect.TypeVisitor: java.util.Set visited
io.flutter.embedding.android.AndroidTouchProcessor: io.flutter.embedding.android.MotionEventTracker motionEventTracker
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object L$1
kotlin.ranges.IntProgressionIterator: boolean hasNext
kotlinx.coroutines.internal.ExceptionsConstuctorKt$createConstructor$$inlined$safeCtor$4: java.lang.reflect.Constructor $constructor$inlined
io.sentry.android.core.ManifestMetadataReader: java.lang.String AUTO_INIT
com.google.android.gms.maps.zzag: android.view.ViewGroup zza
androidx.savedstate.SavedStateRegistry: android.os.Bundle mRestoredState
io.sentry.protocol.User: java.util.Map other
com.google.android.gms.common.internal.BaseGmsClient: long zzh
io.sentry.protocol.OperatingSystem: java.util.Map unknown
com.google.android.gms.signin.SignInOptions: java.lang.String zaf
io.sentry.SentryOptions: io.sentry.SentryOptions$BeforeSendCallback beforeSend
com.google.common.util.concurrent.AbstractFuture$Cancellation: boolean wasInterrupted
com.google.android.gms.maps.internal.zzca: java.lang.String zza
io.sentry.Session: java.util.concurrent.atomic.AtomicInteger errorCount
io.sentry.SentryOptions: boolean sendDefaultPii
io.sentry.SpanStatus: io.sentry.SpanStatus CANCELLED
com.google.android.gms.signin.zad: com.google.android.gms.common.api.Api$ClientKey zab
com.google.android.gms.auth.api.signin.GoogleSignInAccount: android.net.Uri zah
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType: io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType[] $VALUES
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action MOVE_CURSOR_FORWARD_BY_WORD
com.google.gson.Gson: int dateStyle
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin: io.flutter.plugin.common.MethodChannel channel
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration: java.lang.Integer inputAction
androidx.fragment.app.Fragment: androidx.lifecycle.Lifecycle$State mMaxState
io.sentry.flutter.R$id: int notification_main_column
io.sentry.protocol.Request: java.lang.String url
io.flutter.embedding.android.FlutterView: io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics viewportMetrics
io.flutter.plugin.editing.TextInputPlugin: android.util.SparseArray mAutofillConfigurations
com.google.android.gms.common.api.internal.BasePendingResult: java.util.concurrent.atomic.AtomicReference zai
io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type: io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type HC_PLATFORM_VIEW
io.flutter.plugins.urllauncher.WebViewActivity$2: io.flutter.plugins.urllauncher.WebViewActivity this$0
kotlinx.coroutines.scheduling.NonBlockingContext: int taskMode
com.google.gson.GsonBuilder: com.google.gson.internal.Excluder excluder
io.sentry.flutter.R$dimen: int notification_media_narrow_margin
io.flutter.view.AccessibilityBridge$LocaleStringAttribute: java.lang.String locale
com.google.gson.JsonSyntaxException: long serialVersionUID
com.tekartik.sqflite.operation.BatchOperation$BatchOperationResult: java.lang.Object result
androidx.core.app.NotificationCompat$Action: androidx.core.graphics.drawable.IconCompat mIcon
androidx.core.app.NotificationCompat$Builder: java.util.ArrayList mActions
io.sentry.SentryItemType: io.sentry.SentryItemType[] $VALUES
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode LEAN_BACK
io.sentry.SynchronizedQueue: long serialVersionUID
androidx.lifecycle.ClassesInfoCache: java.util.Map mHasLifecycleMethods
androidx.fragment.app.Fragment: boolean mUserVisibleHint
io.sentry.protocol.Device$DeviceOrientation: io.sentry.protocol.Device$DeviceOrientation PORTRAIT
androidx.lifecycle.LifecycleRegistry$1: int[] $SwitchMap$androidx$lifecycle$Lifecycle$State
io.sentry.UnknownPropertiesTypeAdapterFactory: com.google.gson.TypeAdapterFactory instance
io.sentry.flutter.R$styleable: int[] SplitPairRule
androidx.core.graphics.drawable.IconCompat: java.lang.String mString1
androidx.window.layout.SidecarCompat: java.util.Map componentCallbackMap
io.sentry.Dsn: java.lang.String projectId
androidx.lifecycle.ProcessLifecycleOwner: boolean mStopSent
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState[] $VALUES
kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol OFFER_FAILED
io.sentry.flutter.R$id: int line3
io.sentry.SentryOptions: java.lang.String sentryClientName
com.google.android.gms.common.wrappers.InstantApps: java.lang.Boolean zzb
io.flutter.embedding.engine.renderer.FlutterRenderer: java.util.concurrent.atomic.AtomicLong nextTextureId
io.sentry.Scope: io.sentry.ITransaction transaction
kotlin.SynchronizedLazyImpl: java.lang.Object _value
androidx.core.view.ViewCompat: boolean sAccessibilityDelegateCheckFailed
com.google.android.gms.common.internal.ClientSettings$Builder: com.google.android.gms.signin.SignInOptions zae
com.google.android.gms.common.api.internal.BasePendingResult: com.google.android.gms.common.internal.ICancelToken zao
io.sentry.SentryOptions: boolean enableExternalConfiguration
kotlinx.coroutines.JobImpl: boolean handlesException
io.flutter.plugin.editing.InputConnectionAdaptor: boolean mMonitorCursorUpdate
kotlinx.coroutines.internal.LockFreeTaskQueueCore: int capacity
androidx.fragment.app.FragmentManagerImpl$PopBackStackState: java.lang.String mName
io.flutter.plugins.googlemaps.GoogleMapController: java.util.List initialMarkers
com.google.android.gms.common.internal.zat: com.google.android.gms.auth.api.signin.GoogleSignInAccount zad
io.flutter.embedding.android.WindowInfoRepositoryCallbackAdapterWrapper: androidx.window.java.layout.WindowInfoTrackerCallbackAdapter adapter
androidx.fragment.app.FragmentManagerImpl$5: androidx.fragment.app.FragmentManagerImpl this$0
io.sentry.protocol.Device: java.lang.String connectionType
androidx.window.layout.SidecarCompat$registerConfigurationChangeListener$configChangeObserver$1: android.app.Activity $activity
io.flutter.plugin.editing.TextInputPlugin$2: double[] val$matrix
com.google.common.util.concurrent.AbstractFuture: java.util.logging.Logger log
kotlinx.coroutines.internal.MainDispatchersKt: boolean SUPPORT_MISSING
com.google.android.gms.common.api.internal.zai: int zac
kotlinx.coroutines.InvokeOnCancel: kotlin.jvm.functions.Function1 handler
com.google.gson.internal.Excluder$1: boolean val$skipSerialize
io.flutter.plugin.platform.SingleViewPresentation$PresentationContext: android.content.Context flutterAppWindowContext
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: androidx.core.util.Consumer $consumer
io.flutter.plugins.connectivity.ConnectivityBroadcastReceiver: io.flutter.plugins.connectivity.Connectivity connectivity
io.flutter.plugins.googlemaps.MarkerController: com.google.android.gms.maps.model.Marker marker
io.flutter.view.VsyncWaiter: io.flutter.view.VsyncWaiter instance
com.google.gson.FieldNamingPolicy: com.google.gson.FieldNamingPolicy IDENTITY
com.google.android.gms.common.api.internal.GoogleApiManager: android.content.Context zak
io.sentry.android.core.SentryAndroidOptions: boolean enableAppLifecycleBreadcrumbs
androidx.collection.MapCollections$MapIterator: int mIndex
io.flutter.embedding.engine.renderer.FlutterRenderer: android.view.Surface surface
io.flutter.embedding.engine.FlutterJNI: java.lang.Long nativeShellHolderId
io.sentry.flutter.R$integer: int status_bar_notification_info_maxnum
io.sentry.exception.ExceptionMechanismException: java.lang.Thread thread
kotlinx.coroutines.android.HandlerDispatcherKt: kotlinx.coroutines.android.HandlerDispatcher Main
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState: int encodedValue
androidx.fragment.app.FragmentManagerImpl: java.lang.Runnable mExecCommit
androidx.lifecycle.LiveData: boolean mDispatchInvalidated
com.google.gson.stream.JsonScope: int CLOSED
io.sentry.flutter.R$styleable: int ColorStateListItem_android_alpha
io.flutter.plugins.googlemaps.PolylinesController: java.util.Map googleMapsPolylineIdToDartPolylineId
androidx.fragment.app.FragmentTransitionImpl$1: java.util.ArrayList val$sharedElementsIn
com.google.android.gms.signin.internal.SignInClientImpl: boolean zab
kotlin.sequences.TransformingSequence$iterator$1: kotlin.sequences.TransformingSequence this$0
io.sentry.NoOpTransportFactory: io.sentry.NoOpTransportFactory instance
com.google.android.gms.common.api.internal.zabq: com.google.android.gms.common.ConnectionResult zal
io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType: boolean isDecimal
com.google.gson.internal.bind.TypeAdapters$33: java.lang.Class val$boxed
androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback: androidx.window.sidecar.SidecarDeviceState lastDeviceState
com.google.android.gms.common.api.internal.zap: android.os.Handler zad
com.tekartik.sqflite.SqflitePlugin$2: io.flutter.plugin.common.MethodCall val$call
io.flutter.plugin.platform.PlatformViewsController: int nextOverlayLayerId
com.google.gson.internal.bind.CollectionTypeAdapterFactory: com.google.gson.internal.ConstructorConstructor constructorConstructor
com.google.android.gms.common.api.internal.GoogleApiManager: com.google.android.gms.common.api.internal.zaae zaq
kotlin.SynchronizedLazyImpl: java.lang.Object lock
androidx.core.R$id: int accessibility_custom_action_14
androidx.fragment.app.FragmentState: androidx.fragment.app.Fragment mInstance
io.flutter.plugin.localization.LocalizationPlugin: io.flutter.embedding.engine.systemchannels.LocalizationChannel$LocalizationMessageHandler localizationMessageHandler
com.google.common.collect.MapMakerInternalMap: java.util.Collection values
com.tekartik.sqflite.SqflitePlugin$8: java.lang.String val$path
androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State DESTROYED
com.google.common.reflect.Types$JavaVersion: com.google.common.reflect.Types$JavaVersion[] $VALUES
io.sentry.flutter.R$styleable: int FontFamily_fontProviderCerts
androidx.core.R$id: int tag_unhandled_key_listeners
kotlinx.coroutines.channels.Channel: kotlinx.coroutines.channels.Channel$Factory Factory
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: kotlinx.coroutines.flow.Flow $flow
io.flutter.view.AccessibilityViewEmbedder: io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors reflectionAccessors
androidx.fragment.app.FragmentTransitionCompat21$3: java.util.ArrayList val$enteringViews
com.google.android.gms.maps.zzah: com.google.android.gms.dynamic.OnDelegateCreatedListener zza
io.flutter.plugin.platform.VirtualDisplayController: android.hardware.display.VirtualDisplay virtualDisplay
com.google.gson.internal.bind.SqlDateTypeAdapter: java.text.DateFormat format
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag IS_IMAGE
kotlin.coroutines.intrinsics.CoroutineSingletons: kotlin.coroutines.intrinsics.CoroutineSingletons[] $VALUES
io.flutter.embedding.engine.dart.DartExecutor: io.flutter.embedding.engine.dart.DartMessenger dartMessenger
kotlinx.coroutines.EventLoopImplBase: java.lang.Object _queue
kotlinx.coroutines.scheduling.LimitingDispatcher: kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher dispatcher
com.google.android.gms.common.api.internal.BasePendingResult: int zad
androidx.fragment.app.BackStackState: int mTransition
androidx.fragment.app.Fragment$4: androidx.fragment.app.Fragment this$0
androidx.collection.SimpleArrayMap: int mSize
com.google.gson.internal.LinkedTreeMap$Node: int height
io.flutter.embedding.android.KeyboardManager$PerEventCallbackBuilder: io.flutter.embedding.android.KeyboardManager this$0
com.google.android.gms.maps.MapsInitializer$Renderer: com.google.android.gms.maps.MapsInitializer$Renderer LATEST
kotlin.jvm.internal.ClassReference: java.util.Map FUNCTION_CLASSES
io.flutter.embedding.engine.systemchannels.TextInputChannel: io.flutter.plugin.common.MethodChannel channel
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter FLOAT
io.sentry.SpanId: io.sentry.SpanId EMPTY_ID
io.sentry.SentryOptions: io.sentry.SentryLevel diagnosticLevel
com.google.common.base.Predicates$ObjectPredicate: com.google.common.base.Predicates$ObjectPredicate NOT_NULL
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState: int selectionStart
kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: long idleWorkerKeepAliveNs
androidx.fragment.app.FragmentManagerImpl: android.view.animation.Interpolator DECELERATE_CUBIC
com.google.android.gms.common.api.internal.BasePendingResult: boolean zam
io.flutter.plugins.googlemaps.MarkersController: io.flutter.plugin.common.MethodChannel methodChannel
androidx.lifecycle.CompositeGeneratedAdaptersObserver: androidx.lifecycle.GeneratedAdapter[] mGeneratedAdapters
io.sentry.protocol.SentrySpan: io.sentry.SpanStatus status
androidx.fragment.app.FragmentTransaction$Op: int mPopEnterAnim
com.google.gson.stream.JsonScope: int EMPTY_ARRAY
com.google.android.gms.maps.GoogleMap: com.google.android.gms.maps.UiSettings zzb
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$1: io.sentry.android.core.SentryAndroidOptions $options
io.flutter.view.AccessibilityBridge$4: io.flutter.view.AccessibilityBridge this$0
com.google.android.gms.common.internal.zze: int zzb
io.sentry.android.core.DefaultAndroidEventProcessor: java.util.Date appStartTime
com.google.gson.stream.JsonReader: int peekedNumberLength
kotlinx.coroutines.scheduling.CoroutineScheduler: long parkedWorkersStack
com.google.gson.stream.JsonReader: long peekedLong
io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding: io.flutter.view.TextureRegistry textureRegistry
kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: int corePoolSize
androidx.fragment.app.BackStackRecord: int mIndex
com.google.android.gms.auth.api.signin.internal.Storage: java.util.concurrent.locks.Lock zac
io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness: java.lang.String encodedName
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType FOLD
com.google.android.gms.common.api.internal.zadb: com.google.android.gms.common.api.internal.zadc zaa
com.google.android.gms.maps.GoogleMapOptions: java.lang.Boolean zze
io.flutter.view.VsyncWaiter$DisplayListener: android.hardware.display.DisplayManager displayManager
com.google.gson.internal.LinkedTreeMap$KeySet$1: com.google.gson.internal.LinkedTreeMap$KeySet this$1
com.google.android.gms.common.zzm: com.google.android.gms.common.zzk zzd
io.sentry.protocol.SentrySpan: io.sentry.SpanId parentSpanId
com.google.android.gms.signin.SignInOptions: boolean zab
kotlinx.coroutines.Job$Key: kotlinx.coroutines.Job$Key $$INSTANCE
io.flutter.view.AccessibilityBridge$SemanticsNode: java.util.List customAccessibilityActions
androidx.fragment.app.FragmentTransaction: int mBreadCrumbShortTitleRes
io.sentry.SentryOptions: java.util.List eventProcessors
androidx.window.layout.WindowInfoTracker$Companion: java.lang.String TAG
com.tekartik.sqflite.SqflitePlugin: android.os.Handler handler
com.google.android.gms.common.internal.zzn: boolean zzf
androidx.arch.core.executor.DefaultTaskExecutor$1: androidx.arch.core.executor.DefaultTaskExecutor this$0
androidx.fragment.app.FragmentTransitionCompat21$1: android.graphics.Rect val$epicenter
kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt$createCoroutineUnintercepted$$inlined$createCoroutineFromSuspendFunction$IntrinsicsKt__IntrinsicsJvmKt$3: int label
com.google.gson.internal.bind.ObjectTypeAdapter$2: int[] $SwitchMap$com$google$gson$stream$JsonToken
com.google.common.collect.MapMakerInternalMap$Strength: com.google.common.collect.MapMakerInternalMap$Strength WEAK
io.flutter.embedding.engine.dart.DartMessenger: io.flutter.embedding.engine.dart.DartMessenger$TaskQueueFactory taskQueueFactory
com.google.android.gms.auth.api.signin.GoogleSignInAccount: java.lang.String zaf
androidx.fragment.app.Fragment: int mContentLayoutId
io.sentry.flutter.R$id: int accessibility_custom_action_28
io.sentry.SentryClient: io.sentry.SentryOptions options
com.google.gson.internal.LinkedTreeMap$KeySet: com.google.gson.internal.LinkedTreeMap this$0
androidx.fragment.app.FragmentManagerViewModel: java.util.HashMap mViewModelStores
com.google.android.gms.common.internal.zzag: int zzd
com.google.android.gms.common.api.internal.NonGmsServiceBrokerClient: android.os.IBinder zai
com.google.android.gms.common.api.internal.GoogleApiManager: java.util.Set zar
kotlinx.coroutines.flow.AbstractFlow$collect$1: int label
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: java.util.Set viewDestroyListeners
com.google.android.gms.maps.model.MapStyleOptions: java.lang.String zzb
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewTouch: int flags
com.google.android.gms.common.internal.zzj: int zzc
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: java.lang.reflect.Method getSourceNodeId
androidx.fragment.app.FragmentTransitionCompat21$2: android.view.View val$fragmentView
io.sentry.Scope: io.sentry.protocol.Request request
com.google.gson.internal.bind.ArrayTypeAdapter: com.google.gson.TypeAdapterFactory FACTORY
io.sentry.HostnameCache: long cacheDuration
io.sentry.android.core.EnvelopeFileObserver: java.lang.String rootPath
kotlinx.coroutines.DefaultExecutor: long KEEP_ALIVE_NANOS
io.flutter.plugins.googlemaps.GoogleMapController: java.util.List initialTileOverlays
io.flutter.plugin.common.StandardMethodCodec: io.flutter.plugin.common.StandardMethodCodec INSTANCE
io.sentry.flutter.R$dimen: int notification_subtext_size
io.sentry.RequestDetails: java.util.Map headers
kotlin.coroutines.jvm.internal.ModuleNameRetriever: kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache notOnJava9
androidx.window.R$styleable: int SplitPlaceholderRule_splitMinSmallestWidth
io.flutter.plugins.urllauncher.WebViewActivity$FlutterWebChromeClient$1: io.flutter.plugins.urllauncher.WebViewActivity$FlutterWebChromeClient this$1
androidx.fragment.app.DialogFragment: boolean mViewDestroyed
com.google.android.gms.common.internal.zzr: java.util.HashMap zzb
com.google.android.gms.signin.internal.zag: android.os.Parcelable$Creator CREATOR
com.tekartik.sqflite.operation.BatchOperation: boolean noResult
com.google.android.gms.common.internal.ClientSettings: java.lang.String zah
com.google.gson.internal.ConstructorConstructor$1: com.google.gson.InstanceCreator val$typeCreator
com.google.android.gms.dynamite.DynamiteModule: com.google.android.gms.dynamite.DynamiteModule$VersionPolicy PREFER_HIGHEST_OR_REMOTE_VERSION
kotlinx.coroutines.BlockingEventLoop: java.lang.Thread thread
androidx.lifecycle.LiveData: java.lang.Object mPendingData
androidx.core.graphics.drawable.IconCompat: android.os.Parcelable mParcelable
io.flutter.plugin.common.StandardMessageCodec: boolean LITTLE_ENDIAN
io.sentry.CircularFifoQueue$1: io.sentry.CircularFifoQueue this$0
com.google.android.gms.maps.model.CircleOptions: double zzb
com.google.android.gms.maps.model.MarkerOptions: boolean zzg
com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment: java.lang.ref.ReferenceQueue queueForKeys
io.sentry.android.core.ManifestMetadataReader: java.lang.String TRACES_SAMPLE_RATE
androidx.core.app.NotificationCompat$Builder: long mTimeout
kotlinx.coroutines.DispatcherExecutor: kotlinx.coroutines.CoroutineDispatcher dispatcher
io.flutter.plugin.platform.PlatformViewsController: android.content.Context context
androidx.core.app.NotificationCompat$Builder: boolean mColorizedSet
io.sentry.flutter.R$id: int tag_accessibility_clickable_spans
io.sentry.android.core.BuildConfig: java.lang.String SENTRY_ANDROID_SDK_NAME
io.flutter.embedding.engine.systemchannels.RestorationChannel$2: io.flutter.embedding.engine.systemchannels.RestorationChannel this$0
androidx.arch.core.internal.SafeIterableMap$Entry: androidx.arch.core.internal.SafeIterableMap$Entry mNext
com.google.android.gms.common.api.internal.zabq: com.google.android.gms.common.api.Api$Client zac
androidx.core.app.NotificationCompat$Builder: android.app.PendingIntent mFullScreenIntent
androidx.loader.app.LoaderManagerImpl$LoaderViewModel: boolean mCreatingLoader
io.flutter.plugin.editing.TextInputPlugin$InputTarget: int id
kotlin.text.StringsKt__IndentKt$getIndentFunction$1: kotlin.text.StringsKt__IndentKt$getIndentFunction$1 INSTANCE
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag IS_CHECKED
androidx.fragment.app.BackStackState: int mIndex
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: java.lang.reflect.Method getParentNodeId
kotlinx.coroutines.internal.OnUndeliveredElementKt$bindCancellationFun$1: kotlin.coroutines.CoroutineContext $context
kotlin.jvm.internal.CallableReference: java.lang.String signature
com.tekartik.sqflite.dev.Debug: boolean _EXTRA_LOGV
androidx.window.embedding.SplitPairFilter: java.lang.String secondaryActivityIntentAction
io.sentry.NoOpEnvelopeReader: io.sentry.NoOpEnvelopeReader instance
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: boolean isWaitingForActivityReattachment
androidx.loader.app.LoaderManagerImpl$LoaderViewModel: androidx.collection.SparseArrayCompat mLoaders
androidx.core.view.KeyEventDispatcher: java.lang.reflect.Method sActionBarOnMenuKeyMethod
com.google.gson.stream.JsonReader: int NUMBER_CHAR_DECIMAL
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics: int viewInsetLeft
androidx.core.os.LocaleListPlatformWrapper: android.os.LocaleList mLocaleList
androidx.window.embedding.SplitController: androidx.window.embedding.SplitController$Companion Companion
kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object countOrElement
kotlinx.coroutines.flow.internal.SafeCollector_commonKt$checkContext$result$1: kotlinx.coroutines.flow.internal.SafeCollector $this_checkContext
androidx.fragment.app.FragmentManagerImpl: androidx.fragment.app.FragmentManagerViewModel mNonConfig
kotlinx.coroutines.InactiveNodeList: kotlinx.coroutines.NodeList list
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics: int height
kotlinx.coroutines.ThreadLocalEventLoop: kotlinx.coroutines.ThreadLocalEventLoop INSTANCE
kotlin.sequences.SequencesKt__SequencesKt$asSequence$$inlined$Sequence$1: java.util.Iterator $this_asSequence$inlined
com.google.common.collect.MapMakerInternalMap$Segment: java.util.concurrent.atomic.AtomicReferenceArray table
io.sentry.adapters.SpanIdDeserializerAdapter: io.sentry.SentryOptions options
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$4: io.sentry.android.core.SentryAndroidOptions $options
com.google.android.gms.common.internal.MethodInvocation: int zah
androidx.versionedparcelable.VersionedParcelParcel: int mEnd
io.flutter.embedding.android.FlutterView: io.flutter.view.AccessibilityBridge$OnAccessibilityChangeListener onAccessibilityChangeListener
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState: java.lang.String text
io.sentry.SentryTraceHeader: io.sentry.protocol.SentryId traceId
io.sentry.GsonSerializer: java.nio.charset.Charset UTF_8
com.google.android.gms.internal.common.zzc: java.lang.ClassLoader zza
kotlin.internal.jdk7.JDK7PlatformImplementations$ReflectSdkVersion: java.lang.Integer sdkVersion
io.flutter.plugin.mouse.MouseCursorPlugin$1: io.flutter.plugin.mouse.MouseCursorPlugin this$0
io.sentry.flutter.R$id: int chronometer
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1: boolean val$isPrimitive
io.sentry.flutter.R$styleable: int[] GradientColor
io.sentry.protocol.DebugMeta: io.sentry.protocol.SdkInfo sdkInfo
androidx.fragment.app.FragmentManagerViewModel: java.util.HashMap mChildNonConfigs
com.google.android.gms.dynamite.zzo: int zza
com.tekartik.sqflite.operation.MethodCallOperation: io.flutter.plugin.common.MethodCall methodCall
androidx.core.R$id: int accessibility_custom_action_29
androidx.fragment.app.FragmentManagerImpl$PopBackStackState: int mId
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$3: io.sentry.android.core.SentryAndroidOptions $options
io.flutter.embedding.android.FlutterImageView$SurfaceKind: io.flutter.embedding.android.FlutterImageView$SurfaceKind background
com.google.android.gms.common.api.internal.ApiKey: java.lang.String zad
com.google.android.gms.common.api.GoogleApi: int zah
androidx.lifecycle.LifecycleRegistry$ObserverWithState: androidx.lifecycle.LifecycleEventObserver mLifecycleObserver
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeature: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState state
com.google.common.collect.MapMakerInternalMap$ValueIterator: com.google.common.collect.MapMakerInternalMap this$0
io.flutter.embedding.android.FlutterView: io.flutter.plugin.editing.TextInputPlugin textInputPlugin
com.google.common.hash.AbstractByteHasher: java.nio.ByteBuffer scratch
io.sentry.flutter.R$attr: int fontProviderAuthority
kotlinx.coroutines.scheduling.LimitingDispatcher: java.lang.String name
androidx.core.app.NotificationCompat$Builder: int mNumber
com.google.common.reflect.Types: com.google.common.base.Function TYPE_NAME
androidx.fragment.app.FragmentTransitionCompat21$3: java.lang.Object val$enterTransition
io.sentry.Session: java.lang.String release
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action SET_TEXT
androidx.lifecycle.ReportFragment: androidx.lifecycle.ReportFragment$ActivityInitializationListener mProcessListener
io.flutter.embedding.engine.loader.FlutterApplicationInfo: java.lang.String vmSnapshotData
kotlin.coroutines.jvm.internal.CompletedContinuation: kotlin.coroutines.jvm.internal.CompletedContinuation INSTANCE
androidx.core.graphics.drawable.IconCompat: android.content.res.ColorStateList mTintList
kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicReferenceArray workers
io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler$EventSinkImplementation: io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler this$1
io.flutter.plugin.platform.SingleViewPresentation: android.view.View$OnFocusChangeListener focusChangeListener
androidx.fragment.app.FragmentTransitionCompat21$3: java.lang.Object val$sharedElementTransition
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag HAS_TOGGLED_STATE
androidx.fragment.app.FragmentTransition$4: androidx.fragment.app.Fragment val$inFragment
com.google.android.gms.common.internal.zzd: int zzb
androidx.arch.core.executor.DefaultTaskExecutor: android.os.Handler mMainHandler
io.sentry.flutter.R$attr: int ttcIndex
androidx.fragment.app.FragmentTransaction$Op: androidx.lifecycle.Lifecycle$State mCurrentMaxState
androidx.fragment.app.BackStackState: int[] mOps
com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$AtomicHelper ATOMIC_HELPER
io.sentry.DuplicateEventDetectionEventProcessor: java.util.Map capturedObjects
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutator: android.graphics.Rect rect
androidx.collection.SparseArrayCompat: int mSize
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView: io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack mutatorsStack
io.sentry.Span: io.sentry.IHub hub
io.sentry.flutter.R$styleable: int[] SplitPairFilter
androidx.core.graphics.drawable.IconCompat: int mInt1
io.flutter.embedding.engine.systemchannels.PlatformChannel$2: int[] $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$DeviceOrientation
androidx.fragment.app.FragmentState: java.lang.String mClassName
com.google.common.collect.MapMakerInternalMap: java.util.Set keySet
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.LocalizationChannel localizationChannel
androidx.window.core.Version: int patch
io.flutter.plugins.urllauncher.WebViewActivity: java.lang.String ACTION_CLOSE
io.sentry.adapters.OrientationSerializerAdapter: io.sentry.SentryOptions options
io.sentry.protocol.Device$DeviceOrientation: io.sentry.protocol.Device$DeviceOrientation LANDSCAPE
io.flutter.embedding.engine.loader.FlutterLoader$InitResult: java.lang.String engineCachesPath
androidx.lifecycle.LifecycleRegistry: boolean mHandlingEvent
androidx.lifecycle.ProcessLifecycleOwner: java.lang.Runnable mDelayedPauseRunnable
com.google.android.gms.base.R$string: int common_google_play_services_notification_channel_name
kotlin.sequences.ConstrainedOnceSequence: java.util.concurrent.atomic.AtomicReference sequenceRef
kotlinx.coroutines.Dispatchers: kotlinx.coroutines.CoroutineDispatcher Unconfined
io.sentry.SentryOptions: long sessionTrackingIntervalMillis
com.google.android.gms.dynamite.DynamiteModule$VersionPolicy$SelectionResult: int localVersion
io.sentry.android.core.EnvelopeFileObserver$CachedEnvelopeHint: boolean succeeded
androidx.fragment.app.FragmentTransition: androidx.fragment.app.FragmentTransitionImpl SUPPORT_IMPL
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewTouch: java.lang.Object rawPointerPropertiesList
com.google.gson.FieldNamingPolicy: com.google.gson.FieldNamingPolicy LOWER_CASE_WITH_DASHES
kotlinx.coroutines.JobSupport: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _state$FU
com.google.common.util.concurrent.AbstractFuture$Waiter: com.google.common.util.concurrent.AbstractFuture$Waiter TOMBSTONE
io.sentry.SentryItemType: io.sentry.SentryItemType Event
kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState PARKING
io.sentry.SentryOptions: io.sentry.cache.IEnvelopeCache envelopeDiskCache
com.google.gson.stream.JsonReader: int PEEKED_DOUBLE_QUOTED
io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler$1: io.flutter.plugin.common.BinaryMessenger$BinaryReply val$reply
io.flutter.plugin.platform.SingleViewPresentation: int viewId
io.sentry.IpAddressUtils: java.util.List DEFAULT_IP_ADDRESS_VALID_VALUES
io.sentry.SentryOptions: int maxSpans
androidx.core.app.ActivityCompat: androidx.core.app.ActivityCompat$PermissionCompatDelegate sDelegate
com.google.android.gms.base.R$string: int common_open_on_phone
com.google.android.gms.dynamic.DeferredLifecycleHelper: java.util.LinkedList zac
io.sentry.protocol.SentryRuntime: java.lang.String name
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$2: io.flutter.embedding.android.FlutterActivityAndFragmentDelegate this$0
kotlinx.coroutines.CoroutineId: kotlinx.coroutines.CoroutineId$Key Key
io.sentry.DirectoryProcessor$SendCachedEnvelopeHint: boolean succeeded
kotlinx.coroutines.internal.ExceptionsConstuctorKt: java.util.WeakHashMap exceptionCtors
com.google.android.gms.common.internal.zzn: java.lang.String zzb
com.google.android.gms.common.ErrorDialogFragment: android.app.Dialog zaa
androidx.core.view.KeyEventDispatcher: boolean sActionBarFieldsFetched
androidx.fragment.app.Fragment: android.os.Bundle mSavedFragmentState
com.google.android.gms.common.zzi: int zza
io.flutter.plugin.platform.PlatformViewsController: java.util.HashMap vdControllers
com.tekartik.sqflite.SqflitePlugin$8: com.tekartik.sqflite.SqflitePlugin$BgResult val$bgResult
com.google.android.gms.dynamic.zae: android.content.Context zaa
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics: int systemGestureInsetBottom
com.google.android.gms.dynamite.DynamiteModule: com.google.android.gms.dynamite.DynamiteModule$VersionPolicy PREFER_HIGHEST_OR_LOCAL_VERSION_NO_FORCE_STAGING
io.flutter.embedding.android.FlutterView$ZeroSides: io.flutter.embedding.android.FlutterView$ZeroSides[] $VALUES
androidx.window.layout.WindowMetricsCalculator$Companion: kotlin.jvm.functions.Function1 decorator
com.google.android.gms.internal.common.zza: android.os.IBinder zza
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action MOVE_CURSOR_BACKWARD_BY_CHARACTER
androidx.core.view.WindowInsetsControllerCompat$Impl30: androidx.core.view.WindowInsetsControllerCompat mCompatController
io.flutter.view.AccessibilityBridge$StringAttributeType: io.flutter.view.AccessibilityBridge$StringAttributeType SPELLOUT
androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State RESUMED
io.flutter.plugin.localization.LocalizationPlugin: io.flutter.embedding.engine.systemchannels.LocalizationChannel localizationChannel
androidx.window.embedding.EmbeddingTranslatingCallback: androidx.window.embedding.EmbeddingInterfaceCompat$EmbeddingCallbackInterface callback
com.google.android.gms.common.api.AvailabilityException: androidx.collection.ArrayMap zaa
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.String value
com.google.gson.internal.bind.TreeTypeAdapter: com.google.gson.reflect.TypeToken typeToken
io.flutter.view.AccessibilityViewEmbedder: android.view.View rootAccessibilityView
androidx.collection.MapCollections: androidx.collection.MapCollections$KeySet mKeySet
androidx.fragment.app.Fragment: boolean mIsNewlyAdded
androidx.fragment.app.FragmentManagerImpl: java.util.ArrayList mTmpAddedFragments
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry: android.graphics.SurfaceTexture$OnFrameAvailableListener onFrameListener
io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener: java.lang.Runnable mOnDrawRunnable
io.flutter.plugin.editing.ListenableEditingState: android.view.inputmethod.BaseInputConnection mDummyConnection
io.sentry.DirectoryProcessor$SendCachedEnvelopeHint: io.sentry.ILogger logger
io.flutter.embedding.engine.systemchannels.KeyEventChannel$FlutterKeyEvent: android.view.KeyEvent event
androidx.arch.core.internal.SafeIterableMap$Entry: java.lang.Object mKey
com.google.android.gms.common.api.internal.BasePendingResult: java.util.ArrayList zag
io.sentry.flutter.R$styleable: int FontFamily_fontProviderPackage
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: java.lang.String encodedName
com.google.android.gms.common.api.Status: com.google.android.gms.common.api.Status RESULT_TIMEOUT
com.google.android.gms.maps.model.CircleOptions: int zzd
com.google.android.gms.common.internal.zaf: android.content.Intent zaa
com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter: java.util.Map constantToName
com.google.android.gms.dynamite.DynamiteModule: com.google.android.gms.dynamite.DynamiteModule$VersionPolicy PREFER_REMOTE
com.google.gson.internal.bind.SqlDateTypeAdapter: com.google.gson.TypeAdapterFactory FACTORY
io.flutter.FlutterInjector$Builder: io.flutter.embedding.engine.loader.FlutterLoader flutterLoader
io.flutter.plugin.common.MethodChannel: java.lang.String name
io.sentry.SentryOptions: java.lang.Double tracesSampleRate
io.sentry.protocol.App: java.lang.String appIdentifier
com.google.android.gms.common.api.internal.zabt: com.google.android.gms.common.ConnectionResult zaa
io.sentry.transport.RateLimiter$DataCategory: io.sentry.transport.RateLimiter$DataCategory Error
io.sentry.Sentry: io.sentry.IHub mainHub
io.sentry.android.core.LifecycleWatcher: io.sentry.IHub hub
kotlinx.coroutines.scheduling.TasksKt: int CORE_POOL_SIZE
com.google.common.util.concurrent.ThreadFactoryBuilder: java.lang.Thread$UncaughtExceptionHandler uncaughtExceptionHandler
com.google.android.gms.common.api.internal.GoogleApiManager: boolean zah
com.google.android.gms.maps.model.PolylineOptions: boolean zze
io.flutter.view.AccessibilityBridge$SemanticsNode: int previousTextSelectionBase
io.flutter.embedding.android.FlutterView: io.flutter.view.AccessibilityBridge accessibilityBridge
com.google.gson.internal.LinkedTreeMap$LinkedTreeMapIterator: com.google.gson.internal.LinkedTreeMap$Node lastReturned
com.google.common.io.Files$FilePredicate: com.google.common.io.Files$FilePredicate IS_DIRECTORY
io.flutter.plugin.editing.TextInputPlugin$2: boolean val$isAffine
com.google.android.gms.maps.model.CameraPosition: float zoom
kotlin.coroutines.CombinedContext$toString$1: kotlin.coroutines.CombinedContext$toString$1 INSTANCE
com.google.android.gms.maps.model.CameraPosition: float tilt
androidx.window.layout.ExtensionWindowLayoutInfoBackend: java.util.concurrent.locks.ReentrantLock extensionWindowBackendLock
com.google.android.gms.common.api.Status: int zzb
com.google.android.gms.common.api.GoogleApi: com.google.android.gms.common.api.internal.StatusExceptionMapper zaj
io.flutter.plugins.googlemaps.GoogleMapController: io.flutter.plugins.googlemaps.LifecycleProvider lifecycleProvider
com.google.gson.internal.ConstructorConstructor$14: com.google.gson.internal.ConstructorConstructor this$0
io.sentry.flutter.R$styleable: int SplitPairFilter_secondaryActivityName
io.sentry.protocol.Mechanism: java.lang.String helpLink
io.sentry.protocol.SentryTransaction: java.util.Date timestamp
io.flutter.plugin.editing.TextInputPlugin: android.view.inputmethod.InputMethodManager mImm
com.google.android.gms.common.api.Api: com.google.android.gms.common.api.Api$AbstractClientBuilder zaa
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter CURRENCY
com.google.android.gms.common.api.Scope: int zza
androidx.core.R$id: int accessibility_custom_action_0
io.flutter.view.AccessibilityBridge$TextDirection: io.flutter.view.AccessibilityBridge$TextDirection UNKNOWN
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization CHARACTERS
com.google.android.gms.common.api.GoogleApi: com.google.android.gms.common.api.internal.GoogleApiManager zaa
io.sentry.android.core.LifecycleWatcher: long sessionIntervalMillis
io.flutter.embedding.engine.renderer.FlutterRenderer: android.os.Handler handler
com.google.android.gms.common.api.internal.BackgroundDetector: boolean zze
kotlinx.coroutines.DefaultExecutor: int debugStatus
androidx.window.R$styleable: int SplitPairRule_finishSecondaryWithPrimary
io.flutter.plugin.common.StringCodec: io.flutter.plugin.common.StringCodec INSTANCE
androidx.fragment.app.FragmentManagerViewModel: boolean mHasBeenCleared
io.sentry.flutter.R$attr: int fontStyle
com.google.android.gms.internal.maps.zzc: java.lang.ClassLoader zza
com.tekartik.sqflite.SqflitePlugin$2: com.tekartik.sqflite.Database val$database
kotlinx.coroutines.internal.MissingMainCoroutineDispatcher: java.lang.Throwable cause
androidx.window.layout.HardwareFoldingFeature$Type: androidx.window.layout.HardwareFoldingFeature$Type$Companion Companion
io.flutter.embedding.engine.systemchannels.RestorationChannel$1: io.flutter.embedding.engine.systemchannels.RestorationChannel this$0
io.sentry.CircularFifoQueue: int end
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory URL_FACTORY
androidx.fragment.app.DialogFragment: int mStyle
kotlin.internal.PlatformImplementations$ReflectThrowable: java.lang.reflect.Method addSuppressed
com.google.android.gms.signin.internal.zaa: int zab
io.sentry.flutter.R$id: int accessibility_custom_action_5
com.google.android.gms.common.internal.TelemetryData: java.util.List zab
androidx.window.R$styleable: int SplitPlaceholderRule_splitMinWidth
com.google.android.gms.signin.zad: com.google.android.gms.common.api.Scope zaf
io.flutter.plugins.urllauncher.WebViewActivity: android.content.BroadcastReceiver broadcastReceiver
com.google.android.gms.maps.model.MarkerOptions: float zzf
io.sentry.android.core.ManifestMetadataReader: java.lang.String BREADCRUMBS_ACTIVITY_LIFECYCLE_ENABLE
androidx.window.embedding.SplitRule: int minSmallestWidth
io.sentry.transport.AsyncHttpTransport$AsyncConnectionThreadFactory: int cnt
androidx.core.app.RemoteActionCompat: boolean mEnabled
com.google.android.gms.common.GoogleApiAvailability: int GOOGLE_PLAY_SERVICES_VERSION_CODE
androidx.fragment.app.FragmentTransitionCompat21$3: java.util.ArrayList val$exitingViews
com.google.common.base.Predicates$ObjectPredicate: com.google.common.base.Predicates$ObjectPredicate ALWAYS_FALSE
io.sentry.android.core.ANRWatchDog: io.sentry.android.core.IHandler uiHandler
com.google.common.collect.MapMaker: boolean useCustomMap
kotlinx.coroutines.internal.ExceptionsConstuctorKt$tryCopyException$5$1: kotlinx.coroutines.internal.ExceptionsConstuctorKt$tryCopyException$5$1 INSTANCE
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action SHOW_ON_SCREEN
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: int label
androidx.fragment.app.FragmentManagerImpl$5: android.view.View val$animatingView
com.google.gson.internal.bind.TreeTypeAdapter: com.google.gson.TypeAdapter delegate
com.tekartik.sqflite.dev.Debug: boolean LOGV
io.sentry.protocol.Request: java.lang.String cookies
androidx.core.app.RemoteActionCompat: java.lang.CharSequence mTitle
io.flutter.plugin.platform.SingleViewPresentation: boolean startFocused
androidx.core.view.ViewCompat$UnhandledKeyEventManager: java.lang.ref.WeakReference mLastDispatchedPreViewKeyEvent
com.google.android.gms.common.internal.zzn: int zze
androidx.fragment.app.BackStackState: java.util.ArrayList mSharedElementSourceNames
com.google.android.gms.common.api.internal.zabu: com.google.android.gms.common.internal.IAccountAccessor zad
androidx.fragment.app.FragmentTransition$2: java.util.ArrayList val$exitingViews
androidx.activity.ImmLeaksCleaner: int sReflectedFieldsInitialized
io.flutter.embedding.engine.systemchannels.DeferredComponentChannel: io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager deferredComponentManager
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.WorkQueue localQueue
io.flutter.plugins.googlemaps.GoogleMapController: float density
io.flutter.embedding.engine.loader.FlutterLoader: boolean initialized
io.flutter.embedding.engine.FlutterEngine: io.flutter.plugin.platform.PlatformViewsController platformViewsController
kotlinx.coroutines.JobSupportKt: kotlinx.coroutines.internal.Symbol COMPLETING_ALREADY
androidx.core.R$id: int accessibility_custom_action_1
io.flutter.embedding.engine.dart.DartMessenger$BufferedMessageInfo: int replyId
com.google.android.gms.maps.model.LatLng: double longitude
io.sentry.EnvelopeSender: io.sentry.ISerializer serializer
io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness: io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness DARK
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: java.util.Map activityAwarePlugins
com.google.android.gms.common.api.internal.BackgroundDetector: java.util.ArrayList zzd
io.flutter.embedding.android.AndroidTouchProcessor: android.graphics.Matrix IDENTITY_TRANSFORM
io.sentry.SentryBaseEvent: java.lang.String release
com.google.android.gms.common.ConnectionResult: int zza
io.flutter.embedding.engine.dart.DartMessenger: java.util.Map messageHandlers
androidx.window.layout.HardwareFoldingFeature$Type: androidx.window.layout.HardwareFoldingFeature$Type HINGE
io.sentry.protocol.SentryThread: java.lang.Integer priority
com.google.android.gms.common.internal.zzag: java.lang.String zzc
com.google.android.gms.maps.model.PolylineOptions: java.util.List zza
com.google.gson.GsonBuilder: boolean generateNonExecutableJson
kotlinx.coroutines.internal.SystemPropsKt__SystemPropsKt: int AVAILABLE_PROCESSORS
androidx.core.app.Person: java.lang.String mKey
io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler: java.util.concurrent.atomic.AtomicReference activeSink
com.google.android.gms.common.api.internal.zao: com.google.android.gms.common.api.internal.zam zab
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action SCROLL_DOWN
io.flutter.view.AccessibilityBridge$SemanticsNode: float previousScrollExtentMin
androidx.core.app.NotificationCompat$Builder: android.app.Notification mPublicVersion
io.sentry.protocol.SentrySpan: java.util.Date startTimestamp
io.sentry.android.core.SystemEventsBreadcrumbsIntegration$SystemEventsBroadcastReceiver: io.sentry.ILogger logger
io.flutter.view.AccessibilityBridge$StringAttribute: int start
androidx.lifecycle.SingleGeneratedAdapterObserver: androidx.lifecycle.GeneratedAdapter mGeneratedAdapter
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory LOCALE_FACTORY
com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node next
com.tekartik.sqflite.operation.MethodCallOperation$Result: io.flutter.plugin.common.MethodChannel$Result result
io.sentry.transport.RateLimiter: java.util.Map sentryRetryAfterLimit
io.sentry.android.core.ANRWatchDog: io.sentry.android.core.ANRWatchDog$ANRListener anrListener
io.sentry.android.core.LifecycleWatcher: java.util.TimerTask timerTask
kotlinx.coroutines.channels.AbstractSendChannel: java.lang.Object onCloseHandler
androidx.collection.ArrayMap$1: androidx.collection.ArrayMap this$0
androidx.fragment.app.Fragment: androidx.lifecycle.MutableLiveData mViewLifecycleOwnerLiveData
com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper: long WAITER_NEXT_OFFSET
io.sentry.SpanContext: java.util.Map tags
com.google.gson.internal.ConstructorConstructor$2: java.lang.reflect.Type val$type
com.google.common.collect.ImmutableSet$Builder: int hashCode
kotlin.ranges.IntProgression: int first
com.google.android.gms.base.R$string: int common_google_play_services_update_button
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: long minDelayUntilStealableTaskNs
com.google.android.gms.maps.model.VisibleRegion: com.google.android.gms.maps.model.LatLng farRight
androidx.core.app.NotificationCompatBuilder: android.app.Notification$Builder mBuilder
io.flutter.plugins.googlemaps.PolylineBuilder: com.google.android.gms.maps.model.PolylineOptions polylineOptions
androidx.core.view.ViewCompat: java.util.WeakHashMap sViewPropertyAnimatorMap
com.google.gson.internal.ConstructorConstructor$10: com.google.gson.internal.ConstructorConstructor this$0
androidx.window.embedding.SplitController: androidx.window.embedding.SplitController globalInstance
io.sentry.protocol.SentryStackFrame: java.lang.Integer lineno
io.sentry.protocol.SentrySpan: io.sentry.SpanId spanId
com.google.android.gms.tasks.zzw: com.google.android.gms.tasks.zzr zzb
io.flutter.plugins.googlemaps.GoogleMapController: boolean trackCameraPosition
io.flutter.plugins.googlemaps.GoogleMapController: io.flutter.plugins.googlemaps.CirclesController circlesController
io.sentry.flutter.R$styleable: int GradientColor_android_startColor
com.tekartik.sqflite.SqflitePlugin$7: com.tekartik.sqflite.SqflitePlugin this$0
io.sentry.android.core.ManifestMetadataReader: java.lang.String BREADCRUMBS_APP_COMPONENTS_ENABLE
io.sentry.flutter.R$styleable: int GradientColor_android_centerY
io.flutter.embedding.android.FlutterView: boolean isFlutterUiDisplayed
kotlinx.coroutines.internal.LockFreeLinkedListNode: java.lang.Object _next
io.sentry.SynchronizedCollection: java.lang.Object lock
io.sentry.protocol.Device: java.lang.Long storageSize
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType UNKNOWN
io.sentry.protocol.OperatingSystem: java.lang.String version
io.sentry.android.core.EnvelopeFileObserver: long flushTimeoutMillis
androidx.window.R$id: int ltr
com.google.android.gms.common.api.internal.GoogleApiManager: com.google.android.gms.common.api.internal.GoogleApiManager zad
kotlinx.coroutines.channels.ArrayChannel: int capacity
kotlinx.coroutines.ExecutorCoroutineDispatcher$Key$1: kotlinx.coroutines.ExecutorCoroutineDispatcher$Key$1 INSTANCE
io.flutter.view.AccessibilityBridge$SemanticsNode: float[] inverseTransform
kotlinx.coroutines.internal.LockFreeTaskQueueCore: java.util.concurrent.atomic.AtomicLongFieldUpdater _state$FU
kotlinx.coroutines.internal.LockFreeTaskQueueCore: boolean singleConsumer
androidx.window.layout.WindowInfoTrackerImpl: androidx.window.layout.WindowInfoTrackerImpl$Companion Companion
com.google.android.gms.common.internal.BaseGmsClient: com.google.android.gms.common.internal.BaseGmsClient$BaseConnectionCallbacks zzw
com.google.gson.stream.JsonReader: int PEEKED_FALSE
com.google.android.gms.tasks.zzu: android.os.Handler zza
androidx.lifecycle.LiveData: androidx.arch.core.internal.SafeIterableMap mObservers
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterJNI$AsyncWaitForVsyncDelegate asyncWaitForVsyncDelegate
io.sentry.SpanStatus: io.sentry.SpanStatus RESOURCE_EXHAUSTED
com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter: java.util.Map nameToConstant
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics: int systemGestureInsetRight
androidx.lifecycle.LiveData$LifecycleBoundObserver: androidx.lifecycle.LiveData this$0
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_CREATE
com.google.android.gms.common.api.internal.BasePendingResult: java.lang.ref.WeakReference zac
androidx.window.R$styleable: int[] SplitPlaceholderRule
io.sentry.protocol.Gpu: java.util.Map unknown
com.google.android.gms.dynamic.zag: com.google.android.gms.dynamic.DeferredLifecycleHelper zaa
kotlinx.coroutines.internal.LockFreeLinkedListNode: java.lang.Object _removedRef
io.sentry.protocol.SentrySpan: java.lang.String description
com.google.gson.internal.LinkedHashTreeMap$EntrySet$1: com.google.gson.internal.LinkedHashTreeMap$EntrySet this$1
com.google.gson.internal.bind.TreeTypeAdapter$SingleTypeFactory: com.google.gson.JsonDeserializer deserializer
io.sentry.transport.RateLimiter$DataCategory: io.sentry.transport.RateLimiter$DataCategory[] $VALUES
androidx.core.view.WindowInsetsControllerCompat$Impl20: android.view.View mView
io.sentry.SentryLevel: io.sentry.SentryLevel FATAL
io.sentry.CircularFifoQueue$1: boolean isFirst
io.flutter.view.AccessibilityBridge$SemanticsNode: float[] globalTransform
kotlinx.coroutines.EventLoop: boolean shared
com.google.android.gms.common.internal.GmsClient: java.util.Set zac
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType PHONE
androidx.fragment.app.FragmentManagerImpl$EndViewTransitionAnimation: boolean mTransitionEnded
io.sentry.SpanContext: java.lang.Boolean sampled
io.sentry.SentryTracer: io.sentry.Span root
io.sentry.flutter.R$attr: int nestedScrollViewStyle
io.flutter.embedding.engine.dart.DartMessenger$DefaultTaskQueueFactory: java.util.concurrent.ExecutorService executorService
io.flutter.plugin.platform.PlatformViewsController$1: io.flutter.plugin.platform.PlatformViewsController this$0
androidx.window.R$attr: int clearTop
androidx.window.layout.FoldingFeature$Orientation: androidx.window.layout.FoldingFeature$Orientation VERTICAL
io.sentry.SentryEnvelope: java.lang.Iterable items
androidx.window.R$styleable: int SplitPlaceholderRule_splitRatio
com.google.android.gms.common.stats.ConnectionTracker: java.util.concurrent.ConcurrentHashMap zza
com.google.gson.internal.LinkedTreeMap$Node: java.lang.Object value
io.flutter.embedding.android.FlutterSplashView: java.lang.String TAG
io.sentry.SentryEnvelopeItem: java.util.concurrent.Callable dataFactory
io.sentry.SpanStatus: io.sentry.SpanStatus OK
io.flutter.plugin.common.EventChannel: io.flutter.plugin.common.BinaryMessenger$TaskQueue taskQueue
io.sentry.protocol.Device: java.lang.Boolean lowMemory
kotlinx.coroutines.internal.ThreadSafeHeap: int _size
io.sentry.SpanContext: java.lang.String TYPE
androidx.window.layout.SidecarCompat$DistinctElementCallback: androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface callbackInterface
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter URL
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory STRING_BUFFER_FACTORY
kotlin.Result$Failure: java.lang.Throwable exception
io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness: io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness[] $VALUES
io.flutter.plugins.googlemaps.PolygonsController: io.flutter.plugin.common.MethodChannel methodChannel
io.sentry.flutter.R$styleable: int SplitPlaceholderRule_splitMinWidth
com.google.android.gms.common.api.Status: com.google.android.gms.common.api.Status zza
io.sentry.SpanStatus: io.sentry.SpanStatus INVALID_ARGUMENT
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager deferredComponentManager
com.google.gson.stream.JsonReader: int PEEKED_LONG
io.flutter.plugin.editing.TextInputPlugin: io.flutter.plugin.editing.ListenableEditingState mEditable
kotlin.jvm.internal.CallableReference: kotlin.reflect.KCallable reflected
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: java.lang.Object nextParkedWorker
io.sentry.flutter.R$dimen: int notification_action_icon_size
com.google.android.gms.common.api.internal.zabq: java.util.Map zag
io.flutter.view.AccessibilityBridge: boolean isReleased
io.sentry.protocol.OperatingSystem: java.lang.String TYPE
kotlinx.coroutines.CancellableContinuationImpl: java.util.concurrent.atomic.AtomicIntegerFieldUpdater _decision$FU
com.google.android.gms.auth.api.signin.GoogleSignInAccount: java.lang.String zae
androidx.collection.ArraySet: int sBaseCacheSize
com.google.android.gms.common.api.internal.zaae: com.google.android.gms.common.api.internal.GoogleApiManager zae
com.google.gson.GsonBuilder: int timeStyle
io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference: androidx.lifecycle.Lifecycle lifecycle
io.sentry.exception.ExceptionMechanismException: boolean snapshot
io.sentry.protocol.SentryRuntime: java.lang.String version
io.flutter.view.AccessibilityBridge$SemanticsNode: io.flutter.view.AccessibilityBridge$TextDirection textDirection
io.flutter.view.VsyncWaiter: io.flutter.embedding.engine.FlutterJNI$AsyncWaitForVsyncDelegate asyncWaitForVsyncDelegate
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: android.app.Activity activity
androidx.window.layout.ExtensionWindowLayoutInfoBackend: java.util.Map activityToListeners
androidx.fragment.app.Fragment: java.lang.Boolean mSavedUserVisibleHint
com.google.gson.reflect.TypeToken: java.lang.reflect.Type type
androidx.core.app.NotificationCompat$Builder: androidx.core.app.NotificationCompat$Style mStyle
com.tekartik.sqflite.SqflitePlugin$1: com.tekartik.sqflite.Database val$database
io.flutter.plugins.sharedpreferences.MethodCallHandlerImpl$1: android.content.SharedPreferences$Editor val$editor
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration: io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration[] fields
io.flutter.plugin.platform.VirtualDisplayController: io.flutter.plugin.platform.SingleViewPresentation presentation
com.google.android.gms.common.internal.zza: android.os.Bundle zzb
io.sentry.flutter.SentryFlutterPlugin: java.lang.String flutterSdk
com.google.android.gms.common.internal.zad: android.content.Intent zaa
androidx.activity.ComponentActivity$NonConfigurationInstances: java.lang.Object custom
kotlin.jvm.internal.PackageReference: java.lang.String moduleName
io.sentry.android.core.MainLooperHandler: android.os.Handler handler
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: io.flutter.embedding.android.FlutterView flutterView
io.flutter.embedding.engine.systemchannels.RestorationChannel: io.flutter.plugin.common.MethodChannel$MethodCallHandler handler
io.sentry.flutter.R$drawable: int notification_icon_background
androidx.window.embedding.SplitPairFilter: android.content.ComponentName primaryActivityName
io.sentry.Attachment: java.lang.String pathname
androidx.core.app.NotificationCompat$Builder: java.lang.String mSortKey
androidx.core.app.NotificationCompatBuilder: android.widget.RemoteViews mHeadsUpContentView
androidx.fragment.app.BackStackState: java.lang.String mName
io.flutter.plugins.googlemaps.PolygonsController: float density
io.sentry.android.core.util.ConnectivityChecker$Status: io.sentry.android.core.util.ConnectivityChecker$Status UNKNOWN
com.google.gson.internal.bind.TreeTypeAdapter: com.google.gson.TypeAdapterFactory skipPast
androidx.core.R$id: int accessibility_custom_action_22
kotlinx.coroutines.internal.LockFreeTaskQueueCore: kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion Companion
io.flutter.plugin.platform.VirtualDisplayController: android.content.Context context
io.flutter.plugins.sharedpreferences.MethodCallHandlerImpl$1$1: boolean val$response
kotlinx.coroutines.scheduling.CoroutineScheduler: java.util.concurrent.atomic.AtomicIntegerFieldUpdater _isTerminated$FU
com.google.android.gms.signin.internal.SignInClientImpl: android.os.Bundle zad
com.google.android.gms.common.ConnectionResult: android.os.Parcelable$Creator CREATOR
io.sentry.android.core.util.ConnectivityChecker$Status: io.sentry.android.core.util.ConnectivityChecker$Status NO_PERMISSION
com.google.android.gms.dynamic.zae: android.content.Intent zab
com.google.android.gms.maps.model.MarkerOptions: float zzk
io.sentry.flutter.R$styleable: int[] ActivityRule
com.google.android.gms.common.wrappers.InstantApps: android.content.Context zza
kotlinx.coroutines.AbstractCoroutine: kotlin.coroutines.CoroutineContext context
com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper: com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper INSTANCE
androidx.core.R$id: int accessibility_custom_action_20
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView$1: io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView this$0
com.google.common.collect.MapMakerInternalMap: com.google.common.collect.MapMakerInternalMap$InternalEntryHelper entryHelper
io.sentry.android.core.ManifestMetadataReader: java.lang.String SESSION_TRACKING_ENABLE
kotlin.jvm.internal.ClassReference: java.util.HashMap classFqNames
androidx.collection.ArraySet: androidx.collection.MapCollections mCollections
com.google.gson.internal.bind.JsonTreeReader: java.io.Reader UNREADABLE_READER
androidx.fragment.app.DialogFragment: android.app.Dialog mDialog
io.sentry.SentryEnvelopeItemHeader: java.lang.String fileName
io.sentry.android.core.SentryAndroidOptions: boolean enableActivityLifecycleTracingAutoFinish
androidx.lifecycle.ProcessLifecycleOwner: int mStartedCounter
androidx.core.view.ViewCompat$AccessibilityViewProperty: int mFrameworkMinimumSdk
io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener$1: io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener this$0
kotlinx.coroutines.CommonPool: boolean usePrivatePool
com.google.gson.internal.bind.TreeTypeAdapter$SingleTypeFactory: com.google.gson.reflect.TypeToken exactType
androidx.core.app.NotificationCompat$Builder: int mPriority
io.flutter.plugin.editing.InputConnectionAdaptor: android.text.Layout mLayout
com.google.android.gms.common.internal.BaseGmsClient: com.google.android.gms.common.Feature[] zze
androidx.core.app.NotificationCompat$Builder: java.lang.String mCategory
io.sentry.exception.ExceptionMechanismException: long serialVersionUID
io.sentry.flutter.R$style: int TextAppearance_Compat_Notification_Line2
com.google.android.gms.common.internal.zzn: android.content.ComponentName zzd
androidx.fragment.app.FragmentTransitionImpl$1: int val$numSharedElements
com.google.android.gms.maps.model.PolygonOptions: float zzf
com.google.gson.internal.bind.JsonTreeWriter: com.google.gson.JsonPrimitive SENTINEL_CLOSED
io.sentry.flutter.R$color: int notification_icon_bg_color
com.google.gson.internal.$Gson$Types$GenericArrayTypeImpl: long serialVersionUID
com.google.android.gms.common.api.GoogleApiActivity: int zaa
io.flutter.FlutterInjector: io.flutter.FlutterInjector instance
io.sentry.android.core.ManifestMetadataReader: java.lang.String ANR_REPORT_DEBUG
io.sentry.android.core.NdkIntegration: io.sentry.android.core.SentryAndroidOptions options
com.google.gson.internal.UnsafeAllocator$2: int val$constructorId
io.flutter.embedding.engine.systemchannels.DeferredComponentChannel$1: io.flutter.embedding.engine.systemchannels.DeferredComponentChannel this$0
com.google.android.gms.common.zzm: com.google.android.gms.common.zzk zza
com.google.android.gms.common.internal.BaseGmsClient: com.google.android.gms.common.ConnectionResult zzB
io.flutter.plugin.platform.VirtualDisplayController$1: java.lang.Runnable val$onNewSizeFrameAvailable
com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper: long LISTENERS_OFFSET
com.google.android.gms.maps.zzu: com.google.android.gms.maps.GoogleMap$OnCameraMoveStartedListener zza
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutator: io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack this$0
io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry$ShimRegistrarAggregate: io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding flutterPluginBinding
com.google.android.gms.common.internal.Objects$ToStringHelper: java.util.List zza
androidx.fragment.app.Fragment$AnimationInfo: java.lang.Boolean mAllowReturnTransitionOverlap
io.flutter.plugin.editing.TextInputPlugin$InputTarget: io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type type
com.google.gson.internal.LinkedTreeMap: com.google.gson.internal.LinkedTreeMap$Node header
kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.CoroutineContext _context
io.flutter.embedding.engine.systemchannels.LifecycleChannel: io.flutter.plugin.common.BasicMessageChannel channel
com.google.android.gms.maps.zzb: com.google.android.gms.maps.GoogleMap$OnMarkerDragListener zza
com.google.common.util.concurrent.CycleDetectingLockFactory: java.util.concurrent.ConcurrentMap lockGraphNodesPerType
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: androidx.core.util.Consumer callback
io.flutter.plugin.editing.ListenableEditingState: java.lang.String mToStringCache
com.google.android.gms.common.internal.BaseGmsClient: android.os.Looper zzm
io.sentry.flutter.R$id: int tag_on_receive_content_mime_types
io.sentry.android.core.DefaultAndroidEventProcessor: java.lang.String EMULATOR
io.sentry.flutter.R$id: int italic
io.sentry.protocol.Device: java.lang.String manufacturer
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action PASTE
androidx.versionedparcelable.VersionedParcel: androidx.collection.ArrayMap mWriteCache
io.flutter.plugin.editing.TextInputPlugin: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState mLastKnownFrameworkTextEditingState
io.sentry.SentryThreadFactory: io.sentry.SentryStackTraceFactory sentryStackTraceFactory
com.google.common.collect.MapMakerInternalMap: com.google.common.base.Equivalence keyEquivalence
kotlinx.coroutines.flow.AbstractFlow$collect$1: java.lang.Object L$0
io.flutter.embedding.android.DrawableSplashScreen: android.widget.ImageView$ScaleType scaleType
io.flutter.view.AccessibilityBridge$SemanticsNode: java.util.List labelAttributes
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: java.util.List finalClippingPaths
io.flutter.embedding.android.MotionEventTracker: java.util.PriorityQueue unusedEvents
io.sentry.flutter.R$id: int accessibility_custom_action_13
io.sentry.flutter.R$styleable: int FontFamily_fontProviderQuery
com.google.gson.internal.LinkedTreeMap$EntrySet: com.google.gson.internal.LinkedTreeMap this$0
kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol OFFER_SUCCESS
io.sentry.SentryEvent: java.util.List fingerprint
androidx.fragment.app.FragmentTransition$4: android.graphics.Rect val$inEpicenter
kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.EmptyCoroutineContext INSTANCE
androidx.fragment.app.FragmentTransition$2: android.view.View val$nonExistentView
io.flutter.plugin.editing.InputConnectionAdaptor: io.flutter.plugin.editing.FlutterTextUtils flutterTextUtils
com.google.android.gms.base.R$string: int common_google_play_services_notification_ticker
io.flutter.FlutterInjector: java.util.concurrent.ExecutorService executorService
io.flutter.plugin.platform.PlatformViewsController: android.util.SparseArray platformViews
io.sentry.Attachment: java.lang.String DEFAULT_CONTENT_TYPE
androidx.lifecycle.LiveData$ObserverWrapper: boolean mActive
io.flutter.Log: int VERBOSE
androidx.collection.MapCollections$ArrayIterator: boolean mCanRemove
io.sentry.Session$State: io.sentry.Session$State Exited
kotlinx.coroutines.JobSupportKt: kotlinx.coroutines.internal.Symbol TOO_LATE_TO_CANCEL
com.google.android.gms.common.api.internal.zach: com.google.android.gms.common.api.internal.zai zaa
io.sentry.android.core.EnvelopeFileObserver: io.sentry.ILogger logger
com.google.gson.internal.bind.TypeAdapters$31: com.google.gson.reflect.TypeToken val$type
io.sentry.Session: java.util.UUID sessionId
io.sentry.protocol.Message: java.util.Map unknown
io.sentry.transport.RateLimiter$DataCategory: io.sentry.transport.RateLimiter$DataCategory All
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag IS_FOCUSED
com.google.android.gms.signin.internal.zai: int zaa
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration$Autofill: java.lang.String[] hints
com.google.gson.Gson$4: com.google.gson.TypeAdapter val$longAdapter
io.sentry.OutboxSender: io.sentry.IEnvelopeReader envelopeReader
kotlinx.coroutines.internal.ThreadContextKt$findOne$1: kotlinx.coroutines.internal.ThreadContextKt$findOne$1 INSTANCE
io.flutter.plugin.editing.FlutterTextUtils: io.flutter.embedding.engine.FlutterJNI flutterJNI
androidx.window.layout.ExtensionsWindowLayoutInfoAdapter: androidx.window.layout.ExtensionsWindowLayoutInfoAdapter INSTANCE
com.google.gson.internal.LinkedHashTreeMap$AvlIterator: com.google.gson.internal.LinkedHashTreeMap$Node stackTop
io.sentry.flutter.R$layout: int notification_action
io.flutter.plugin.platform.PlatformPlugin$3: int[] $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$HapticFeedbackType
androidx.core.app.NotificationCompat$Builder: int mVisibility
com.google.android.gms.common.api.internal.BasePendingResult: boolean zal
kotlinx.coroutines.JobSupport$addLastAtomic$$inlined$addLastIf$1: kotlinx.coroutines.internal.LockFreeLinkedListNode $node
com.google.common.util.concurrent.Futures$CallbackListener: com.google.common.util.concurrent.FutureCallback callback
io.sentry.protocol.Request: java.util.Map unknown
androidx.activity.ComponentActivity$2: androidx.activity.ComponentActivity this$0
io.sentry.flutter.R$styleable: int FontFamilyFont_ttcIndex
io.sentry.flutter.R$attr: int fontProviderPackage
com.google.common.collect.MapMakerInternalMap$Segment: int maxSegmentSize
com.google.android.gms.common.internal.ClientSettings: android.accounts.Account zaa
com.google.gson.stream.JsonReader: int NUMBER_CHAR_DIGIT
io.sentry.protocol.Device: java.lang.Boolean charging
kotlinx.coroutines.JobCancellationException: kotlinx.coroutines.Job job
androidx.window.embedding.SplitInfo: androidx.window.embedding.ActivityStack secondaryActivityStack
kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp: kotlinx.coroutines.internal.LockFreeLinkedListNode newNode
androidx.loader.app.LoaderManagerImpl: androidx.lifecycle.LifecycleOwner mLifecycleOwner
kotlin.jvm.internal.CallableReference: java.lang.String name
com.google.android.gms.common.api.internal.zaaf: com.google.android.gms.tasks.TaskCompletionSource zab
io.sentry.android.core.util.RootChecker: io.sentry.ILogger logger
io.sentry.flutter.R$id: int action_text
io.sentry.flutter.R$attr: int finishPrimaryWithSecondary
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object L$0
io.sentry.SentryOptions: boolean attachServerName
io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type: io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type FRAMEWORK_CLIENT
com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter: com.google.gson.TypeAdapter keyTypeAdapter
io.sentry.flutter.R$attr: int splitMinWidth
kotlin.random.Random: kotlin.random.Random$Default Default
io.sentry.android.core.ManifestMetadataReader: java.lang.String SESSION_TRACKING_TIMEOUT_INTERVAL_MILLIS
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag IS_IN_MUTUALLY_EXCLUSIVE_GROUP
androidx.core.app.NotificationCompat$Action: android.app.PendingIntent actionIntent
com.google.gson.stream.JsonToken: com.google.gson.stream.JsonToken BOOLEAN
io.sentry.protocol.Device: java.lang.Boolean online
androidx.fragment.app.Fragment$AnimationInfo: int mStateAfterAnimating
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: io.flutter.plugin.platform.PlatformPlugin platformPlugin
io.flutter.plugin.localization.LocalizationPlugin: android.content.Context context
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter STRING
io.flutter.plugins.googlemaps.GoogleMapController: android.content.Context context
androidx.collection.SimpleArrayMap: int[] mHashes
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType: io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType HEAVY_IMPACT
androidx.core.app.NotificationCompat$Action: boolean mShowsUserInterface
com.google.android.gms.maps.model.MapStyleOptions: android.os.Parcelable$Creator CREATOR
com.google.android.gms.internal.base.zaa: java.lang.String zab
com.google.common.base.Throwables: java.lang.Object jla
io.flutter.embedding.android.FlutterImageView$SurfaceKind: io.flutter.embedding.android.FlutterImageView$SurfaceKind[] $VALUES
kotlin.text.Charsets: java.nio.charset.Charset UTF_8
com.google.android.gms.dynamite.DynamiteModule$VersionPolicy$SelectionResult: int remoteVersion
io.sentry.flutter.R$styleable: int[] Capability
io.sentry.flutter.R$id: int blocking
androidx.fragment.app.FragmentManagerImpl$3: androidx.fragment.app.Fragment val$fragment
io.sentry.android.core.ManifestMetadataReader: java.lang.String ENVIRONMENT
com.google.gson.Gson: boolean complexMapKeySerialization
com.google.gson.Gson: boolean lenient
io.flutter.view.AccessibilityBridge$SemanticsNode: int textSelectionExtent
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$7: io.sentry.android.core.SentryAndroidOptions $options
com.google.android.gms.auth.api.signin.internal.Storage: com.google.android.gms.auth.api.signin.internal.Storage zab
com.google.android.gms.common.api.internal.NonGmsServiceBrokerClient: android.content.ComponentName zad
com.google.gson.internal.ConstructorConstructor$14: java.lang.reflect.Type val$type
androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl: java.util.List lastInfo
com.google.gson.stream.JsonReader: char[] buffer
io.sentry.SentryTracer: io.sentry.protocol.SentryId eventId
com.tekartik.sqflite.SqflitePlugin: java.lang.Object openCloseLocker
com.google.gson.stream.JsonReader: int NUMBER_CHAR_FRACTION_DIGIT
io.flutter.plugin.platform.SingleViewPresentation: android.widget.FrameLayout container
androidx.fragment.app.FragmentManagerImpl: boolean mStateSaved
com.google.gson.internal.reflect.ReflectionAccessor: com.google.gson.internal.reflect.ReflectionAccessor instance
io.sentry.adapters.SentryIdDeserializerAdapter: io.sentry.SentryOptions options
io.sentry.flutter.R$id: int action_image
androidx.lifecycle.Lifecycling: java.util.Map sCallbackCache
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration: boolean enableSuggestions
io.sentry.Stack$StackItem: io.sentry.SentryOptions options
androidx.lifecycle.ClassesInfoCache: java.util.Map mCallbackMap
kotlinx.coroutines.EventLoopImplBase$DelayedTaskQueue: long timeNow
kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt$createCoroutineUnintercepted$$inlined$createCoroutineFromSuspendFunction$IntrinsicsKt__IntrinsicsJvmKt$4: int label
androidx.fragment.app.FragmentTransition$2: java.util.ArrayList val$enteringViews
io.flutter.plugins.googlemaps.TileProviderController$Worker: java.util.concurrent.CountDownLatch countDownLatch
io.sentry.android.core.ManifestMetadataReader: java.lang.String TRACES_ACTIVITY_ENABLE
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType: io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType STANDARD
io.flutter.embedding.engine.loader.FlutterLoader$InitResult: java.lang.String dataDirPath
com.google.android.gms.maps.zzn: com.google.android.gms.maps.GoogleMap$OnCircleClickListener zza
io.flutter.plugins.urllauncher.WebViewActivity$1: io.flutter.plugins.urllauncher.WebViewActivity this$0
kotlin.internal.jdk7.JDK7PlatformImplementations$ReflectSdkVersion: kotlin.internal.jdk7.JDK7PlatformImplementations$ReflectSdkVersion INSTANCE
com.google.android.gms.auth.api.signin.GoogleSignInAccount: long zaj
io.sentry.flutter.R$styleable: int SplitPairFilter_secondaryActivityAction
androidx.window.R$id: int locale
io.sentry.android.core.AnrIntegration: android.content.Context context
io.sentry.OutboxSender: java.nio.charset.Charset UTF_8
io.sentry.flutter.R$styleable: int[] FontFamilyFont
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest: int viewId
io.sentry.flutter.R$id: int accessibility_custom_action_15
androidx.versionedparcelable.VersionedParcelParcel: int mOffset
io.flutter.embedding.engine.loader.FlutterApplicationInfo: java.lang.String nativeLibraryDir
com.google.android.gms.maps.model.MarkerOptions: com.google.android.gms.maps.model.BitmapDescriptor zzd
io.sentry.protocol.App: java.lang.String buildType
kotlinx.coroutines.channels.ConflatedChannel: java.util.concurrent.locks.ReentrantLock lock
io.flutter.embedding.android.FlutterSurfaceView: io.flutter.embedding.engine.renderer.FlutterRenderer flutterRenderer
io.flutter.view.AccessibilityBridge$SemanticsNode: io.flutter.view.AccessibilityBridge accessibilityBridge
kotlin.text.DelimitedRangesSequence: int limit
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry: long id
com.google.android.gms.common.api.internal.zaci: com.google.android.gms.common.api.internal.UnregisterListenerMethod zab
io.sentry.flutter.R$id: int text2
androidx.window.core.Version: java.lang.String VERSION_PATTERN_STRING
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$InsetsListener: io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback this$0
io.flutter.embedding.engine.systemchannels.AccessibilityChannel: io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler handler
io.sentry.transport.NoOpTransportGate: io.sentry.transport.NoOpTransportGate instance
com.google.android.gms.common.R$string: int common_google_play_services_unknown_issue
io.sentry.Session$State: io.sentry.Session$State Abnormal
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding activityPluginBinding
io.sentry.SynchronizedCollection: java.util.Collection collection
com.tekartik.sqflite.SqflitePlugin$BgResult$2: java.lang.Object val$data
io.sentry.NoOpSentryClient: io.sentry.NoOpSentryClient instance
com.google.android.gms.maps.zzah: java.util.List zze
kotlin.jvm.internal.CallableReference: boolean isTopLevel
io.sentry.flutter.R$attr: int clearTop
kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache: java.lang.reflect.Method nameMethod
io.flutter.view.AccessibilityBridge$SemanticsNode: java.util.List increasedValueAttributes
com.google.gson.stream.JsonWriter: java.lang.String deferredName
io.flutter.embedding.engine.loader.FlutterLoader: java.util.concurrent.ExecutorService executorService
androidx.window.R$styleable: int SplitPairRule_finishPrimaryWithSecondary
com.google.android.gms.tasks.zzi: com.google.android.gms.tasks.zzj zzb
io.sentry.NoOpTransaction: io.sentry.NoOpTransaction instance
io.sentry.protocol.Contexts: long serialVersionUID
io.sentry.flutter.R$id: int accessibility_custom_action_11
com.google.android.gms.common.internal.TelemetryData: int zaa
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics: int viewPaddingLeft
com.google.common.collect.RegularImmutableSet: int hashCode
io.sentry.transport.RateLimiter$DataCategory: io.sentry.transport.RateLimiter$DataCategory Transaction
io.flutter.embedding.android.TransparencyMode: io.flutter.embedding.android.TransparencyMode opaque
io.sentry.Breadcrumb: io.sentry.SentryLevel level
com.google.android.gms.maps.model.LatLngBounds: com.google.android.gms.maps.model.LatLng southwest
com.google.android.gms.common.internal.zzo: java.util.Map zzb
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry: boolean released
com.google.common.collect.Iterators$9: java.lang.Object val$value
kotlinx.coroutines.scheduling.WorkQueue: java.util.concurrent.atomic.AtomicIntegerFieldUpdater blockingTasksInBuffer$FU
io.flutter.embedding.android.FlutterImageView: android.graphics.Bitmap currentBitmap
io.sentry.flutter.R$styleable: int FontFamilyFont_android_fontStyle
io.sentry.Session: java.lang.String environment
kotlinx.coroutines.Dispatchers: kotlinx.coroutines.Dispatchers INSTANCE
com.tekartik.sqflite.SqflitePlugin: java.util.Map _singleInstancesByPath
com.google.android.gms.common.api.Status: com.google.android.gms.common.api.Status RESULT_INTERRUPTED
androidx.core.view.ViewCompat: java.util.concurrent.atomic.AtomicInteger sNextGeneratedId
com.google.android.gms.common.api.internal.zzb: java.util.WeakHashMap zza
com.google.android.gms.common.internal.GetServiceRequest: com.google.android.gms.common.api.Scope[] zzf
kotlin.coroutines.CombinedContext: kotlin.coroutines.CoroutineContext left
com.google.android.gms.common.internal.BaseGmsClient: java.lang.Object zzp
io.sentry.config.SystemPropertyPropertiesProvider: java.lang.String PREFIX
io.sentry.flutter.R$dimen: int notification_content_margin_start
io.flutter.plugin.platform.PlatformViewsController: java.util.HashSet currentFrameUsedPlatformViewIds
io.sentry.SpanId: java.lang.String value
androidx.fragment.app.Fragment: android.view.LayoutInflater mLayoutInflater
com.google.android.gms.common.ConnectionResult: android.app.PendingIntent zzc
com.google.android.gms.signin.zad: com.google.android.gms.common.api.Api$AbstractClientBuilder zac
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureFinalizerRunnable: io.flutter.embedding.engine.FlutterJNI flutterJNI
com.google.gson.stream.JsonReader: int NUMBER_CHAR_EXP_E
io.sentry.flutter.R$dimen: int notification_large_icon_height
io.sentry.flutter.SentryFlutterPlugin: java.lang.String nativeSdk
io.sentry.Stack$StackItem: io.sentry.Scope scope
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: int label
com.google.android.gms.common.GoogleApiAvailabilityLight: com.google.android.gms.common.GoogleApiAvailabilityLight zza
com.tekartik.sqflite.SqflitePlugin$BgResult$1: com.tekartik.sqflite.SqflitePlugin$BgResult this$1
com.google.android.gms.maps.UiSettings: com.google.android.gms.maps.internal.IUiSettingsDelegate zza
com.google.android.gms.common.internal.zzr: long zzg
com.google.android.gms.common.internal.ClientSettings: java.util.Map zad
io.flutter.view.AccessibilityBridge$SemanticsNode: int actions
io.sentry.Span: java.lang.Throwable throwable
io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType: io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType CLICK
io.sentry.protocol.SentryException: java.util.Map unknown
io.sentry.flutter.R$attr: int splitMinSmallestWidth
io.sentry.SentryOptions: int connectionTimeoutMillis
io.flutter.embedding.android.KeyboardManager$PerEventCallbackBuilder: int unrepliedCount
androidx.fragment.app.FragmentState: boolean mRemoving
androidx.window.embedding.SplitPairRule: java.util.Set filters
com.google.gson.internal.$Gson$Types: java.lang.reflect.Type[] EMPTY_TYPE_ARRAY
com.google.android.gms.dynamite.DynamiteModule: java.lang.ThreadLocal zzg
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewTouch: java.lang.Number downTime
com.google.gson.internal.Excluder: double version
io.sentry.flutter.R$id: int accessibility_custom_action_18
com.google.common.reflect.Types$GenericArrayTypeImpl: java.lang.reflect.Type componentType
io.flutter.embedding.engine.loader.FlutterApplicationInfo: java.lang.String domainNetworkPolicy
com.google.gson.internal.ConstructorConstructor$3: com.google.gson.internal.ConstructorConstructor this$0
io.sentry.flutter.R$styleable: int[] ColorStateListItem
androidx.window.core.Bounds: int left
com.google.gson.internal.ConstructorConstructor$5: java.lang.reflect.Type val$type
androidx.fragment.app.FragmentManagerImpl$FragmentLifecycleCallbacksHolder: androidx.fragment.app.FragmentManager$FragmentLifecycleCallbacks mCallback
io.flutter.plugins.googlemaps.GoogleMapBuilder: java.lang.Object initialPolygons
com.google.android.gms.common.api.internal.zabv: com.google.android.gms.common.api.GoogleApi zaa
androidx.fragment.app.FragmentTransitionImpl$2: java.util.Map val$nameOverrides
com.google.android.gms.common.api.internal.BasePendingResult: java.lang.ThreadLocal zaa
com.google.android.gms.common.api.internal.ListenerHolder$ListenerKey: java.lang.Object zaa
com.tekartik.sqflite.Database$1: com.tekartik.sqflite.Database this$0
io.sentry.flutter.R$styleable: int GradientColor_android_gradientRadius
com.google.gson.internal.Streams$AppendableWriter: java.lang.Appendable appendable
androidx.fragment.app.FragmentManagerImpl$6: androidx.fragment.app.FragmentManagerImpl this$0
com.google.android.gms.common.internal.zzr: long zzh
io.sentry.protocol.SentryPackage: java.util.Map unknown
com.google.android.gms.common.internal.BaseGmsClient: com.google.android.gms.common.internal.IGmsServiceBroker zzr
io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness: io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness light
com.google.common.collect.MapMakerInternalMap: com.google.common.collect.MapMakerInternalMap$WeakValueReference UNSET_WEAK_VALUE_REFERENCE
io.sentry.Attachment: java.lang.String DEFAULT_ATTACHMENT_TYPE
com.google.android.gms.common.internal.RootTelemetryConfigManager: com.google.android.gms.common.internal.RootTelemetryConfiguration zzb
androidx.fragment.app.FragmentManagerImpl: android.util.SparseArray mStateArray
io.flutter.embedding.engine.dart.DartExecutor: io.flutter.embedding.engine.dart.DartExecutor$IsolateServiceIdListener isolateServiceIdListener
com.google.common.collect.RegularImmutableList: com.google.common.collect.ImmutableList EMPTY
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory ENUM_FACTORY
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutator: float[] radiis
com.google.android.gms.common.internal.GetServiceRequest: int zzb
io.sentry.android.core.SentryAndroidOptions: boolean enableAppComponentBreadcrumbs
androidx.window.embedding.SplitRule: int layoutDirection
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.String previousValue
com.google.android.gms.maps.model.Tile: int width
com.google.android.gms.common.api.Status: java.lang.String zzd
io.sentry.SentryEnvelopeItem: io.sentry.SentryEnvelopeItemHeader header
io.sentry.flutter.R$styleable: int FontFamilyFont_fontVariationSettings
com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher: long h2
androidx.window.layout.HardwareFoldingFeature$Type: androidx.window.layout.HardwareFoldingFeature$Type FOLD
androidx.fragment.app.Fragment: java.lang.String mTag
io.flutter.plugin.common.MethodCall: java.lang.Object arguments
com.google.android.gms.maps.model.TileOverlayOptions: boolean zzc
androidx.window.embedding.EmbeddingCompat: java.lang.String TAG
com.google.android.gms.common.internal.ClientSettings: java.lang.Integer zaj
io.flutter.plugin.platform.VirtualDisplayController$1: android.view.View val$embeddedView
kotlinx.coroutines.CoroutineContextKt: boolean useCoroutinesScheduler
io.flutter.view.AccessibilityBridge$SemanticsNode: int previousTextSelectionExtent
com.google.android.gms.common.internal.zat: int zac
io.sentry.protocol.App: java.lang.String appBuild
io.flutter.embedding.engine.systemchannels.LocalizationChannel: io.flutter.plugin.common.MethodChannel$MethodCallHandler handler
com.google.android.gms.common.api.internal.zact: com.google.android.gms.signin.zae zag
com.google.gson.internal.UnsafeAllocator$1: java.lang.reflect.Method val$allocateInstance
androidx.fragment.app.FragmentManagerImpl$3$1: androidx.fragment.app.FragmentManagerImpl$3 this$1
kotlinx.coroutines.JobSupportKt: kotlinx.coroutines.Empty EMPTY_NEW
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$2: io.sentry.android.core.SentryAndroidOptions $options
com.google.common.hash.LittleEndianByteArray$JavaLittleEndianBytes: com.google.common.hash.LittleEndianByteArray$JavaLittleEndianBytes INSTANCE
com.google.gson.reflect.TypeToken: int hashCode
com.google.android.gms.common.api.internal.zap: com.google.android.gms.common.GoogleApiAvailability zac
io.flutter.plugins.googlemaps.PolygonController: float density
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action CUSTOM_ACTION
kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt$createCoroutineUnintercepted$$inlined$createCoroutineFromSuspendFunction$IntrinsicsKt__IntrinsicsJvmKt$4: java.lang.Object $receiver$inlined
io.flutter.plugin.platform.PlatformViewsController: io.flutter.embedding.android.FlutterView flutterView
androidx.lifecycle.LiveData: boolean mDispatchingValue
androidx.fragment.app.FragmentManagerViewModel: boolean mHasSavedSnapshot
androidx.lifecycle.ProcessLifecycleOwner: androidx.lifecycle.ReportFragment$ActivityInitializationListener mInitializationListener
com.google.android.gms.common.internal.GmsClientSupervisor: com.google.android.gms.common.internal.zzr zzd
io.sentry.transport.AsyncHttpTransport$EnvelopeSender: io.sentry.cache.IEnvelopeCache envelopeCache
androidx.fragment.app.FragmentTransaction: int mPopEnterAnim
com.google.gson.JsonParseException: long serialVersionUID
androidx.window.R$styleable: int[] ActivityRule
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action TAP
com.google.common.collect.ImmutableCollection$ArrayBasedBuilder: java.lang.Object[] contents
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType EMAIL_ADDRESS
com.google.gson.GsonBuilder: boolean complexMapKeySerialization
io.flutter.FlutterInjector: io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager deferredComponentManager
androidx.fragment.app.FragmentTransaction: int mBreadCrumbTitleRes
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewResizeRequest: double newLogicalHeight
kotlin.jvm.internal.ClassReference: java.util.HashMap primitiveFqNames
io.sentry.protocol.SentryThread: io.sentry.protocol.SentryStackTrace stacktrace
io.flutter.plugin.platform.SingleViewPresentation$AccessibilityDelegatingFrameLayout: android.view.View embeddedView
kotlinx.coroutines.flow.internal.SafeCollector: int collectContextSize
io.flutter.plugins.urllauncher.WebViewActivity$FlutterWebChromeClient: io.flutter.plugins.urllauncher.WebViewActivity this$0
io.flutter.embedding.engine.FlutterShellArgs: java.util.Set args
kotlinx.coroutines.CancelledContinuation: java.util.concurrent.atomic.AtomicIntegerFieldUpdater _resumed$FU
com.google.android.gms.maps.model.PolylineOptions: float zzd
kotlinx.coroutines.channels.ArrayChannel: kotlinx.coroutines.channels.BufferOverflow onBufferOverflow
io.flutter.embedding.engine.systemchannels.RestorationChannel: byte[] restorationData
androidx.window.R$attr: int secondaryActivityAction
com.tekartik.sqflite.SqflitePlugin$3: com.tekartik.sqflite.Database val$database
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle: io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness systemNavigationBarIconBrightness
androidx.fragment.app.FragmentTransition$3: androidx.fragment.app.FragmentTransitionImpl val$impl
androidx.window.R$attr: int splitLayoutDirection
androidx.fragment.app.FragmentManagerState: androidx.fragment.app.BackStackState[] mBackStack
com.google.common.util.concurrent.AbstractFuture$SetFuture: com.google.common.util.concurrent.ListenableFuture future
com.google.android.gms.common.internal.ConnectionTelemetryConfiguration: android.os.Parcelable$Creator CREATOR
com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper: java.util.concurrent.atomic.AtomicReferenceFieldUpdater listenersUpdater
io.flutter.plugin.common.MethodChannel: io.flutter.plugin.common.MethodCodec codec
androidx.window.R$styleable: int SplitPairFilter_secondaryActivityName
com.google.gson.GsonBuilder: boolean serializeNulls
androidx.fragment.app.Fragment$AnimationInfo: int mNextTransition
io.flutter.plugin.common.EventChannel: java.lang.String name
com.google.android.gms.maps.model.CircleOptions: java.util.List zzi
com.google.gson.stream.JsonReader: int PEEKED_BUFFERED
com.tekartik.sqflite.SqflitePlugin: int THREAD_PRIORITY
io.flutter.plugin.platform.SingleViewPresentation$PresentationState: io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler windowManagerHandler
com.google.common.collect.MapMakerInternalMap$Values: com.google.common.collect.MapMakerInternalMap this$0
io.sentry.flutter.R$id: int tag_state_description
com.google.gson.DefaultDateTypeAdapter: java.lang.String SIMPLE_NAME
io.flutter.embedding.engine.systemchannels.AccessibilityChannel: io.flutter.plugin.common.BasicMessageChannel$MessageHandler parsingMessageHandler
io.sentry.SynchronizedCollection: long serialVersionUID
io.flutter.embedding.engine.FlutterEngineCache: java.util.Map cachedEngines
io.flutter.plugin.common.FlutterException: java.lang.String code
io.flutter.plugins.googlemaps.PolylineBuilder: float density
io.sentry.config.CompositePropertiesProvider: java.util.List providers
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode: java.lang.String encodedName
androidx.core.app.NotificationCompat$Style: java.lang.CharSequence mSummaryText
io.flutter.plugin.common.EventChannel: io.flutter.plugin.common.BinaryMessenger messenger
io.flutter.plugins.googlemaps.GoogleMapController: boolean myLocationButtonEnabled
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle: java.lang.Integer systemNavigationBarDividerColor
com.google.common.util.concurrent.AbstractFuture$Waiter: java.lang.Thread thread
com.google.gson.JsonArray: java.util.List elements
com.google.gson.internal.LinkedHashTreeMap$LinkedTreeMapIterator: com.google.gson.internal.LinkedHashTreeMap$Node next
io.sentry.android.ndk.DebugImagesLoader: java.lang.Object debugImagesLock
io.sentry.protocol.SentryStackFrame: java.lang.String rawFunction
com.google.gson.Gson$5: com.google.gson.TypeAdapter val$longAdapter
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType: io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType CLIP_PATH
io.sentry.SpanStatus: io.sentry.SpanStatus UNAUTHENTICATED
io.sentry.SentryLevel: io.sentry.SentryLevel ERROR
io.sentry.protocol.SentryStackFrame: java.util.List preContext
com.google.android.gms.common.internal.MethodInvocation: long zad
io.flutter.view.AccessibilityBridge$SemanticsNode: java.util.List childrenInHitTestOrder
kotlinx.coroutines.internal.ExceptionsConstuctorKt$createConstructor$$inlined$safeCtor$3: java.lang.reflect.Constructor $constructor$inlined
com.google.android.gms.auth.api.signin.GoogleSignInAccount: int zab
androidx.activity.ComponentActivity: androidx.lifecycle.ViewModelStore mViewModelStore
io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler: io.flutter.plugin.common.EventChannel this$0
com.google.android.gms.maps.model.PolygonOptions: java.util.List zzb
io.sentry.flutter.R$dimen: int notification_top_pad
com.google.common.reflect.Types$JavaVersion: com.google.common.reflect.Types$JavaVersion JAVA9
io.sentry.SentryOptions: java.util.List integrations
io.flutter.embedding.android.FlutterSplashView: io.flutter.embedding.engine.renderer.FlutterUiDisplayListener flutterUiDisplayListener
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter BIT_SET
com.google.gson.internal.LinkedHashTreeMap$AvlBuilder: com.google.gson.internal.LinkedHashTreeMap$Node stack
com.google.gson.internal.ConstructorConstructor$14: java.lang.Class val$rawType
com.google.gson.LongSerializationPolicy: com.google.gson.LongSerializationPolicy[] $VALUES
io.sentry.CircularFifoQueue: int start
androidx.window.embedding.ExtensionEmbeddingBackend: java.util.concurrent.locks.ReentrantLock globalLock
io.flutter.view.AccessibilityBridge$Flag: int value
com.google.android.gms.common.internal.service.zao: com.google.android.gms.common.api.Api$ClientKey zac
kotlinx.coroutines.EventLoop_commonKt: kotlinx.coroutines.internal.Symbol CLOSED_EMPTY
androidx.core.app.NotificationCompat$Builder: android.widget.RemoteViews mTickerView
io.flutter.plugins.GeneratedPluginRegistrant: java.lang.String TAG
androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentFactory DEFAULT_FACTORY
io.sentry.Breadcrumb: java.lang.String category
androidx.savedstate.SavedStateRegistry: androidx.arch.core.internal.SafeIterableMap mComponents
io.flutter.embedding.engine.dart.DartMessenger$Reply: io.flutter.embedding.engine.FlutterJNI flutterJNI
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics: int viewPaddingRight
io.sentry.flutter.R$id: int accessibility_custom_action_3
io.flutter.embedding.android.RenderMode: io.flutter.embedding.android.RenderMode[] $VALUES
com.javih.add2calendar.Add2CalendarPlugin: io.flutter.plugin.common.PluginRegistry$Registrar mRegistrar
kotlinx.coroutines.flow.AbstractFlow$collect$1: java.lang.Object result
androidx.fragment.app.Fragment: float mPostponedAlpha
com.tekartik.sqflite.SqflitePlugin$4: com.tekartik.sqflite.SqflitePlugin$BgResult val$bgResult
io.flutter.embedding.engine.FlutterJNI: float refreshRateFPS
com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper: com.google.gson.Gson context
com.google.android.gms.signin.zad: com.google.android.gms.common.api.Api zag
androidx.fragment.app.FragmentTransitionCompat21$1: androidx.fragment.app.FragmentTransitionCompat21 this$0
androidx.fragment.app.FragmentViewLifecycleOwner: androidx.lifecycle.LifecycleRegistry mLifecycleRegistry
kotlin.sequences.TransformingSequence$iterator$1: java.util.Iterator iterator
androidx.window.layout.FoldingFeature$State: androidx.window.layout.FoldingFeature$State$Companion Companion
androidx.core.content.res.ResourcesCompat: java.lang.ThreadLocal sTempTypedValue
com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper: java.util.concurrent.atomic.AtomicReferenceFieldUpdater waitersUpdater
com.google.android.gms.common.api.internal.zzd: java.util.WeakHashMap zza
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: java.util.Set registeredListeners
com.tekartik.sqflite.SqflitePlugin: java.util.Map databaseMap
com.google.common.hash.BloomFilterStrategies: com.google.common.hash.BloomFilterStrategies MURMUR128_MITZ_64
com.google.android.gms.common.GoogleApiAvailability: com.google.android.gms.common.GoogleApiAvailability zab
androidx.fragment.app.FragmentTransition$2: androidx.fragment.app.Fragment val$inFragment
androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl: androidx.window.embedding.ExtensionEmbeddingBackend this$0
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: java.lang.reflect.Method longArrayGetIndex
com.google.android.gms.auth.api.signin.GoogleSignInAccount: java.util.List zac
androidx.core.view.LayoutInflaterCompat: boolean sCheckedField
androidx.fragment.app.Fragment$AnimationInfo: androidx.core.app.SharedElementCallback mExitTransitionCallback
com.google.common.collect.MapMakerInternalMap$Segment: int count
io.sentry.protocol.SdkVersion: java.lang.String name
kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp: kotlinx.coroutines.internal.LockFreeLinkedListNode oldNext
androidx.fragment.app.Fragment: androidx.fragment.app.FragmentHostCallback mHost
com.tekartik.sqflite.operation.ExecuteOperation: com.tekartik.sqflite.SqlCommand command
kotlinx.coroutines.scheduling.LimitingDispatcher: java.util.concurrent.atomic.AtomicIntegerFieldUpdater inFlightTasks$FU
androidx.core.app.NotificationCompat$Builder: java.lang.String mGroupKey
com.google.android.gms.maps.GoogleMapOptions: java.lang.Boolean zzi
kotlin.jvm.internal.Reflection: kotlin.jvm.internal.ReflectionFactory factory
io.sentry.android.core.EnvelopeFileObserverIntegration: io.sentry.android.core.EnvelopeFileObserver observer
androidx.fragment.app.FragmentTransaction$Op: int mExitAnim
io.sentry.SpanStatus: io.sentry.SpanStatus[] $VALUES
com.google.gson.internal.bind.TypeAdapters$35: java.lang.Class val$clazz
androidx.fragment.app.Fragment$AnimationInfo: androidx.fragment.app.Fragment$OnStartEnterTransitionListener mStartEnterTransitionListener
com.google.android.gms.maps.GoogleMapOptions: java.lang.Boolean zzj
com.tekartik.sqflite.operation.BatchOperation$BatchOperationResult: com.tekartik.sqflite.operation.BatchOperation this$0
com.google.android.gms.signin.internal.zaa: android.content.Intent zac
io.sentry.Scope: io.sentry.SentryLevel level
io.flutter.view.AccessibilityBridge$SemanticsNode: int previousFlags
com.google.gson.Gson: boolean DEFAULT_ESCAPE_HTML
io.sentry.protocol.SentrySpan: java.util.Date timestamp
androidx.lifecycle.Lifecycling$1: androidx.lifecycle.LifecycleEventObserver val$observer
io.sentry.flutter.R$attr: int queryPatterns
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action SCROLL_LEFT
io.sentry.transport.AsyncHttpTransport: io.sentry.transport.QueuedThreadPoolExecutor executor
io.flutter.plugin.platform.SingleViewPresentation: java.lang.Object createParams
kotlinx.coroutines.channels.ArrayChannel$WhenMappings: int[] $EnumSwitchMapping$0
io.sentry.adapters.SpanStatusDeserializerAdapter: io.sentry.SentryOptions options
com.google.android.gms.common.api.internal.zzb: int zzc
io.sentry.transport.TransportResult$ErrorTransportResult: int responseCode
com.google.common.collect.MapMakerInternalMap$HashIterator: com.google.common.collect.MapMakerInternalMap$WriteThroughEntry nextExternal
io.sentry.protocol.Device: java.lang.Integer screenHeightPixels
io.sentry.Hub: io.sentry.Stack stack
androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: androidx.core.util.Consumer callback
io.sentry.Scope: java.util.Queue breadcrumbs
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration: io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType inputType
io.sentry.flutter.SentryFlutterPlugin: android.content.Context context
io.flutter.embedding.android.FlutterImageView: io.flutter.embedding.engine.renderer.FlutterRenderer flutterRenderer
com.google.android.gms.common.api.internal.NonGmsServiceBrokerClient: java.lang.String zal
androidx.fragment.app.Fragment: android.view.View mInnerView
io.flutter.plugin.platform.VirtualDisplayController: io.flutter.plugin.platform.AccessibilityEventsDelegate accessibilityEventsDelegate
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter INET_ADDRESS
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState: int composingEnd
io.flutter.plugins.googlemaps.GoogleMapController: int id
io.sentry.android.core.ManifestMetadataReader: java.lang.String NDK_ENABLE
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory URI_FACTORY
com.google.common.util.concurrent.CycleDetectingLockFactory: java.util.logging.Logger logger
kotlin.random.Random: kotlin.random.Random defaultRandom
androidx.window.embedding.SplitRule$Api30Impl: androidx.window.embedding.SplitRule$Api30Impl INSTANCE
kotlin.jvm.internal.ClassReference: java.util.Map simpleNames
com.google.android.gms.common.internal.ClientSettings$Builder: android.accounts.Account zaa
com.google.android.gms.common.internal.zzag: boolean zzb
com.google.common.util.concurrent.AbstractFuture: java.lang.Object value
com.google.common.collect.MapMaker: com.google.common.base.Equivalence keyEquivalence
io.flutter.plugins.googlemaps.PolygonBuilder: boolean consumeTapEvents
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$1$1: io.flutter.plugin.common.MethodChannel$Result val$result
com.google.android.gms.common.api.internal.zal: com.google.android.gms.tasks.TaskCompletionSource zac
io.sentry.Scope: java.util.List fingerprint
kotlinx.coroutines.channels.ArrayChannel: int head
com.google.gson.internal.LinkedTreeMap: com.google.gson.internal.LinkedTreeMap$Node root
com.google.gson.internal.Excluder: java.util.List deserializationStrategies
androidx.window.layout.ActivityCompatHelperApi30: androidx.window.layout.ActivityCompatHelperApi30 INSTANCE
kotlinx.coroutines.internal.ExceptionsConstuctorKt: java.util.concurrent.locks.ReentrantReadWriteLock cacheLock
androidx.window.core.Version: int minor
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter ATOMIC_INTEGER_ARRAY
com.google.android.gms.common.internal.zad: android.app.Activity zab
androidx.core.view.KeyEventDispatcher: boolean sDialogFieldsFetched
com.google.android.gms.tasks.zzj: java.util.concurrent.Executor zza
androidx.fragment.app.FragmentTransition$3: androidx.fragment.app.Fragment val$outFragment
com.google.common.util.concurrent.AbstractFuture$Cancellation: java.lang.Throwable cause
kotlinx.coroutines.scheduling.TasksKt: kotlinx.coroutines.scheduling.SchedulerTimeSource schedulerTimeSource
androidx.core.app.NotificationCompatBuilder: android.os.Bundle mExtras
com.google.android.gms.common.api.internal.BasePendingResult: boolean zaq
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding: android.app.Activity activity
io.flutter.embedding.android.FlutterView$ZeroSides: io.flutter.embedding.android.FlutterView$ZeroSides NONE
com.google.common.collect.ImmutableList$SubList: int length
io.sentry.HostnameCache: long GET_HOSTNAME_TIMEOUT
com.google.gson.internal.bind.JsonTreeReader: java.lang.String[] pathNames
com.google.gson.internal.Excluder$1: boolean val$skipDeserialize
io.flutter.plugins.urllauncher.WebViewActivity: android.webkit.WebView webview
kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.GlobalQueue globalBlockingQueue
io.flutter.embedding.android.FlutterTextureView: io.flutter.embedding.engine.renderer.FlutterRenderer flutterRenderer
com.google.android.gms.common.internal.RootTelemetryConfiguration: android.os.Parcelable$Creator CREATOR
io.sentry.android.core.SentryAndroidOptions: boolean enableSystemEventBreadcrumbs
io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness: io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness dark
com.google.gson.DefaultDateTypeAdapter: java.util.List dateFormats
com.google.gson.stream.JsonReader: int PEEKED_END_OBJECT
io.sentry.SentryOptions: io.sentry.ILogger logger
androidx.fragment.app.FragmentHostCallback: android.content.Context mContext
androidx.fragment.app.Fragment: boolean mRetainInstance
io.flutter.plugin.editing.ListenableEditingState: int mSelectionEndWhenBeginBatchEdit
io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder: io.flutter.plugin.common.BasicMessageChannel channel
io.flutter.embedding.engine.FlutterJNI: java.util.Set engineLifecycleListeners
androidx.fragment.app.FragmentManagerImpl$PopBackStackState: androidx.fragment.app.FragmentManagerImpl this$0
io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler: io.flutter.plugin.common.MethodChannel this$0
androidx.fragment.app.FragmentManagerImpl$EndViewTransitionAnimation: boolean mEnded
kotlinx.coroutines.JobSupport: java.lang.Object _state
com.google.android.gms.maps.model.MarkerOptions: boolean zzh
com.google.android.gms.common.internal.BaseGmsClient: int zzy
io.sentry.Session: java.lang.String userAgent
com.google.android.gms.common.util.DeviceProperties: java.lang.Boolean zzd
com.google.android.gms.common.internal.MethodInvocation: int zab
androidx.window.embedding.EmbeddingCompat: androidx.window.embedding.EmbeddingCompat$Companion Companion
androidx.fragment.app.DialogFragment: android.os.Handler mHandler
io.flutter.embedding.engine.dart.DartExecutor: io.flutter.embedding.engine.FlutterJNI flutterJNI
io.flutter.plugin.editing.InputConnectionAdaptor: android.view.inputmethod.EditorInfo mEditorInfo
androidx.fragment.app.Fragment: android.util.SparseArray mSavedViewState
com.google.gson.stream.JsonWriter: java.lang.String[] HTML_SAFE_REPLACEMENT_CHARS
io.sentry.android.core.util.RootChecker: android.content.Context context
com.google.android.gms.maps.model.CameraPosition$Builder: float zzd
io.flutter.plugins.googlemaps.CircleController: float density
com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment: java.lang.ref.ReferenceQueue queueForValues
io.sentry.android.core.util.ConnectivityChecker$Status: io.sentry.android.core.util.ConnectivityChecker$Status[] $VALUES
io.sentry.android.core.ActivityLifecycleIntegration: io.sentry.IHub hub
androidx.fragment.app.FragmentManagerImpl$3: android.view.ViewGroup val$container
io.sentry.DirectoryProcessor$SendCachedEnvelopeHint: boolean retry
io.sentry.Session: io.sentry.Session$State status
androidx.fragment.app.FragmentManagerImpl$EndViewTransitionAnimation: android.view.View mChild
io.sentry.EnvelopeSender: io.sentry.ILogger logger
kotlinx.coroutines.internal.MainDispatcherLoader: kotlinx.coroutines.MainCoroutineDispatcher dispatcher
kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object _reusableCancellableContinuation
com.google.gson.internal.Excluder: java.util.List serializationStrategies
kotlinx.coroutines.Active: kotlinx.coroutines.Active INSTANCE
com.google.android.gms.common.api.internal.zabq: com.google.android.gms.common.api.internal.ApiKey zad
io.flutter.view.VsyncWaiter$1: io.flutter.view.VsyncWaiter this$0
com.google.android.gms.base.R$string: int common_google_play_services_enable_title
io.flutter.embedding.engine.systemchannels.DeferredComponentChannel: java.util.Map componentNameToResults
com.google.common.reflect.TypeToken$4: com.google.common.collect.ImmutableSet$Builder val$builder
kotlin.reflect.KVisibility: kotlin.reflect.KVisibility[] $VALUES
io.flutter.plugins.googlemaps.PolylinesController: com.google.android.gms.maps.GoogleMap googleMap
com.google.android.gms.common.api.internal.zacr: com.google.android.gms.common.api.internal.zact zab
androidx.fragment.app.FragmentState: java.lang.String mWho
io.sentry.Scope: java.util.List eventProcessors
com.google.gson.stream.JsonScope: int EMPTY_DOCUMENT
com.google.android.gms.common.ConnectionResult: int zzb
androidx.lifecycle.ProcessLifecycleOwner: android.os.Handler mHandler
io.sentry.android.core.PhoneStateBreadcrumbsIntegration: android.content.Context context
kotlinx.coroutines.internal.LockFreeLinkedListNode: java.lang.Object _prev
com.google.gson.JsonPrimitive: java.lang.Class[] PRIMITIVE_TYPES
io.flutter.plugin.platform.PlatformPlugin: int mEnabledOverlays
io.flutter.embedding.engine.systemchannels.MouseCursorChannel: io.flutter.plugin.common.MethodChannel channel
com.google.android.gms.signin.SignInOptions: java.lang.String zad
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag IS_SLIDER
io.flutter.plugins.sharedpreferences.MethodCallHandlerImpl: android.os.Handler handler
androidx.arch.core.internal.SafeIterableMap: int mSize
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.NavigationChannel navigationChannel
io.sentry.android.core.ANRWatchDog: long timeoutIntervalMillis
com.google.android.gms.signin.zad: com.google.android.gms.common.api.Scope zae
io.sentry.UnknownPropertiesTypeAdapterFactory$UnknownPropertiesTypeAdapter: com.google.gson.TypeAdapter typeAdapter
com.google.android.gms.common.internal.MethodInvocation: long zae
kotlinx.coroutines.android.HandlerContext: boolean invokeImmediately
io.flutter.Log: int DEBUG
io.flutter.plugin.platform.PlatformViewsController: java.util.HashSet currentFrameUsedOverlayLayerIds
com.google.android.gms.common.api.internal.BasePendingResult: java.lang.Object zae
io.sentry.android.core.ManifestMetadataReader: java.lang.String ANR_TIMEOUT_INTERVAL_MILLIS
com.google.android.gms.signin.zad: com.google.android.gms.common.api.Api zah
io.flutter.plugin.common.BasicMessageChannel: io.flutter.plugin.common.BinaryMessenger messenger
io.flutter.plugin.editing.InputConnectionAdaptor: io.flutter.plugin.editing.ListenableEditingState mEditable
androidx.core.app.NotificationCompat$Builder: android.os.Bundle mExtras
kotlinx.coroutines.UndispatchedCoroutine: java.lang.Object savedOldValue
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewTouch: int buttonState
kotlin.ranges.IntProgression: int step
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle: java.lang.Integer statusBarColor
io.sentry.flutter.R$styleable: int SplitPlaceholderRule_placeholderActivityName
io.sentry.adapters.DateSerializerAdapter: io.sentry.SentryOptions options
com.google.gson.stream.JsonScope: int NONEMPTY_ARRAY
androidx.window.layout.DisplayCompatHelperApi17: androidx.window.layout.DisplayCompatHelperApi17 INSTANCE
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action DECREASE
com.google.android.gms.common.api.Status: com.google.android.gms.common.api.Status RESULT_INTERNAL_ERROR
com.google.common.hash.Hashing$ChecksumType: com.google.common.hash.HashFunction hashFunction
io.sentry.SendFireAndForgetOutboxSender: io.sentry.SendCachedEnvelopeFireAndForgetIntegration$SendFireAndForgetDirPath sendFireAndForgetDirPath
kotlin.collections.EmptyIterator: kotlin.collections.EmptyIterator INSTANCE
io.flutter.embedding.android.KeyboardManager$PerEventCallbackBuilder: android.view.KeyEvent keyEvent
io.sentry.Attachment: java.lang.String attachmentType
com.google.gson.Gson: com.google.gson.internal.Excluder excluder
io.sentry.SentryOptions: int maxCacheItems
com.google.common.collect.Maps$EntryFunction: com.google.common.collect.Maps$EntryFunction VALUE
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType[] $VALUES
io.sentry.transport.StdoutTransport: io.sentry.ISerializer serializer
kotlinx.coroutines.internal.LockFreeLinkedListNode: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _prev$FU
com.google.android.gms.common.api.Status: com.google.android.gms.common.api.Status RESULT_DEAD_CLIENT
io.sentry.android.core.util.RootChecker: java.lang.Runtime runtime
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType: io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType TRANSFORM
io.flutter.plugin.platform.VirtualDisplayController: io.flutter.view.TextureRegistry$SurfaceTextureEntry textureEntry
io.flutter.plugins.googlemaps.TileProviderController$Worker: java.util.Map result
io.flutter.embedding.android.FlutterSplashView: android.view.View splashScreenView
io.flutter.plugin.common.BasicMessageChannel: java.lang.String name
kotlin.coroutines.intrinsics.CoroutineSingletons: kotlin.coroutines.intrinsics.CoroutineSingletons COROUTINE_SUSPENDED
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$Host host
io.sentry.protocol.SdkInfo: java.util.Map unknown
io.sentry.flutter.R$styleable: int Capability_shortcutMatchRequired
com.google.gson.internal.ConstructorConstructor$8: com.google.gson.internal.ConstructorConstructor this$0
com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher: long h1
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView: int prevLeft
io.sentry.flutter.R$styleable: int[] FontFamily
io.sentry.flutter.R$styleable: int SplitPairRule_clearTop
com.google.android.gms.auth.api.signin.GoogleSignInAccount: java.lang.String zag
androidx.fragment.app.Fragment: boolean mRestored
androidx.window.embedding.MatcherUtils: androidx.window.embedding.MatcherUtils INSTANCE
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action MOVE_CURSOR_BACKWARD_BY_WORD
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewTouch: int metaState
io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry$ShimRegistrarAggregate: java.util.Set shimRegistrars
androidx.lifecycle.ClassesInfoCache$CallbackInfo: java.util.Map mEventToHandlers
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: java.lang.reflect.Field childNodeIdsField
com.google.gson.stream.JsonReader: int peeked
io.flutter.view.AccessibilityBridge$SemanticsNode: android.graphics.Rect globalRect
com.google.android.gms.common.internal.BaseGmsClient: com.google.android.gms.common.internal.zze zzu
io.flutter.embedding.engine.systemchannels.MouseCursorChannel: io.flutter.plugin.common.MethodChannel$MethodCallHandler parsingMethodCallHandler
com.google.gson.stream.JsonReader: boolean lenient
io.sentry.flutter.BuildConfig: java.lang.String LIBRARY_PACKAGE_NAME
kotlinx.coroutines.LazyStandaloneCoroutine: kotlin.coroutines.Continuation continuation
io.flutter.embedding.engine.systemchannels.MouseCursorChannel$1: io.flutter.embedding.engine.systemchannels.MouseCursorChannel this$0
kotlinx.coroutines.internal.LockFreeLinkedListNode: java.util.concurrent.atomic.AtomicReferenceFieldUpdater _removedRef$FU
io.flutter.plugin.platform.PlatformViewsController: io.flutter.plugin.platform.PlatformViewRegistryImpl registry
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode[] $VALUES
androidx.collection.MapCollections$KeySet: androidx.collection.MapCollections this$0
androidx.fragment.app.Fragment: java.lang.String mTargetWho
androidx.core.view.ViewCompat$UnhandledKeyEventManager: android.util.SparseArray mCapturedKeys
io.flutter.plugin.mouse.MouseCursorPlugin$2: io.flutter.plugin.mouse.MouseCursorPlugin this$0
com.google.android.gms.dynamic.zac: com.google.android.gms.dynamic.DeferredLifecycleHelper zab
com.google.android.gms.maps.model.PolygonOptions: java.util.List zza
com.google.common.base.Predicates$ObjectPredicate: com.google.common.base.Predicates$ObjectPredicate ALWAYS_TRUE
com.google.android.gms.maps.MapsInitializer$Renderer: com.google.android.gms.maps.MapsInitializer$Renderer LEGACY
io.flutter.embedding.android.KeyboardManager: java.util.HashSet redispatchedEvents
io.sentry.SentryEnvelopeItemHeader: int length
io.sentry.adapters.SentryLevelSerializerAdapter: io.sentry.SentryOptions options
kotlinx.coroutines.IncompleteStateBox: kotlinx.coroutines.Incomplete state
com.google.common.collect.MapMaker: int initialCapacity
io.flutter.plugins.googlemaps.GoogleMapsPlugin: androidx.lifecycle.Lifecycle lifecycle
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation: io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation LANDSCAPE_LEFT
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action[] $VALUES
io.sentry.flutter.R$id: int accessibility_custom_action_8
com.google.android.gms.maps.model.PolygonOptions: int zze
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: int deferredInsetTypes
androidx.window.R$styleable: int SplitPairRule_clearTop
kotlinx.coroutines.UndispatchedMarker: kotlinx.coroutines.UndispatchedMarker INSTANCE
io.flutter.plugins.pathprovider.PathProviderPlugin$PathProviderPlatformThread: java.util.concurrent.Executor executor
io.sentry.SentryTraceHeader: io.sentry.SpanId spanId
kotlinx.coroutines.DebugKt: boolean ASSERTIONS_ENABLED
com.google.gson.stream.JsonReader: int PEEKED_UNQUOTED
io.sentry.flutter.R$attr: int placeholderActivityName
androidx.fragment.app.FragmentManagerImpl: boolean mStopped
io.flutter.plugins.googlemaps.CircleBuilder: boolean consumeTapEvents
io.sentry.SentryOptions: io.sentry.ISerializer serializer
com.google.android.gms.common.internal.zzc: boolean zzb
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean needsSave
io.flutter.view.AccessibilityBridge$SemanticsNode: int id
androidx.window.R$styleable: int SplitPlaceholderRule_splitLayoutDirection
com.google.gson.internal.Excluder$1: com.google.gson.Gson val$gson
androidx.fragment.app.Fragment: boolean mPerformedCreateView
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: java.util.Set newIntentListeners
io.sentry.protocol.Gpu: java.lang.String TYPE
kotlinx.coroutines.CoroutineDispatcher: kotlinx.coroutines.CoroutineDispatcher$Key Key
io.sentry.android.ndk.NdkScopeObserver: io.sentry.SentryOptions options
io.sentry.flutter.R$id: int title
com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl: java.lang.reflect.Type ownerType
io.flutter.plugin.platform.PlatformPlugin$1: io.flutter.plugin.platform.PlatformPlugin this$0
kotlin.SynchronizedLazyImpl: kotlin.jvm.functions.Function0 initializer
io.flutter.embedding.android.FlutterSurfaceView$1: io.flutter.embedding.android.FlutterSurfaceView this$0
androidx.fragment.app.FragmentManagerState: int mNextFragmentIndex
com.google.android.gms.common.api.internal.zan: com.google.android.gms.common.api.internal.zao zab
io.sentry.transport.RateLimiter$DataCategory: io.sentry.transport.RateLimiter$DataCategory Unknown
io.flutter.plugins.pathprovider.PathProviderPlugin$PathProviderPlatformThread: io.flutter.plugins.pathprovider.PathProviderPlugin this$0
com.google.android.gms.common.api.internal.zacd: com.google.android.gms.common.api.internal.GoogleApiManager zaa
androidx.core.app.NotificationCompat$Action: androidx.core.app.RemoteInput[] mRemoteInputs
io.flutter.FlutterInjector: io.flutter.embedding.engine.FlutterJNI$Factory flutterJniFactory
com.tekartik.sqflite.SqflitePlugin$BgResult: android.os.Handler handler
com.google.gson.Gson: com.google.gson.reflect.TypeToken NULL_KEY_SURROGATE
com.google.android.gms.signin.internal.zai: com.google.android.gms.common.internal.zat zab
io.sentry.transport.CurrentDateProvider: io.sentry.transport.ICurrentDateProvider instance
io.sentry.protocol.SentryThread: java.lang.Long id
com.google.gson.stream.JsonReader: char[] NON_EXECUTE_PREFIX
com.google.gson.stream.JsonToken: com.google.gson.stream.JsonToken END_DOCUMENT
androidx.window.embedding.ExtensionEmbeddingBackend: androidx.window.embedding.EmbeddingInterfaceCompat embeddingExtension
androidx.core.view.KeyEventDispatcher: java.lang.reflect.Field sDialogKeyListenerField
io.sentry.protocol.SentryRuntime: java.util.Map unknown
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding pluginBinding
io.sentry.android.core.ActivityLifecycleIntegration: boolean isAllActivityCallbacksAvailable
androidx.collection.ArrayMap: androidx.collection.MapCollections mCollections
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization textCapitalization
com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl: java.lang.reflect.Type rawType
com.google.common.util.concurrent.CycleDetectingLockFactory$Policies: com.google.common.util.concurrent.CycleDetectingLockFactory$Policies THROW
com.google.android.gms.common.internal.RootTelemetryConfiguration: boolean zzb
androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentFactory mFragmentFactory
androidx.fragment.app.Fragment$AnimationInfo: android.animation.Animator mAnimator
io.flutter.view.AccessibilityBridge$SemanticsNode: int textSelectionBase
io.flutter.embedding.engine.dart.DartMessenger$Reply: java.util.concurrent.atomic.AtomicBoolean done
com.tekartik.sqflite.operation.BatchOperation: com.tekartik.sqflite.operation.BatchOperation$BatchOperationResult operationResult
io.sentry.HostnameCache: long HOSTNAME_CACHE_DURATION
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation: java.lang.String encodedName
androidx.collection.SparseArrayCompat: int[] mKeys
io.sentry.SentryOptions: java.util.List inAppExcludes
com.google.android.gms.common.internal.MethodInvocation: int zaa
io.sentry.Session: java.lang.String ipAddress
io.flutter.plugin.platform.PlatformViewsController: io.flutter.embedding.engine.systemchannels.PlatformViewsChannel platformViewsChannel
com.tekartik.sqflite.SqflitePlugin$8: com.tekartik.sqflite.SqflitePlugin this$0
io.sentry.protocol.App: java.util.Map unknown
com.google.android.gms.common.zzm: com.google.android.gms.common.zzk zzb
androidx.window.R$styleable: int SplitPairFilter_primaryActivityName
androidx.window.R$styleable: int SplitPairRule_splitRatio
io.sentry.flutter.R$id: int accessibility_custom_action_14
io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler: io.flutter.plugin.common.MethodChannel$MethodCallHandler handler
io.flutter.embedding.engine.systemchannels.PlatformChannel$1: io.flutter.embedding.engine.systemchannels.PlatformChannel this$0
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics: int viewPaddingBottom
io.flutter.embedding.android.FlutterSplashView$3: io.flutter.embedding.android.FlutterSplashView this$0
com.google.android.gms.internal.base.zad: com.google.android.gms.common.Feature zaa
androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager: java.util.WeakHashMap mPanesToVisible
io.flutter.plugin.platform.PlatformPlugin$3: int[] $SwitchMap$io$flutter$embedding$engine$systemchannels$PlatformChannel$Brightness
io.flutter.embedding.engine.systemchannels.PlatformChannel: io.flutter.plugin.common.MethodChannel$MethodCallHandler parsingMethodCallHandler
androidx.fragment.app.FragmentActivity: androidx.fragment.app.FragmentController mFragments
com.google.android.gms.maps.model.TileOverlayOptions: boolean zze
com.google.gson.stream.JsonReader: int PEEKED_SINGLE_QUOTED
com.google.gson.stream.JsonToken: com.google.gson.stream.JsonToken BEGIN_ARRAY
io.sentry.UserFeedback: java.lang.String name
kotlin.text.Charsets: java.nio.charset.Charset UTF_16LE
com.google.android.gms.maps.MapView: com.google.android.gms.maps.zzah zza
io.sentry.Span: java.util.concurrent.atomic.AtomicBoolean finished
io.flutter.plugin.platform.SingleViewPresentation$PresentationContext: io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler windowManagerHandler
io.sentry.ShutdownHookIntegration: java.lang.Runtime runtime
com.google.android.gms.common.api.internal.zzc: java.lang.String zzb
androidx.core.os.LocaleListCompatWrapper: java.util.Locale EN_LATN
androidx.fragment.app.Fragment$3: androidx.fragment.app.Fragment this$0
io.sentry.flutter.R$drawable: int notification_template_icon_bg
io.sentry.android.core.LifecycleWatcher: java.util.concurrent.atomic.AtomicLong lastUpdatedSession
io.sentry.protocol.Device: java.lang.String id
kotlinx.coroutines.EventLoopImplBase: java.lang.Object _delayed
io.sentry.protocol.DebugMeta: java.util.List images
io.sentry.protocol.Mechanism: java.util.Map meta
io.sentry.protocol.OperatingSystem: java.lang.String name
androidx.fragment.app.Fragment: boolean mFromLayout
com.google.android.gms.common.internal.zzo: int zzc
kotlinx.coroutines.scheduling.TasksKt: long WORK_STEALING_TIME_RESOLUTION_NS
androidx.core.app.NotificationCompat$Builder: int mProgressMax
com.google.common.collect.MapMakerInternalMap$AbstractWeakKeyEntry: com.google.common.collect.MapMakerInternalMap$InternalEntry next
io.sentry.android.core.DefaultAndroidEventProcessor: java.lang.String ROOTED
com.google.common.collect.MapMakerInternalMap$AbstractWeakKeyEntry: int hash
kotlin.coroutines.intrinsics.CoroutineSingletons: kotlin.coroutines.intrinsics.CoroutineSingletons RESUMED
androidx.core.app.NotificationCompatBuilder: android.widget.RemoteViews mContentView
androidx.core.view.OneShotPreDrawListener: android.view.View mView
com.google.gson.stream.JsonWriter: boolean htmlSafe
io.flutter.plugin.platform.PlatformViewsController: boolean flutterViewConvertedToImageView
androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.Lifecycle$State mState
androidx.window.embedding.ExtensionEmbeddingBackend: java.util.concurrent.CopyOnWriteArraySet splitRules
androidx.fragment.app.FragmentTransitionImpl$1: java.util.ArrayList val$outNames
androidx.lifecycle.ProcessLifecycleOwner$1: androidx.lifecycle.ProcessLifecycleOwner this$0
androidx.core.view.WindowInsetsControllerCompat$Impl30: android.view.WindowInsetsController mInsetsController
androidx.fragment.app.FragmentManagerImpl: androidx.fragment.app.Fragment mParent
io.flutter.plugin.localization.LocalizationPlugin$1: io.flutter.plugin.localization.LocalizationPlugin this$0
io.flutter.embedding.engine.FlutterEngineCache: io.flutter.embedding.engine.FlutterEngineCache instance
androidx.fragment.app.Fragment: androidx.lifecycle.LifecycleRegistry mLifecycleRegistry
androidx.arch.core.internal.SafeIterableMap: java.util.WeakHashMap mIterators
io.sentry.Session: java.util.Date timestamp
io.sentry.Span: io.sentry.SpanContext context
io.sentry.transport.AsyncHttpTransport$EnvelopeSender: io.sentry.transport.AsyncHttpTransport this$0
kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState TERMINATED
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter BOOLEAN_AS_STRING
kotlinx.coroutines.CoroutineName: kotlinx.coroutines.CoroutineName$Key Key
androidx.core.app.ComponentActivity: androidx.collection.SimpleArrayMap mExtraDataMap
com.tekartik.sqflite.SqflitePlugin$7: com.tekartik.sqflite.Database val$database
io.sentry.Scope: java.util.Map tags
com.google.android.gms.maps.GoogleMapOptions: java.lang.Boolean zzq
io.sentry.flutter.R$id: int accessibility_custom_action_26
androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State CREATED
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType: io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType OPACITY
androidx.core.R$id: int tag_accessibility_pane_title
com.google.android.gms.common.GooglePlayServicesUtil: int GOOGLE_PLAY_SERVICES_VERSION_CODE
io.flutter.plugin.mouse.MouseCursorPlugin: java.util.HashMap systemCursorConstants
io.sentry.protocol.Message: java.lang.String message
com.google.android.gms.maps.model.CircleOptions: boolean zzg
io.sentry.flutter.R$id: int accessibility_custom_action_30
androidx.fragment.app.DialogFragment$1: androidx.fragment.app.DialogFragment this$0
com.google.gson.internal.LinkedTreeMap$Node: com.google.gson.internal.LinkedTreeMap$Node right
io.sentry.android.core.ActivityLifecycleIntegration: java.util.WeakHashMap activitiesWithOngoingTransactions
io.sentry.SentryOptions: java.lang.Boolean enableUncaughtExceptionHandler
androidx.collection.MapCollections: androidx.collection.MapCollections$ValuesCollection mValues
com.google.android.gms.common.zzk: java.lang.ref.WeakReference zzb
io.sentry.SentryEnvelope: io.sentry.SentryEnvelopeHeader header
com.google.android.gms.internal.common.zzd: int zza
io.sentry.protocol.Device$DeviceOrientation: io.sentry.protocol.Device$DeviceOrientation[] $VALUES
io.sentry.protocol.Device: java.util.TimeZone timezone
io.flutter.embedding.engine.systemchannels.LocalizationChannel: io.flutter.plugin.common.MethodChannel channel
com.google.android.gms.maps.model.PatternItem: android.os.Parcelable$Creator CREATOR
io.sentry.android.core.SentryAndroidOptions: boolean anrEnabled
androidx.core.app.NotificationCompatBuilder: android.content.Context mContext
io.sentry.flutter.R$id: int tag_screen_reader_focusable
io.sentry.flutter.R$styleable: int SplitPairRule_splitLayoutDirection
kotlinx.coroutines.channels.BufferOverflow: kotlinx.coroutines.channels.BufferOverflow[] $VALUES
kotlinx.coroutines.internal.LockFreeLinkedListKt: java.lang.Object LIST_EMPTY
io.sentry.android.core.LifecycleWatcher: java.util.Timer timer
io.flutter.plugins.googlemaps.CircleController: com.google.android.gms.maps.model.Circle circle
io.sentry.protocol.Request: java.lang.String queryString
kotlinx.coroutines.EventLoop: long useCount
kotlinx.coroutines.scheduling.CoroutineScheduler: int maxPoolSize
com.tekartik.sqflite.SqlCommand: java.util.List rawArguments
io.flutter.embedding.engine.systemchannels.NavigationChannel$1: io.flutter.embedding.engine.systemchannels.NavigationChannel this$0
io.flutter.view.AccessibilityBridge$SemanticsNode: int maxValueLength
com.google.gson.stream.JsonWriter: java.lang.String indent
kotlinx.coroutines.scheduling.WorkQueue: java.util.concurrent.atomic.AtomicIntegerFieldUpdater consumerIndex$FU
kotlinx.coroutines.internal.ArrayQueue: int head
com.google.android.gms.common.api.internal.zabu: com.google.android.gms.common.api.internal.ApiKey zac
kotlinx.coroutines.flow.internal.SafeCollector: kotlin.coroutines.CoroutineContext collectContext
androidx.lifecycle.ProcessLifecycleOwner$3$1: androidx.lifecycle.ProcessLifecycleOwner$3 this$1
io.sentry.protocol.SentryPackage: java.lang.String version
kotlinx.coroutines.channels.AbstractSendChannel: kotlinx.coroutines.internal.LockFreeLinkedListHead queue
io.sentry.SentryEnvelopeItem: byte[] data
com.google.android.gms.common.api.internal.GoogleApiManager: com.google.android.gms.common.internal.TelemetryLoggingClient zaj
io.sentry.adapters.SentryIdSerializerAdapter: io.sentry.SentryOptions options
com.google.gson.Gson: boolean DEFAULT_SPECIALIZE_FLOAT_VALUES
com.google.gson.Gson: com.google.gson.FieldNamingStrategy fieldNamingStrategy
io.flutter.embedding.android.DrawableSplashScreen: long crossfadeDurationInMillis
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.MouseCursorChannel mouseCursorChannel
com.google.android.gms.common.GooglePlayServicesManifestException: int zza
io.flutter.FlutterInjector$Builder$NamedThreadFactory: io.flutter.FlutterInjector$Builder this$0
io.flutter.embedding.android.FlutterView: io.flutter.embedding.android.AndroidTouchProcessor androidTouchProcessor
androidx.core.content.res.ResourcesCompat: java.util.WeakHashMap sColorStateCaches
kotlinx.coroutines.internal.ThreadState: kotlin.coroutines.CoroutineContext context
androidx.fragment.app.DialogFragment: boolean mDismissed
com.tekartik.sqflite.SqflitePlugin$6: java.lang.String val$path
io.sentry.protocol.OperatingSystem: java.lang.String rawDescription
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics: int viewInsetTop
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter DOUBLE
com.google.android.gms.common.GoogleSignatureVerifier: android.content.Context zzb
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag IS_FOCUSABLE
kotlinx.coroutines.EventLoopImplBase$DelayedTask: long nanoTime
androidx.activity.ImmLeaksCleaner: java.lang.reflect.Field sNextServedViewField
io.sentry.protocol.SentryId: io.sentry.protocol.SentryId EMPTY_ID
androidx.window.layout.FoldingFeature$OcclusionType: androidx.window.layout.FoldingFeature$OcclusionType$Companion Companion
androidx.window.layout.WindowInfoTracker$Companion: androidx.window.layout.WindowInfoTracker$Companion $$INSTANCE
com.google.android.gms.common.internal.BaseGmsClient$LegacyClientCallbackAdapter: com.google.android.gms.common.internal.BaseGmsClient zza
com.tekartik.sqflite.SqflitePlugin: io.flutter.plugin.common.MethodChannel methodChannel
io.sentry.flutter.R$styleable: int FontFamily_fontProviderFetchTimeout
com.google.android.gms.auth.api.signin.GoogleSignInAccount: java.lang.String zad
com.tekartik.sqflite.operation.ExecuteOperation: io.flutter.plugin.common.MethodChannel$Result result
androidx.fragment.app.FragmentManagerImpl$FragmentTag: int[] Fragment
com.google.common.util.concurrent.ThreadFactoryBuilder: java.lang.Boolean daemon
com.tekartik.sqflite.SqflitePlugin$6: com.tekartik.sqflite.SqflitePlugin this$0
io.sentry.Breadcrumb: java.util.Date timestamp
com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$KeySet keySet
com.google.common.hash.HashCode$IntHashCode: int hash
androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: java.util.concurrent.Executor executor
com.google.gson.stream.JsonWriter: boolean lenient
io.sentry.android.core.SystemEventsBreadcrumbsIntegration$SystemEventsBroadcastReceiver: io.sentry.IHub hub
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization: java.lang.String encodedName
com.google.gson.internal.LinkedHashTreeMap$Node: java.lang.Object key
io.flutter.plugins.pathprovider.PathProviderPlugin: io.flutter.plugins.pathprovider.PathProviderPlugin$PathProviderImpl impl
io.flutter.plugins.googlemaps.GoogleMapBuilder: boolean myLocationButtonEnabled
com.google.common.util.concurrent.AbstractFuture$Cancellation: com.google.common.util.concurrent.AbstractFuture$Cancellation CAUSELESS_CANCELLED
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode IMMERSIVE
kotlinx.coroutines.JobSupport$ChildCompletion: kotlinx.coroutines.JobSupport$Finishing state
com.google.android.gms.common.api.internal.zaaf: com.google.android.gms.common.api.internal.ApiKey zaa
io.sentry.Scope$SessionPair: io.sentry.Session current
com.google.android.gms.maps.model.TileOverlayOptions: com.google.android.gms.internal.maps.zzaj zza
io.flutter.plugin.mouse.MouseCursorPlugin: io.flutter.plugin.mouse.MouseCursorPlugin$MouseCursorViewDelegate mView
com.google.android.gms.maps.model.CustomCap: float refWidth
io.sentry.android.core.PhoneStateBreadcrumbsIntegration: android.telephony.TelephonyManager telephonyManager
com.google.gson.stream.JsonReader: int NUMBER_CHAR_NONE
androidx.fragment.app.BackStackState: int mBreadCrumbTitleRes
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_ANY
kotlinx.coroutines.internal.ThreadContextKt: kotlin.jvm.functions.Function2 countAll
io.sentry.protocol.Gpu: java.lang.String npotSupport
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$13: io.sentry.android.core.SentryAndroidOptions $options
io.sentry.adapters.ContextsSerializerAdapter: io.sentry.SentryOptions options
androidx.window.layout.WindowInfoTracker: androidx.window.layout.WindowInfoTracker$Companion Companion
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.PlatformViewFactory viewFactory
io.sentry.SentryEvent: java.util.Map modules
com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter: com.google.gson.internal.ObjectConstructor constructor
kotlinx.coroutines.internal.DispatchedContinuationKt: kotlinx.coroutines.internal.Symbol REUSABLE_CLAIMED
androidx.activity.OnBackPressedDispatcher$LifecycleOnBackPressedCancellable: androidx.activity.OnBackPressedCallback mOnBackPressedCallback
com.google.android.gms.common.api.internal.ApiKey: int zaa
kotlinx.coroutines.internal.ExceptionsConstuctorKt$createConstructor$$inlined$safeCtor$2: java.lang.reflect.Constructor $constructor$inlined
kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart DEFAULT
com.google.gson.stream.JsonToken: com.google.gson.stream.JsonToken[] $VALUES
io.sentry.Dsn: java.lang.String secretKey
com.google.android.gms.tasks.zzw: java.lang.Object zza
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel: io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewsHandler handler
io.sentry.protocol.Device: java.lang.Long usableMemory
com.google.gson.Gson: boolean DEFAULT_PRETTY_PRINT
com.google.gson.Gson: java.util.List factories
kotlinx.coroutines.scheduling.WorkQueue: java.lang.Object lastScheduledTask
io.flutter.embedding.android.FlutterView: io.flutter.embedding.android.WindowInfoRepositoryCallbackAdapterWrapper windowInfoRepo
io.flutter.view.AccessibilityBridge$1: io.flutter.view.AccessibilityBridge this$0
io.flutter.embedding.engine.systemchannels.KeyEventChannel$FlutterKeyEvent: java.lang.Character complexCharacter
androidx.fragment.app.Fragment: boolean mHiddenChanged
com.google.android.gms.maps.model.MapStyleOptions: java.lang.String zza
androidx.fragment.app.FragmentTransition$3: boolean val$inIsPop
com.tekartik.sqflite.SqflitePlugin$BgResult$2: java.lang.String val$errorMessage
io.sentry.SpanContext: java.lang.String description
com.google.android.gms.maps.model.CircleOptions: float zzc
com.google.android.gms.maps.MapsInitializer: java.lang.String zza
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: java.util.Map broadcastReceiverAwarePlugins
io.flutter.embedding.android.DrawableSplashScreen$1: java.lang.Runnable val$onTransitionComplete
com.google.android.gms.maps.zzag: android.view.View zzc
com.google.android.gms.dynamite.DynamiteModule: com.google.android.gms.dynamite.DynamiteModule$VersionPolicy$IVersions zzh
com.google.common.collect.AbstractIndexedListIterator: int position
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType HINGE
androidx.window.embedding.EmbeddingTranslatingCallback: androidx.window.embedding.EmbeddingAdapter adapter
androidx.window.R$styleable: int[] SplitPairFilter
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.RestorationChannel restorationChannel
com.google.android.gms.common.GooglePlayServicesUtilLight: boolean zza
kotlinx.coroutines.JobSupportKt: kotlinx.coroutines.internal.Symbol COMPLETING_WAITING_CHILDREN
io.flutter.embedding.engine.dart.DartMessenger: io.flutter.embedding.engine.FlutterJNI flutterJNI
com.google.android.gms.maps.zzc: com.google.android.gms.maps.GoogleMap$OnInfoWindowClickListener zza
io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType type
io.sentry.flutter.BuildConfig: boolean DEBUG
io.sentry.CircularFifoQueue: long serialVersionUID
io.sentry.flutter.R$id: int forever
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction: int overrideId
io.sentry.android.core.Installation: java.lang.String INSTALLATION
io.flutter.view.AccessibilityBridge: java.util.List flutterNavigationStack
io.flutter.plugins.googlemaps.MarkersController: java.util.Map googleMapsMarkerIdToDartMarkerId
com.google.common.collect.MapMakerInternalMap$EntrySet: com.google.common.collect.MapMakerInternalMap this$0
com.google.gson.Gson: boolean generateNonExecutableJson
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.FlutterEngineConnectionRegistry pluginRegistry
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: java.util.Map contentProviderAwarePlugins
androidx.lifecycle.FullLifecycleObserverAdapter$1: int[] $SwitchMap$androidx$lifecycle$Lifecycle$Event
io.sentry.flutter.R$attr: int finishSecondaryWithPrimary
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics: float devicePixelRatio
androidx.fragment.app.FragmentManagerImpl: java.util.ArrayList mTmpIsPop
kotlinx.coroutines.CompletedExceptionally: int _handled
androidx.core.R$id: int accessibility_custom_action_19
com.google.gson.Gson: int timeStyle
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag HAS_CHECKED_STATE
kotlinx.coroutines.scheduling.CoroutineScheduler: long controlState
io.flutter.embedding.android.FlutterView: io.flutter.embedding.android.KeyboardManager keyboardManager
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int rngState
com.google.android.gms.common.internal.zzu: java.lang.String zzb
com.google.gson.internal.bind.JsonTreeWriter: java.io.Writer UNWRITABLE_WRITER
io.sentry.Session: java.util.Date started
io.sentry.protocol.Mechanism: java.lang.String description
kotlinx.coroutines.internal.ExceptionsConstuctorKt$tryCopyException$4$1: kotlinx.coroutines.internal.ExceptionsConstuctorKt$tryCopyException$4$1 INSTANCE
io.flutter.embedding.android.RenderMode: io.flutter.embedding.android.RenderMode texture
io.sentry.flutter.R$drawable: int notification_action_background
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: boolean isFlutterEngineFromHost
com.google.android.gms.common.internal.ClientSettings: java.util.Set zab
io.flutter.plugin.common.BasicMessageChannel$IncomingReplyHandler: io.flutter.plugin.common.BasicMessageChannel this$0
com.google.android.gms.common.api.internal.BasePendingResult: java.util.concurrent.CountDownLatch zaf
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType NUMBER
io.flutter.view.AccessibilityViewEmbedder$ViewAndId: android.view.View view
io.sentry.SentryBaseEvent: io.sentry.protocol.SentryId eventId
io.flutter.plugins.urllauncher.MethodCallHandlerImpl: io.flutter.plugin.common.MethodChannel channel
com.google.android.gms.maps.model.MarkerOptions: float zzn
io.flutter.embedding.android.FlutterSplashView: java.lang.String transitioningIsolateId
kotlin.coroutines.jvm.internal.ModuleNameRetriever: kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache cache
com.google.gson.GsonBuilder: boolean prettyPrinting
io.sentry.Session: java.lang.Double duration
kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object _state
androidx.core.R$id: int accessibility_custom_action_27
com.google.gson.JsonIOException: long serialVersionUID
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event ON_STOP
kotlin.sequences.TransformingSequence: kotlin.jvm.functions.Function1 transformer
androidx.fragment.app.FragmentActivity: boolean mStartedIntentSenderFromFragment
io.flutter.embedding.android.FlutterSurfaceView: boolean isPaused
androidx.fragment.app.Fragment$2: androidx.fragment.app.Fragment this$0
io.sentry.SentryOptions: java.util.Set ignoredExceptionsForType
com.google.android.gms.common.api.Status: com.google.android.gms.common.ConnectionResult zzf
androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State STARTED
com.google.android.gms.common.api.internal.NonGmsServiceBrokerClient: java.lang.String zak
io.sentry.SentryLevel: io.sentry.SentryLevel[] $VALUES
io.sentry.transport.RateLimiter$DataCategory: io.sentry.transport.RateLimiter$DataCategory Security
io.flutter.plugin.platform.SingleViewPresentation$PresentationContext: android.view.WindowManager windowManager
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: int overlayInsetTypes
androidx.fragment.app.FragmentManagerState: java.util.ArrayList mActive
com.google.android.gms.maps.model.VisibleRegion: android.os.Parcelable$Creator CREATOR
io.flutter.embedding.android.FlutterView: java.util.Set flutterUiDisplayListeners
androidx.fragment.app.FragmentHostCallback: androidx.fragment.app.FragmentManagerImpl mFragmentManager
kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt$createCoroutineUnintercepted$$inlined$createCoroutineFromSuspendFunction$IntrinsicsKt__IntrinsicsJvmKt$4: kotlin.jvm.functions.Function2 $this_createCoroutineUnintercepted$inlined
io.sentry.android.core.ManifestMetadataReader: java.lang.String RELEASE
io.sentry.SentryClient: java.util.Random random
com.google.android.gms.common.internal.zac: androidx.collection.SimpleArrayMap zaa
androidx.core.app.NotificationCompat$Builder: boolean mLocalOnly
kotlinx.coroutines.JobNode: kotlinx.coroutines.JobSupport job
androidx.savedstate.SavedStateRegistryController: androidx.savedstate.SavedStateRegistryOwner mOwner
kotlinx.coroutines.scheduling.Task: long submissionTime
io.sentry.SentryOptions: io.sentry.SentryOptions$BeforeBreadcrumbCallback beforeBreadcrumb
io.flutter.FlutterInjector: boolean accessed
io.sentry.SpanStatus: io.sentry.SpanStatus DATA_LOSS
io.flutter.plugin.platform.PlatformViewsController: io.flutter.embedding.android.MotionEventTracker motionEventTracker
androidx.core.app.NotificationCompatBuilder: android.widget.RemoteViews mBigContentView
io.flutter.plugins.connectivity.ConnectivityPlugin: io.flutter.plugin.common.EventChannel eventChannel
com.tekartik.sqflite.Database: int logLevel
com.google.android.gms.common.internal.GetServiceRequest: android.os.Parcelable$Creator CREATOR
kotlinx.coroutines.internal.DispatchedContinuation: kotlin.coroutines.Continuation continuation
io.flutter.plugins.connectivity.Connectivity: android.net.ConnectivityManager connectivityManager
com.google.android.gms.common.internal.GetServiceRequest: boolean zzk
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1: com.google.gson.internal.bind.ReflectiveTypeAdapterFactory this$0
com.google.gson.stream.JsonReader: int lineStart
io.sentry.android.core.util.RootChecker: io.sentry.android.core.IBuildInfoProvider buildInfoProvider
io.flutter.plugins.googlemaps.PolylinesController: io.flutter.plugin.common.MethodChannel methodChannel
androidx.window.layout.FoldingFeature$State: java.lang.String description
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView$1: android.view.View val$mutatorView
com.google.android.gms.common.util.DeviceProperties: java.lang.Boolean zze
com.google.android.gms.dynamic.DeferredLifecycleHelper: com.google.android.gms.dynamic.LifecycleDelegate zaa
com.google.android.gms.common.internal.zzr: android.content.Context zzc
io.sentry.flutter.R$id: int accessibility_custom_action_31
androidx.window.embedding.MatcherUtils: java.lang.String sMatchersTag
com.google.android.gms.common.api.internal.BackgroundDetector: com.google.android.gms.common.api.internal.BackgroundDetector zza
io.flutter.view.AccessibilityBridge: io.flutter.view.AccessibilityBridge$SemanticsNode hoveredObject
androidx.fragment.app.FragmentManagerImpl: java.util.ArrayList mTmpRecords
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter INTEGER
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action INCREASE
io.sentry.flutter.R$dimen: int compat_notification_large_icon_max_height
androidx.window.layout.HardwareFoldingFeature: androidx.window.core.Bounds featureBounds
com.google.gson.internal.LinkedHashTreeMap$Node: int height
io.flutter.plugins.googlemaps.GoogleMapController: io.flutter.plugin.common.MethodChannel methodChannel
kotlinx.coroutines.android.HandlerDispatcherKt: android.view.Choreographer choreographer
io.flutter.plugins.googlemaps.GoogleMapBuilder: boolean myLocationEnabled
com.google.android.gms.common.internal.GmsClientSupervisor: android.os.HandlerThread zza
com.google.common.hash.HashCode$BytesHashCode: byte[] bytes
com.google.common.base.MoreObjects$ToStringHelper$ValueHolder: java.lang.String name
com.google.gson.internal.LinkedHashTreeMap: int threshold
com.tekartik.sqflite.SqflitePlugin$3: com.tekartik.sqflite.SqflitePlugin this$0
com.google.common.util.concurrent.ThreadFactoryBuilder$1: java.util.concurrent.ThreadFactory val$backingThreadFactory
androidx.versionedparcelable.ParcelImpl: androidx.versionedparcelable.VersionedParcelable mParcel
androidx.core.app.NotificationCompat$Builder: java.lang.CharSequence mContentTitle
com.google.common.base.MoreObjects$ToStringHelper$ValueHolder: java.lang.Object value
com.google.android.gms.signin.SignInOptions: java.lang.Long zai
io.flutter.embedding.engine.loader.FlutterLoader: io.flutter.embedding.engine.loader.FlutterLoader$Settings settings
com.google.android.gms.common.internal.zzg: com.google.android.gms.common.internal.BaseGmsClient zze
com.google.android.gms.maps.model.Circle: com.google.android.gms.internal.maps.zzl zza
io.sentry.SentryBaseEvent: java.lang.String environment
com.google.android.gms.signin.internal.zak: com.google.android.gms.common.internal.zav zac
kotlinx.coroutines.YieldContext: boolean dispatcherWasUnconfined
com.google.android.gms.common.api.internal.zabu: com.google.android.gms.common.api.Api$Client zab
androidx.window.layout.WindowMetricsCalculator$Companion$decorator$1: androidx.window.layout.WindowMetricsCalculator$Companion$decorator$1 INSTANCE
kotlinx.coroutines.channels.AbstractChannel$Itr: kotlinx.coroutines.channels.AbstractChannel channel
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean mayHaveLocalTasks
kotlinx.coroutines.JobSupport$ChildCompletion: java.lang.Object proposedUpdate
androidx.loader.app.LoaderManagerImpl$LoaderInfo: int mId
com.tekartik.sqflite.operation.MethodCallOperation$Result: com.tekartik.sqflite.operation.MethodCallOperation this$0
androidx.core.app.NotificationCompat$Builder: android.widget.RemoteViews mHeadsUpContentView
com.google.android.gms.base.R$string: int common_google_play_services_install_text
com.tekartik.sqflite.SqlCommand: java.lang.String sql
com.tekartik.sqflite.SqflitePlugin: int logLevel
com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$Node header
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics: java.util.List displayFeatures
io.sentry.RequestDetailsResolver: java.lang.String SENTRY_AUTH
io.sentry.flutter.BuildConfig: java.lang.String BUILD_TYPE
androidx.core.app.NotificationCompat$Action: boolean mIsContextual
io.sentry.SentryTracer: io.sentry.IHub hub
com.google.common.util.concurrent.ThreadFactoryBuilder: java.lang.String nameFormat
com.google.gson.internal.Excluder: com.google.gson.internal.Excluder DEFAULT
io.flutter.embedding.android.FlutterSplashView: io.flutter.embedding.android.FlutterView$FlutterEngineAttachmentListener flutterEngineAttachmentListener
com.google.android.gms.signin.SignInOptions: java.lang.String zag
io.flutter.plugins.googlemaps.GoogleMapBuilder: boolean buildingsEnabled
com.google.common.reflect.Types$JavaVersion: com.google.common.reflect.Types$JavaVersion CURRENT
io.flutter.plugins.urllauncher.WebViewActivity: java.lang.String ENABLE_JS_EXTRA
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState POSTURE_FLAT
androidx.core.R$id: int accessibility_custom_action_8
io.sentry.flutter.R$layout: int notification_template_part_chronometer
io.sentry.SentryOptions: java.lang.Double sampleRate
io.sentry.protocol.Message: java.util.List params
com.google.android.gms.tasks.zzr: java.util.Queue zzb
io.sentry.SentryEnvelopeHeader: io.sentry.protocol.SdkVersion sdkVersion
com.google.android.gms.common.api.internal.zabn: com.google.android.gms.common.api.internal.zabq zab
androidx.fragment.app.Fragment$AnimationInfo: java.lang.Object mSharedElementEnterTransition
androidx.window.core.Bounds: int top
com.google.gson.Gson: boolean htmlSafe
kotlin.internal.PlatformImplementations$ReflectThrowable: java.lang.reflect.Method getSuppressed
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag IS_LIVE_REGION
com.google.android.gms.common.internal.GmsClient: android.accounts.Account zad
androidx.core.app.NotificationCompat$Builder: boolean mProgressIndeterminate
kotlinx.coroutines.channels.AbstractChannel$enqueueReceiveInternal$$inlined$addLastIfPrevAndIf$1: kotlinx.coroutines.internal.LockFreeLinkedListNode $node
io.sentry.flutter.R$drawable: int notification_bg_low_pressed
com.google.android.gms.maps.model.Cap: android.os.Parcelable$Creator CREATOR
com.google.gson.internal.Streams$AppendableWriter$CurrentWrite: char[] chars
kotlinx.coroutines.CoroutineExceptionHandler$Key: kotlinx.coroutines.CoroutineExceptionHandler$Key $$INSTANCE
com.google.android.gms.common.internal.MethodInvocation: int zac
io.flutter.plugins.urllauncher.UrlLauncher$LaunchStatus: io.flutter.plugins.urllauncher.UrlLauncher$LaunchStatus ACTIVITY_NOT_FOUND
com.google.common.util.concurrent.ThreadFactoryBuilder$1: java.lang.Thread$UncaughtExceptionHandler val$uncaughtExceptionHandler
com.google.common.collect.ImmutableSet$Builder: java.lang.Object[] hashTable
io.sentry.OptionsContainer: java.lang.Class clazz
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory: com.google.gson.internal.Excluder excluder
io.sentry.android.core.ManifestMetadataReader: java.lang.String ANR_ENABLE
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter BIG_INTEGER
androidx.window.R$attr: int placeholderActivityName
io.sentry.android.core.TempSensorBreadcrumbsIntegration: android.content.Context context
io.sentry.flutter.R$id: int accessibility_custom_action_4
kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt$createCoroutineUnintercepted$$inlined$createCoroutineFromSuspendFunction$IntrinsicsKt__IntrinsicsJvmKt$2: kotlin.jvm.functions.Function1 $this_createCoroutineUnintercepted$inlined
com.google.android.gms.common.api.internal.zact: com.google.android.gms.common.api.Api$AbstractClientBuilder zaa
io.flutter.embedding.android.FlutterSurfaceView$2: io.flutter.embedding.android.FlutterSurfaceView this$0
androidx.fragment.app.FragmentManagerImpl: java.util.ArrayList mPostponedTransactions
io.flutter.view.AccessibilityBridge$StringAttribute: io.flutter.view.AccessibilityBridge$StringAttributeType type
com.google.common.util.concurrent.AbstractFuture$Listener: java.lang.Runnable task
androidx.fragment.app.FragmentManagerImpl$StartEnterTransitionListener: boolean mIsBack
androidx.core.app.NotificationCompat$Style: java.lang.CharSequence mBigContentTitle
io.sentry.protocol.SentryStackFrame: java.lang.String module
com.google.gson.stream.JsonScope: int DANGLING_NAME
io.flutter.plugins.googlemaps.GoogleMapFactory: io.flutter.plugin.common.BinaryMessenger binaryMessenger
io.flutter.plugin.editing.TextEditingDelta: java.lang.CharSequence deltaText
com.google.android.gms.internal.common.zza: java.lang.String zzb
androidx.fragment.app.FragmentActivity: boolean mStopped
androidx.fragment.app.FragmentTransaction: int mTransition
io.sentry.SpanStatus: io.sentry.SpanStatus DEADLINE_EXCEEDED
com.google.android.gms.common.internal.ConnectionTelemetryConfiguration: int[] zzf
io.flutter.plugins.googlemaps.PolygonController: boolean consumeTapEvents
kotlinx.coroutines.channels.ChannelResult: kotlinx.coroutines.channels.ChannelResult$Companion Companion
com.google.android.gms.common.api.internal.GoogleApiManager: java.lang.Object zac
androidx.window.embedding.ExtensionEmbeddingBackend: androidx.window.embedding.ExtensionEmbeddingBackend$Companion Companion
androidx.fragment.app.FragmentManagerState: android.os.Parcelable$Creator CREATOR
io.sentry.flutter.R$drawable: int notify_panel_notification_icon_bg
com.google.android.gms.common.api.internal.GoogleApiManager: com.google.android.gms.common.api.Status zab
io.sentry.flutter.R$id: int accessibility_custom_action_29
io.sentry.flutter.R$styleable: int GradientColor_android_centerX
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics: int viewInsetBottom
io.flutter.view.AccessibilityBridge$SemanticsNode: float previousScrollExtentMax
com.google.common.collect.RegularImmutableSet: java.lang.Object[] table
com.google.common.collect.MapMakerInternalMap$HashIterator: java.util.concurrent.atomic.AtomicReferenceArray currentTable
com.google.android.gms.common.api.Status: com.google.android.gms.common.api.Status RESULT_CANCELED
io.sentry.protocol.SentryTransaction: java.lang.String transaction
androidx.fragment.app.Fragment: androidx.fragment.app.FragmentManagerImpl mChildFragmentManager
com.google.android.gms.maps.GoogleMapOptions: java.lang.Float zzo
com.google.common.collect.ImmutableCollection: java.lang.Object[] EMPTY_ARRAY
io.sentry.flutter.R$dimen: int notification_big_circle_margin
io.sentry.flutter.R$dimen: int notification_small_icon_background_padding
io.sentry.transport.QueuedThreadPoolExecutor: int maxQueueSize
io.sentry.Sentry: java.lang.ThreadLocal currentHub
com.google.android.gms.common.api.internal.zact: com.google.android.gms.common.internal.ClientSettings zaf
com.google.android.gms.common.api.Api: java.lang.String zac
com.google.common.collect.MapMakerInternalMap$HashIterator: int nextSegmentIndex
io.sentry.protocol.Device: java.util.Map unknown
com.google.android.gms.common.internal.GmsClient: java.util.concurrent.Executor zaa
io.sentry.flutter.R$id: int action_container
io.flutter.embedding.android.FlutterSplashView: io.flutter.embedding.android.SplashScreen splashScreen
io.flutter.plugins.googlemaps.GoogleMapsPlugin$2: io.flutter.plugins.googlemaps.GoogleMapsPlugin this$0
com.google.common.reflect.TypeToken$TypeFilter: com.google.common.reflect.TypeToken$TypeFilter IGNORE_TYPE_VARIABLE_OR_WILDCARD
com.google.android.gms.maps.model.PolygonOptions: boolean zzg
com.google.common.collect.ImmutableCollection$ArrayBasedBuilder: int size
io.sentry.flutter.R$id: int action_divider
io.flutter.embedding.engine.loader.FlutterLoader: long initStartTimestampMillis
io.sentry.protocol.SentryStackFrame: java.lang.String _package
io.flutter.plugins.urllauncher.UrlLauncherPlugin: io.flutter.plugins.urllauncher.MethodCallHandlerImpl methodCallHandler
io.sentry.flutter.R$attr: int fontProviderFetchTimeout
com.google.android.gms.maps.model.MarkerOptions: java.lang.String zzc
com.google.android.gms.auth.api.signin.GoogleSignInAccount: java.lang.String zam
kotlinx.coroutines.scheduling.LimitingDispatcher: int parallelism
io.sentry.protocol.Device: java.util.Date bootTime
io.sentry.protocol.App: java.lang.String appName
androidx.lifecycle.LiveData$LifecycleBoundObserver: androidx.lifecycle.LifecycleOwner mOwner
io.sentry.DateUtils: java.lang.ThreadLocal SDF_ISO_FORMAT_UTC
io.flutter.embedding.android.FlutterImageView: android.media.Image currentImage
com.google.android.gms.common.api.internal.TaskApiCall: com.google.android.gms.common.Feature[] zaa
com.google.android.gms.common.internal.BaseGmsClient: java.lang.String zzz
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: boolean released
io.sentry.UncaughtExceptionHandlerIntegration$UncaughtExceptionHint: long flushTimeoutMillis
io.flutter.view.AccessibilityBridge: io.flutter.view.AccessibilityViewEmbedder accessibilityViewEmbedder
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: androidx.window.layout.WindowLayoutInfo lastInfo
com.google.gson.internal.bind.JsonTreeWriter: com.google.gson.JsonElement product
io.sentry.protocol.Gpu: java.lang.String vendorName
io.sentry.flutter.R$id: int info
kotlinx.coroutines.scheduling.WorkQueue: int producerIndex
io.sentry.SentryOptions: io.sentry.SentryOptions$Proxy proxy
kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.Continuation intercepted
com.google.gson.stream.JsonWriter: java.lang.String[] REPLACEMENT_CHARS
io.sentry.flutter.R$style: int TextAppearance_Compat_Notification_Time
io.flutter.plugin.common.StandardMethodCodec: io.flutter.plugin.common.StandardMessageCodec messageCodec
io.sentry.flutter.R$dimen: int compat_button_inset_horizontal_material
io.sentry.android.core.BuildConfig: boolean DEBUG
io.flutter.plugins.pathprovider.PathProviderPlugin$PathProviderPlatformThread: java.util.concurrent.Executor uiThreadExecutor
com.google.android.gms.common.internal.zzc: com.google.android.gms.common.internal.BaseGmsClient zzd
io.sentry.flutter.R$style: int TextAppearance_Compat_Notification
io.flutter.plugins.googlemaps.TileOverlaysController: com.google.android.gms.maps.GoogleMap googleMap
kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt$createCoroutineUnintercepted$$inlined$createCoroutineFromSuspendFunction$IntrinsicsKt__IntrinsicsJvmKt$1: kotlin.jvm.functions.Function1 $this_createCoroutineUnintercepted$inlined
com.google.common.hash.Murmur3_128HashFunction: com.google.common.hash.HashFunction MURMUR3_128
com.google.common.collect.RegularImmutableSet: int mask
io.sentry.SentryOptions: java.util.Map tags
io.flutter.embedding.android.MotionEventTracker: io.flutter.embedding.android.MotionEventTracker INSTANCE
com.google.common.collect.RegularImmutableList: int size
io.sentry.flutter.R$styleable: int[] GradientColorItem
com.google.gson.internal.LinkedTreeMap$Node: java.lang.Object key
io.flutter.plugins.googlemaps.TileOverlayController: com.google.android.gms.maps.model.TileOverlay tileOverlay
com.tekartik.sqflite.Database: boolean inTransaction
androidx.lifecycle.ViewModel: java.util.Map mBagOfTags
io.flutter.embedding.engine.dart.DartMessenger: java.util.concurrent.atomic.AtomicBoolean enableBufferingIncomingMessages
com.google.android.gms.maps.model.TileOverlayOptions: com.google.android.gms.maps.model.TileProvider zzb
kotlin.collections.EmptyMap: kotlin.collections.EmptyMap INSTANCE
com.google.common.util.concurrent.AbstractFuture$Listener: com.google.common.util.concurrent.AbstractFuture$Listener next
io.flutter.plugins.googlemaps.GoogleMapController: com.google.android.gms.maps.GoogleMapOptions options
com.google.android.gms.common.api.Scope: java.lang.String zzb
io.flutter.embedding.android.FlutterView$ZeroSides: io.flutter.embedding.android.FlutterView$ZeroSides RIGHT
io.sentry.protocol.DebugImage: java.lang.String codeFile
com.google.common.reflect.Types$JavaVersion: com.google.common.reflect.Types$JavaVersion JAVA6
com.google.android.gms.common.util.DeviceProperties: java.lang.Boolean zzg
com.google.gson.internal.LinkedHashTreeMap$Node: int hash
io.flutter.view.AccessibilityBridge$SemanticsNode: float top
com.google.android.gms.maps.model.CircleOptions: boolean zzh
androidx.window.R$attr: int finishPrimaryWithSecondary
com.google.gson.internal.LinkedTreeMap$LinkedTreeMapIterator: int expectedModCount
io.flutter.embedding.android.FlutterSurfaceView: boolean isSurfaceAvailableForRendering
com.google.android.gms.dynamite.DynamiteModule: java.lang.String zzc
io.sentry.UncaughtExceptionHandlerIntegration: io.sentry.SentryOptions options
com.google.android.gms.maps.model.TileOverlayOptions: float zzf
com.google.android.gms.common.internal.BaseGmsClient: com.google.android.gms.common.internal.zzj zzD
io.sentry.protocol.Mechanism: java.util.Map unknown
kotlinx.coroutines.ThreadLocalEventLoop: java.lang.ThreadLocal ref
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding: java.util.Set onNewIntentListeners
androidx.fragment.app.FragmentManagerImpl: boolean mNeedMenuInvalidate
com.google.android.gms.common.api.internal.zag: com.google.android.gms.tasks.TaskCompletionSource zab
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: java.lang.reflect.Method getChildId
com.google.android.gms.common.internal.service.zao: int zab
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: io.flutter.embedding.engine.renderer.FlutterUiDisplayListener flutterUiDisplayListener
com.tekartik.sqflite.SqflitePlugin$5: com.tekartik.sqflite.SqflitePlugin$BgResult val$bgResult
kotlin.reflect.KVisibility: kotlin.reflect.KVisibility PUBLIC
io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding: io.flutter.embedding.engine.FlutterEngine flutterEngine
androidx.fragment.app.FragmentTransition$4: androidx.collection.ArrayMap val$nameOverrides
androidx.fragment.app.FragmentManagerImpl: android.os.Bundle mStateBundle
com.google.android.gms.common.GooglePlayServicesUtilLight: int GOOGLE_PLAY_SERVICES_VERSION_CODE
androidx.core.util.LogWriter: java.lang.StringBuilder mBuilder
kotlin.text.DelimitedRangesSequence$iterator$1: int nextSearchIndex
io.flutter.plugin.editing.TextEditingDelta: int newSelectionEnd
io.flutter.view.AccessibilityBridge$SemanticsNode: int scrollChildren
com.google.android.gms.common.api.internal.zad: com.google.android.gms.tasks.TaskCompletionSource zaa
com.google.android.gms.tasks.zzr: java.lang.Object zza
com.google.android.gms.common.internal.MethodInvocation: java.lang.String zag
com.google.android.gms.dynamite.DynamiteModule: android.content.Context zzi
com.google.android.gms.signin.internal.zak: com.google.android.gms.common.ConnectionResult zab
kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState DORMANT
io.sentry.SpanStatus: io.sentry.SpanStatus PERMISSION_DENIED
kotlinx.coroutines.internal.MainDispatcherLoader: kotlinx.coroutines.internal.MainDispatcherLoader INSTANCE
com.google.android.gms.common.api.internal.zact: android.content.Context zab
com.google.android.gms.common.internal.zzr: com.google.android.gms.common.internal.zzq zze
com.google.android.gms.maps.model.TileProvider: com.google.android.gms.maps.model.Tile NO_TILE
io.sentry.flutter.R$style: int Widget_Compat_NotificationActionText
io.sentry.transport.AsyncHttpTransport$EnvelopeSender: io.sentry.transport.TransportResult failedResult
kotlinx.coroutines.scheduling.LimitingDispatcher: int inFlightTasks
kotlin.reflect.KVisibility: kotlin.reflect.KVisibility INTERNAL
com.google.common.reflect.TypeToken$TypeFilter: com.google.common.reflect.TypeToken$TypeFilter[] $VALUES
com.google.gson.stream.JsonReader: int lineNumber
com.google.android.gms.maps.GoogleMapOptions: java.lang.Boolean zzf
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter: java.util.Map boundFields
androidx.window.embedding.ExtensionEmbeddingBackend: java.util.concurrent.CopyOnWriteArrayList splitChangeCallbacks
com.google.android.gms.common.internal.GmsClientSupervisor: java.lang.Object zzc
io.sentry.SentryOptions: long flushTimeoutMillis
io.flutter.view.AccessibilityBridge: io.flutter.view.AccessibilityBridge$OnAccessibilityChangeListener onAccessibilityChangeListener
androidx.lifecycle.LiveData: java.lang.Object mData
com.google.common.base.MoreObjects$ToStringHelper: com.google.common.base.MoreObjects$ToStringHelper$ValueHolder holderHead
io.sentry.protocol.SentryStackFrame: java.lang.String imageAddr
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewResizeRequest: int viewId
com.google.gson.Gson: boolean DEFAULT_SERIALIZE_NULLS
io.flutter.plugin.platform.PlatformViewsController: android.util.SparseArray platformViewParent
io.sentry.flutter.R$styleable: int FontFamilyFont_fontWeight
com.google.gson.internal.Excluder$1: com.google.gson.reflect.TypeToken val$type
com.google.android.gms.common.internal.zat: int zaa
kotlin.text.DelimitedRangesSequence$iterator$1: int counter
com.google.gson.internal.$Gson$Types$GenericArrayTypeImpl: java.lang.reflect.Type componentType
io.sentry.android.core.util.ConnectivityChecker$Status: io.sentry.android.core.util.ConnectivityChecker$Status CONNECTED
io.sentry.NoOpSpan: io.sentry.NoOpSpan instance
androidx.window.layout.SidecarWindowBackend: androidx.window.layout.SidecarWindowBackend$Companion Companion
kotlinx.coroutines.JobSupport$Finishing: java.lang.Object _rootCause
io.flutter.FlutterInjector$Builder: io.flutter.embedding.engine.FlutterJNI$Factory flutterJniFactory
androidx.fragment.app.FragmentActivity: boolean mResumed
kotlinx.coroutines.internal.ThreadContextKt$updateState$1: kotlinx.coroutines.internal.ThreadContextKt$updateState$1 INSTANCE
kotlinx.coroutines.CommonPool: int requestedParallelism
com.google.android.gms.signin.zad: com.google.android.gms.common.api.Api$AbstractClientBuilder zad
kotlinx.coroutines.internal.ThreadState: int i
com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper: sun.misc.Unsafe UNSAFE
com.google.common.hash.AbstractStreamingHasher: java.nio.ByteBuffer buffer
io.sentry.flutter.R$layout: int notification_template_icon_group
com.google.gson.stream.JsonReader: int PEEKED_NULL
androidx.core.app.NotificationCompatBuilder: java.util.List mActionExtrasList
androidx.core.app.NotificationCompat$Builder: int mColor
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$6: io.sentry.android.core.SentryAndroidOptions $options
io.sentry.protocol.SdkInfo: java.lang.Integer versionPatchlevel
io.sentry.transport.RateLimiter$DataCategory: io.sentry.transport.RateLimiter$DataCategory Default
io.sentry.android.core.Installation: java.lang.String deviceId
kotlinx.coroutines.internal.ArrayQueue: int tail
com.google.android.gms.maps.zzah: android.content.Context zzc
com.google.android.gms.maps.model.PolylineOptions: android.os.Parcelable$Creator CREATOR
io.flutter.plugins.googlemaps.GoogleMapBuilder: boolean trafficEnabled
io.sentry.transport.RateLimiter$DataCategory: io.sentry.transport.RateLimiter$DataCategory Session
io.sentry.android.core.SystemEventsBreadcrumbsIntegration: android.content.Context context
com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter: com.google.gson.TypeAdapter valueTypeAdapter
io.sentry.config.ClasspathPropertiesLoader: java.lang.ClassLoader classLoader
io.flutter.plugins.sharedpreferences.MethodCallHandlerImpl$1: io.flutter.plugins.sharedpreferences.MethodCallHandlerImpl this$0
io.sentry.flutter.R$id: int normal
io.flutter.plugins.googlemaps.PolygonsController: java.util.Map googleMapsPolygonIdToDartPolygonId
com.google.android.gms.maps.model.Tile: int height
io.sentry.flutter.R$attr: int fontProviderSystemFontFamily
io.flutter.embedding.engine.systemchannels.KeyEventChannel: io.flutter.plugin.common.BasicMessageChannel channel
io.sentry.SentryBaseEvent: java.util.Map tags
io.sentry.flutter.R$styleable: int FontFamily_fontProviderSystemFontFamily
io.sentry.SentryOptions: javax.net.ssl.SSLSocketFactory sslSocketFactory
com.google.android.gms.common.api.internal.zabx: android.content.Context zaa
com.google.common.collect.RegularImmutableSet: int size
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter STRING_BUILDER
androidx.arch.core.executor.DefaultTaskExecutor: java.util.concurrent.ExecutorService mDiskIO
androidx.window.layout.SidecarWindowBackend: java.util.concurrent.CopyOnWriteArrayList windowLayoutChangeCallbacks
io.sentry.Span: java.util.Date startTimestamp
io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup: android.graphics.Rect childRect
kotlin.collections.EmptySet: kotlin.collections.EmptySet INSTANCE
androidx.fragment.app.FragmentState: android.os.Bundle mSavedFragmentState
androidx.core.view.WindowInsetsControllerCompat$Impl20: android.view.Window mWindow
io.sentry.protocol.SentryThread: java.lang.Boolean daemon
com.google.android.gms.common.wrappers.Wrappers: com.google.android.gms.common.wrappers.Wrappers zza
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.SingleViewPresentation$AccessibilityDelegatingFrameLayout rootView
androidx.fragment.app.FragmentTransaction: java.util.ArrayList mSharedElementSourceNames
com.google.android.gms.common.api.internal.zabp: com.google.android.gms.common.api.internal.zabq zaa
io.flutter.plugin.editing.ListenableEditingState: java.util.ArrayList mBatchTextEditingDeltas
io.sentry.SamplingContext: io.sentry.CustomSamplingContext customSamplingContext
com.google.android.gms.internal.base.zac: java.lang.ClassLoader zaa
io.flutter.embedding.android.FlutterView: io.flutter.embedding.android.FlutterTextureView flutterTextureView
kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext: kotlinx.coroutines.channels.AbstractChannel$Itr iterator
io.flutter.plugin.editing.ListenableEditingState: int mComposingStartWhenBeginBatchEdit
com.google.common.hash.Murmur3_128HashFunction: com.google.common.hash.HashFunction GOOD_FAST_HASH_128
androidx.window.embedding.SplitRule: int minWidth
io.sentry.transport.AsyncHttpTransport$EnvelopeSender: io.sentry.SentryEnvelope envelope
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle: io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness statusBarIconBrightness
kotlinx.coroutines.channels.ChannelResult: kotlinx.coroutines.channels.ChannelResult$Failed failed
androidx.window.layout.FoldingFeature$OcclusionType: java.lang.String description
io.sentry.transport.RateLimiter: int HTTP_RETRY_AFTER_DEFAULT_DELAY_MILLIS
kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt$createCoroutineUnintercepted$$inlined$createCoroutineFromSuspendFunction$IntrinsicsKt__IntrinsicsJvmKt$3: kotlin.jvm.functions.Function2 $this_createCoroutineUnintercepted$inlined
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1: com.google.gson.Gson val$context
io.flutter.embedding.engine.dart.DartMessenger: java.lang.Object handlersLock
io.sentry.Dsn: java.lang.String publicKey
io.sentry.flutter.R$id: int line1
kotlinx.coroutines.channels.AbstractChannelKt: kotlinx.coroutines.internal.Symbol EMPTY
io.sentry.CustomSamplingContext: java.util.Map data
com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper: java.util.concurrent.atomic.AtomicReferenceFieldUpdater waiterThreadUpdater
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$5: io.sentry.android.core.SentryAndroidOptions $options
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapter STRING_BUFFER
androidx.window.core.Version: androidx.window.core.Version UNKNOWN
com.google.gson.internal.ConstructorConstructor$1: java.lang.reflect.Type val$type
kotlinx.coroutines.channels.ArrayChannel: java.lang.Object[] buffer
com.google.android.gms.common.zzl: com.google.android.gms.common.zzi[] zza
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory BYTE_FACTORY
io.sentry.SentryOptions: java.util.List observers
io.sentry.flutter.R$id: int accessibility_custom_action_19
com.google.gson.stream.JsonReader: int NUMBER_CHAR_SIGN
com.google.android.gms.common.api.internal.zacr: com.google.android.gms.signin.internal.zak zaa
io.flutter.plugin.editing.InputConnectionAdaptor: android.view.View mFlutterView
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction: java.lang.String label
com.tekartik.sqflite.SqflitePlugin$8: com.tekartik.sqflite.Database val$openedDatabase
com.google.gson.internal.LinkedHashTreeMap$1: LinkedHashTreeMap$1()
kotlinx.coroutines.ExecutorCoroutineDispatcherImpl: java.lang.String toString()
kotlin.sequences.SequencesKt__SequencesKt: kotlin.sequences.Sequence asSequence(java.util.Iterator)
io.flutter.plugin.platform.SingleViewPresentation: SingleViewPresentation(android.content.Context,android.view.Display,io.flutter.plugin.platform.PlatformViewFactory,io.flutter.plugin.platform.AccessibilityEventsDelegate,int,java.lang.Object,android.view.View$OnFocusChangeListener)
com.google.android.gms.common.api.internal.zabq: void zas(com.google.android.gms.common.ConnectionResult)
androidx.fragment.app.FragmentTransitionCompat21: void scheduleRemoveTargets(java.lang.Object,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList)
com.google.android.gms.maps.model.Circle: java.lang.String getId()
androidx.lifecycle.EmptyActivityLifecycleCallbacks: void onActivityCreated(android.app.Activity,android.os.Bundle)
androidx.core.view.ViewCompat$UnhandledKeyEventManager: boolean dispatch(android.view.View,android.view.KeyEvent)
androidx.fragment.app.Fragment: android.content.res.Resources getResources()
com.tekartik.sqflite.operation.BatchOperation: java.util.Map getOperationSuccessResult()
com.google.android.gms.maps.model.zzt: com.google.android.gms.maps.model.Tile getTile(int,int,int)
kotlinx.coroutines.ThreadLocalEventLoop: ThreadLocalEventLoop()
kotlin.jvm.internal.PackageReference: java.lang.Class getJClass()
androidx.arch.core.internal.SafeIterableMap: java.util.Iterator descendingIterator()
com.google.android.gms.maps.zzb: void zzd(com.google.android.gms.internal.maps.zzx)
com.google.android.gms.maps.model.CameraPosition: int hashCode()
androidx.collection.ArraySet: ArraySet(int)
com.google.android.gms.common.api.UnsupportedApiCallException: UnsupportedApiCallException(com.google.android.gms.common.Feature)
com.google.gson.DefaultDateTypeAdapter: java.util.Date deserializeToDate(java.lang.String)
androidx.lifecycle.ProcessLifecycleOwnerInitializer: int delete(android.net.Uri,java.lang.String,java.lang.String[])
androidx.lifecycle.ClassesInfoCache$MethodReference: int hashCode()
io.flutter.view.AccessibilityBridge$StringAttributeType: AccessibilityBridge$StringAttributeType(java.lang.String,int)
io.sentry.SentryClient: void flush(long)
androidx.fragment.app.FragmentManagerImpl: void burpActive()
kotlinx.coroutines.channels.AbstractSendChannel$SendBuffered: AbstractSendChannel$SendBuffered(java.lang.Object)
com.tekartik.sqflite.SqlCommand: int hashCode()
com.google.android.gms.maps.model.zzt: zzt(com.google.android.gms.maps.model.TileOverlayOptions)
androidx.lifecycle.ProcessLifecycleOwner$3: void onActivityStopped(android.app.Activity)
io.flutter.embedding.android.FlutterTextureView: FlutterTextureView(android.content.Context,android.util.AttributeSet)
com.google.gson.JsonElement: long getAsLong()
com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry: com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry copy(java.lang.ref.ReferenceQueue,java.lang.ref.ReferenceQueue,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry)
io.sentry.protocol.SentryId: SentryId(java.lang.String)
io.flutter.plugin.platform.PlatformViewsController: void attach(android.content.Context,io.flutter.view.TextureRegistry,io.flutter.embedding.engine.dart.DartExecutor)
com.google.android.gms.common.api.GoogleApi: com.google.android.gms.common.api.Api$Client zab(android.os.Looper,com.google.android.gms.common.api.internal.zabq)
io.sentry.Session: boolean update(io.sentry.Session$State,java.lang.String,boolean)
com.google.common.hash.HashCode$LongHashCode: boolean equalsSameBits(com.google.common.hash.HashCode)
io.sentry.android.core.ManifestMetadataReader: void applyMetadata(android.content.Context,io.sentry.android.core.SentryAndroidOptions)
kotlinx.coroutines.JobSupport: void promoteEmptyToNodeList(kotlinx.coroutines.Empty)
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel: void invokeViewFocused(int)
androidx.fragment.app.BackStackState$1: androidx.fragment.app.BackStackState createFromParcel(android.os.Parcel)
kotlinx.coroutines.JobSupport: java.lang.String cancellationExceptionMessage()
com.google.android.gms.common.internal.zzm: zzm()
com.google.android.gms.common.api.Status: com.google.android.gms.common.ConnectionResult getConnectionResult()
androidx.savedstate.Recreator: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)
kotlinx.coroutines.EventLoopImplPlatform: void unpark()
io.sentry.NoOpLogger: void log(io.sentry.SentryLevel,java.lang.String,java.lang.Object[])
com.google.gson.internal.bind.TypeAdapters$17: TypeAdapters$17()
kotlinx.coroutines.internal.FastServiceLoader: java.util.List loadProviders$kotlinx_coroutines_core(java.lang.Class,java.lang.ClassLoader)
com.google.gson.internal.PreJava9DateFormatProvider: java.lang.String getTimePartOfDateTimePattern(int)
com.google.gson.internal.bind.TypeAdapters$23: TypeAdapters$23()
io.sentry.IHub: void startSession()
androidx.collection.MapCollections$KeySet: int hashCode()
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView$1: FlutterMutatorView$1(io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView,android.view.View$OnFocusChangeListener,android.view.View)
com.google.android.gms.signin.internal.zab: java.lang.Object[] newArray(int)
com.google.gson.internal.LinkedHashTreeMap$KeySet$1: LinkedHashTreeMap$KeySet$1(com.google.gson.internal.LinkedHashTreeMap$KeySet)
com.google.android.gms.common.internal.RootTelemetryConfigManager: com.google.android.gms.common.internal.RootTelemetryConfigManager getInstance()
com.google.android.gms.common.internal.zzag: void zzc(android.content.Context)
io.sentry.NoOpHub: io.sentry.ITransaction startTransaction(io.sentry.TransactionContext,io.sentry.CustomSamplingContext,boolean)
io.flutter.plugin.editing.InputConnectionAdaptor: void closeConnection()
com.google.android.gms.common.internal.zzr: android.content.Context zze(com.google.android.gms.common.internal.zzr)
io.flutter.plugins.googlemaps.MarkerBuilder: void setVisible(boolean)
androidx.window.embedding.EmbeddingAdapter: java.util.Set translate(java.util.Set)
com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper: com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry copy(com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment,com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry,com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry)
com.google.android.gms.common.api.internal.LifecycleCallback: void onActivityResult(int,int,android.content.Intent)
kotlinx.coroutines.internal.LockFreeTaskQueueCore: kotlinx.coroutines.internal.LockFreeTaskQueueCore allocateOrGetNextCopy(long)
io.flutter.plugins.googlemaps.GoogleMapController: void onMapReady(com.google.android.gms.maps.GoogleMap)
com.google.android.gms.common.api.internal.GoogleApiManager: void zaA()
com.google.gson.internal.ConstructorConstructor$4: ConstructorConstructor$4(com.google.gson.internal.ConstructorConstructor)
kotlinx.coroutines.NodeList: boolean isActive()
com.google.gson.internal.bind.ObjectTypeAdapter: ObjectTypeAdapter(com.google.gson.Gson)
com.google.android.gms.internal.maps.zzj: void zzo(com.google.android.gms.maps.model.LatLng)
io.sentry.HostnameCache$HostnameCacheThreadFactory: java.lang.Thread newThread(java.lang.Runnable)
com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter: java.lang.Enum read(com.google.gson.stream.JsonReader)
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState: FlutterRenderer$DisplayFeatureState(java.lang.String,int,int)
io.flutter.plugins.googlemaps.CircleBuilder: void setRadius(double)
com.google.android.gms.common.zzi: boolean equals(java.lang.Object)
com.google.android.gms.dynamite.DynamiteModule: com.google.android.gms.dynamite.zzq zzf(android.content.Context)
com.google.android.gms.maps.zzv: zzv(com.google.android.gms.maps.GoogleMap,com.google.android.gms.maps.GoogleMap$OnCameraMoveListener)
io.sentry.adapters.SentryLevelDeserializerAdapter: SentryLevelDeserializerAdapter(io.sentry.SentryOptions)
io.flutter.plugin.editing.InputConnectionAdaptor: boolean setSelection(int,int)
com.google.android.gms.tasks.TaskCompletionSource: boolean trySetResult(java.lang.Object)
io.sentry.NoOpSentryClient: void close()
androidx.lifecycle.LifecycleRegistry: void markState(androidx.lifecycle.Lifecycle$State)
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)
androidx.core.os.ConfigurationCompat: androidx.core.os.LocaleListCompat getLocales(android.content.res.Configuration)
com.google.common.util.concurrent.AbstractFuture$Waiter: AbstractFuture$Waiter(boolean)
io.sentry.protocol.Device: java.lang.Boolean isSimulator()
com.google.common.hash.BloomFilterStrategies$1: boolean mightContain(java.lang.Object,com.google.common.hash.Funnel,int,com.google.common.hash.BloomFilterStrategies$LockFreeBitArray)
androidx.lifecycle.LifecycleRegistry: void popParentState()
androidx.fragment.app.FragmentManagerImpl: boolean popBackStackImmediate()
com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment: MapMakerInternalMap$WeakKeyStrongValueSegment(com.google.common.collect.MapMakerInternalMap,int,int)
com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter beginObject()
androidx.fragment.app.Fragment: boolean isRemoving()
com.google.android.gms.maps.GoogleMapOptions: java.lang.Boolean getLiteMode()
androidx.window.layout.SidecarCompat: androidx.window.sidecar.SidecarInterface getSidecar()
androidx.versionedparcelable.VersionedParcelParcel: VersionedParcelParcel(android.os.Parcel)
io.sentry.SentryTracer: void setOperation(java.lang.String)
kotlin.internal.ProgressionUtilKt: int differenceModulo(int,int,int)
io.flutter.embedding.engine.FlutterJNI: void nativeDispatchPointerDataPacket(long,java.nio.ByteBuffer,int)
androidx.collection.SparseArrayCompat: void gc()
androidx.lifecycle.ViewModelStore: void put(java.lang.String,androidx.lifecycle.ViewModel)
com.google.android.gms.maps.model.zzc: java.lang.Object createFromParcel(android.os.Parcel)
com.google.gson.internal.bind.TypeAdapters$15: java.lang.Object read(com.google.gson.stream.JsonReader)
io.sentry.SentryOptions: long getShutdownTimeout()
androidx.window.embedding.EmbeddingTranslatingCallback: void accept(java.util.List)
io.sentry.protocol.Request: java.util.Map getHeaders()
com.google.android.gms.dynamic.zac: zac(com.google.android.gms.dynamic.DeferredLifecycleHelper,android.os.Bundle)
com.google.android.gms.common.api.Api$AbstractClientBuilder: com.google.android.gms.common.api.Api$Client buildClient(android.content.Context,android.os.Looper,com.google.android.gms.common.internal.ClientSettings,java.lang.Object,com.google.android.gms.common.api.internal.ConnectionCallbacks,com.google.android.gms.common.api.internal.OnConnectionFailedListener)
kotlinx.coroutines.EventLoopImplBase: void rescheduleAllDelayed()
androidx.core.app.NotificationCompatJellybean: android.os.Bundle getExtras(android.app.Notification)
androidx.lifecycle.ProcessLifecycleOwner: void activityResumed()
androidx.collection.MapCollections$EntrySet: boolean isEmpty()
androidx.lifecycle.ProcessLifecycleOwnerInitializer: android.net.Uri insert(android.net.Uri,android.content.ContentValues)
io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference: HiddenLifecycleReference(androidx.lifecycle.Lifecycle)
io.flutter.embedding.engine.FlutterJNI: void nativeSetSemanticsEnabled(long,boolean)
androidx.fragment.app.FragmentHostCallback: boolean onHasWindowAnimations()
androidx.fragment.app.FragmentTransition$4: void run()
com.google.common.collect.MapMaker: com.google.common.collect.MapMaker setKeyStrength(com.google.common.collect.MapMakerInternalMap$Strength)
io.flutter.embedding.android.FlutterSurfaceView: io.flutter.embedding.engine.renderer.FlutterRenderer getAttachedRenderer()
kotlinx.coroutines.MainCoroutineDispatcher: java.lang.String toStringInternalImpl()
com.google.android.gms.maps.model.LatLng: int hashCode()
androidx.window.embedding.EmptyEmbeddingComponent: void setSplitInfoCallback(java.util.function.Consumer)
kotlinx.coroutines.JobSupport$Finishing: JobSupport$Finishing(kotlinx.coroutines.NodeList,boolean,java.lang.Throwable)
io.flutter.plugin.common.StandardMessageCodec: void writeSize(java.io.ByteArrayOutputStream,int)
kotlin.Pair: java.lang.Object component1()
io.sentry.SentryTraceHeader: java.lang.Boolean isSampled()
androidx.fragment.app.FragmentActivity$HostCallbacks: FragmentActivity$HostCallbacks(androidx.fragment.app.FragmentActivity)
com.google.common.collect.Hashing: int smearedHash(java.lang.Object)
io.flutter.plugins.connectivity.ConnectivityPlugin: void onAttachedToEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,int)
io.sentry.flutter.BuildConfig: BuildConfig()
com.google.common.hash.HashCode$LongHashCode: long asLong()
androidx.arch.core.internal.SafeIterableMap$Entry: java.lang.String toString()
com.google.android.gms.common.zzi: int zzc()
com.google.gson.Gson: com.google.gson.JsonElement toJsonTree(java.lang.Object)
com.google.common.collect.ImmutableList: java.util.List subList(int,int)
com.google.common.util.concurrent.AbstractFuture$TrustedFuture: boolean isDone()
com.google.android.gms.common.api.internal.zacq: void run()
androidx.window.embedding.ActivityFilter: boolean matchesActivity(android.app.Activity)
com.tekartik.sqflite.SqflitePlugin$BgResult: io.flutter.plugin.common.MethodChannel$Result access$1100(com.tekartik.sqflite.SqflitePlugin$BgResult)
com.google.common.collect.Sets: boolean equalsImpl(java.util.Set,java.lang.Object)
io.flutter.plugins.urllauncher.WebViewActivity: android.content.Intent createIntent(android.content.Context,java.lang.String,boolean,boolean,android.os.Bundle)
io.sentry.transport.HttpConnection: HttpConnection(io.sentry.SentryOptions,io.sentry.RequestDetails,io.sentry.transport.RateLimiter)
io.flutter.view.AccessibilityBridge$SemanticsNode: int access$2300(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.sentry.SentryBaseEvent: java.lang.String getEnvironment()
androidx.lifecycle.LiveData: void considerNotify(androidx.lifecycle.LiveData$ObserverWrapper)
io.flutter.embedding.android.FlutterTextureView: android.view.Surface access$502(io.flutter.embedding.android.FlutterTextureView,android.view.Surface)
com.google.android.gms.maps.MapsInitializer$Renderer: MapsInitializer$Renderer(java.lang.String,int)
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: android.content.Context context()
com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry: MapMakerInternalMap$StrongKeyWeakValueEntry(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry)
androidx.lifecycle.Lifecycle: Lifecycle()
com.google.android.gms.common.api.internal.zzd: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])
com.google.android.gms.common.ErrorDialogFragment: void show(android.app.FragmentManager,java.lang.String)
com.google.android.gms.common.api.internal.zap: void zaa(com.google.android.gms.common.ConnectionResult,int)
io.flutter.plugins.googlemaps.TileOverlayBuilder: void setZIndex(float)
androidx.window.core.Bounds: boolean equals(java.lang.Object)
com.google.android.gms.common.api.internal.zah: zah(com.google.android.gms.common.api.internal.ListenerHolder$ListenerKey,com.google.android.gms.tasks.TaskCompletionSource)
io.sentry.SentryOptions: java.lang.Double getSampleRate()
androidx.fragment.app.FragmentManagerImpl: void executeOps(java.util.ArrayList,java.util.ArrayList,int,int)
kotlinx.coroutines.flow.internal.DownstreamExceptionElement: java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2)
io.flutter.embedding.engine.loader.ApplicationInfoLoader: io.flutter.embedding.engine.loader.FlutterApplicationInfo load(android.content.Context)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: io.flutter.embedding.engine.FlutterEngine getFlutterEngine()
io.flutter.plugins.googlemaps.TileOverlaysController: void clearTileCache(java.lang.String)
io.sentry.android.core.Installation: java.lang.String writeInstallationFile(java.io.File)
com.google.android.gms.tasks.TaskCompletionSource: void setResult(java.lang.Object)
io.sentry.SystemOutLogger: void log(io.sentry.SentryLevel,java.lang.Throwable,java.lang.String,java.lang.Object[])
androidx.fragment.app.Fragment: void onPrimaryNavigationFragmentChanged(boolean)
androidx.window.layout.WindowMetrics: java.lang.String toString()
io.sentry.ISentryClient: io.sentry.protocol.SentryId captureMessage(java.lang.String,io.sentry.SentryLevel)
kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)
io.sentry.NoOpHub: io.sentry.SentryOptions getOptions()
com.google.android.gms.common.internal.TelemetryData: java.util.List zab()
androidx.core.app.CoreComponentFactory: android.app.Activity instantiateActivity(java.lang.ClassLoader,java.lang.String,android.content.Intent)
com.google.android.gms.common.api.internal.zap: void onCancel(android.content.DialogInterface)
com.google.android.gms.common.api.internal.ApiKey: java.lang.String zab()
kotlin.text.StringsKt__StringsKt: int lastIndexOf$default(java.lang.CharSequence,java.lang.String,int,boolean,int,java.lang.Object)
kotlinx.coroutines.internal.LockFreeLinkedListNode: boolean remove()
com.google.common.util.concurrent.AbstractFuture$TrustedFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)
io.sentry.transport.RateLimiter: void markHintWhenSendingFailed(java.lang.Object,boolean)
io.sentry.android.core.DefaultAndroidEventProcessor: java.lang.Boolean isCharging(android.content.Intent)
io.sentry.ISpan: boolean isFinished()
kotlin.collections.IntIterator: java.lang.Object next()
io.flutter.embedding.android.FlutterActivity: void onStop()
com.google.android.gms.maps.model.PolygonOptions: com.google.android.gms.maps.model.PolygonOptions fillColor(int)
io.sentry.Attachment: java.lang.String getAttachmentType()
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: AccessibilityViewEmbedder$ReflectionAccessors()
com.google.android.gms.common.ConnectionResult: java.lang.String toString()
io.flutter.plugin.localization.LocalizationPlugin: android.content.Context access$000(io.flutter.plugin.localization.LocalizationPlugin)
com.google.gson.internal.bind.JsonTreeReader$1: JsonTreeReader$1()
io.sentry.android.core.MainLooperHandler: MainLooperHandler()
com.google.android.gms.common.ConnectionResult: void writeToParcel(android.os.Parcel,int)
io.sentry.android.core.DefaultAndroidEventProcessor: java.lang.String getKernelVersion()
io.flutter.plugins.pathprovider.PathProviderPlugin: java.util.List access$200(io.flutter.plugins.pathprovider.PathProviderPlugin,java.lang.String)
io.sentry.SendCachedEnvelopeFireAndForgetIntegration: SendCachedEnvelopeFireAndForgetIntegration(io.sentry.SendCachedEnvelopeFireAndForgetIntegration$SendFireAndForgetFactory)
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.MouseCursorChannel getMouseCursorChannel()
io.flutter.view.AccessibilityViewEmbedder: android.view.accessibility.AccessibilityNodeInfo getRootNode(android.view.View,int,android.graphics.Rect)
io.flutter.plugins.googlemaps.PolylineController: void setJointType(int)
com.tekartik.sqflite.SqflitePlugin: java.util.Map fixMap(java.util.Map)
io.sentry.SentryBaseEvent: java.lang.Throwable getOriginThrowable()
io.sentry.flutter.R$string: R$string()
com.google.gson.Gson$3: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
com.google.gson.internal.ObjectConstructor: java.lang.Object construct()
kotlin.jvm.internal.Lambda: java.lang.String toString()
io.flutter.view.AccessibilityViewEmbedder: android.view.View platformViewOfNode(int)
io.flutter.plugin.common.EventChannel: io.flutter.plugin.common.BinaryMessenger access$400(io.flutter.plugin.common.EventChannel)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType: PlatformChannel$SoundType(java.lang.String,int,java.lang.String)
io.sentry.protocol.SentryId: int hashCode()
com.google.android.gms.common.api.internal.zabu: void zae(com.google.android.gms.common.ConnectionResult)
com.google.gson.JsonNull: com.google.gson.JsonElement deepCopy()
io.sentry.UnknownPropertiesTypeAdapterFactory$UnknownPropertiesTypeAdapter: java.lang.Object read(com.google.gson.stream.JsonReader)
io.sentry.android.ndk.R: R()
io.sentry.protocol.DebugImage: java.lang.String getType()
kotlinx.coroutines.JobSupport: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)
kotlin.collections.EmptyList: boolean remove(java.lang.Object)
androidx.collection.MapCollections: java.util.Set getEntrySet()
androidx.fragment.app.FragmentController: void noteStateNotSaved()
androidx.fragment.app.DialogFragment: void onCreate(android.os.Bundle)
androidx.core.app.RemoteInput: android.app.RemoteInput fromCompat(androidx.core.app.RemoteInput)
androidx.window.core.Bounds: int hashCode()
com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper: boolean casWaiters(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Waiter,com.google.common.util.concurrent.AbstractFuture$Waiter)
com.google.android.gms.common.internal.safeparcel.SafeParcelWriter: void finishObjectHeader(android.os.Parcel,int)
io.flutter.plugins.googlemaps.MarkersController: void setGoogleMap(com.google.android.gms.maps.GoogleMap)
kotlin.collections.EmptyMap: java.util.Set getKeys()
androidx.fragment.app.FragmentTransition: void calculateFragments(androidx.fragment.app.BackStackRecord,android.util.SparseArray,boolean)
io.flutter.view.VsyncWaiter$1: VsyncWaiter$1(io.flutter.view.VsyncWaiter)
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel: java.lang.String access$100(java.lang.Exception)
io.flutter.plugin.editing.ListenableEditingState: void clearBatchDeltas()
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$7: SentryFlutterPlugin$initNativeSdk$2$7(io.sentry.android.core.SentryAndroidOptions)
io.flutter.plugins.pathprovider.PathProviderPlugin$PathProviderPlatformThread$1: void onSuccess(java.lang.Object)
io.sentry.android.ndk.NativeScope: void setExtra(java.lang.String,java.lang.String)
com.google.gson.stream.JsonReader: java.lang.String getPath()
io.sentry.SpanId: SpanId(java.util.UUID)
com.google.gson.internal.bind.TypeAdapters$14: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
io.sentry.IHub: void setLevel(io.sentry.SentryLevel)
kotlin.coroutines.jvm.internal.ModuleNameRetriever: kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache buildCache(kotlin.coroutines.jvm.internal.BaseContinuationImpl)
io.sentry.transport.TransportResult$SuccessTransportResult: int getResponseCode()
io.flutter.plugins.urllauncher.MethodCallHandlerImpl: void stopListening()
androidx.window.core.Version: int compareTo(java.lang.Object)
io.sentry.android.core.SentryAndroid: SentryAndroid()
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean access$5800(io.flutter.view.AccessibilityBridge$SemanticsNode)
com.google.common.collect.SingletonImmutableSet: int copyIntoArray(java.lang.Object[],int)
com.google.gson.internal.bind.TypeAdapters$5: java.lang.Object read(com.google.gson.stream.JsonReader)
io.sentry.CircularFifoQueue: int maxSize()
com.google.android.gms.maps.internal.zze: int zzd()
io.sentry.protocol.User: void setIpAddress(java.lang.String)
androidx.lifecycle.LifecycleDispatcher$DispatcherActivityCallback: LifecycleDispatcher$DispatcherActivityCallback()
androidx.lifecycle.ViewModelProvider$KeyedFactory: ViewModelProvider$KeyedFactory()
io.sentry.Sentry: void setFingerprint(java.util.List)
androidx.collection.SparseArrayCompat: androidx.collection.SparseArrayCompat clone()
kotlinx.coroutines.JobKt__JobKt: kotlinx.coroutines.CompletableJob Job(kotlinx.coroutines.Job)
kotlin.internal.jdk7.JDK7PlatformImplementations: void addSuppressed(java.lang.Throwable,java.lang.Throwable)
androidx.core.app.NotificationCompatBuilder: android.app.Notification buildInternal()
androidx.window.embedding.ExtensionEmbeddingBackend: boolean isSplitSupported()
com.google.common.hash.Hashing$ChecksumType$2: java.util.zip.Checksum get()
com.google.gson.JsonNull: com.google.gson.JsonNull deepCopy()
com.google.common.collect.MapMakerInternalMap$WeakValueReferenceImpl: com.google.common.collect.MapMakerInternalMap$WeakValueReference copyFor(java.lang.ref.ReferenceQueue,com.google.common.collect.MapMakerInternalMap$InternalEntry)
com.google.android.gms.auth.api.signin.GoogleSignInAccount: com.google.android.gms.auth.api.signin.GoogleSignInAccount zab(java.lang.String)
com.google.gson.JsonPrimitive: boolean isIntegral(com.google.gson.JsonPrimitive)
com.google.gson.internal.Streams$AppendableWriter$CurrentWrite: Streams$AppendableWriter$CurrentWrite()
com.google.android.gms.common.internal.ClientSettings$Builder: com.google.android.gms.common.internal.ClientSettings$Builder zac(java.lang.String)
com.google.android.gms.maps.model.RuntimeRemoteException: RuntimeRemoteException(android.os.RemoteException)
io.flutter.plugins.googlemaps.MarkerBuilder: void setDraggable(boolean)
com.google.android.gms.internal.maps.zzc: zzc()
androidx.collection.SimpleArrayMap: java.lang.Object getOrDefault(java.lang.Object,java.lang.Object)
com.google.android.gms.maps.model.zzg: java.lang.Object[] newArray(int)
com.google.common.base.Joiner: Joiner(com.google.common.base.Joiner)
com.google.common.io.Files$FilePredicate: Files$FilePredicate(java.lang.String,int,com.google.common.io.Files$1)
com.google.android.gms.maps.model.LatLngBounds: java.lang.String toString()
androidx.core.os.LocaleListCompat: int hashCode()
io.sentry.SentryOptions: void addScopeObserver(io.sentry.IScopeObserver)
kotlinx.coroutines.JobCancellationException: int hashCode()
kotlinx.coroutines.internal.LockFreeTaskQueue: LockFreeTaskQueue(boolean)
io.sentry.Scope$IWithTransaction: void accept(io.sentry.ITransaction)
io.flutter.plugin.platform.PlatformViewsController: io.flutter.plugin.platform.PlatformViewRegistry getRegistry()
androidx.activity.OnBackPressedDispatcher$OnBackPressedCancellable: void cancel()
io.sentry.config.CompositePropertiesProvider: java.util.Map getMap(java.lang.String)
com.google.common.collect.ImmutableSet: int chooseTableSize(int)
androidx.fragment.app.FragmentManagerImpl: void dispatchOnFragmentAttached(androidx.fragment.app.Fragment,android.content.Context,boolean)
com.google.android.gms.common.internal.safeparcel.SafeParcelWriter: void zzb(android.os.Parcel,int)
io.sentry.cache.CacheStrategy: void moveInitFlagIfNecessary(java.io.File,java.io.File[])
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin: void teardownChannel()
io.sentry.IHub: io.sentry.protocol.SentryId captureException(java.lang.Throwable,java.lang.Object)
androidx.core.view.ViewCompat: void notifyViewAccessibilityStateChangedIfNeeded(android.view.View,int)
androidx.collection.SimpleArrayMap: boolean equals(java.lang.Object)
io.flutter.plugins.googlemaps.GoogleMapBuilder: void setIndoorEnabled(boolean)
io.sentry.transport.RateLimiter: boolean isRetryAfter(java.lang.String)
io.sentry.android.core.EnvelopeFileObserverIntegration: void register(io.sentry.IHub,io.sentry.SentryOptions)
kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object getResult()
com.google.gson.internal.bind.DateTypeAdapter: java.lang.Object read(com.google.gson.stream.JsonReader)
com.google.android.gms.common.api.internal.zad: void zaf(com.google.android.gms.common.api.internal.zabq)
kotlinx.coroutines.ChildHandleNode: void invoke(java.lang.Throwable)
kotlin.random.Random$Default: Random$Default()
com.google.gson.internal.bind.TypeAdapters$27: void write(com.google.gson.stream.JsonWriter,java.util.Calendar)
com.google.gson.JsonObject: void addProperty(java.lang.String,java.lang.Character)
io.sentry.SpanContext: void setTag(java.lang.String,java.lang.String)
androidx.fragment.app.BackStackRecord: void dump(java.lang.String,java.io.PrintWriter,boolean)
com.google.android.gms.common.internal.TelemetryData: int zaa()
com.google.android.gms.signin.internal.zad: zad()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean access$302(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,boolean)
io.sentry.protocol.Browser: java.lang.String getVersion()
androidx.lifecycle.ReportFragment: void dispatch(android.app.Activity,androidx.lifecycle.Lifecycle$Event)
kotlin.jvm.internal.FunctionReferenceImpl: FunctionReferenceImpl(int,java.lang.Class,java.lang.String,java.lang.String,int)
com.google.gson.internal.LinkedTreeMap$KeySet: LinkedTreeMap$KeySet(com.google.gson.internal.LinkedTreeMap)
com.google.gson.internal.LinkedHashTreeMap: java.lang.Object remove(java.lang.Object)
io.sentry.NoOpTransaction: java.lang.Throwable getThrowable()
io.sentry.Span: java.lang.String getDescription()
com.google.gson.internal.bind.TypeAdapters$24: java.lang.Object read(com.google.gson.stream.JsonReader)
com.google.android.gms.common.api.internal.zabs: com.google.android.gms.common.api.internal.ApiKey zab(com.google.android.gms.common.api.internal.zabs)
com.google.gson.GsonBuilder: com.google.gson.GsonBuilder serializeSpecialFloatingPointValues()
com.google.android.gms.common.GoogleSignatureVerifier: com.google.android.gms.common.GoogleSignatureVerifier getInstance(android.content.Context)
kotlinx.coroutines.JobKt: void ensureActive(kotlin.coroutines.CoroutineContext)
io.flutter.embedding.engine.dart.DartExecutor: java.lang.String access$002(io.flutter.embedding.engine.dart.DartExecutor,java.lang.String)
androidx.fragment.app.FragmentManagerImpl: boolean dispatchCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)
com.google.common.collect.MapMakerInternalMap: boolean isEmpty()
com.google.android.gms.common.api.Api$AbstractClientBuilder: com.google.android.gms.common.api.Api$Client buildClient(android.content.Context,android.os.Looper,com.google.android.gms.common.internal.ClientSettings,java.lang.Object,com.google.android.gms.common.api.GoogleApiClient$ConnectionCallbacks,com.google.android.gms.common.api.GoogleApiClient$OnConnectionFailedListener)
com.google.android.gms.common.internal.BaseGmsClient: int getGCoreServiceId()
io.sentry.android.ndk.NdkScopeObserver: void setTag(java.lang.String,java.lang.String)
io.flutter.plugins.googlemaps.CirclesController: CirclesController(io.flutter.plugin.common.MethodChannel,float)
com.google.android.gms.common.api.Api: com.google.android.gms.common.api.Api$AbstractClientBuilder zaa()
io.flutter.plugin.platform.PlatformViewsController$1: void disposeAndroidViewForPlatformView(int)
com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet$Builder builder()
androidx.fragment.app.Fragment: void setNextTransition(int,int)
io.flutter.embedding.engine.FlutterJNI: void handlePlatformMessageResponse(int,java.nio.ByteBuffer)
com.google.gson.internal.bind.TypeAdapters$35: TypeAdapters$35(java.lang.Class,com.google.gson.TypeAdapter)
com.google.gson.internal.bind.TypeAdapters$9: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
androidx.lifecycle.EmptyActivityLifecycleCallbacks: void onActivityStopped(android.app.Activity)
kotlinx.coroutines.CoroutineId$Key: CoroutineId$Key(kotlin.jvm.internal.DefaultConstructorMarker)
com.google.android.gms.maps.model.BitmapDescriptor: com.google.android.gms.dynamic.IObjectWrapper zza()
com.google.gson.internal.Primitives: java.lang.Class unwrap(java.lang.Class)
io.sentry.protocol.SentrySpan: io.sentry.SpanId getParentSpanId()
com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry: com.google.common.collect.MapMakerInternalMap$WeakValueReference getValueReference()
androidx.window.layout.WindowMetricsCalculator$Companion$reset$1: java.lang.Object invoke(java.lang.Object)
androidx.lifecycle.ProcessLifecycleOwner: void dispatchPauseIfNeeded()
androidx.core.view.ViewCompat$UnhandledKeyEventManager: ViewCompat$UnhandledKeyEventManager()
io.sentry.protocol.DebugImage: void setImageSize(java.lang.Long)
com.google.android.gms.maps.internal.zzby: boolean isZoomControlsEnabled()
com.google.android.gms.common.api.zzb: java.lang.Object[] newArray(int)
kotlin.internal.PlatformImplementations: PlatformImplementations()
com.google.android.gms.maps.GoogleMapOptions: com.google.android.gms.maps.GoogleMapOptions zoomGesturesEnabled(boolean)
com.google.android.gms.common.api.internal.zzb: void onStop()
io.sentry.transport.QueuedThreadPoolExecutor$CancelledFuture: QueuedThreadPoolExecutor$CancelledFuture()
com.google.android.gms.maps.zzab: zzab()
androidx.window.embedding.ActivityFilter: boolean equals(java.lang.Object)
com.google.android.gms.internal.base.zal: android.app.PendingIntent zaa(android.content.Context,int,android.content.Intent,int)
io.sentry.SentryOptions$TracesSamplerCallback: java.lang.Double sample(io.sentry.SamplingContext)
com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter close(int,int,java.lang.String)
androidx.collection.ArraySet: int indexOf(java.lang.Object)
io.flutter.view.AccessibilityBridge: void setOnAccessibilityChangeListener(io.flutter.view.AccessibilityBridge$OnAccessibilityChangeListener)
com.google.android.gms.maps.model.PolygonOptions: com.google.android.gms.maps.model.PolygonOptions zIndex(float)
com.google.common.hash.LittleEndianByteArray$UnsafeByteArray$1: LittleEndianByteArray$UnsafeByteArray$1(java.lang.String,int)
kotlinx.coroutines.BeforeResumeCancelHandler: BeforeResumeCancelHandler()
com.google.gson.internal.LinkedTreeMap$Node: com.google.gson.internal.LinkedTreeMap$Node last()
io.sentry.cache.EnvelopeCache: void $closeResource(java.lang.Throwable,java.lang.AutoCloseable)
io.flutter.plugins.googlemaps.GoogleMapBuilder: void setInitialPolygons(java.lang.Object)
com.google.common.hash.Hashing$ChecksumType$1: Hashing$ChecksumType$1(java.lang.String,int,java.lang.String)
androidx.lifecycle.ReportFragment: void onStart()
com.google.android.gms.maps.internal.zzbs: com.google.android.gms.maps.model.LatLng fromScreenLocation(com.google.android.gms.dynamic.IObjectWrapper)
com.google.android.gms.maps.internal.zzb: com.google.android.gms.dynamic.IObjectWrapper zoomByWithFocus(float,int,int)
io.sentry.Hub: io.sentry.SentryTraceHeader traceHeaders()
io.sentry.SentryBaseEvent: io.sentry.protocol.SdkVersion getSdk()
com.google.android.gms.common.stats.ConnectionTracker: boolean zzc(android.content.Context,java.lang.String,android.content.Intent,android.content.ServiceConnection,int,boolean,java.util.concurrent.Executor)
io.sentry.protocol.SentryStackFrame: void setPackage(java.lang.String)
com.google.android.gms.dynamite.zzj: zzj()
com.google.gson.internal.JavaVersion: boolean isJava9OrLater()
com.google.gson.JsonParseException: JsonParseException(java.lang.String)
io.sentry.SentryOptions: io.sentry.ISentryExecutorService getExecutorService()
io.sentry.DateUtils: java.util.Date getCurrentDateTime()
kotlin.ranges.IntProgression$Companion: IntProgression$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
io.sentry.android.ndk.NativeModuleListLoader: NativeModuleListLoader()
kotlinx.coroutines.internal.DispatchedContinuation: kotlin.coroutines.jvm.internal.CoroutineStackFrame getCallerFrame()
com.google.android.gms.common.internal.service.zap: android.os.Bundle getGetServiceRequestExtraArgs()
androidx.activity.ComponentActivity$3: ComponentActivity$3(androidx.activity.ComponentActivity)
kotlin.collections.EmptyMap: int hashCode()
io.sentry.android.core.util.DeviceOrientations: DeviceOrientations()
androidx.window.core.Version: Version(int,int,int,java.lang.String,kotlin.jvm.internal.DefaultConstructorMarker)
kotlin.jvm.internal.Intrinsics: void throwUninitializedProperty(java.lang.String)
io.sentry.exception.ExceptionMechanismException: java.lang.Throwable getThrowable()
kotlin.text.StringsKt__StringsKt: kotlin.Pair findAnyOf$StringsKt__StringsKt(java.lang.CharSequence,java.util.Collection,int,boolean,boolean)
io.sentry.protocol.DebugImage: void setType(java.lang.String)
com.google.common.collect.Maps$EntryFunction$2: java.lang.Object apply(java.util.Map$Entry)
io.sentry.SentryOptions$Proxy: void setPort(java.lang.String)
io.sentry.protocol.DebugImage: void acceptUnknownProperties(java.util.Map)
io.flutter.embedding.android.FlutterSplashView: boolean isSplashScreenTransitionNeededNow()
io.flutter.plugin.platform.PlatformViewsController: io.flutter.plugin.platform.AccessibilityEventsDelegate access$800(io.flutter.plugin.platform.PlatformViewsController)
io.flutter.embedding.engine.FlutterJNI: void invokePlatformMessageEmptyResponseCallback(int)
com.google.gson.GsonBuilder: com.google.gson.GsonBuilder setLongSerializationPolicy(com.google.gson.LongSerializationPolicy)
io.sentry.protocol.Gpu: java.lang.Boolean isMultiThreadedRendering()
androidx.fragment.app.Fragment: int getNextAnim()
kotlinx.coroutines.EventLoop: boolean isUnconfinedLoopActive()
io.flutter.plugins.urllauncher.WebViewActivity$FlutterWebChromeClient$1: WebViewActivity$FlutterWebChromeClient$1(io.flutter.plugins.urllauncher.WebViewActivity$FlutterWebChromeClient)
kotlinx.coroutines.CancellableContinuationImpl: java.lang.String getStateDebugRepresentation()
kotlin.collections.EmptyIterator: int previousIndex()
io.sentry.Scope: void setContexts(java.lang.String,java.lang.Boolean)
io.flutter.plugin.common.MethodChannel: MethodChannel(io.flutter.plugin.common.BinaryMessenger,java.lang.String,io.flutter.plugin.common.MethodCodec)
com.google.android.gms.common.internal.zzl: java.lang.Object[] newArray(int)
androidx.core.content.res.ResourcesCompat: android.graphics.drawable.Drawable getDrawable(android.content.res.Resources,int,android.content.res.Resources$Theme)
androidx.fragment.app.FragmentActivity: boolean onCreatePanelMenu(int,android.view.Menu)
com.google.gson.internal.reflect.PreJava9ReflectionAccessor: PreJava9ReflectionAccessor()
io.sentry.SentryOptions: void setBeforeBreadcrumb(io.sentry.SentryOptions$BeforeBreadcrumbCallback)
androidx.collection.ArraySet: java.lang.Object[] toArray()
androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions: SafeIterableMap$IteratorWithAdditions(androidx.arch.core.internal.SafeIterableMap)
io.flutter.plugin.platform.PlatformPlugin$1: void setPreferredOrientations(int)
kotlin.ranges.IntRange$Companion: kotlin.ranges.IntRange getEMPTY()
com.google.gson.internal.bind.SqlDateTypeAdapter: void write(com.google.gson.stream.JsonWriter,java.sql.Date)
com.google.android.gms.maps.model.Cap: Cap(int,com.google.android.gms.maps.model.BitmapDescriptor,java.lang.Float)
kotlin.coroutines.CombinedContext: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: void remove(java.util.Set)
com.google.android.gms.common.api.internal.zan: zan(com.google.android.gms.common.api.internal.zao,android.app.Dialog)
androidx.window.embedding.SplitRuleParser: androidx.window.embedding.SplitPairFilter parseSplitPairFilter(android.content.Context,android.content.res.XmlResourceParser)
com.google.android.gms.common.api.internal.LifecycleCallback: void onStop()
io.sentry.transport.NoOpEnvelopeCache: NoOpEnvelopeCache()
androidx.core.os.LocaleListPlatformWrapper: LocaleListPlatformWrapper(android.os.LocaleList)
io.flutter.plugins.googlemaps.CircleBuilder: void setCenter(com.google.android.gms.maps.model.LatLng)
com.tekartik.sqflite.SqflitePlugin$4: SqflitePlugin$4(com.tekartik.sqflite.SqflitePlugin,com.tekartik.sqflite.Database,io.flutter.plugin.common.MethodCall,com.tekartik.sqflite.SqflitePlugin$BgResult)
com.google.gson.internal.LazilyParsedNumber: double doubleValue()
com.google.gson.Gson: java.lang.Object fromJson(java.lang.String,java.lang.Class)
com.google.android.gms.common.internal.safeparcel.SafeParcelWriter: void writeStringList(android.os.Parcel,int,java.util.List,boolean)
com.google.android.gms.common.api.internal.zaq: zaq()
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.plugins.activity.ActivityControlSurface getActivityControlSurface()
io.sentry.SentryClient: boolean isEnabled()
com.google.gson.internal.reflect.UnsafeReflectionAccessor: boolean makeAccessibleWithUnsafe(java.lang.reflect.AccessibleObject)
io.flutter.view.AccessibilityBridge: boolean access$500(io.flutter.view.AccessibilityBridge)
com.google.gson.internal.bind.JsonTreeReader: void beginObject()
com.google.common.base.Equivalence$Equals: Equivalence$Equals()
androidx.fragment.app.Fragment: boolean getRetainInstance()
androidx.fragment.app.FragmentTransition: void startTransitions(androidx.fragment.app.FragmentManagerImpl,java.util.ArrayList,java.util.ArrayList,int,int,boolean)
io.sentry.protocol.SentryThread: void setPriority(java.lang.Integer)
io.sentry.SentryTraceHeader: java.lang.String getValue()
io.flutter.embedding.engine.systemchannels.NavigationChannel$1: NavigationChannel$1(io.flutter.embedding.engine.systemchannels.NavigationChannel)
com.google.android.gms.common.internal.BaseGmsClient: boolean enableLocalFallback()
com.google.gson.reflect.TypeToken: TypeToken(java.lang.reflect.Type)
io.sentry.SentryOptions: void setTag(java.lang.String,java.lang.String)
com.google.gson.internal.LinkedTreeMap: boolean containsKey(java.lang.Object)
io.sentry.protocol.Browser: Browser()
io.flutter.embedding.android.FlutterView: void resetWillNotDraw(boolean,boolean)
kotlinx.coroutines.CompletionStateKt: java.lang.Object recoverResult(java.lang.Object,kotlin.coroutines.Continuation)
com.google.android.gms.common.util.PlatformVersion: boolean isAtLeastJellyBeanMR2()
io.sentry.NoOpSentryClient: void flush(long)
androidx.core.view.ViewCompat$AccessibilityViewProperty: ViewCompat$AccessibilityViewProperty(int,java.lang.Class,int,int)
com.google.common.base.Predicates$ObjectPredicate$2: Predicates$ObjectPredicate$2(java.lang.String,int)
io.sentry.ITransaction: io.sentry.Span getLatestActiveSpan()
com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper: com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry newEntry(com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry)
androidx.core.app.NotificationCompat$BigTextStyle: androidx.core.app.NotificationCompat$BigTextStyle bigText(java.lang.CharSequence)
kotlinx.coroutines.channels.AbstractChannel$Itr: java.lang.Object hasNextSuspend(kotlin.coroutines.Continuation)
io.sentry.transport.TransportResult: io.sentry.transport.TransportResult error()
io.flutter.plugin.editing.TextInputPlugin: void autofill(android.util.SparseArray)
com.google.android.gms.common.api.internal.TaskApiCall$Builder: TaskApiCall$Builder(com.google.android.gms.common.api.internal.zacw)
androidx.core.view.OneShotPreDrawListener: void removeListener()
com.google.android.gms.maps.model.zzb: java.lang.Object[] newArray(int)
com.tekartik.sqflite.SqlCommand: java.util.List getStringQuerySqlArguments(java.util.List)
io.sentry.ISentryClient: boolean isEnabled()
com.google.android.gms.common.GoogleApiAvailability: android.app.Dialog zaa(android.content.Context,int,com.google.android.gms.common.internal.zag,android.content.DialogInterface$OnCancelListener)
io.sentry.ISentryExecutorService: void close(long)
com.google.android.gms.common.api.internal.zabk: void execute(java.lang.Runnable)
io.flutter.plugin.platform.PlatformViewsController: java.util.List parsePointerPropertiesList(java.lang.Object)
androidx.window.core.Version$Companion: Version$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
androidx.lifecycle.ReportFragment: void onResume()
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding: void onUserLeaveHint()
io.sentry.SentryOptions: io.sentry.cache.IEnvelopeCache getEnvelopeDiskCache()
io.sentry.adapters.SentryIdSerializerAdapter: com.google.gson.JsonElement serialize(io.sentry.protocol.SentryId,java.lang.reflect.Type,com.google.gson.JsonSerializationContext)
com.google.android.gms.common.internal.GmsClient: java.util.concurrent.Executor getBindServiceExecutor()
io.sentry.NoOpTransaction: io.sentry.NoOpTransaction getInstance()
androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.Lifecycle$State calculateTargetState(androidx.lifecycle.LifecycleObserver)
io.flutter.view.AccessibilityBridge: void setAccessibilityPaneTitle(java.lang.String)
com.google.android.gms.maps.model.CameraPosition: boolean equals(java.lang.Object)
androidx.fragment.app.FragmentTransitionCompat21$3: void onTransitionResume(android.transition.Transition)
com.google.android.gms.common.api.internal.GoogleApiManager: com.google.android.gms.common.api.internal.zabq zak(com.google.android.gms.common.api.internal.ApiKey)
androidx.window.embedding.EmbeddingCompat$Companion: java.lang.Integer getExtensionApiLevel()
com.google.common.collect.MapMakerInternalMap$EntrySet: boolean isEmpty()
com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter value(long)
kotlinx.coroutines.CompletedContinuation: kotlinx.coroutines.CompletedContinuation copy$default(kotlinx.coroutines.CompletedContinuation,java.lang.Object,kotlinx.coroutines.CancelHandler,kotlin.jvm.functions.Function1,java.lang.Object,java.lang.Throwable,int,java.lang.Object)
kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key)
io.sentry.Scope: io.sentry.Session withSession(io.sentry.Scope$IWithSession)
kotlinx.coroutines.channels.ChannelResult$Failed: ChannelResult$Failed()
io.sentry.android.core.DefaultAndroidEventProcessor: void setArchitectures(io.sentry.protocol.Device)
androidx.fragment.app.FragmentActivity: void startActivityForResult(android.content.Intent,int)
kotlin.collections.EmptyMap: java.util.Set keySet()
com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper: com.google.common.collect.MapMakerInternalMap$InternalEntry newEntry(com.google.common.collect.MapMakerInternalMap$Segment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$InternalEntry)
com.google.android.gms.common.api.internal.zabq: void zat(com.google.android.gms.common.api.internal.zal)
io.sentry.android.core.DefaultAndroidEventProcessor: io.sentry.protocol.Device$DeviceOrientation getOrientation()
com.google.android.gms.internal.common.zzb: boolean zza(int,android.os.Parcel,android.os.Parcel,int)
com.google.gson.JsonObject: void addProperty(java.lang.String,java.lang.Number)
com.google.android.gms.common.api.internal.zabq: void onConnected(android.os.Bundle)
io.flutter.embedding.engine.FlutterJNI: void nativeUpdateJavaAssetManager(long,android.content.res.AssetManager,java.lang.String)
io.flutter.plugins.googlemaps.PolygonBuilder: boolean consumeTapEvents()
kotlinx.coroutines.DispatchedTask: java.lang.Throwable getExceptionalResult$kotlinx_coroutines_core(java.lang.Object)
com.google.android.gms.maps.GoogleMap: com.google.android.gms.maps.model.Polyline addPolyline(com.google.android.gms.maps.model.PolylineOptions)
com.google.android.gms.common.api.GoogleApi$Settings: GoogleApi$Settings(com.google.android.gms.common.api.internal.StatusExceptionMapper,android.accounts.Account,android.os.Looper,com.google.android.gms.common.api.zae)
io.sentry.SentryOptions: void setEnableNdk(boolean)
io.sentry.android.core.DefaultAndroidEventProcessor: io.sentry.protocol.OperatingSystem getOperatingSystem()
kotlinx.coroutines.JobSupport: JobSupport(boolean)
com.google.gson.Gson$1: void write(com.google.gson.stream.JsonWriter,java.lang.Number)
io.sentry.Span: io.sentry.SpanId getParentSpanId()
io.sentry.NoOpHub: void endSession()
kotlin.coroutines.jvm.internal.CompletedContinuation: CompletedContinuation()
com.google.gson.internal.bind.ArrayTypeAdapter: java.lang.Object read(com.google.gson.stream.JsonReader)
kotlinx.coroutines.EventLoopImplBase: void closeQueue()
io.flutter.embedding.engine.systemchannels.LifecycleChannel: void appIsInactive()
com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter open(int,java.lang.String)
androidx.collection.ArrayMap$1: void colClear()
androidx.activity.OnBackPressedDispatcher: void addCallback(androidx.lifecycle.LifecycleOwner,androidx.activity.OnBackPressedCallback)
androidx.core.view.WindowInsetsControllerCompat$Impl30: WindowInsetsControllerCompat$Impl30(android.view.Window,androidx.core.view.WindowInsetsControllerCompat)
androidx.versionedparcelable.VersionedParcel: void setSerializationFlags(boolean,boolean)
androidx.fragment.app.FragmentManagerImpl: void dispatchMultiWindowModeChanged(boolean)
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
androidx.window.layout.WindowMetricsCalculator$Companion: WindowMetricsCalculator$Companion()
androidx.lifecycle.ClassesInfoCache$CallbackInfo: void invokeMethodsForEvent(java.util.List,androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event,java.lang.Object)
io.flutter.plugins.pathprovider.PathProviderPlugin: java.lang.String getPathProviderApplicationDocumentsDirectory()
androidx.loader.app.LoaderManagerImpl$LoaderViewModel: void onCleared()
com.google.android.gms.maps.internal.zzbt: boolean zza(int,android.os.Parcel,android.os.Parcel,int)
kotlinx.coroutines.JobSupport: boolean handleJobException(java.lang.Throwable)
androidx.fragment.app.FragmentActivity: void onActivityResult(int,int,android.content.Intent)
androidx.savedstate.SavedStateRegistry$1: SavedStateRegistry$1(androidx.savedstate.SavedStateRegistry)
androidx.window.layout.SidecarAdapter: boolean isEqualSidecarWindowLayoutInfo(androidx.window.sidecar.SidecarWindowLayoutInfo,androidx.window.sidecar.SidecarWindowLayoutInfo)
androidx.core.view.OneShotPreDrawListener: void onViewDetachedFromWindow(android.view.View)
io.sentry.adapters.TimeZoneDeserializerAdapter: java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext)
io.sentry.adapters.DateDeserializerAdapter: java.util.Date deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext)
androidx.lifecycle.MutableLiveData: MutableLiveData()
io.sentry.Scope: void removeTag(java.lang.String)
kotlinx.coroutines.flow.AbstractFlow: java.lang.Object collect(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.Continuation)
androidx.fragment.app.BackStackRecord: boolean isFragmentPostponed(androidx.fragment.app.FragmentTransaction$Op)
kotlinx.coroutines.scheduling.WorkQueue: int getBufferSize$kotlinx_coroutines_core()
com.google.common.collect.MapMakerInternalMap: java.util.Set keySet()
io.sentry.protocol.SentryRuntime: java.util.Map getUnknown()
kotlinx.coroutines.internal.ArrayQueue: void ensureCapacity()
com.google.common.reflect.TypeToken: com.google.common.collect.ImmutableSet getRawTypes()
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: boolean access$100(io.flutter.embedding.android.FlutterActivityAndFragmentDelegate)
io.flutter.embedding.engine.loader.FlutterLoader: void startInitialization(android.content.Context)
com.google.android.gms.maps.model.CircleOptions: com.google.android.gms.maps.model.LatLng getCenter()
io.flutter.plugins.pathprovider.PathProviderPlugin$PathProviderPlatformThread: void executeInBackground(java.util.concurrent.Callable,io.flutter.plugin.common.MethodChannel$Result)
com.google.gson.internal.LazilyParsedNumber: java.lang.Object writeReplace()
com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
io.sentry.IUnknownPropertiesConsumer: void acceptUnknownProperties(java.util.Map)
androidx.core.app.NotificationCompat$Builder: androidx.core.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent)
com.google.android.gms.maps.MapsInitializer: int initialize(android.content.Context,com.google.android.gms.maps.MapsInitializer$Renderer,com.google.android.gms.maps.OnMapsSdkInitializedCallback)
kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker parkedWorkersStackPop()
io.sentry.android.core.SentryAndroidOptions: void setAnrTimeoutIntervalMillis(long)
kotlin.coroutines.CombinedContext: boolean containsAll(kotlin.coroutines.CombinedContext)
androidx.fragment.app.Fragment: void onDestroy()
androidx.window.embedding.MatcherUtils: MatcherUtils()
com.google.android.gms.dynamite.zzf: com.google.android.gms.dynamite.DynamiteModule$VersionPolicy$SelectionResult selectModule(android.content.Context,java.lang.String,com.google.android.gms.dynamite.DynamiteModule$VersionPolicy$IVersions)
io.sentry.ISentryClient: io.sentry.protocol.SentryId captureTransaction(io.sentry.protocol.SentryTransaction,io.sentry.Scope,java.lang.Object)
kotlinx.coroutines.JobSupport$Finishing: void setExceptionsHolder(java.lang.Object)
kotlinx.coroutines.JobSupport: void continueCompleting(kotlinx.coroutines.JobSupport$Finishing,kotlinx.coroutines.ChildHandleNode,java.lang.Object)
com.google.gson.internal.Streams$AppendableWriter: void write(int)
io.flutter.plugins.googlemaps.MarkerBuilder: void setAnchor(float,float)
kotlinx.coroutines.DefaultExecutor: boolean isShutdownRequested()
io.flutter.plugins.googlemaps.GoogleMapController: void onMarkerDragStart(com.google.android.gms.maps.model.Marker)
kotlin.text.CharsKt__CharJVMKt: int checkRadix(int)
com.google.common.util.concurrent.AbstractFuture$SetFuture: void run()
dev.fluttercommunity.plus.packageinfo.PackageInfoPlugin: java.lang.String bytesToHex(byte[])
androidx.window.embedding.SplitRuleParser: androidx.window.embedding.SplitPlaceholderRule parseSplitPlaceholderRule(android.content.Context,android.content.res.XmlResourceParser)
com.google.common.util.concurrent.AbstractFuture$TrustedFuture: boolean isCancelled()
kotlinx.coroutines.channels.Closed: java.lang.String toString()
androidx.core.app.Person: boolean isImportant()
kotlinx.coroutines.CompletedContinuation: kotlinx.coroutines.CompletedContinuation copy(java.lang.Object,kotlinx.coroutines.CancelHandler,kotlin.jvm.functions.Function1,java.lang.Object,java.lang.Throwable)
com.google.android.gms.maps.model.PolylineOptions: com.google.android.gms.maps.model.PolylineOptions pattern(java.util.List)
com.google.android.gms.common.api.internal.TaskApiCall$Builder: com.google.android.gms.common.api.internal.TaskApiCall$Builder setAutoResolveMissingFeatures(boolean)
androidx.window.embedding.SplitPairFilter: android.content.ComponentName getPrimaryActivityName()
io.flutter.plugin.platform.VirtualDisplayController: void onFlutterViewAttached(android.view.View)
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$6: java.lang.Object invoke(java.lang.Object)
kotlinx.coroutines.internal.LockFreeTaskQueueCore: int addLast(java.lang.Object)
com.google.gson.JsonObject: int size()
com.google.gson.internal.bind.ObjectTypeAdapter: java.lang.Object read(com.google.gson.stream.JsonReader)
com.google.gson.TypeAdapter: java.lang.Object read(com.google.gson.stream.JsonReader)
io.sentry.protocol.Mechanism: void setMeta(java.util.Map)
com.google.android.gms.tasks.zzw: boolean isCanceled()
io.flutter.plugin.platform.AccessibilityEventsDelegate: AccessibilityEventsDelegate()
com.google.android.gms.dynamic.zac: void zab(com.google.android.gms.dynamic.LifecycleDelegate)
com.google.android.gms.maps.model.CameraPosition: CameraPosition(com.google.android.gms.maps.model.LatLng,float,float,float)
io.flutter.plugins.GeneratedPluginRegistrant: GeneratedPluginRegistrant()
io.sentry.OutboxSender: void processDirectory(java.io.File)
io.sentry.Sentry: void addBreadcrumb(java.lang.String,java.lang.String)
com.google.android.gms.maps.model.Polyline: void setPoints(java.util.List)
io.flutter.embedding.android.FlutterSplashView: void transitionToFlutter()
io.flutter.plugins.googlemaps.Convert: void interpretInfoWindowOptions(io.flutter.plugins.googlemaps.MarkerOptionsSink,java.util.Map)
io.sentry.SentryOptions: int getMaxBreadcrumbs()
com.google.common.base.Predicates$ObjectPredicate: Predicates$ObjectPredicate(java.lang.String,int)
com.google.android.gms.maps.model.PolygonOptions: com.google.android.gms.maps.model.PolygonOptions clickable(boolean)
androidx.window.layout.HardwareFoldingFeature$Companion: void validateFeatureBounds$window_release(androidx.window.core.Bounds)
io.flutter.plugins.pathprovider.PathProviderPlugin$PathProviderBackgroundThread: void getExternalCacheDirectories(io.flutter.plugin.common.MethodChannel$Result)
androidx.activity.OnBackPressedDispatcher: androidx.activity.Cancellable addCancellableCallback(androidx.activity.OnBackPressedCallback)
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: CoroutineScheduler$Worker(kotlinx.coroutines.scheduling.CoroutineScheduler)
com.google.gson.internal.$Gson$Types$WildcardTypeImpl: java.lang.reflect.Type[] getUpperBounds()
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$1: void create(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.sentry.SentryThreadFactory: io.sentry.protocol.SentryThread getSentryThread(boolean,java.lang.StackTraceElement[],java.lang.Thread)
kotlin.collections.CollectionsKt___CollectionsKt: java.util.List toList(java.lang.Iterable)
androidx.fragment.app.FragmentActivity: void onPause()
androidx.core.view.ViewCompat: boolean dispatchUnhandledKeyEventBeforeCallback(android.view.View,android.view.KeyEvent)
kotlinx.coroutines.CoroutineId: int hashCode()
com.tekartik.sqflite.operation.BatchOperation: java.util.Map getOperationError()
io.flutter.embedding.android.FlutterSplashView: void onRestoreInstanceState(android.os.Parcelable)
kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: ExperimentalCoroutineDispatcher(int,int,long,java.lang.String)
com.google.gson.Gson: boolean serializeNulls()
io.flutter.plugins.googlemaps.PolygonBuilder: void setStrokeWidth(float)
com.google.android.gms.common.GoogleApiAvailabilityLight: java.lang.String getErrorString(int)
com.google.android.gms.maps.model.RoundCap: java.lang.String toString()
io.sentry.HubAdapter: io.sentry.IHub clone()
io.sentry.TransactionContext: void setParentSampled(java.lang.Boolean)
com.google.android.gms.common.api.internal.LifecycleCallback: void onResume()
io.sentry.android.core.DefaultAndroidEventProcessor: java.util.Map loadContextData()
pt.up.fe.ni.uni.MainActivity: MainActivity()
androidx.collection.ContainerHelpers: int idealIntArraySize(int)
io.sentry.SentryStackTraceFactory: java.util.List getStackFrames(java.lang.StackTraceElement[])
com.google.android.gms.common.api.internal.zaae: void zab(com.google.android.gms.common.ConnectionResult,int)
com.google.android.gms.common.api.internal.zact: void zaf()
io.sentry.protocol.Device: void setModel(java.lang.String)
com.google.android.gms.common.internal.zzn: android.content.Intent zzc(android.content.Context)
kotlin.coroutines.CombinedContext: int hashCode()
androidx.fragment.app.Fragment: void performPictureInPictureModeChanged(boolean)
io.sentry.protocol.OperatingSystem: OperatingSystem(io.sentry.protocol.OperatingSystem)
com.tekartik.sqflite.operation.ExecuteOperation: com.tekartik.sqflite.SqlCommand getSqlCommand()
com.google.common.collect.AbstractIndexedListIterator: AbstractIndexedListIterator(int,int)
com.google.common.collect.MapMakerInternalMap$WeakValueReferenceImpl: com.google.common.collect.MapMakerInternalMap$InternalEntry getEntry()
com.google.android.gms.common.api.internal.BackgroundDetector: void onLowMemory()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityResumed(android.app.Activity)
io.sentry.protocol.Contexts: void setGpu(io.sentry.protocol.Gpu)
io.sentry.protocol.Device: void setUsableMemory(java.lang.Long)
androidx.core.view.WindowInsetsControllerCompat: void setAppearanceLightNavigationBars(boolean)
com.google.gson.internal.bind.TypeAdapters$1: java.lang.Class read(com.google.gson.stream.JsonReader)
io.sentry.android.core.AndroidOptionsInitializer: AndroidOptionsInitializer()
io.flutter.plugins.pathprovider.PathProviderPlugin$PathProviderBackgroundThread: PathProviderPlugin$PathProviderBackgroundThread(io.flutter.plugins.pathprovider.PathProviderPlugin)
io.sentry.Scope: void setUser(io.sentry.protocol.User)
io.flutter.plugin.editing.ListenableEditingState: int getSelectionEnd()
io.flutter.embedding.android.FlutterImageView: android.view.Surface getSurface()
com.google.gson.internal.bind.JsonTreeWriter: com.google.gson.stream.JsonWriter beginObject()
androidx.fragment.app.FragmentManagerImpl$4: FragmentManagerImpl$4(androidx.fragment.app.FragmentManagerImpl,android.view.ViewGroup,android.view.View,androidx.fragment.app.Fragment)
androidx.lifecycle.Lifecycling: java.lang.String getAdapterName(java.lang.String)
kotlinx.coroutines.EventLoopImplBase: boolean isCompleted()
kotlinx.coroutines.internal.LockFreeLinkedListHead: boolean isRemoved()
io.flutter.plugin.platform.SingleViewPresentation$ImmContext: android.content.Context createDisplayContext(android.view.Display)
com.google.android.gms.common.api.internal.GoogleApiManager: boolean zaG(com.google.android.gms.common.ConnectionResult,int)
io.flutter.plugin.platform.PlatformViewsController: PlatformViewsController()
com.google.gson.JsonElement: com.google.gson.JsonObject getAsJsonObject()
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: android.app.Activity activity()
com.google.android.gms.common.api.Api$AbstractClientBuilder: Api$AbstractClientBuilder()
com.google.common.collect.ImmutableList$SubList: java.lang.Object get(int)
io.sentry.DirectoryProcessor$SendCachedEnvelopeHint: boolean waitFlush()
io.flutter.view.AccessibilityBridge$SemanticsNode: int access$2500(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.view.AccessibilityBridge$LocaleStringAttribute: AccessibilityBridge$LocaleStringAttribute(io.flutter.view.AccessibilityBridge$1)
com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter: MapTypeAdapterFactory$Adapter(com.google.gson.internal.bind.MapTypeAdapterFactory,com.google.gson.Gson,java.lang.reflect.Type,com.google.gson.TypeAdapter,java.lang.reflect.Type,com.google.gson.TypeAdapter,com.google.gson.internal.ObjectConstructor)
com.google.android.gms.common.api.internal.zaae: void zae()
com.google.android.gms.common.internal.zzy: boolean zza(int,android.os.Parcel,android.os.Parcel,int)
com.google.common.util.concurrent.CycleDetectingLockFactory$Policies: CycleDetectingLockFactory$Policies(java.lang.String,int)
com.google.android.gms.common.api.internal.zaad: void zaf()
kotlin.coroutines.ContinuationInterceptor$DefaultImpls: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.ContinuationInterceptor,kotlin.coroutines.CoroutineContext$Key)
kotlin.ranges.IntRange: boolean isEmpty()
androidx.window.core.Bounds: Bounds(int,int,int,int)
io.sentry.protocol.Device: void setScreenHeightPixels(java.lang.Integer)
com.google.gson.internal.Excluder: boolean isStatic(java.lang.Class)
io.sentry.TransactionContext: TransactionContext(java.lang.String,java.lang.String,java.lang.Boolean)
io.sentry.DateUtils: java.util.TimeZone access$000()
io.flutter.plugins.googlemaps.PolygonsController: void changePolygon(java.lang.Object)
com.google.gson.internal.LinkedTreeMap: void rotateLeft(com.google.gson.internal.LinkedTreeMap$Node)
io.sentry.transport.AsyncHttpTransport: io.sentry.transport.QueuedThreadPoolExecutor initExecutor(int,io.sentry.cache.IEnvelopeCache,io.sentry.ILogger)
com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node last()
io.sentry.MainEventProcessor: MainEventProcessor(io.sentry.SentryOptions,io.sentry.SentryThreadFactory,io.sentry.SentryExceptionFactory,io.sentry.HostnameCache)
io.flutter.embedding.engine.systemchannels.LocalizationChannel$1: LocalizationChannel$1(io.flutter.embedding.engine.systemchannels.LocalizationChannel)
androidx.versionedparcelable.VersionedParcelParcel: androidx.versionedparcelable.VersionedParcel createSubParcel()
io.flutter.plugin.editing.TextInputPlugin: void didChangeEditingState(boolean,boolean,boolean)
androidx.versionedparcelable.VersionedParcel: boolean readBoolean(boolean,int)
androidx.fragment.app.FragmentManagerImpl: void enqueueAction(androidx.fragment.app.FragmentManagerImpl$OpGenerator,boolean)
com.google.android.gms.maps.internal.zzg: void resetMinMaxZoomPreference()
androidx.fragment.app.FragmentManagerImpl: void popBackStack(int,int)
com.google.android.gms.common.api.internal.TaskApiCall: com.google.android.gms.common.api.internal.TaskApiCall$Builder builder()
io.flutter.plugins.googlemaps.GoogleMapController: void updateInitialPolygons()
io.sentry.android.core.SentryInitProvider: java.lang.String getType(android.net.Uri)
kotlin.ranges.IntProgressionIterator: int nextInt()
androidx.fragment.app.FragmentManagerImpl: void dispatchOnFragmentViewCreated(androidx.fragment.app.Fragment,android.view.View,android.os.Bundle,boolean)
com.google.gson.internal.bind.TypeAdapters$4: java.lang.Boolean read(com.google.gson.stream.JsonReader)
io.sentry.protocol.Device: java.lang.String getModelId()
io.sentry.protocol.Gpu: void setVendorName(java.lang.String)
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$1: void clearFocus(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
com.google.android.gms.common.api.internal.zai: com.google.android.gms.common.api.Status zah(android.os.RemoteException)
com.google.android.gms.maps.UiSettings: boolean isMyLocationButtonEnabled()
com.google.android.gms.common.internal.RootTelemetryConfiguration: int getBatchPeriodMillis()
io.flutter.plugins.googlemaps.GoogleMapController: void setScrollGesturesEnabled(boolean)
androidx.window.embedding.EmbeddingCompat: EmbeddingCompat()
io.sentry.HubAdapter: io.sentry.SentryTraceHeader traceHeaders()
androidx.fragment.app.FragmentTransition$4: FragmentTransition$4(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,android.view.View,androidx.fragment.app.Fragment,androidx.fragment.app.Fragment,boolean,java.util.ArrayList,java.lang.Object,android.graphics.Rect)
io.sentry.OutboxSender: void logItemCaptured(int)
kotlinx.coroutines.JobSupport: boolean cancelParent(java.lang.Throwable)
io.sentry.protocol.SentryStackFrame: void setSymbolAddr(java.lang.String)
com.google.android.gms.maps.CameraUpdateFactory: com.google.android.gms.maps.CameraUpdate newLatLng(com.google.android.gms.maps.model.LatLng)
com.google.android.gms.auth.api.signin.GoogleSignInAccount: java.lang.String getIdToken()
androidx.core.app.Person: androidx.core.graphics.drawable.IconCompat getIcon()
androidx.window.layout.EmptyDecorator: androidx.window.layout.WindowInfoTracker decorate(androidx.window.layout.WindowInfoTracker)
io.sentry.protocol.App: void setBuildType(java.lang.String)
androidx.core.view.ViewCompat$UnhandledKeyEventManager: boolean preDispatch(android.view.KeyEvent)
io.flutter.plugins.googlemaps.PolylineBuilder: PolylineBuilder(float)
com.google.common.io.Files$FilePredicate: com.google.common.io.Files$FilePredicate valueOf(java.lang.String)
io.sentry.SentryOptions: io.sentry.SentryOptions empty()
com.google.gson.JsonStreamParser: JsonStreamParser(java.lang.String)
io.sentry.DateUtils: java.util.Date getDateTime(java.lang.String)
com.google.android.gms.common.internal.safeparcel.SafeParcelReader$ParseException: SafeParcelReader$ParseException(java.lang.String,android.os.Parcel)
io.sentry.IHub: void close()
com.google.android.gms.maps.model.LatLngBounds: boolean equals(java.lang.Object)
com.google.android.gms.maps.model.CircleOptions: boolean isClickable()
com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper: com.google.common.collect.MapMakerInternalMap$Strength valueStrength()
io.flutter.embedding.android.FlutterSurfaceView: io.flutter.embedding.engine.renderer.FlutterRenderer access$500(io.flutter.embedding.android.FlutterSurfaceView)
androidx.lifecycle.ProcessLifecycleOwner: void init(android.content.Context)
kotlinx.coroutines.CancelledContinuation: boolean makeResumed()
io.flutter.embedding.engine.FlutterEngine: io.flutter.plugin.platform.PlatformViewsController getPlatformViewsController()
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics: boolean validate()
androidx.fragment.app.FragmentController: void dispatchDestroy()
io.sentry.SentryEnvelope: SentryEnvelope(io.sentry.SentryEnvelopeHeader,java.lang.Iterable)
io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode: io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode[] values()
com.google.android.gms.common.api.internal.zabq: void zaG()
com.google.android.gms.common.api.internal.NonGmsServiceBrokerClient: boolean requiresGooglePlayServices()
com.google.android.gms.common.internal.Preconditions: java.lang.Object checkNotNull(java.lang.Object)
io.sentry.flutter.R$dimen: R$dimen()
com.google.android.gms.maps.model.PolylineOptions: PolylineOptions(java.util.List,float,int,float,boolean,boolean,boolean,com.google.android.gms.maps.model.Cap,com.google.android.gms.maps.model.Cap,int,java.util.List)
com.google.gson.internal.LinkedHashTreeMap: void rotateRight(com.google.gson.internal.LinkedHashTreeMap$Node)
com.google.android.gms.maps.model.Cap: Cap(com.google.android.gms.maps.model.BitmapDescriptor,float)
androidx.window.core.Version$Companion: androidx.window.core.Version parse(java.lang.String)
com.google.android.gms.internal.maps.zzab: void zzu(java.util.List)
io.sentry.ShutdownHookIntegration: void close()
io.flutter.embedding.engine.loader.FlutterLoader: io.flutter.embedding.engine.FlutterJNI access$100(io.flutter.embedding.engine.loader.FlutterLoader)
io.sentry.protocol.Gpu: java.lang.String getApiType()
io.flutter.view.AccessibilityBridge: boolean isAccessibilityEnabled()
com.google.android.gms.maps.zzc: void zzb(com.google.android.gms.internal.maps.zzx)
com.google.android.gms.maps.zzq: zzq(com.google.android.gms.maps.GoogleMap,com.google.android.gms.maps.GoogleMap$SnapshotReadyCallback)
com.google.gson.internal.Streams: java.io.Writer writerForAppendable(java.lang.Appendable)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$1: void onFlutterUiDisplayed()
io.flutter.embedding.engine.systemchannels.LocalizationChannel: void sendLocales(java.util.List)
io.flutter.plugin.editing.TextInputPlugin: void notifyViewEntered()
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState valueOf(java.lang.String)
io.sentry.SentryOptions: void addIntegration(io.sentry.Integration)
com.google.android.gms.internal.maps.zzv: void zzn()
com.google.android.gms.common.internal.BaseGmsClient: java.util.Set getScopes()
io.sentry.NoOpTransaction: boolean isFinished()
com.tekartik.sqflite.SqflitePlugin: void onQueryCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.sentry.NoOpTransaction: NoOpTransaction()
com.google.android.gms.maps.GoogleMap: void setOnCameraIdleListener(com.google.android.gms.maps.GoogleMap$OnCameraIdleListener)
androidx.core.view.ViewCompat$AccessibilityViewProperty: boolean frameworkAvailable()
kotlinx.coroutines.ExecutorCoroutineDispatcher$Key: ExecutorCoroutineDispatcher$Key()
androidx.core.view.WindowInsetsControllerCompat$Impl20: void setWindowFlag(int)
io.flutter.plugins.googlemaps.GoogleMapController: void onCircleClick(com.google.android.gms.maps.model.Circle)
androidx.window.embedding.EmbeddingCompat$Companion: EmbeddingCompat$Companion()
androidx.collection.ArraySet: ArraySet()
io.flutter.plugin.platform.PlatformPlugin: void setSystemChromeSystemUIOverlayStyle(io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle)
com.google.gson.stream.JsonReader: java.lang.String toString()
com.google.android.gms.common.internal.zzg: zzg(com.google.android.gms.common.internal.BaseGmsClient,int,android.os.Bundle)
com.google.android.gms.signin.internal.SignInClientImpl: android.os.Bundle getGetServiceRequestExtraArgs()
androidx.window.layout.SidecarCompat$FirstAttachAdapter: void onViewAttachedToWindow(android.view.View)
io.sentry.Stack: Stack(io.sentry.ILogger,io.sentry.Stack$StackItem)
androidx.versionedparcelable.VersionedParcelParcel: android.os.Parcelable readParcelable()
kotlin.jvm.internal.CallableReference: boolean isFinal()
androidx.fragment.app.FragmentManagerImpl: void animateRemoveFragment(androidx.fragment.app.Fragment,androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator,int)
io.flutter.plugins.googlemaps.TileOverlayController: java.util.Map getTileOverlayInfo()
kotlinx.coroutines.internal.InlineList: java.lang.Object constructor-impl$default(java.lang.Object,int,kotlin.jvm.internal.DefaultConstructorMarker)
com.google.android.gms.maps.internal.zzg: void moveCamera(com.google.android.gms.dynamic.IObjectWrapper)
io.flutter.view.AccessibilityBridge$SpellOutStringAttribute: AccessibilityBridge$SpellOutStringAttribute()
androidx.window.embedding.MatcherUtils: boolean wildcardMatch(java.lang.String,java.lang.String)
com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter value(java.lang.Number)
io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler: void onMessage(java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply)
io.sentry.Hub: io.sentry.protocol.SentryId captureException(java.lang.Throwable,java.lang.Object)
kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.Throwable tryCopyAndVerify(java.lang.Throwable)
com.google.common.util.concurrent.Futures$CallbackListener: Futures$CallbackListener(java.util.concurrent.Future,com.google.common.util.concurrent.FutureCallback)
com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$Waiter access$802(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Waiter)
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory: ReflectiveTypeAdapterFactory(com.google.gson.internal.ConstructorConstructor,com.google.gson.FieldNamingStrategy,com.google.gson.internal.Excluder,com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory)
com.google.android.gms.common.api.internal.zzd: com.google.android.gms.common.api.internal.LifecycleCallback getCallbackOrNull(java.lang.String,java.lang.Class)
com.google.android.gms.common.api.internal.zacr: zacr(com.google.android.gms.common.api.internal.zact,com.google.android.gms.signin.internal.zak)
com.google.common.reflect.TypeToken$4: void visitWildcardType(java.lang.reflect.WildcardType)
com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper: void setValue(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object)
com.google.common.util.concurrent.CycleDetectingLockFactory$Policies: com.google.common.util.concurrent.CycleDetectingLockFactory$Policies valueOf(java.lang.String)
io.sentry.transport.RateLimiter: io.sentry.transport.RateLimiter$DataCategory getCategoryFromItemType(java.lang.String)
io.flutter.plugin.editing.TextInputPlugin: void saveEditableSizeAndTransform(double,double,double[])
com.google.gson.internal.bind.TreeTypeAdapter$GsonContextImpl: java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type)
io.sentry.Sentry: io.sentry.ITransaction startTransaction(java.lang.String,java.lang.String,io.sentry.CustomSamplingContext)
kotlin.text.StringsKt__StringsKt: boolean contains$default(java.lang.CharSequence,java.lang.CharSequence,boolean,int,java.lang.Object)
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.dart.DartExecutor getDartExecutor()
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: SidecarWindowBackend$WindowLayoutChangeCallbackWrapper(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
io.sentry.SentryBaseEvent: void setPlatform(java.lang.String)
com.google.gson.internal.bind.TypeAdapters$31: TypeAdapters$31(com.google.gson.reflect.TypeToken,com.google.gson.TypeAdapter)
io.flutter.plugins.googlemaps.PolylineBuilder: com.google.android.gms.maps.model.PolylineOptions build()
androidx.window.layout.SidecarAdapter$Companion: androidx.window.layout.DisplayFeature translate$window_release(androidx.window.sidecar.SidecarDisplayFeature,androidx.window.sidecar.SidecarDeviceState)
com.google.gson.internal.ConstructorConstructor$3: java.lang.Object construct()
io.sentry.Scope: java.util.Queue createBreadcrumbsList(int)
io.sentry.android.core.DefaultAndroidEventProcessor: int getAvailableBlocksDep(android.os.StatFs)
io.sentry.transport.HttpConnection: io.sentry.transport.TransportResult send(io.sentry.SentryEnvelope)
io.sentry.NoOpTransaction: java.lang.Boolean isSampled()
androidx.window.layout.WindowInfoTracker$Companion: androidx.window.layout.WindowBackend windowBackend$window_release(android.content.Context)
io.sentry.protocol.Gpu: void acceptUnknownProperties(java.util.Map)
com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper: com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment newSegment(com.google.common.collect.MapMakerInternalMap,int,int)
androidx.fragment.app.Fragment$InstantiationException: Fragment$InstantiationException(java.lang.String,java.lang.Exception)
com.google.common.collect.Iterators: boolean elementsEqual(java.util.Iterator,java.util.Iterator)
com.tekartik.sqflite.operation.BaseReadOperation: java.util.List getSqlArguments()
io.sentry.protocol.SentryStackFrame: void acceptUnknownProperties(java.util.Map)
androidx.lifecycle.ViewModel: void clear()
com.google.android.gms.maps.internal.zzby: boolean isZoomGesturesEnabled()
com.google.common.base.Throwables: java.lang.reflect.Method getSizeMethod()
androidx.core.app.NotificationCompatJellybean: android.os.Bundle writeActionAndGetExtras(android.app.Notification$Builder,androidx.core.app.NotificationCompat$Action)
io.flutter.embedding.engine.dart.DartExecutor: void setMessageHandler(java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler)
io.sentry.SentryTracer: void finish()
kotlin.ranges.IntProgression: boolean isEmpty()
com.google.common.hash.ChecksumHashFunction: int access$100(com.google.common.hash.ChecksumHashFunction)
io.sentry.Scope: io.sentry.protocol.Contexts getContexts()
io.flutter.plugins.googlemaps.CircleController: CircleController(com.google.android.gms.maps.model.Circle,boolean,float)
kotlinx.coroutines.internal.LockFreeLinkedListKt: kotlinx.coroutines.internal.LockFreeLinkedListNode unwrap(java.lang.Object)
io.sentry.Session: java.lang.Object clone()
io.sentry.SentryOptions: void setMaxQueueSize(int)
io.sentry.Session: int errorCount()
io.sentry.transport.ReusableCountLatch$Sync: void decrement()
io.sentry.protocol.SentryStackFrame: java.lang.String getFunction()
com.google.android.gms.common.GoogleApiAvailability: GoogleApiAvailability()
io.sentry.android.core.AndroidOptionsInitializer: void installDefaultIntegrations(android.content.Context,io.sentry.SentryOptions,io.sentry.android.core.IBuildInfoProvider,io.sentry.android.core.ILoadClass)
io.sentry.SentryEvent: void setExceptions(java.util.List)
io.flutter.view.AccessibilityBridge$SemanticsNode: void collectRoutes(java.util.List)
com.google.android.gms.maps.internal.zzg: void setOnMarkerClickListener(com.google.android.gms.maps.internal.zzat)
io.sentry.HubAdapter: void setFingerprint(java.util.List)
com.google.common.base.Predicates$ObjectPredicate$1: java.lang.String toString()
com.google.android.gms.common.api.internal.BasePendingResult: com.google.android.gms.common.api.Result zaj(com.google.android.gms.common.api.internal.BasePendingResult)
com.google.common.collect.MapMakerInternalMap$Segment: java.lang.Object replace(java.lang.Object,int,java.lang.Object)
androidx.fragment.app.Fragment: android.view.LayoutInflater performGetLayoutInflater(android.os.Bundle)
kotlinx.coroutines.android.HandlerContext: kotlinx.coroutines.android.HandlerContext getImmediate()
com.google.gson.JsonArray: java.util.Iterator iterator()
kotlinx.coroutines.internal.UndeliveredElementException: UndeliveredElementException(java.lang.String,java.lang.Throwable)
com.google.android.gms.common.api.internal.GoogleApiManager: com.google.android.gms.common.api.Status zaH(com.google.android.gms.common.api.internal.ApiKey,com.google.android.gms.common.ConnectionResult)
androidx.fragment.app.DialogFragment: android.view.LayoutInflater onGetLayoutInflater(android.os.Bundle)
kotlinx.coroutines.EventLoop: void shutdown()
kotlin.collections.EmptySet: int size()
io.flutter.plugin.platform.PlatformViewsController$1: void setDirection(int,int)
androidx.fragment.app.FragmentManagerViewModel$1: FragmentManagerViewModel$1()
io.sentry.SentryTraceHeader: io.sentry.SpanId getSpanId()
com.google.android.gms.common.ConnectionResult: ConnectionResult(int,android.app.PendingIntent,java.lang.String)
com.tekartik.sqflite.operation.BaseReadOperation: boolean getContinueOnError()
com.google.common.collect.MapMakerInternalMap$Segment: com.google.common.collect.MapMakerInternalMap$InternalEntry copyEntry(com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry)
io.sentry.NoOpHub: void setSpanContext(java.lang.Throwable,io.sentry.ISpan,java.lang.String)
com.google.gson.Gson: com.google.gson.TypeAdapter doubleAdapter(boolean)
kotlinx.coroutines.channels.Closed: kotlinx.coroutines.internal.Symbol tryResumeReceive(java.lang.Object,kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp)
kotlinx.coroutines.ExecutorCoroutineDispatcherImpl: void cancelJobOnRejection(kotlin.coroutines.CoroutineContext,java.util.concurrent.RejectedExecutionException)
io.sentry.protocol.Contexts: Contexts()
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: AccessibilityViewEmbedder$ReflectionAccessors(io.flutter.view.AccessibilityViewEmbedder$1)
com.google.android.gms.maps.model.zzi: zzi()
androidx.core.app.NotificationCompat$Builder: androidx.core.app.NotificationCompat$Builder setAutoCancel(boolean)
kotlinx.coroutines.InactiveNodeList: kotlinx.coroutines.NodeList getList()
com.google.android.gms.internal.maps.zzy: void zzr(boolean)
com.google.gson.internal.bind.TypeAdapters$5: TypeAdapters$5()
io.flutter.view.AccessibilityBridge: AccessibilityBridge(android.view.View,io.flutter.embedding.engine.systemchannels.AccessibilityChannel,android.view.accessibility.AccessibilityManager,android.content.ContentResolver,io.flutter.view.AccessibilityViewEmbedder,io.flutter.plugin.platform.PlatformViewsAccessibilityDelegate)
io.flutter.plugin.common.EventChannel: EventChannel(io.flutter.plugin.common.BinaryMessenger,java.lang.String)
androidx.collection.MapCollections$MapIterator: int hashCode()
com.tekartik.sqflite.SqflitePlugin: void onCloseDatabaseCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.embedding.engine.systemchannels.RestorationChannel: RestorationChannel(io.flutter.embedding.engine.dart.DartExecutor,boolean)
kotlinx.coroutines.DefaultExecutor: void run()
com.tekartik.sqflite.SqlCommand: java.lang.String[] getQuerySqlArguments()
io.flutter.embedding.engine.dart.DartExecutor: void onAttachedToJNI()
androidx.fragment.app.Fragment: android.view.animation.Animation onCreateAnimation(int,boolean,int)
com.google.android.gms.maps.GoogleMap: void moveCamera(com.google.android.gms.maps.CameraUpdate)
androidx.loader.app.LoaderManagerImpl$LoaderViewModel$1: LoaderManagerImpl$LoaderViewModel$1()
io.sentry.IpAddressUtils: boolean isDefault(java.lang.String)
kotlin.coroutines.CombinedContext: boolean equals(java.lang.Object)
io.sentry.flutter.R$color: R$color()
io.sentry.DateUtils: java.lang.String getTimestamp(java.util.Date)
androidx.window.core.Version: int getMinor()
com.google.common.base.MoreObjects$ToStringHelper: MoreObjects$ToStringHelper(java.lang.String)
com.tekartik.sqflite.LogLevel: boolean hasVerboseLevel(int)
kotlinx.coroutines.internal.StackTraceRecoveryKt: kotlin.Pair causeAndStacktrace(java.lang.Throwable)
androidx.core.app.NotificationCompat$Builder: androidx.core.app.NotificationCompat$Builder setLocalOnly(boolean)
io.sentry.SentryEnvelopeItemHeader: int getLength()
io.flutter.embedding.engine.FlutterEngine$1: FlutterEngine$1(io.flutter.embedding.engine.FlutterEngine)
com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment: java.lang.ref.ReferenceQueue access$100(com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment)
kotlinx.coroutines.channels.AbstractChannel$enqueueReceiveInternal$$inlined$addLastIfPrevAndIf$1: java.lang.Object prepare(java.lang.Object)
com.google.gson.internal.LinkedTreeMap: java.util.Set keySet()
io.sentry.SynchronizedCollection: boolean contains(java.lang.Object)
io.sentry.transport.StdoutTransport: void flush(long)
kotlin.jvm.internal.TypeIntrinsics: int getFunctionArity(java.lang.Object)
com.google.android.gms.common.internal.ClientSettings$Builder: com.google.android.gms.common.internal.ClientSettings$Builder zab(android.accounts.Account)
kotlinx.coroutines.JobSupport: boolean childCancelled(java.lang.Throwable)
com.google.common.collect.MapMakerInternalMap$Segment: void drainKeyReferenceQueue(java.lang.ref.ReferenceQueue)
io.sentry.SynchronizedQueue: SynchronizedQueue(java.util.Queue)
kotlinx.coroutines.CompletedContinuation: boolean equals(java.lang.Object)
kotlinx.coroutines.DispatchedTaskKt: void dispatch(kotlinx.coroutines.DispatchedTask,int)
com.google.android.gms.dynamic.DeferredLifecycleHelper: void onStart()
io.sentry.HubAdapter: void close()
com.google.android.gms.maps.GoogleMap: void setOnMapClickListener(com.google.android.gms.maps.GoogleMap$OnMapClickListener)
com.google.android.gms.maps.CameraUpdate: CameraUpdate(com.google.android.gms.dynamic.IObjectWrapper)
com.google.common.hash.BloomFilterStrategies: boolean mightContain(java.lang.Object,com.google.common.hash.Funnel,int,com.google.common.hash.BloomFilterStrategies$LockFreeBitArray)
kotlin.coroutines.AbstractCoroutineContextKey: boolean isSubKey$kotlin_stdlib(kotlin.coroutines.CoroutineContext$Key)
kotlin.text.StringsKt__StringsKt: java.lang.CharSequence trim(java.lang.CharSequence)
androidx.lifecycle.ViewModelStore: androidx.lifecycle.ViewModel get(java.lang.String)
androidx.fragment.app.FragmentTransition$2: FragmentTransition$2(java.lang.Object,androidx.fragment.app.FragmentTransitionImpl,android.view.View,androidx.fragment.app.Fragment,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.lang.Object)
com.google.common.hash.Hashing$ChecksumType$1: java.util.zip.Checksum get()
com.google.android.gms.common.api.internal.NonGmsServiceBrokerClient: void zac(java.lang.String)
io.sentry.protocol.SdkVersion: void addPackage(java.lang.String,java.lang.String)
com.google.gson.ExclusionStrategy: boolean shouldSkipField(com.google.gson.FieldAttributes)
com.google.android.gms.common.api.internal.zaad: void zae(int,java.lang.String)
io.sentry.NoOpSentryClient: void captureUserFeedback(io.sentry.UserFeedback)
io.flutter.view.AccessibilityBridge$2: void onAccessibilityStateChanged(boolean)
com.google.android.gms.common.api.Status: Status(com.google.android.gms.common.ConnectionResult,java.lang.String,int)
io.sentry.NoOpSentryClient: void captureSession(io.sentry.Session,java.lang.Object)
io.flutter.plugins.googlemaps.GoogleMapController: void setMyLocationButtonEnabled(boolean)
kotlin.text.StringsKt__StringsKt: java.lang.String substring(java.lang.CharSequence,kotlin.ranges.IntRange)
com.google.gson.internal.bind.TypeAdapters$11: TypeAdapters$11()
com.google.android.gms.maps.internal.zzg: void setPadding(int,int,int,int)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.View$OnApplyWindowInsetsListener getInsetsListener()
androidx.collection.ArrayMap: androidx.collection.MapCollections getCollection()
androidx.window.embedding.SplitController: void initialize(android.content.Context,int)
kotlin.jvm.internal.CallableReference: java.lang.String getSignature()
com.google.gson.stream.JsonWriter: void setHtmlSafe(boolean)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding: void onSaveInstanceState(android.os.Bundle)
com.google.common.collect.MapMakerInternalMap$HashIterator: boolean hasNext()
com.google.android.gms.common.api.internal.zabk: zabk(android.os.Handler)
kotlinx.coroutines.channels.ConflatedChannel: boolean isBufferAlwaysEmpty()
com.google.android.gms.dynamic.DeferredLifecycleHelper: void showGooglePlayUnavailableMessage(android.widget.FrameLayout)
io.flutter.view.AccessibilityBridge: int access$1172(io.flutter.view.AccessibilityBridge,int)
io.flutter.embedding.engine.FlutterOverlaySurface: FlutterOverlaySurface(int,android.view.Surface)
kotlin.NoWhenBranchMatchedException: NoWhenBranchMatchedException()
io.flutter.plugin.platform.PlatformPlugin: void updateSystemUiOverlays()
kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt$createCoroutineUnintercepted$$inlined$createCoroutineFromSuspendFunction$IntrinsicsKt__IntrinsicsJvmKt$3: java.lang.Object invokeSuspend(java.lang.Object)
com.google.gson.stream.JsonReader: void skipUnquotedValue()
io.sentry.Dsn: Dsn(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void addIsDisplayingFlutterUiListener(io.flutter.embedding.engine.renderer.FlutterUiDisplayListener)
io.sentry.SentryTracer: boolean isFinished()
io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler: void onMessage(java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply)
io.sentry.android.core.EnvelopeFileObserver$CachedEnvelopeHint: void setRetry(boolean)
com.google.android.gms.internal.maps.zzj: boolean zzy(com.google.android.gms.internal.maps.zzl)
com.google.android.gms.common.internal.zah: void onConnected(android.os.Bundle)
androidx.fragment.app.FragmentManagerImpl: void dispatchOnFragmentSaveInstanceState(androidx.fragment.app.Fragment,android.os.Bundle,boolean)
com.google.common.reflect.Types$JavaVersion: java.lang.reflect.Type newArrayType(java.lang.reflect.Type)
io.sentry.protocol.SentrySpan: boolean isFinished()
kotlin.LazyKt__LazyJVMKt: kotlin.Lazy lazy(kotlin.jvm.functions.Function0)
androidx.fragment.app.FragmentHostCallback: void onSupportInvalidateOptionsMenu()
kotlinx.coroutines.UndispatchedMarker: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)
androidx.collection.ArrayMap$1: ArrayMap$1(androidx.collection.ArrayMap)
com.google.common.collect.MapMakerInternalMap$Segment: java.lang.Object getLiveValue(com.google.common.collect.MapMakerInternalMap$InternalEntry)
androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage()
io.sentry.Stack$StackItem: Stack$StackItem(io.sentry.SentryOptions,io.sentry.ISentryClient,io.sentry.Scope)
kotlinx.coroutines.ExecutorCoroutineDispatcherImpl: ExecutorCoroutineDispatcherImpl(java.util.concurrent.Executor)
io.sentry.protocol.SentryException: void setStacktrace(io.sentry.protocol.SentryStackTrace)
io.flutter.embedding.engine.dart.DartExecutor$DartEntrypoint: DartExecutor$DartEntrypoint(java.lang.String,java.lang.String)
io.flutter.embedding.engine.renderer.FlutterRenderer$1: void onFlutterUiDisplayed()
io.flutter.plugin.platform.PlatformViewsController: void flushAllViews()
io.sentry.protocol.Contexts: void setRuntime(io.sentry.protocol.SentryRuntime)
kotlinx.coroutines.DefaultExecutor: java.lang.Thread getThread()
io.flutter.plugin.platform.VirtualDisplayController: VirtualDisplayController(android.content.Context,io.flutter.plugin.platform.AccessibilityEventsDelegate,android.hardware.display.VirtualDisplay,io.flutter.plugin.platform.PlatformViewFactory,android.view.Surface,io.flutter.view.TextureRegistry$SurfaceTextureEntry,android.view.View$OnFocusChangeListener,int,java.lang.Object)
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action[] values()
io.sentry.util.CollectionUtils: java.util.Map newConcurrentHashMap(java.util.Map)
com.google.android.gms.common.internal.ClientSettings: ClientSettings(android.accounts.Account,java.util.Set,java.util.Map,int,android.view.View,java.lang.String,java.lang.String,com.google.android.gms.signin.SignInOptions,boolean)
com.google.android.gms.maps.MapsInitializer: MapsInitializer()
androidx.fragment.app.FragmentController: void dispatchStart()
kotlin.jvm.internal.CallableReference$NoReceiver: CallableReference$NoReceiver()
io.sentry.Sentry: boolean isEnabled()
kotlinx.coroutines.channels.ArrayChannel: java.lang.Object pollInternal()
com.google.android.gms.dynamite.DynamiteModule: int getLocalVersion(android.content.Context,java.lang.String)
androidx.lifecycle.LifecycleDispatcher: void init(android.content.Context)
kotlin.collections.EmptyList: boolean add(java.lang.Object)
com.google.android.gms.maps.internal.zzby: boolean isCompassEnabled()
com.google.android.gms.common.api.internal.NonGmsServiceBrokerClient: void onUserSignOut(com.google.android.gms.common.internal.BaseGmsClient$SignOutCallbacks)
com.google.common.util.concurrent.AbstractFuture: void complete(com.google.common.util.concurrent.AbstractFuture)
com.google.android.gms.maps.MapsInitializer: int initialize(android.content.Context)
com.google.gson.internal.$Gson$Types: java.lang.reflect.Type getArrayComponentType(java.lang.reflect.Type)
androidx.fragment.app.FragmentManagerImpl: void dispatchPrimaryNavigationFragmentChanged()
com.google.gson.internal.bind.TypeAdapters$20: TypeAdapters$20()
androidx.activity.ComponentActivity$1: ComponentActivity$1(androidx.activity.ComponentActivity)
androidx.lifecycle.ClassesInfoCache: androidx.lifecycle.ClassesInfoCache$CallbackInfo createInfo(java.lang.Class,java.lang.reflect.Method[])
androidx.fragment.app.FragmentActivity$HostCallbacks: void onAttachFragment(androidx.fragment.app.Fragment)
kotlin.jvm.internal.FunctionReference: boolean isInline()
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterOverlaySurface createOverlaySurface()
androidx.fragment.app.FragmentTransition: void scheduleTargetChange(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,androidx.fragment.app.Fragment,android.view.View,java.util.ArrayList,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList)
io.sentry.android.core.MainLooperHandler: void post(java.lang.Runnable)
io.flutter.plugins.googlemaps.GoogleMapsPlugin: androidx.lifecycle.Lifecycle access$100(io.flutter.plugins.googlemaps.GoogleMapsPlugin)
com.google.android.gms.common.internal.zag: com.google.android.gms.common.internal.zag zad(com.google.android.gms.common.api.internal.LifecycleFragment,android.content.Intent,int)
com.google.android.gms.maps.GoogleMapOptions: com.google.android.gms.maps.GoogleMapOptions tiltGesturesEnabled(boolean)
io.sentry.android.core.SentryInitProvider: void attachInfo(android.content.Context,android.content.pm.ProviderInfo)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: ImeSyncDeferringInsetsCallback(android.view.View,int,int)
androidx.activity.ComponentActivity$NonConfigurationInstances: ComponentActivity$NonConfigurationInstances()
io.sentry.adapters.ContextsSerializerAdapter: com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,com.google.gson.JsonSerializationContext)
io.flutter.plugins.googlemaps.Convert: java.lang.Object polylineIdToJson(java.lang.String)
io.flutter.plugins.googlemaps.CircleBuilder: void setConsumeTapEvents(boolean)
androidx.collection.MapCollections$EntrySet: boolean contains(java.lang.Object)
io.sentry.IHub: void addBreadcrumb(io.sentry.Breadcrumb)
io.flutter.embedding.android.TransparencyMode: io.flutter.embedding.android.TransparencyMode valueOf(java.lang.String)
io.sentry.DateUtils: java.util.Date getDateTimeWithMillisPrecision(java.lang.String)
androidx.collection.SimpleArrayMap: int hashCode()
kotlinx.coroutines.JobSupport: void notifyCompletion(kotlinx.coroutines.NodeList,java.lang.Throwable)
com.google.android.gms.dynamite.zzr: com.google.android.gms.dynamic.IObjectWrapper zze(com.google.android.gms.dynamic.IObjectWrapper,java.lang.String,int,com.google.android.gms.dynamic.IObjectWrapper)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: boolean onRequestPermissionsResult(int,java.lang.String[],int[])
androidx.window.layout.WindowInfoTracker: kotlinx.coroutines.flow.Flow windowLayoutInfo(android.app.Activity)
io.sentry.protocol.Device: void setScreenDensity(java.lang.Float)
com.google.android.gms.dynamite.DynamiteModule$DynamiteLoaderClassLoader: DynamiteModule$DynamiteLoaderClassLoader()
com.google.android.gms.common.internal.zza: void zzc()
androidx.collection.MapCollections$ValuesCollection: java.util.Iterator iterator()
com.google.gson.FieldAttributes: boolean isSynthetic()
com.google.common.collect.ImmutableCollection: int internalArrayStart()
com.google.gson.internal.bind.TypeAdapters$7: java.lang.Object read(com.google.gson.stream.JsonReader)
io.sentry.SystemOutLogger: SystemOutLogger()
io.flutter.embedding.android.FlutterView: void removeFlutterEngineAttachmentListener(io.flutter.embedding.android.FlutterView$FlutterEngineAttachmentListener)
androidx.window.embedding.ExtensionEmbeddingBackend: void unregisterRule(androidx.window.embedding.EmbeddingRule)
androidx.core.view.ViewCompat: boolean isAttachedToWindow(android.view.View)
io.sentry.CircularFifoQueue: boolean isEmpty()
io.sentry.SentryBaseEvent: void setServerName(java.lang.String)
io.flutter.plugins.googlemaps.MarkerController: void setAnchor(float,float)
androidx.fragment.app.Fragment: void performMultiWindowModeChanged(boolean)
io.sentry.protocol.Device: java.lang.Integer getScreenHeightPixels()
io.sentry.HubAdapter: io.sentry.ISpan getSpan()
androidx.window.layout.DisplayCompatHelperApi28: int safeInsetLeft(android.view.DisplayCutout)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView: boolean onInterceptTouchEvent(android.view.MotionEvent)
com.google.android.gms.internal.maps.zzj: void zzq(int)
kotlin.text.StringsKt__StringsKt: kotlin.sequences.Sequence splitToSequence(java.lang.CharSequence,java.lang.String[],boolean,int)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization[] values()
com.google.common.collect.MapMakerInternalMap: com.google.common.collect.MapMakerInternalMap$WeakValueReference unsetWeakValueReference()
io.sentry.UserFeedback: void setEmail(java.lang.String)
kotlin.Result$Companion: Result$Companion()
kotlinx.coroutines.DebugStringsKt: java.lang.String getHexAddress(java.lang.Object)
com.google.android.gms.maps.GoogleMap: void setOnMapLongClickListener(com.google.android.gms.maps.GoogleMap$OnMapLongClickListener)
androidx.fragment.app.DialogFragment: void onDestroyView()
kotlin.collections.MapsKt__MapsKt: void putAll(java.util.Map,java.lang.Iterable)
com.google.android.gms.maps.internal.zzby: boolean isRotateGesturesEnabled()
io.sentry.exception.ExceptionMechanismException: boolean isSnapshot()
com.google.gson.LongSerializationPolicy: com.google.gson.LongSerializationPolicy valueOf(java.lang.String)
com.google.common.base.Predicates$ObjectPredicate$4: boolean apply(java.lang.Object)
io.sentry.android.core.SystemEventsBreadcrumbsIntegration: java.util.List getDefaultActions()
com.google.gson.internal.bind.JsonTreeWriter: com.google.gson.stream.JsonWriter beginArray()
io.sentry.SynchronizedCollection: java.util.Collection decorated()
kotlinx.coroutines.internal.ThreadState: void restore(kotlin.coroutines.CoroutineContext)
com.google.gson.internal.bind.JsonTreeWriter$1: void flush()
io.sentry.NoOpSpan: void setStatus(io.sentry.SpanStatus)
com.google.android.gms.common.api.internal.zacg: void run()
kotlinx.coroutines.internal.LockFreeLinkedListNode: java.lang.String toString()
androidx.arch.core.internal.SafeIterableMap: int hashCode()
androidx.fragment.app.FragmentManagerImpl: void restoreSaveState(android.os.Parcelable)
io.sentry.HostnameCache: void handleCacheUpdateFailure()
com.google.android.gms.common.api.Status: Status(int,int,java.lang.String,android.app.PendingIntent,com.google.android.gms.common.ConnectionResult)
io.sentry.SentryOptions: void setHostnameVerifier(javax.net.ssl.HostnameVerifier)
kotlinx.coroutines.ChildHandleNode: java.lang.Object invoke(java.lang.Object)
com.google.common.util.concurrent.CycleDetectingLockFactory$Policies$2: CycleDetectingLockFactory$Policies$2(java.lang.String,int)
io.sentry.SynchronizedQueue: io.sentry.SynchronizedQueue synchronizedQueue(java.util.Queue)
com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object)
kotlin.jvm.internal.CallableReference: java.lang.Object getBoundReceiver()
com.google.gson.internal.bind.TypeAdapters: TypeAdapters()
io.flutter.plugins.sharedpreferences.MethodCallHandlerImpl: java.util.List decodeList(java.lang.String)
io.flutter.embedding.engine.systemchannels.PlatformChannel: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode access$400(io.flutter.embedding.engine.systemchannels.PlatformChannel,java.lang.String)
io.sentry.ITransaction: java.lang.Boolean isSampled()
androidx.arch.core.internal.SafeIterableMap$DescendingIterator: SafeIterableMap$DescendingIterator(androidx.arch.core.internal.SafeIterableMap$Entry,androidx.arch.core.internal.SafeIterableMap$Entry)
com.google.common.util.concurrent.AbstractFuture: boolean access$300()
kotlin.collections.ArraysKt___ArraysKt: java.lang.Object first(java.lang.Object[])
com.google.android.gms.common.api.internal.GoogleApiManager: android.os.Handler zaf(com.google.android.gms.common.api.internal.GoogleApiManager)
io.flutter.embedding.engine.FlutterJNI: void setViewportMetrics(float,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int[],int[],int[])
io.sentry.NoOpTransportFactory: io.sentry.transport.ITransport create(io.sentry.SentryOptions,io.sentry.RequestDetails)
androidx.window.layout.SidecarWindowBackend$Companion: SidecarWindowBackend$Companion()
io.sentry.protocol.Mechanism: Mechanism(java.lang.Thread)
kotlinx.coroutines.CoroutineContextKt: kotlin.coroutines.CoroutineContext newCoroutineContext(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext)
androidx.lifecycle.ProcessLifecycleOwner: void activityStarted()
io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder: io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder setUse24HourFormat(boolean)
io.sentry.SpanContext: void setOperation(java.lang.String)
io.flutter.plugins.googlemaps.Convert: com.google.android.gms.maps.model.BitmapDescriptor getBitmapFromBytes(java.util.List)
androidx.versionedparcelable.VersionedParcelParcel: byte[] readByteArray()
kotlin.jvm.internal.CallableReference: java.util.List getAnnotations()
com.google.gson.reflect.TypeToken: java.lang.String toString()
androidx.collection.ArrayMap: ArrayMap()
com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper: MapMakerInternalMap$StrongKeyWeakValueEntry$Helper()
io.sentry.transport.QueuedThreadPoolExecutor$CancelledFuture: QueuedThreadPoolExecutor$CancelledFuture(io.sentry.transport.QueuedThreadPoolExecutor$1)
com.google.common.collect.ObjectArrays: java.lang.Object[] newArray(java.lang.Object[],int)
io.flutter.embedding.android.FlutterView: io.flutter.embedding.android.FlutterView$ZeroSides calculateShouldZeroSides()
androidx.window.layout.ExtensionsWindowLayoutInfoAdapter: androidx.window.layout.WindowLayoutInfo translate$window_release(android.app.Activity,androidx.window.extensions.layout.WindowLayoutInfo)
io.sentry.protocol.Device: void setArchs(java.lang.String[])
kotlinx.coroutines.flow.AbstractFlow$collect$1: AbstractFlow$collect$1(kotlinx.coroutines.flow.AbstractFlow,kotlin.coroutines.Continuation)
com.google.android.gms.maps.internal.zzb: com.google.android.gms.dynamic.IObjectWrapper newLatLngZoom(com.google.android.gms.maps.model.LatLng,float)
com.google.gson.JsonElement: java.lang.Number getAsNumber()
io.sentry.SentryTracer: void setStatus(io.sentry.SpanStatus)
kotlinx.coroutines.scheduling.CoroutineScheduler: boolean addToGlobalQueue(kotlinx.coroutines.scheduling.Task)
io.sentry.protocol.Device: java.lang.Integer getScreenDpi()
androidx.fragment.app.FragmentTransitionCompat21$2: void onTransitionStart(android.transition.Transition)
androidx.window.layout.SidecarCompat$TranslatingCallback: void onDeviceStateChanged(androidx.window.sidecar.SidecarDeviceState)
androidx.lifecycle.ReflectiveGenericLifecycleObserver: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)
io.flutter.plugins.googlemaps.TileOverlaysController: TileOverlaysController(io.flutter.plugin.common.MethodChannel)
com.google.gson.Gson$4: java.util.concurrent.atomic.AtomicLong read(com.google.gson.stream.JsonReader)
io.sentry.protocol.Contexts: void setOperatingSystem(io.sentry.protocol.OperatingSystem)
com.google.android.gms.maps.model.Polygon: void setHoles(java.util.List)
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType: FlutterRenderer$DisplayFeatureType(java.lang.String,int,int)
io.flutter.embedding.android.FlutterActivity: io.flutter.embedding.android.TransparencyMode getTransparencyMode()
com.google.gson.internal.LinkedTreeMap$EntrySet$1: LinkedTreeMap$EntrySet$1(com.google.gson.internal.LinkedTreeMap$EntrySet)
io.sentry.exception.InvalidSentryTraceHeaderException: java.lang.String getSentryTraceHeader()
kotlin.ranges.IntRange: int hashCode()
io.sentry.protocol.DebugImage: java.lang.String getCodeId()
com.google.android.gms.common.zzh: zzh(byte[])
io.flutter.plugins.googlemaps.MarkerController: void showInfoWindow()
io.sentry.protocol.Device$DeviceOrientation: Device$DeviceOrientation(java.lang.String,int)
io.sentry.protocol.Mechanism: void setHandled(java.lang.Boolean)
kotlinx.coroutines.scheduling.CoroutineScheduler$Companion: CoroutineScheduler$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
com.google.gson.internal.bind.JsonTreeReader: void beginArray()
com.google.android.gms.common.zzk: zzk(byte[])
com.google.android.gms.maps.model.PolylineOptions: com.google.android.gms.maps.model.Cap getEndCap()
com.google.android.gms.maps.model.CameraPosition$Builder: com.google.android.gms.maps.model.CameraPosition$Builder zoom(float)
io.sentry.android.core.AndroidTransportGate: AndroidTransportGate(android.content.Context,io.sentry.ILogger)
kotlinx.coroutines.internal.LockFreeLinkedListNode: void helpRemovePrev()
androidx.window.embedding.SplitController: void registerRule(androidx.window.embedding.EmbeddingRule)
io.sentry.SentryTraceHeader: io.sentry.protocol.SentryId getTraceId()
com.google.android.gms.common.internal.ClientSettings$Builder: com.google.android.gms.common.internal.ClientSettings$Builder zaa(java.util.Collection)
com.google.gson.internal.bind.TypeAdapters$24: java.util.UUID read(com.google.gson.stream.JsonReader)
io.flutter.embedding.engine.systemchannels.RestorationChannel: void clearData()
com.google.gson.JsonArray: com.google.gson.JsonArray deepCopy()
kotlinx.coroutines.internal.DispatchedContinuation: void cancelCompletedResult$kotlinx_coroutines_core(java.lang.Object,java.lang.Throwable)
com.google.android.gms.maps.internal.zzl: void onSaveInstanceState(android.os.Bundle)
com.google.gson.internal.bind.TypeAdapters$21: java.net.URL read(com.google.gson.stream.JsonReader)
io.flutter.embedding.android.FlutterSurfaceView: void connectSurfaceToRenderer()
com.google.gson.FieldNamingPolicy: FieldNamingPolicy(java.lang.String,int,com.google.gson.FieldNamingPolicy$1)
com.google.common.io.Files$FilePredicate: Files$FilePredicate(java.lang.String,int)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: void onNewIntent(android.content.Intent)
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel: void setPlatformViewsHandler(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewsHandler)
androidx.fragment.app.FragmentTransaction: FragmentTransaction()
io.flutter.plugin.platform.VirtualDisplayController$1: void onViewDetachedFromWindow(android.view.View)
androidx.window.embedding.EmbeddingAdapter: java.util.List translate(java.util.List)
com.google.android.gms.common.api.internal.zai: zai(int)
kotlinx.coroutines.internal.ThreadSafeHeap: kotlinx.coroutines.internal.ThreadSafeHeapNode firstImpl()
com.google.gson.JsonArray: int size()
com.google.android.gms.maps.GoogleMapOptions: com.google.android.gms.maps.GoogleMapOptions latLngBoundsForCameraTarget(com.google.android.gms.maps.model.LatLngBounds)
com.google.android.gms.internal.tasks.zza: zza(android.os.Looper)
kotlinx.coroutines.CancellableContinuation$DefaultImpls: java.lang.Object tryResume$default(kotlinx.coroutines.CancellableContinuation,java.lang.Object,java.lang.Object,int,java.lang.Object)
kotlinx.coroutines.AbstractCoroutine: void onCompleted(java.lang.Object)
io.sentry.OptionsContainer: io.sentry.OptionsContainer create(java.lang.Class)
androidx.fragment.app.FragmentState$1: FragmentState$1()
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object invoke(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.Continuation)
io.sentry.android.core.ANRWatchDog: void run()
kotlin.text.StringsKt__StringsJVMKt: boolean isBlank(java.lang.CharSequence)
io.flutter.view.AccessibilityBridge$SemanticsNode: android.text.SpannableString createSpannableString(java.lang.String,java.util.List)
com.google.android.gms.maps.model.PolylineOptions: PolylineOptions()
io.flutter.embedding.engine.dart.DartMessenger: DartMessenger(io.flutter.embedding.engine.FlutterJNI,io.flutter.embedding.engine.dart.DartMessenger$TaskQueueFactory)
com.google.android.gms.common.api.internal.BackgroundDetector: void onActivityPaused(android.app.Activity)
kotlinx.coroutines.channels.ArrayChannel: java.lang.String getBufferDebugString()
com.google.gson.internal.PreJava9DateFormatProvider: java.lang.String getDatePartOfDateTimePattern(int)
com.google.android.gms.internal.maps.zzv: java.lang.String zzj()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPostResumed(android.app.Activity)
io.flutter.embedding.android.FlutterView: void autofill(android.util.SparseArray)
io.flutter.plugins.connectivity.ConnectivityMethodChannelHandler: void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.plugins.googlemaps.PolylineController: void remove()
kotlinx.coroutines.JobSupport: void completeStateFinalization(kotlinx.coroutines.Incomplete,java.lang.Object)
io.flutter.embedding.engine.FlutterJNI: void setRefreshRateFPS(float)
io.sentry.protocol.SentryStackFrame: SentryStackFrame()
androidx.lifecycle.LiveData$ObserverWrapper: void activeStateChanged(boolean)
com.tekartik.sqflite.operation.BatchOperation: java.lang.String getMethod()
com.google.android.gms.common.api.UnsupportedApiCallException: java.lang.String getMessage()
com.google.gson.JsonPrimitive: short getAsShort()
com.google.android.gms.maps.model.MarkerOptions: float getAnchorV()
com.google.gson.internal.reflect.ReflectionAccessor: void makeAccessible(java.lang.reflect.AccessibleObject)
androidx.fragment.app.DialogFragment: void onDismiss(android.content.DialogInterface)
com.google.common.hash.HashCode$IntHashCode: int asInt()
io.flutter.embedding.engine.FlutterJNI: void setAccessibilityFeatures(int)
com.google.gson.JsonObject: void addProperty(java.lang.String,java.lang.Boolean)
io.flutter.embedding.engine.systemchannels.TextInputChannel: void go(int)
com.google.gson.GsonBuilder: com.google.gson.GsonBuilder disableInnerClassSerialization()
com.google.android.gms.maps.model.zzg: java.lang.Object createFromParcel(android.os.Parcel)
androidx.collection.SparseArrayCompat: int keyAt(int)
androidx.collection.MapCollections: java.lang.Object[] toArrayHelper(int)
com.google.android.gms.maps.GoogleMapOptions: com.google.android.gms.maps.GoogleMapOptions rotateGesturesEnabled(boolean)
io.flutter.embedding.engine.FlutterJNI: void notifyLowMemoryWarning()
com.google.gson.internal.bind.TypeAdapters$23: java.net.InetAddress read(com.google.gson.stream.JsonReader)
com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of()
com.google.android.gms.common.internal.zan: zan()
io.flutter.plugin.editing.TextEditingDelta: TextEditingDelta(java.lang.CharSequence,int,int,java.lang.CharSequence,int,int,int,int)
io.flutter.view.AccessibilityViewEmbedder$ViewAndId: boolean equals(java.lang.Object)
com.google.android.gms.common.api.internal.zabo: void run()
kotlin.collections.EmptyList: boolean addAll(java.util.Collection)
com.google.common.collect.ImmutableList$SubList: ImmutableList$SubList(com.google.common.collect.ImmutableList,int,int)
androidx.window.core.Bounds: boolean isZero()
kotlinx.coroutines.internal.ThreadContextKt: java.lang.Object updateThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)
androidx.window.embedding.ExtensionEmbeddingBackend$Companion: boolean isExtensionVersionSupported(java.lang.Integer)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: void attachToActivityInternal(android.app.Activity,androidx.lifecycle.Lifecycle)
com.google.common.collect.AbstractMapEntry: AbstractMapEntry()
com.google.android.gms.internal.maps.zzv: void zzo(float)
io.sentry.SentryOptions: io.sentry.SentryOptions$Proxy getProxy()
com.google.android.gms.internal.maps.zzv: void zzz(boolean)
io.flutter.plugin.common.StringCodec: java.nio.ByteBuffer encodeMessage(java.lang.Object)
io.sentry.HubAdapter: void startSession()
androidx.core.os.LocaleListCompat: java.util.Locale forLanguageTagCompat(java.lang.String)
io.sentry.transport.CurrentDateProvider: long getCurrentTimeMillis()
io.sentry.Span: java.lang.String getOperation()
com.google.gson.Gson$3: java.lang.Number read(com.google.gson.stream.JsonReader)
io.sentry.Scope: void setTransaction(java.lang.String)
com.google.android.gms.common.api.internal.GoogleApiManager: void zav(com.google.android.gms.common.api.internal.GoogleApiManager,boolean)
io.sentry.SentryExceptionFactory: java.util.Deque extractExceptionQueue(java.lang.Throwable)
androidx.fragment.app.FragmentTransitionCompat21: java.lang.Object mergeTransitionsTogether(java.lang.Object,java.lang.Object,java.lang.Object)
androidx.core.os.LocaleListCompatWrapper: int hashCode()
io.flutter.embedding.android.FlutterView$1: void onAccessibilityChanged(boolean,boolean)
com.google.common.collect.RegularImmutableList: RegularImmutableList(java.lang.Object[],int)
io.sentry.protocol.Device: java.lang.Float getBatteryLevel()
androidx.lifecycle.Lifecycling: androidx.lifecycle.LifecycleEventObserver lifecycleEventObserver(java.lang.Object)
io.sentry.EnvelopeSender: void processFile(java.io.File,java.lang.Object)
androidx.window.layout.DisplayCompatHelperApi28: DisplayCompatHelperApi28()
androidx.fragment.app.FragmentState: androidx.fragment.app.Fragment instantiate(java.lang.ClassLoader,androidx.fragment.app.FragmentFactory)
io.sentry.DirectoryProcessor: DirectoryProcessor(io.sentry.ILogger,long)
io.flutter.view.AccessibilityBridge$SemanticsNode: io.flutter.view.AccessibilityBridge$SemanticsNode getAncestor(io.flutter.util.Predicate)
com.google.android.gms.common.api.internal.zabq: void zaJ(com.google.android.gms.common.api.internal.zai)
com.google.android.gms.common.api.internal.zact: com.google.android.gms.common.api.internal.zacs zac(com.google.android.gms.common.api.internal.zact)
io.sentry.DirectoryProcessor: boolean isRelevantFileName(java.lang.String)
io.flutter.FlutterInjector: io.flutter.embedding.engine.FlutterJNI$Factory getFlutterJNIFactory()
kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.CoroutineContext getContext()
com.google.gson.JsonPrimitive: java.math.BigDecimal getAsBigDecimal()
io.sentry.android.core.AndroidLogger: AndroidLogger()
com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList asImmutableList(java.lang.Object[],int)
kotlin.jvm.internal.Lambda: Lambda(int)
com.google.android.gms.common.zzf: zzf(byte[])
kotlinx.coroutines.scheduling.NanoTimeSource: long nanoTime()
com.google.android.gms.common.api.AvailabilityException: java.lang.String getMessage()
kotlinx.coroutines.internal.ExceptionsConstuctorKt: int fieldsCountOrDefault(java.lang.Class,int)
io.sentry.android.core.AppLifecycleIntegration: void addObserver(io.sentry.IHub)
kotlinx.coroutines.scheduling.CoroutineScheduler: java.lang.String toString()
io.flutter.embedding.engine.plugins.lifecycle.FlutterLifecycleAdapter: androidx.lifecycle.Lifecycle getActivityLifecycle(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding)
com.google.common.base.MoreObjects$ToStringHelper: com.google.common.base.MoreObjects$ToStringHelper addValue(java.lang.Object)
io.sentry.ISpan: java.lang.String getTag(java.lang.String)
io.sentry.SentryBaseEvent: void setSdk(io.sentry.protocol.SdkVersion)
com.google.gson.annotations.JsonAdapter: boolean nullSafe()
io.flutter.embedding.engine.FlutterJNI: void updateCustomAccessibilityActions(java.nio.ByteBuffer,java.lang.String[])
com.tekartik.sqflite.SqflitePlugin$4: void run()
kotlin.collections.EmptyList: boolean retainAll(java.util.Collection)
kotlinx.coroutines.internal.InlineList: java.lang.Object plus-FjFbRPM(java.lang.Object,java.lang.Object)
com.google.common.collect.RegularImmutableSet: boolean isHashCodeFast()
com.google.android.gms.dynamite.zzl: com.google.android.gms.dynamite.DynamiteModule$VersionPolicy$SelectionResult selectModule(android.content.Context,java.lang.String,com.google.android.gms.dynamite.DynamiteModule$VersionPolicy$IVersions)
androidx.arch.core.internal.SafeIterableMap: java.util.Iterator iterator()
kotlinx.coroutines.internal.LockFreeTaskQueueCore: long markFrozen()
androidx.collection.SimpleArrayMap: void clear()
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void idleReset(int)
io.flutter.view.AccessibilityBridge: void handleTouchExploration(float,float)
com.google.android.gms.common.internal.zzu: java.lang.String zzb()
com.google.android.gms.maps.model.PolylineOptions: com.google.android.gms.maps.model.PolylineOptions endCap(com.google.android.gms.maps.model.Cap)
io.sentry.HubAdapter: void bindClient(io.sentry.ISentryClient)
com.google.common.hash.Hashing$ChecksumType: java.lang.Object get()
androidx.fragment.app.FragmentManagerImpl: void moveFragmentToExpectedState(androidx.fragment.app.Fragment)
com.google.gson.internal.bind.TypeAdapters$29: com.google.gson.JsonElement read(com.google.gson.stream.JsonReader)
io.flutter.plugins.googlemaps.MarkerBuilder: boolean consumeTapEvents()
io.sentry.android.core.LifecycleWatcher: void onResume(androidx.lifecycle.LifecycleOwner)
io.flutter.plugin.platform.PlatformView: void onInputConnectionUnlocked()
io.sentry.Hub: io.sentry.protocol.SentryId captureEvent(io.sentry.SentryEvent,java.lang.Object)
io.flutter.embedding.android.MotionEventTracker$MotionEventId: long access$000(io.flutter.embedding.android.MotionEventTracker$MotionEventId)
com.google.android.gms.maps.model.PolylineOptions: boolean isClickable()
io.sentry.SentryOptions$Proxy: SentryOptions$Proxy(java.lang.String,java.lang.String)
androidx.fragment.app.BackStackRecord: int commitInternal(boolean)
kotlinx.coroutines.android.AndroidExceptionPreHandler: void handleException(kotlin.coroutines.CoroutineContext,java.lang.Throwable)
androidx.core.view.ViewCompat$3: java.lang.Object frameworkGet(android.view.View)
com.google.gson.internal.LinkedTreeMap$LinkedTreeMapIterator: com.google.gson.internal.LinkedTreeMap$Node nextNode()
androidx.fragment.app.Fragment: void onPrepareOptionsMenu(android.view.Menu)
io.sentry.protocol.SentrySpan: io.sentry.SpanId getSpanId()
androidx.window.embedding.SplitPairFilter: boolean equals(java.lang.Object)
androidx.arch.core.internal.SafeIterableMap$ListIterator: boolean hasNext()
io.sentry.SentryEnvelope: io.sentry.SentryEnvelope from(io.sentry.ISerializer,io.sentry.Session,io.sentry.protocol.SdkVersion)
androidx.lifecycle.LiveData: LiveData()
com.google.android.gms.common.api.internal.zabq: com.google.android.gms.common.api.Api$Client zae(com.google.android.gms.common.api.internal.zabq)
com.google.common.collect.ImmutableList: com.google.common.collect.UnmodifiableIterator iterator()
com.google.android.gms.maps.model.LatLngBounds: void writeToParcel(android.os.Parcel,int)
com.google.common.reflect.Types$JavaVersion$6: Types$JavaVersion$6()
kotlinx.coroutines.internal.LockFreeLinkedListNode: kotlinx.coroutines.internal.LockFreeLinkedListNode correctPrev(kotlinx.coroutines.internal.OpDescriptor)
io.sentry.protocol.SentryTransaction: java.util.List getSpans()
com.google.gson.internal.LinkedHashTreeMap$EntrySet: void clear()
io.sentry.NoOpEnvelopeReader: io.sentry.SentryEnvelope read(java.io.InputStream)
com.google.common.collect.MapMakerInternalMap$Segment: boolean reclaimValue(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakValueReference)
com.google.gson.internal.$Gson$Preconditions: $Gson$Preconditions()
com.google.android.gms.common.internal.BaseGmsClient: void zzg(com.google.android.gms.common.internal.BaseGmsClient,com.google.android.gms.common.ConnectionResult)
io.flutter.embedding.engine.loader.FlutterLoader$InitResult: FlutterLoader$InitResult(java.lang.String,java.lang.String,java.lang.String)
com.google.android.gms.internal.common.zzi: zzi(android.os.Looper,android.os.Handler$Callback)
androidx.window.layout.WindowMetrics: WindowMetrics(androidx.window.core.Bounds)
com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper: java.lang.reflect.Type getRuntimeTypeIfMoreSpecific(java.lang.reflect.Type,java.lang.Object)
kotlinx.coroutines.channels.ChannelKt: kotlinx.coroutines.channels.Channel Channel(int,kotlinx.coroutines.channels.BufferOverflow,kotlin.jvm.functions.Function1)
io.sentry.SentryItemType: io.sentry.SentryItemType resolve(java.lang.Object)
io.sentry.transport.TransportResult$ErrorTransportResult: boolean isSuccess()
androidx.versionedparcelable.VersionedParcelParcel: java.lang.CharSequence readCharSequence()
io.sentry.SynchronizedCollection: java.util.Iterator iterator()
com.google.common.reflect.Types$JavaVersion: com.google.common.reflect.Types$JavaVersion valueOf(java.lang.String)
io.sentry.UnknownPropertiesTypeAdapterFactory$UnknownPropertiesTypeAdapter: com.google.gson.TypeAdapter create(java.lang.Class,com.google.gson.TypeAdapter,com.google.gson.internal.Excluder,com.google.gson.FieldNamingStrategy)
androidx.fragment.app.FragmentActivity: void onPictureInPictureModeChanged(boolean)
kotlinx.coroutines.CoroutineContextKt: kotlinx.coroutines.UndispatchedCoroutine updateUndispatchedCompletion(kotlin.coroutines.Continuation,kotlin.coroutines.CoroutineContext,java.lang.Object)
io.sentry.android.core.AndroidLogger: void log(io.sentry.SentryLevel,java.lang.String,java.lang.Object[])
io.flutter.plugins.googlemaps.PolygonController: void setStrokeColor(int)
com.google.android.gms.common.internal.BaseGmsClient: com.google.android.gms.common.Feature[] getAvailableFeatures()
androidx.lifecycle.ProcessLifecycleOwner$1: void run()
io.sentry.Span: java.util.Date getStartTimestamp()
kotlin.collections.EmptyMap: void putAll(java.util.Map)
com.google.android.gms.internal.maps.zzab: void zzz(float)
kotlin.Result: boolean isFailure-impl(java.lang.Object)
io.flutter.plugins.googlemaps.PolylineBuilder: void setStartCap(com.google.android.gms.maps.model.Cap)
com.google.common.collect.MapMakerInternalMap$DummyInternalEntry: MapMakerInternalMap$DummyInternalEntry()
io.sentry.SentryBaseEvent: java.lang.String getRelease()
io.sentry.SynchronizedQueue: java.lang.Object peek()
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: int getVirtualNodeId(long)
com.google.common.util.concurrent.AbstractFuture: java.lang.Throwable tryInternalFastPathGetFailure()
kotlinx.coroutines.channels.RendezvousChannel: RendezvousChannel(kotlin.jvm.functions.Function1)
kotlinx.coroutines.scheduling.WorkQueue: long tryStealFrom(kotlinx.coroutines.scheduling.WorkQueue)
com.google.android.gms.maps.model.Gap: Gap(float)
androidx.collection.MapCollections$KeySet: boolean contains(java.lang.Object)
io.flutter.plugins.googlemaps.GoogleMapBuilder: io.flutter.plugins.googlemaps.GoogleMapController build(int,android.content.Context,io.flutter.plugin.common.BinaryMessenger,io.flutter.plugins.googlemaps.LifecycleProvider)
io.sentry.OutboxSender: void logTimeout(io.sentry.protocol.SentryId)
androidx.window.layout.FoldingFeature$OcclusionType$Companion: FoldingFeature$OcclusionType$Companion()
io.sentry.Dsn: java.lang.String getProjectId()
kotlinx.coroutines.internal.Removed: java.lang.String toString()
io.sentry.protocol.Request: void setUrl(java.lang.String)
kotlin.collections.EmptyMap: java.util.Set getEntries()
com.google.gson.internal.bind.TypeAdapters$11: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
io.sentry.Session: Session(java.lang.String,io.sentry.protocol.User,java.lang.String,java.lang.String)
com.google.gson.internal.Excluder: com.google.gson.internal.Excluder withVersion(double)
com.google.android.gms.common.api.Api$AnyClientKey: Api$AnyClientKey()
com.google.gson.internal.bind.TypeAdapters$5: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
com.google.common.collect.MapMakerInternalMap$Strength$1: com.google.common.base.Equivalence defaultEquivalence()
com.google.android.gms.maps.internal.zzbg: zzbg()
androidx.fragment.app.Fragment: androidx.savedstate.SavedStateRegistry getSavedStateRegistry()
com.google.common.hash.LittleEndianByteArray$JavaLittleEndianBytes$1: long getLongLittleEndian(byte[],int)
com.google.android.gms.common.api.internal.zabu: void onReportServiceBinding(com.google.android.gms.common.ConnectionResult)
io.flutter.plugins.googlemaps.Convert: java.util.Map toMap(java.lang.Object)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView$1: void onGlobalFocusChanged(android.view.View,android.view.View)
io.sentry.SentryOptions: void setRelease(java.lang.String)
io.sentry.Hub: void setFingerprint(java.util.List)
io.sentry.DuplicateEventDetectionEventProcessor: DuplicateEventDetectionEventProcessor(io.sentry.SentryOptions)
kotlin.internal.jdk7.JDK7PlatformImplementations: boolean sdkIsNullOrAtLeast(int)
com.google.android.gms.maps.UiSettings: boolean isScrollGesturesEnabled()
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: void detachFromActivity()
androidx.fragment.app.Fragment$1: Fragment$1(androidx.fragment.app.Fragment)
kotlin.jvm.internal.ClassReference$Companion: java.lang.String getClassSimpleName(java.lang.Class)
com.tekartik.sqflite.SqflitePlugin: boolean isInMemoryPath(java.lang.String)
io.sentry.transport.RateLimiter$DataCategory: java.lang.String getCategory()
com.google.gson.JsonArray: double getAsDouble()
io.flutter.plugins.pathprovider.PathProviderPlugin$PathProviderPlatformThread$1: void onFailure(java.lang.Throwable)
androidx.core.view.ViewCompat: void setViewImportanceForAccessibilityIfNeeded(android.view.View)
io.sentry.android.ndk.INativeScope: void removeUser()
com.google.android.gms.common.api.internal.zaad: boolean zag()
com.google.android.gms.internal.maps.zzae: int zzf()
com.google.common.reflect.Types$JavaVersion$2: java.lang.reflect.Type usedInGenericType(java.lang.reflect.Type)
kotlinx.coroutines.JobNode: kotlinx.coroutines.JobSupport getJob()
com.google.gson.internal.LinkedHashTreeMap$EntrySet$1: java.util.Map$Entry next()
com.google.gson.internal.bind.TypeAdapters$6: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
io.flutter.plugins.googlemaps.GoogleMapController: void onCameraIdle()
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean access$1500(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.util.Predicate)
com.google.android.gms.maps.internal.zzaq: zzaq()
androidx.core.graphics.drawable.IconCompat: android.graphics.Bitmap createLegacyIconFromAdaptiveIcon(android.graphics.Bitmap,boolean)
io.sentry.Hub: void removeTag(java.lang.String)
io.flutter.plugins.googlemaps.TileOverlayController: void setVisible(boolean)
androidx.core.app.NotificationCompat$Action: NotificationCompat$Action(int,java.lang.CharSequence,android.app.PendingIntent)
io.sentry.transport.QueuedThreadPoolExecutor$CancelledFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)
com.google.android.gms.common.api.internal.NonGmsServiceBrokerClient: boolean isConnected()
com.google.android.gms.common.wrappers.Wrappers: com.google.android.gms.common.wrappers.PackageManagerWrapper zza(android.content.Context)
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$15: void invoke(boolean)
androidx.core.app.NotificationCompat$Action: androidx.core.app.RemoteInput[] getDataOnlyRemoteInputs()
kotlinx.coroutines.internal.DispatchedContinuationKt: void resumeCancellableWith(kotlin.coroutines.Continuation,java.lang.Object,kotlin.jvm.functions.Function1)
io.sentry.SentryEnvelopeItem: io.sentry.SentryEnvelopeItem fromUserFeedback(io.sentry.ISerializer,io.sentry.UserFeedback)
com.google.android.gms.maps.model.PolylineOptions: java.util.List getPoints()
io.sentry.SentryExecutorService: SentryExecutorService()
androidx.window.layout.WindowMetricsCalculator$Companion$overrideDecorator$1: androidx.window.layout.WindowMetricsCalculator invoke(androidx.window.layout.WindowMetricsCalculator)
com.google.common.util.concurrent.AbstractFuture: java.lang.Object getDoneValue(java.lang.Object)
com.google.common.collect.MapMakerInternalMap$Strength: MapMakerInternalMap$Strength(java.lang.String,int,com.google.common.collect.MapMakerInternalMap$1)
io.flutter.embedding.engine.systemchannels.RestorationChannel: void setRestorationData(byte[])
androidx.fragment.app.FragmentActivity$HostCallbacks: android.view.View onFindViewById(int)
androidx.core.view.WindowInsetsControllerCompat$Impl23: void setAppearanceLightStatusBars(boolean)
io.flutter.plugin.platform.SingleViewPresentation$PresentationContext: SingleViewPresentation$PresentationContext(android.content.Context,io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler,android.content.Context)
com.google.android.gms.common.internal.safeparcel.SafeParcelReader: void skipUnknownField(android.os.Parcel,int)
kotlinx.coroutines.JobSupport: kotlinx.coroutines.ChildHandle attachChild(kotlinx.coroutines.ChildJob)
io.flutter.embedding.android.MotionEventTracker$MotionEventId: long getId()
com.google.android.gms.signin.internal.zag: com.google.android.gms.common.api.Status getStatus()
kotlinx.coroutines.internal.ExceptionsConstuctorKt$createConstructor$$inlined$safeCtor$2: ExceptionsConstuctorKt$createConstructor$$inlined$safeCtor$2(java.lang.reflect.Constructor)
com.google.common.base.Predicates$ObjectPredicate$3: boolean apply(java.lang.Object)
com.google.android.gms.common.api.internal.GoogleApiManager: void zaD(com.google.android.gms.common.api.internal.zaae)
androidx.core.app.NotificationCompat$Builder: androidx.core.app.NotificationCompat$Builder setSmallIcon(int)
io.sentry.protocol.DebugImage: java.lang.String getCodeFile()
io.sentry.NoOpHub: io.sentry.protocol.SentryId captureTransaction(io.sentry.protocol.SentryTransaction,java.lang.Object)
com.google.android.gms.maps.model.Marker: void showInfoWindow()
io.sentry.HubAdapter: void popScope()
com.google.gson.internal.bind.TypeAdapters$30: com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken)
com.google.gson.FieldNamingPolicy$2: java.lang.String translateName(java.lang.reflect.Field)
io.flutter.view.AccessibilityBridge: void release()
kotlinx.coroutines.channels.ClosedReceiveChannelException: ClosedReceiveChannelException(java.lang.String)
androidx.lifecycle.ProcessLifecycleOwner: ProcessLifecycleOwner()
com.google.common.reflect.TypeToken$4: void visitClass(java.lang.Class)
kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object getState$kotlinx_coroutines_core()
io.sentry.ScopeCallback: void run(io.sentry.Scope)
com.google.gson.JsonArray: byte getAsByte()
io.flutter.embedding.android.FlutterSplashView: android.view.View access$300(io.flutter.embedding.android.FlutterSplashView)
androidx.fragment.app.FragmentController: androidx.fragment.app.FragmentManager getSupportFragmentManager()
io.sentry.NoOpHub: void setTransaction(java.lang.String)
androidx.lifecycle.ViewModelProvider: androidx.lifecycle.ViewModel get(java.lang.Class)
com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList build()
androidx.fragment.app.FragmentController: void dispatchMultiWindowModeChanged(boolean)
com.google.android.gms.common.internal.safeparcel.SafeParcelReader: java.util.ArrayList createStringList(android.os.Parcel,int)
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: void addListener(androidx.core.util.Consumer)
androidx.fragment.app.Fragment: android.animation.Animator getAnimator()
io.flutter.embedding.android.FlutterSurfaceView$2: void onFlutterUiDisplayed()
kotlinx.coroutines.flow.FlowKt: kotlinx.coroutines.flow.Flow flow(kotlin.jvm.functions.Function2)
com.google.android.gms.maps.GoogleMapOptions: com.google.android.gms.maps.GoogleMapOptions mapToolbarEnabled(boolean)
kotlinx.coroutines.EventLoopImplBase$DelayedTaskQueue: EventLoopImplBase$DelayedTaskQueue(long)
io.flutter.plugin.localization.LocalizationPlugin: java.util.Locale resolveNativeLocale(java.util.List)
io.flutter.plugin.editing.TextInputPlugin: android.view.inputmethod.InputConnection createInputConnection(android.view.View,io.flutter.embedding.android.KeyboardManager,android.view.inputmethod.EditorInfo)
androidx.collection.ArraySet: int hashCode()
io.flutter.plugins.googlemaps.MarkersController: void addMarkers(java.util.List)
com.google.android.gms.maps.model.Marker: boolean isInfoWindowShown()
io.flutter.plugins.googlemaps.TileProviderController$Worker: void error(java.lang.String,java.lang.String,java.lang.Object)
androidx.window.embedding.EmbeddingCompat$Companion: boolean isEmbeddingAvailable()
kotlinx.coroutines.JobSupport$Finishing: java.util.ArrayList allocateList()
com.google.android.gms.maps.MapView: void onStop()
kotlinx.coroutines.channels.AbstractSendChannel: java.lang.Throwable helpCloseAndGetSendException(kotlinx.coroutines.channels.Closed)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: void detachFromAppComponent()
kotlinx.coroutines.JobSupport$Finishing: void setCompleting(boolean)
com.google.android.gms.maps.model.Marker: int hashCode()
com.google.gson.internal.bind.TypeAdapters$31: com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken)
io.sentry.transport.RateLimiter: long parseRetryAfterOrDefault(java.lang.String)
com.google.gson.internal.LinkedHashTreeMap$EntrySet$1: LinkedHashTreeMap$EntrySet$1(com.google.gson.internal.LinkedHashTreeMap$EntrySet)
androidx.core.app.NotificationCompat$BubbleMetadata$Api29Impl: android.app.Notification$BubbleMetadata toPlatform(androidx.core.app.NotificationCompat$BubbleMetadata)
io.flutter.embedding.engine.FlutterJNI: void onDisplayPlatformView(int,int,int,int,int,int,int,io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack)
com.google.gson.internal.LazilyParsedNumber: java.lang.String toString()
androidx.window.core.Bounds: boolean isEmpty()
androidx.lifecycle.ProcessLifecycleOwner$2: ProcessLifecycleOwner$2(androidx.lifecycle.ProcessLifecycleOwner)
com.google.common.collect.MapMakerInternalMap$Segment: void runLockedCleanup()
io.sentry.android.ndk.SentryNdk: void init(io.sentry.android.core.SentryAndroidOptions)
io.flutter.embedding.android.MotionEventTracker: io.flutter.embedding.android.MotionEventTracker getInstance()
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean access$4702(io.flutter.view.AccessibilityBridge$SemanticsNode,boolean)
com.google.common.collect.ImmutableList: java.util.ListIterator listIterator()
com.google.common.hash.HashCode$IntHashCode: int bits()
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode valueOf(java.lang.String)
kotlin.jvm.internal.TypeIntrinsics: java.lang.ClassCastException throwCce(java.lang.ClassCastException)
com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher: Murmur3_128HashFunction$Murmur3_128Hasher(int)
com.google.common.reflect.TypeToken$4: void visitTypeVariable(java.lang.reflect.TypeVariable)
com.google.common.collect.MapMakerInternalMap: java.util.Collection values()
io.sentry.CircularFifoQueue$1: java.lang.Object next()
kotlin.text.StringsKt__StringsKt$rangesDelimitedBy$2: StringsKt__StringsKt$rangesDelimitedBy$2(java.util.List,boolean)
androidx.versionedparcelable.VersionedParcel: void writeInt(int,int)
androidx.lifecycle.ClassesInfoCache$CallbackInfo: void invokeCallbacks(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event,java.lang.Object)
kotlin.jvm.internal.ClassReference: java.lang.String toString()
com.google.android.gms.common.internal.zzai: java.lang.Object createFromParcel(android.os.Parcel)
io.flutter.plugins.googlemaps.GoogleMapsPlugin: GoogleMapsPlugin()
com.google.android.gms.maps.model.TileOverlayOptions: com.google.android.gms.maps.model.TileOverlayOptions visible(boolean)
kotlinx.coroutines.ThreadLocalEventLoop: void resetEventLoop$kotlinx_coroutines_core()
io.flutter.plugins.googlemaps.CirclesController: boolean onCircleTap(java.lang.String)
io.sentry.SentryClient: io.sentry.SentryEnvelope buildEnvelope(io.sentry.SentryBaseEvent,java.util.List,io.sentry.Session)
io.flutter.plugin.common.StringCodec: java.nio.ByteBuffer encodeMessage(java.lang.String)
kotlinx.coroutines.JobSupport: java.lang.Object makeCancelling(java.lang.Object)
com.google.common.util.concurrent.CycleDetectingLockFactory$Policy: void handlePotentialDeadlock(com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException)
com.google.android.gms.dynamic.DeferredLifecycleHelper: void onResume()
androidx.window.layout.WindowInfoTracker$Companion: androidx.window.layout.WindowInfoTracker getOrCreate(android.content.Context)
com.google.android.gms.common.api.Api: java.lang.String zad()
com.google.android.gms.signin.internal.zag: zag(java.util.List,java.lang.String)
io.sentry.protocol.OperatingSystem: java.lang.String getName()
io.flutter.embedding.android.FlutterSplashView: void displayFlutterViewWithSplash(io.flutter.embedding.android.FlutterView,io.flutter.embedding.android.SplashScreen)
androidx.fragment.app.FragmentTransition: androidx.collection.ArrayMap captureOutSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition)
androidx.lifecycle.LiveData$ObserverWrapper: boolean isAttachedTo(androidx.lifecycle.LifecycleOwner)
io.flutter.plugins.pathprovider.PathProviderPlugin: void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: void delayFirstAndroidViewDraw(io.flutter.embedding.android.FlutterView)
io.sentry.NoOpSpan: java.lang.String getDescription()
io.flutter.embedding.engine.FlutterJNI: void setSemanticsEnabled(boolean)
androidx.fragment.app.FragmentManagerImpl: void dispatchOnFragmentPreAttached(androidx.fragment.app.Fragment,android.content.Context,boolean)
androidx.window.embedding.SplitController: java.util.concurrent.locks.ReentrantLock access$getGlobalLock$cp()
com.google.android.gms.common.internal.zaw: zaw()
androidx.window.layout.HardwareFoldingFeature$Type: androidx.window.layout.HardwareFoldingFeature$Type access$getHINGE$cp()
io.flutter.embedding.engine.renderer.FlutterRenderer: void removeIsDisplayingFlutterUiListener(io.flutter.embedding.engine.renderer.FlutterUiDisplayListener)
io.flutter.plugin.common.StandardMessageCodec: java.lang.Object decodeMessage(java.nio.ByteBuffer)
io.sentry.DuplicateEventDetectionEventProcessor: io.sentry.SentryEvent process(io.sentry.SentryEvent,java.lang.Object)
androidx.fragment.app.FragmentManagerImpl: void addRetainedFragment(androidx.fragment.app.Fragment)
com.google.gson.JsonObject: com.google.gson.JsonObject getAsJsonObject(java.lang.String)
com.google.gson.DefaultDateTypeAdapter: DefaultDateTypeAdapter(java.lang.Class,java.lang.String)
io.sentry.SentryEnvelopeHeader: io.sentry.protocol.SentryId getEventId()
androidx.window.layout.FoldingFeature$State$Companion: FoldingFeature$State$Companion()
io.flutter.embedding.android.FlutterSplashView$3: FlutterSplashView$3(io.flutter.embedding.android.FlutterSplashView)
io.flutter.embedding.android.FlutterView: android.view.PointerIcon getSystemPointerIcon(int)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: void detachFromActivityForConfigChanges()
androidx.core.util.LogWriter: LogWriter(java.lang.String)
com.google.gson.JsonObject: com.google.gson.JsonElement remove(java.lang.String)
com.google.android.gms.dynamic.zag: int zaa()
androidx.arch.core.internal.SafeIterableMap: boolean equals(java.lang.Object)
com.google.android.gms.common.api.internal.zacg: zacg(com.google.android.gms.common.api.internal.NonGmsServiceBrokerClient,android.os.IBinder)
com.google.android.gms.common.Feature: long getVersion()
com.tekartik.sqflite.SqflitePlugin$BgResult$3: SqflitePlugin$BgResult$3(com.tekartik.sqflite.SqflitePlugin$BgResult)
androidx.versionedparcelable.VersionedParcel: void writeVersionedParcelable(androidx.versionedparcelable.VersionedParcelable,int)
com.google.gson.DefaultDateTypeAdapter: java.util.Date read(com.google.gson.stream.JsonReader)
kotlinx.coroutines.ExecutorCoroutineDispatcher$Key$1: java.lang.Object invoke(java.lang.Object)
io.flutter.plugins.urllauncher.MethodCallHandlerImpl: void onCloseWebView(io.flutter.plugin.common.MethodChannel$Result)
kotlinx.coroutines.flow.SafeFlow: SafeFlow(kotlin.jvm.functions.Function2)
io.sentry.Sentry: void withScope(io.sentry.ScopeCallback)
com.tekartik.sqflite.operation.BatchOperation: void handleError(io.flutter.plugin.common.MethodChannel$Result)
com.google.gson.internal.bind.TypeAdapters$9: java.lang.Object read(com.google.gson.stream.JsonReader)
io.flutter.plugin.platform.PlatformPlugin: void vibrateHapticFeedback(io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType)
androidx.fragment.app.Fragment: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)
io.sentry.android.core.SentryAndroidOptions: boolean isEnableAutoActivityLifecycleTracing()
com.google.android.gms.common.internal.safeparcel.SafeParcelWriter: void writeInt(android.os.Parcel,int,int)
com.google.common.util.concurrent.AbstractFuture$TrustedFuture: boolean cancel(boolean)
io.flutter.embedding.android.FlutterImageView: android.media.ImageReader getImageReader()
kotlinx.coroutines.YieldContext$Key: YieldContext$Key()
com.google.android.gms.maps.zzag: void onSaveInstanceState(android.os.Bundle)
kotlin.jvm.internal.FunctionReference: boolean isSuspend()
io.flutter.view.AccessibilityViewEmbedder: java.lang.Integer getRecordFlutterId(android.view.View,android.view.accessibility.AccessibilityRecord)
io.sentry.protocol.SentryException: java.lang.String getValue()
androidx.arch.core.internal.SafeIterableMap: androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions iteratorWithAdditions()
androidx.fragment.app.Fragment: androidx.fragment.app.Fragment findFragmentByWho(java.lang.String)
io.flutter.embedding.android.FlutterView: boolean fitSystemWindows(android.graphics.Rect)
io.sentry.IHub: io.sentry.protocol.SentryId captureTransaction(io.sentry.protocol.SentryTransaction,java.lang.Object)
io.flutter.plugin.common.EventChannel: java.lang.String access$200(io.flutter.plugin.common.EventChannel)
io.flutter.embedding.android.FlutterSplashView$SavedState: java.lang.String access$602(io.flutter.embedding.android.FlutterSplashView$SavedState,java.lang.String)
com.google.android.gms.common.internal.zzn: int hashCode()
com.google.common.hash.HashCode$BytesHashCode: byte[] getBytesInternal()
com.google.android.gms.maps.model.PolygonOptions: java.util.List getStrokePattern()
com.google.android.gms.common.api.internal.zabm: zabm(com.google.android.gms.common.api.internal.zabq)
kotlinx.coroutines.CancellableContinuationImpl: java.lang.StackTraceElement getStackTraceElement()
io.sentry.Stack$StackItem: io.sentry.SentryOptions getOptions()
io.flutter.embedding.engine.systemchannels.AccessibilityChannel: void onAndroidAccessibilityDisabled()
io.flutter.embedding.engine.renderer.FlutterRenderer: void dispatchPointerDataPacket(java.nio.ByteBuffer,int)
io.sentry.protocol.DebugImage: void setCodeId(java.lang.String)
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction: java.lang.String access$3502(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction,java.lang.String)
io.sentry.Attachment: Attachment(byte[],java.lang.String)
com.google.gson.JsonArray: JsonArray()
io.flutter.plugins.pathprovider.PathProviderPlugin$PathProviderBackgroundThread: void getTemporaryDirectory(io.flutter.plugin.common.MethodChannel$Result)
io.sentry.android.core.IHandler: void post(java.lang.Runnable)
androidx.fragment.app.Fragment: void performResume()
io.sentry.protocol.SentryRuntime: java.lang.String getVersion()
com.google.android.gms.common.api.AvailabilityException: AvailabilityException(androidx.collection.ArrayMap)
com.google.android.gms.common.internal.GmsClient: GmsClient(android.content.Context,android.os.Looper,int,com.google.android.gms.common.internal.ClientSettings,com.google.android.gms.common.api.GoogleApiClient$ConnectionCallbacks,com.google.android.gms.common.api.GoogleApiClient$OnConnectionFailedListener)
com.google.android.gms.maps.model.zzv: java.lang.Object[] newArray(int)
kotlin.jvm.internal.ReflectionFactory: java.lang.String renderLambdaToString(kotlin.jvm.internal.FunctionBase)
io.sentry.protocol.Device: void setOrientation(io.sentry.protocol.Device$DeviceOrientation)
io.sentry.adapters.DateSerializerAdapter: com.google.gson.JsonElement serialize(java.util.Date,java.lang.reflect.Type,com.google.gson.JsonSerializationContext)
kotlinx.coroutines.scheduling.CoroutineScheduler: boolean tryUnpark()
io.sentry.Span: io.sentry.ISpan startChild(java.lang.String,java.lang.String)
io.sentry.Sentry: void startSession()
com.google.android.gms.dynamite.zzq: com.google.android.gms.dynamic.IObjectWrapper zzk(com.google.android.gms.dynamic.IObjectWrapper,java.lang.String,boolean,long)
com.google.android.gms.common.api.internal.zzd: void addCallback(java.lang.String,com.google.android.gms.common.api.internal.LifecycleCallback)
io.sentry.MainEventProcessor: void setPlatform(io.sentry.SentryBaseEvent)
io.flutter.plugin.common.MethodChannel: void setMethodCallHandler(io.flutter.plugin.common.MethodChannel$MethodCallHandler)
com.google.android.gms.common.api.internal.zzd: void onStart()
com.google.android.gms.maps.UiSettings: boolean isTiltGesturesEnabled()
kotlinx.coroutines.JobSupport: kotlinx.coroutines.ChildHandleNode firstChild(kotlinx.coroutines.Incomplete)
io.sentry.protocol.Message: void setFormatted(java.lang.String)
com.google.gson.internal.bind.JsonTreeReader: void expect(com.google.gson.stream.JsonToken)
androidx.window.embedding.EmbeddingCompat: void setSplitRules(java.util.Set)
kotlin.jvm.internal.TypeIntrinsics: TypeIntrinsics()
com.google.android.gms.common.internal.zah: zah(com.google.android.gms.common.api.internal.ConnectionCallbacks)
com.google.common.reflect.TypeToken: java.lang.Class getRawType()
com.google.android.gms.internal.base.zab: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)
com.google.android.gms.common.api.internal.zzb: com.google.android.gms.common.api.internal.LifecycleCallback getCallbackOrNull(java.lang.String,java.lang.Class)
com.google.android.gms.signin.internal.zai: void writeToParcel(android.os.Parcel,int)
androidx.collection.MapCollections$ArrayIterator: MapCollections$ArrayIterator(androidx.collection.MapCollections,int)
com.google.common.hash.HashCode: HashCode()
io.sentry.hints.DiskFlushNotification: void markFlushed()
kotlin.collections.EmptyIterator: void add(java.lang.Object)
com.google.gson.internal.UnsafeAllocator$2: UnsafeAllocator$2(java.lang.reflect.Method,int)
kotlinx.coroutines.JobSupport: java.util.concurrent.CancellationException getChildJobCancellationCause()
androidx.window.embedding.ExtensionEmbeddingBackend$Companion: androidx.window.embedding.ExtensionEmbeddingBackend getInstance()
kotlinx.coroutines.flow.internal.SafeCollectorKt: kotlin.jvm.functions.Function3 access$getEmitFun$p()
com.google.gson.internal.LinkedTreeMap: java.lang.Object writeReplace()
com.google.gson.internal.bind.TypeAdapters$14: java.lang.Number read(com.google.gson.stream.JsonReader)
io.flutter.embedding.android.FlutterActivity: boolean stillAttachedForEvent(java.lang.String)
com.google.gson.internal.LinkedTreeMap: void removeInternal(com.google.gson.internal.LinkedTreeMap$Node,boolean)
io.sentry.android.core.LifecycleWatcher: void startSession()
com.google.common.hash.LittleEndianByteArray$UnsafeByteArray: com.google.common.hash.LittleEndianByteArray$UnsafeByteArray[] values()
com.google.android.gms.maps.internal.zzao: boolean zza(int,android.os.Parcel,android.os.Parcel,int)
io.sentry.transport.AsyncHttpTransport: void send(io.sentry.SentryEnvelope,java.lang.Object)
com.google.gson.reflect.TypeToken: boolean matches(java.lang.reflect.Type,java.lang.reflect.Type,java.util.Map)
io.flutter.plugin.platform.SingleViewPresentation$PresentationContext: android.view.WindowManager getWindowManager()
com.google.gson.Gson$5: java.util.concurrent.atomic.AtomicLongArray read(com.google.gson.stream.JsonReader)
io.sentry.SentryOptions: long getSessionTrackingIntervalMillis()
com.google.common.base.Equivalence$Equals: boolean doEquivalent(java.lang.Object,java.lang.Object)
com.google.android.gms.common.api.internal.zacd: zacd(com.google.android.gms.common.api.internal.GoogleApiManager,int,com.google.android.gms.common.api.internal.ApiKey,long,long,java.lang.String,java.lang.String)
io.sentry.android.core.ActivityLifecycleIntegration: void onActivityPreCreated(android.app.Activity,android.os.Bundle)
com.google.common.hash.Hashing: com.google.common.hash.HashFunction murmur3_128()
androidx.fragment.app.FragmentTransitionCompat21: void addTargets(java.lang.Object,java.util.ArrayList)
androidx.fragment.app.FragmentManagerImpl: android.os.Bundle saveFragmentBasicState(androidx.fragment.app.Fragment)
com.google.android.gms.common.GooglePlayServicesMissingManifestValueException: GooglePlayServicesMissingManifestValueException()
com.google.common.collect.ImmutableCollection: boolean removeAll(java.util.Collection)
com.google.android.gms.common.internal.safeparcel.SafeParcelWriter: void writeDouble(android.os.Parcel,int,double)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode[] values()
androidx.window.layout.HardwareFoldingFeature$Companion: HardwareFoldingFeature$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
androidx.fragment.app.FragmentTransition: java.lang.Object getSharedElementTransition(androidx.fragment.app.FragmentTransitionImpl,androidx.fragment.app.Fragment,androidx.fragment.app.Fragment,boolean)
kotlinx.coroutines.internal.OnUndeliveredElementKt$bindCancellationFun$1: void invoke(java.lang.Throwable)
io.sentry.Hub: void popScope()
com.google.common.collect.MapMakerInternalMap$HashIterator: void advance()
androidx.window.embedding.ActivityRule: java.util.Set getFilters()
com.google.android.gms.maps.zzq: void zzc(com.google.android.gms.dynamic.IObjectWrapper)
io.sentry.protocol.Gpu: java.lang.String getNpotSupport()
com.google.android.gms.maps.model.Dash: java.lang.String toString()
com.google.android.gms.maps.model.Circle: void setFillColor(int)
io.flutter.embedding.android.FlutterView: FlutterView(android.content.Context,android.util.AttributeSet,io.flutter.embedding.android.FlutterSurfaceView)
kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: ExperimentalCoroutineDispatcher(int,int,java.lang.String,int,kotlin.jvm.internal.DefaultConstructorMarker)
androidx.fragment.app.DialogFragment: void onSaveInstanceState(android.os.Bundle)
androidx.window.layout.ExtensionWindowLayoutInfoBackend: void registerLayoutChangeCallback(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
kotlin.sequences.TransformingSequence$iterator$1: boolean hasNext()
androidx.versionedparcelable.VersionedParcel: androidx.versionedparcelable.VersionedParcelable readVersionedParcelable()
com.tekartik.sqflite.SqflitePlugin$3: SqflitePlugin$3(com.tekartik.sqflite.SqflitePlugin,io.flutter.plugin.common.MethodCall,com.tekartik.sqflite.SqflitePlugin$BgResult,com.tekartik.sqflite.Database)
androidx.fragment.app.FragmentManagerImpl: void moveToState(androidx.fragment.app.Fragment)
com.google.android.gms.common.internal.safeparcel.SafeParcelWriter: void writeString(android.os.Parcel,int,java.lang.String,boolean)
androidx.lifecycle.SingleGeneratedAdapterObserver: SingleGeneratedAdapterObserver(androidx.lifecycle.GeneratedAdapter)
io.sentry.protocol.SdkVersion: java.util.List getPackages()
io.sentry.protocol.Device: void setExternalStorageSize(java.lang.Long)
com.google.android.gms.common.internal.BaseGmsClient: android.content.Context getContext()
kotlinx.coroutines.internal.FastServiceLoader: java.util.List load(java.lang.Class,java.lang.ClassLoader)
com.google.common.util.concurrent.AbstractFuture: java.lang.String toString()
androidx.collection.SimpleArrayMap: java.lang.Object get(java.lang.Object)
com.google.common.collect.SingletonImmutableSet: boolean isHashCodeFast()
io.flutter.view.AccessibilityBridge: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent)
com.tekartik.sqflite.SqflitePlugin$2: SqflitePlugin$2(com.tekartik.sqflite.SqflitePlugin,io.flutter.plugin.common.MethodCall,com.tekartik.sqflite.SqflitePlugin$BgResult,com.tekartik.sqflite.Database)
com.google.android.gms.common.internal.zaf: zaf(android.content.Intent,com.google.android.gms.common.api.internal.LifecycleFragment,int)
androidx.activity.ComponentActivity: androidx.lifecycle.Lifecycle getLifecycle()
com.google.android.gms.common.internal.Preconditions: void checkArgument(boolean,java.lang.Object)
io.sentry.android.core.IBuildInfoProvider: java.lang.String getBuildTags()
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$5: SentryFlutterPlugin$initNativeSdk$2$5(io.sentry.android.core.SentryAndroidOptions)
androidx.window.embedding.SplitPairRule: boolean equals(java.lang.Object)
androidx.window.layout.SidecarAdapter: boolean isEqualSidecarDisplayFeatures(java.util.List,java.util.List)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: void detachFromService()
kotlinx.coroutines.internal.OnUndeliveredElementKt: void callUndeliveredElement(kotlin.jvm.functions.Function1,java.lang.Object,kotlin.coroutines.CoroutineContext)
io.flutter.view.AccessibilityViewEmbedder: void setFlutterNodeParent(android.view.accessibility.AccessibilityNodeInfo,android.view.View,android.view.accessibility.AccessibilityNodeInfo)
io.sentry.protocol.Request: void setOthers(java.util.Map)
io.sentry.android.ndk.NativeScope: void nativeSetExtra(java.lang.String,java.lang.String)
io.sentry.SentryOptions: boolean isEnableScopeSync()
androidx.lifecycle.LifecycleRegistry: void moveToState(androidx.lifecycle.Lifecycle$State)
io.sentry.adapters.SpanStatusDeserializerAdapter: SpanStatusDeserializerAdapter(io.sentry.SentryOptions)
kotlin.coroutines.jvm.internal.Boxing: java.lang.Boolean boxBoolean(boolean)
com.google.common.base.Predicates$ObjectPredicate$3: Predicates$ObjectPredicate$3(java.lang.String,int)
com.google.android.gms.signin.internal.zaa: zaa()
io.flutter.plugins.urllauncher.WebViewActivity: java.util.Map extractHeaders(android.os.Bundle)
androidx.window.layout.SidecarWindowBackend$Companion: androidx.window.layout.SidecarWindowBackend getInstance(android.content.Context)
com.google.android.gms.maps.model.PatternItem: boolean equals(java.lang.Object)
com.google.common.reflect.Types$GenericArrayTypeImpl: int hashCode()
kotlin.text.StringsKt__IndentKt: int indentWidth$StringsKt__IndentKt(java.lang.String)
io.sentry.Sentry: void close()
com.google.android.gms.common.internal.BaseGmsClient: com.google.android.gms.common.internal.BaseGmsClient$BaseConnectionCallbacks zzb(com.google.android.gms.common.internal.BaseGmsClient)
io.sentry.cache.CacheStrategy: void rotateCacheIfNeeded(java.io.File[])
com.google.android.gms.internal.maps.zzv: void zzt(float,float)
io.flutter.embedding.engine.systemchannels.SystemChannel: void sendMemoryPressureWarning()
io.sentry.protocol.App: App()
androidx.fragment.app.Fragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)
io.sentry.CircularFifoQueue: int access$200(io.sentry.CircularFifoQueue)
com.google.android.gms.dynamite.DynamiteModule: int zzb(android.content.Context,java.lang.String,boolean)
io.sentry.Breadcrumb: java.lang.String getMessage()
io.sentry.SentryOptions: void setMaxBreadcrumbs(int)
io.flutter.embedding.android.FlutterImageView: FlutterImageView(android.content.Context,android.media.ImageReader,io.flutter.embedding.android.FlutterImageView$SurfaceKind)
com.google.android.gms.maps.model.PatternItem: int hashCode()
com.google.gson.JsonElement: com.google.gson.JsonArray getAsJsonArray()
com.google.gson.internal.LinkedHashTreeMap$Node: java.lang.Object setValue(java.lang.Object)
io.sentry.Scope: void addBreadcrumb(io.sentry.Breadcrumb)
io.sentry.SentryEnvelopeItem: io.sentry.SentryEnvelopeItem fromEvent(io.sentry.ISerializer,io.sentry.SentryBaseEvent)
kotlin.coroutines.jvm.internal.RestrictedContinuationImpl: kotlin.coroutines.CoroutineContext getContext()
com.google.gson.internal.bind.TypeAdapters$19: TypeAdapters$19()
io.sentry.android.core.ActivityLifecycleIntegration: void onActivitySaveInstanceState(android.app.Activity,android.os.Bundle)
com.google.common.collect.RegularImmutableList: int internalArrayEnd()
kotlin.ResultKt: java.lang.Object createFailure(java.lang.Throwable)
io.flutter.plugins.googlemaps.CirclesController: void removeCircles(java.util.List)
kotlin.ranges.RangesKt___RangesKt: int coerceIn(int,int,int)
androidx.arch.core.internal.SafeIterableMap$ListIterator: java.lang.Object next()
kotlinx.coroutines.internal.ExceptionsConstuctorKt$createConstructor$$inlined$safeCtor$3: java.lang.Object invoke(java.lang.Object)
androidx.window.core.Version$Companion: androidx.window.core.Version getVERSION_0_1()
androidx.lifecycle.ProcessLifecycleOwner$3: void onActivityPreCreated(android.app.Activity,android.os.Bundle)
androidx.fragment.app.FragmentManagerImpl$PopBackStackState: boolean generateOps(java.util.ArrayList,java.util.ArrayList)
androidx.fragment.app.FragmentFactory: androidx.fragment.app.Fragment instantiate(java.lang.ClassLoader,java.lang.String)
io.sentry.ILogger: void log(io.sentry.SentryLevel,java.lang.String,java.lang.Throwable)
androidx.window.layout.FoldingFeature: androidx.window.layout.FoldingFeature$State getState()
kotlin.collections.EmptyList: int lastIndexOf(java.lang.Object)
io.sentry.Scope: void setTransaction(io.sentry.ITransaction)
io.sentry.android.core.DefaultAndroidEventProcessor: java.util.Date getBootTime()
io.flutter.embedding.android.WindowInfoRepositoryCallbackAdapterWrapper: WindowInfoRepositoryCallbackAdapterWrapper(androidx.window.java.layout.WindowInfoTrackerCallbackAdapter)
androidx.fragment.app.FragmentActivity: android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet)
androidx.fragment.app.FragmentActivity: void onSaveInstanceState(android.os.Bundle)
io.flutter.embedding.engine.systemchannels.AccessibilityChannel: void setAccessibilityMessageHandler(io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.View access$600(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
android.support.v4.graphics.drawable.IconCompatParcelizer: void write(androidx.core.graphics.drawable.IconCompat,androidx.versionedparcelable.VersionedParcel)
io.sentry.IHub: io.sentry.ITransaction startTransaction(java.lang.String,java.lang.String,io.sentry.CustomSamplingContext,boolean)
kotlin.collections.SetsKt__SetsKt: java.util.Set optimizeReadOnlySet(java.util.Set)
androidx.core.app.NotificationCompat$BigTextStyle: void apply(androidx.core.app.NotificationBuilderWithBuilderAccessor)
com.google.android.gms.common.internal.zzb: void zza(android.os.Message)
androidx.window.layout.FoldingFeature$Orientation: java.lang.String toString()
androidx.fragment.app.FragmentController: void attachHost(androidx.fragment.app.Fragment)
com.google.android.gms.maps.model.VisibleRegion: void writeToParcel(android.os.Parcel,int)
kotlin.jvm.internal.Intrinsics: java.lang.Throwable sanitizeStackTrace(java.lang.Throwable)
androidx.window.embedding.SplitPairFilter: SplitPairFilter(android.content.ComponentName,android.content.ComponentName,java.lang.String)
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void setIndexInArray(int)
com.google.android.gms.tasks.zzw: void zzg()
com.google.common.hash.AbstractStreamingHasher: com.google.common.hash.HashCode hash()
com.google.common.collect.MapMakerInternalMap$DummyInternalEntry: com.google.common.collect.MapMakerInternalMap$InternalEntry getNext()
kotlinx.coroutines.LazyStandaloneCoroutine: void onStart()
androidx.fragment.app.Fragment: void onStop()
com.google.android.gms.maps.model.PolygonOptions: boolean isVisible()
androidx.collection.MapCollections$EntrySet: boolean addAll(java.util.Collection)
androidx.window.core.Version: androidx.window.core.Version parse(java.lang.String)
kotlin.TuplesKt: kotlin.Pair to(java.lang.Object,java.lang.Object)
com.google.android.gms.signin.internal.zal: java.lang.Object createFromParcel(android.os.Parcel)
kotlinx.coroutines.flow.internal.SafeCollector: java.lang.Object invokeSuspend(java.lang.Object)
io.sentry.Sentry: void init()
io.sentry.Attachment: boolean isAddToTransactions()
kotlinx.coroutines.AbstractTimeSourceKt: kotlinx.coroutines.AbstractTimeSource getTimeSource()
com.google.android.gms.common.api.internal.zzb: void onActivityResult(int,int,android.content.Intent)
io.sentry.adapters.OrientationSerializerAdapter: com.google.gson.JsonElement serialize(io.sentry.protocol.Device$DeviceOrientation,java.lang.reflect.Type,com.google.gson.JsonSerializationContext)
androidx.lifecycle.EmptyActivityLifecycleCallbacks: void onActivityDestroyed(android.app.Activity)
io.sentry.cache.EnvelopeCache: void discard(io.sentry.SentryEnvelope)
com.google.android.gms.maps.internal.zzu: boolean zza(int,android.os.Parcel,android.os.Parcel,int)
androidx.fragment.app.FragmentManagerViewModel: java.util.Collection getRetainedFragments()
com.google.android.gms.common.internal.BaseGmsClient: java.lang.String getLocalStartServiceAction()
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void getTransformMatrix(float[])
io.sentry.HubAdapter: boolean isEnabled()
androidx.window.layout.WindowMetricsCalculator$Companion$overrideDecorator$1: WindowMetricsCalculator$Companion$overrideDecorator$1(java.lang.Object)
io.sentry.protocol.Browser: java.util.Map getUnknown()
io.flutter.plugins.urllauncher.UrlLauncher: UrlLauncher(android.content.Context,android.app.Activity)
kotlinx.coroutines.Unconfined: Unconfined()
io.sentry.SentryOptions: boolean isAttachServerName()
io.sentry.SynchronizedCollection: boolean retainAll(java.util.Collection)
io.sentry.protocol.Request: Request()
com.google.gson.internal.bind.TypeAdapters$3: java.lang.Boolean read(com.google.gson.stream.JsonReader)
kotlin.collections.SetsKt__SetsKt: java.util.Set emptySet()
kotlin.collections.EmptyIterator: boolean hasPrevious()
io.flutter.embedding.engine.systemchannels.AccessibilityChannel$1: AccessibilityChannel$1(io.flutter.embedding.engine.systemchannels.AccessibilityChannel)
com.google.android.gms.maps.internal.zzo: zzo()
kotlinx.coroutines.channels.AbstractSendChannel: void onClosedIdempotent(kotlinx.coroutines.internal.LockFreeLinkedListNode)
io.flutter.embedding.engine.systemchannels.LifecycleChannel: void appIsResumed()
com.google.gson.Gson: void assertFullConsumption(java.lang.Object,com.google.gson.stream.JsonReader)
kotlinx.coroutines.DispatchedCoroutine: void afterCompletion(java.lang.Object)
com.google.common.util.concurrent.Futures$CallbackListener: java.lang.String toString()
io.flutter.view.VsyncWaiter: VsyncWaiter(io.flutter.embedding.engine.FlutterJNI)
kotlinx.coroutines.internal.ExceptionsConstuctorKt: java.lang.Throwable tryCopyException(java.lang.Throwable)
io.sentry.SystemOutLogger: void log(io.sentry.SentryLevel,java.lang.String,java.lang.Throwable)
io.flutter.plugin.platform.AccessibilityEventsDelegate: boolean requestSendAccessibilityEvent(android.view.View,android.view.View,android.view.accessibility.AccessibilityEvent)
com.google.common.collect.ImmutableSet: boolean equals(java.lang.Object)
com.google.gson.internal.Streams: Streams()
io.flutter.plugin.editing.TextInputPlugin$1: TextInputPlugin$1(io.flutter.plugin.editing.TextInputPlugin)
com.google.android.gms.auth.api.signin.GoogleSignInAccount: java.lang.String getId()
io.flutter.view.AccessibilityBridge$SemanticsNode: AccessibilityBridge$SemanticsNode(io.flutter.view.AccessibilityBridge)
com.google.android.gms.common.GoogleSignatureVerifier: com.google.android.gms.common.zzi zza(android.content.pm.PackageInfo,com.google.android.gms.common.zzi[])
com.google.common.collect.ImmutableList$SubList: com.google.common.collect.ImmutableList subList(int,int)
io.flutter.plugin.platform.PlatformPlugin$1: void showSystemOverlays(java.util.List)
androidx.collection.MapCollections$KeySet: boolean removeAll(java.util.Collection)
io.flutter.embedding.engine.dart.DartMessenger: void invokeHandler(io.flutter.embedding.engine.dart.DartMessenger$HandlerInfo,java.nio.ByteBuffer,int)
kotlin.coroutines.jvm.internal.BaseContinuationImpl: java.lang.StackTraceElement getStackTraceElement()
com.google.common.collect.RegularImmutableSet: boolean contains(java.lang.Object)
io.sentry.Scope: io.sentry.Breadcrumb executeBeforeBreadcrumb(io.sentry.SentryOptions$BeforeBreadcrumbCallback,io.sentry.Breadcrumb,java.lang.Object)
io.sentry.transport.HttpConnection: HttpConnection(io.sentry.SentryOptions,io.sentry.RequestDetails,io.sentry.transport.AuthenticatorWrapper,io.sentry.transport.RateLimiter)
kotlinx.coroutines.CoroutineId: long getId()
com.google.android.gms.maps.GoogleMap: void setLatLngBoundsForCameraTarget(com.google.android.gms.maps.model.LatLngBounds)
kotlin.reflect.KVisibility: kotlin.reflect.KVisibility valueOf(java.lang.String)
kotlinx.coroutines.android.HandlerContext: boolean isDispatchNeeded(kotlin.coroutines.CoroutineContext)
io.flutter.plugins.googlemaps.MarkerBuilder: com.google.android.gms.maps.model.MarkerOptions build()
io.sentry.IHub: void addBreadcrumb(java.lang.String)
com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher: void process(java.nio.ByteBuffer)
kotlinx.coroutines.internal.MainDispatcherLoader: MainDispatcherLoader()
io.sentry.ShutdownHookIntegration: ShutdownHookIntegration()
com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper: com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry copy(com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry)
io.flutter.embedding.android.FlutterView: void sendUserSettingsToFlutter()
com.google.android.gms.common.internal.BaseGmsClient: boolean zzm(com.google.android.gms.common.internal.BaseGmsClient)
com.google.common.collect.Lists: int indexOfRandomAccess(java.util.List,java.lang.Object)
androidx.lifecycle.ProcessLifecycleOwner$2: void onResume()
io.sentry.SentryOptions: java.lang.String getDist()
androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.Lifecycle$Event downEvent(androidx.lifecycle.Lifecycle$State)
com.google.gson.LongSerializationPolicy: com.google.gson.JsonElement serialize(java.lang.Long)
com.google.gson.JsonArray: float getAsFloat()
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean access$1800(io.flutter.view.AccessibilityBridge$SemanticsNode)
com.google.gson.JsonElement: boolean isJsonArray()
io.flutter.plugin.editing.InputConnectionAdaptor: android.text.Editable getEditable()
androidx.fragment.app.FragmentActivity: boolean markState(androidx.fragment.app.FragmentManager,androidx.lifecycle.Lifecycle$State)
com.google.android.gms.common.api.internal.zabx: void zaa(android.content.Context)
com.tekartik.sqflite.operation.ExecuteOperation: ExecuteOperation(io.flutter.plugin.common.MethodChannel$Result,com.tekartik.sqflite.SqlCommand,java.lang.Boolean)
com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter endArray()
com.google.gson.TypeAdapter: java.lang.Object fromJsonTree(com.google.gson.JsonElement)
io.flutter.view.AccessibilityViewEmbedder: boolean performAction(int,int,android.os.Bundle)
io.sentry.Span: io.sentry.ISpan startChild(java.lang.String)
kotlinx.coroutines.scheduling.WorkQueue: WorkQueue()
io.flutter.plugin.editing.TextInputPlugin: TextInputPlugin(android.view.View,io.flutter.embedding.engine.systemchannels.TextInputChannel,io.flutter.plugin.platform.PlatformViewsController)
kotlinx.coroutines.CancellableContinuationImpl: kotlinx.coroutines.DisposableHandle installParentHandle()
io.sentry.SentryOptions: void setBeforeSend(io.sentry.SentryOptions$BeforeSendCallback)
io.sentry.protocol.DebugImage: void setImageAddr(java.lang.String)
io.flutter.embedding.android.FlutterSplashView$1: FlutterSplashView$1(io.flutter.embedding.android.FlutterSplashView)
androidx.fragment.app.FragmentManagerImpl: void dispatchOptionsMenuClosed(android.view.Menu)
com.google.gson.Gson$FutureTypeAdapter: Gson$FutureTypeAdapter()
kotlin.jvm.JvmClassMappingKt: kotlin.reflect.KClass getKotlinClass(java.lang.Class)
com.google.android.gms.maps.MapsInitializer$Renderer: com.google.android.gms.maps.MapsInitializer$Renderer valueOf(java.lang.String)
com.google.android.gms.maps.model.zzs: zzs()
com.google.android.gms.maps.internal.zzby: void setScrollGesturesEnabled(boolean)
io.flutter.plugin.common.MethodCall: java.lang.Object argument(java.lang.String)
com.google.android.gms.common.api.internal.zabq: boolean zax(com.google.android.gms.common.api.internal.zabq,boolean)
io.sentry.NoOpHub: io.sentry.SentryTraceHeader traceHeaders()
kotlinx.coroutines.flow.internal.SafeCollector_commonKt: void checkContext(kotlinx.coroutines.flow.internal.SafeCollector,kotlin.coroutines.CoroutineContext)
com.google.android.gms.common.api.internal.zam: zam(com.google.android.gms.common.ConnectionResult,int)
androidx.fragment.app.Fragment: java.lang.Object getSharedElementEnterTransition()
io.flutter.plugins.googlemaps.CircleController: void remove()
com.google.android.gms.common.api.internal.TaskApiCall: TaskApiCall(com.google.android.gms.common.Feature[],boolean,int)
com.google.common.util.concurrent.SettableFuture: SettableFuture()
io.flutter.embedding.engine.FlutterJNI: void addEngineLifecycleListener(io.flutter.embedding.engine.FlutterEngine$EngineLifecycleListener)
kotlinx.coroutines.android.AndroidExceptionPreHandler: AndroidExceptionPreHandler()
androidx.core.app.ComponentActivity: void onSaveInstanceState(android.os.Bundle)
com.google.gson.internal.bind.TypeAdapters$8: TypeAdapters$8()
com.google.gson.JsonPrimitive: JsonPrimitive(java.lang.Character)
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void run()
io.sentry.MainEventProcessor: boolean shouldApplyScopeData(io.sentry.SentryBaseEvent,java.lang.Object)
io.sentry.SentryTracer: SentryTracer(io.sentry.TransactionContext,io.sentry.IHub)
com.google.android.gms.common.internal.GetServiceRequest: GetServiceRequest(int,int,int,java.lang.String,android.os.IBinder,com.google.android.gms.common.api.Scope[],android.os.Bundle,android.accounts.Account,com.google.android.gms.common.Feature[],com.google.android.gms.common.Feature[],boolean,int,boolean,java.lang.String)
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration: TextInputChannel$Configuration(boolean,boolean,boolean,boolean,boolean,io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization,io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType,java.lang.Integer,java.lang.String,io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration$Autofill,io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration[])
io.flutter.util.Preconditions: void checkState(boolean,java.lang.Object)
io.sentry.NoOpTransaction: java.lang.String getDescription()
com.google.android.gms.maps.model.PolygonOptions: java.util.List getPoints()
com.google.android.gms.common.api.internal.zabn: void run()
com.google.common.util.concurrent.AbstractFuture$SynchronizedHelper: void putThread(com.google.common.util.concurrent.AbstractFuture$Waiter,java.lang.Thread)
com.google.android.gms.common.internal.TelemetryLoggingOptions$Builder: com.google.android.gms.common.internal.TelemetryLoggingOptions build()
com.google.android.gms.common.ErrorDialogFragment: ErrorDialogFragment()
androidx.activity.OnBackPressedDispatcher: OnBackPressedDispatcher(java.lang.Runnable)
io.sentry.protocol.SentryStackFrame: java.util.List getPostContext()
com.google.android.gms.internal.base.zaa: void zad(int,android.os.Parcel)
com.google.android.gms.internal.maps.zzae: boolean zzo()
com.google.android.gms.internal.common.zzc: zzc()
io.sentry.NoOpSpan: void setOperation(java.lang.String)
com.google.common.reflect.Types$JavaVersion$4: java.lang.reflect.Type usedInGenericType(java.lang.reflect.Type)
io.flutter.plugin.platform.PlatformPlugin$1: PlatformPlugin$1(io.flutter.plugin.platform.PlatformPlugin)
com.google.android.gms.maps.internal.zzby: void setMapToolbarEnabled(boolean)
com.google.android.gms.common.api.internal.GoogleApiManager: boolean zaE(com.google.android.gms.common.api.internal.GoogleApiManager)
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1: boolean writeField(java.lang.Object)
io.flutter.embedding.engine.FlutterJNI: void onSurfaceWindowChanged(android.view.Surface)
io.sentry.protocol.SdkInfo: SdkInfo()
io.flutter.plugin.platform.PlatformViewsController: void destroyOverlaySurfaces()
androidx.fragment.app.Fragment: void onViewStateRestored(android.os.Bundle)
io.sentry.TransactionContext: java.lang.String getName()
kotlin.text.StringsKt__StringsKt: java.lang.String substringBefore$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)
androidx.lifecycle.EmptyActivityLifecycleCallbacks: void onActivityPaused(android.app.Activity)
androidx.window.embedding.SplitPairRule: boolean getFinishSecondaryWithPrimary()
com.google.gson.internal.bind.TreeTypeAdapter$GsonContextImpl: TreeTypeAdapter$GsonContextImpl(com.google.gson.internal.bind.TreeTypeAdapter,com.google.gson.internal.bind.TreeTypeAdapter$1)
androidx.core.os.LocaleListCompatWrapper: LocaleListCompatWrapper(java.util.Locale[])
com.google.gson.internal.bind.JsonTreeReader: void close()
io.flutter.view.AccessibilityBridge$SemanticsNode: int access$2102(io.flutter.view.AccessibilityBridge$SemanticsNode,int)
io.sentry.android.core.util.ConnectivityChecker$Status: ConnectivityChecker$Status(java.lang.String,int)
io.sentry.CircularFifoQueue: CircularFifoQueue(int)
io.sentry.transport.ICurrentDateProvider: long getCurrentTimeMillis()
com.google.android.gms.internal.maps.zzae: float zze()
io.sentry.protocol.DebugImage: java.lang.String getUuid()
com.google.common.base.Preconditions: java.lang.String badElementIndex(int,int,java.lang.String)
io.flutter.plugin.editing.FlutterTextUtils: boolean isEmojiModifier(int)
com.google.common.reflect.TypeToken: java.lang.reflect.Type access$500(com.google.common.reflect.TypeToken)
com.google.android.gms.dynamite.zzj: com.google.android.gms.dynamite.DynamiteModule$VersionPolicy$SelectionResult selectModule(android.content.Context,java.lang.String,com.google.android.gms.dynamite.DynamiteModule$VersionPolicy$IVersions)
kotlin.collections.EmptyIterator: void remove()
io.flutter.plugins.googlemaps.MarkerBuilder: void setIcon(com.google.android.gms.maps.model.BitmapDescriptor)
com.google.android.gms.maps.GoogleMapOptions: java.lang.Float getMaxZoomPreference()
com.tekartik.sqflite.Database: android.database.sqlite.SQLiteDatabase getWritableDatabase()
io.sentry.flutter.R$style: R$style()
io.sentry.android.core.LoadClass: java.lang.Class loadClass(java.lang.String)
io.sentry.NoOpHub: io.sentry.protocol.SentryId captureEvent(io.sentry.SentryEvent,java.lang.Object)
kotlin.coroutines.jvm.internal.DebugMetadataKt: void checkDebugMetadataVersion(int,int)
io.flutter.embedding.engine.systemchannels.TextInputChannel$1: TextInputChannel$1(io.flutter.embedding.engine.systemchannels.TextInputChannel)
com.google.android.gms.common.internal.zaab: zaab()
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: void onRestoreInstanceState(android.os.Bundle)
androidx.fragment.app.FragmentManagerImpl: void setPrimaryNavigationFragment(androidx.fragment.app.Fragment)
com.google.gson.Gson$4: java.lang.Object read(com.google.gson.stream.JsonReader)
io.sentry.protocol.OperatingSystem: java.lang.String getKernelVersion()
io.sentry.IScopeObserver: void setUser(io.sentry.protocol.User)
io.sentry.SentryClient: void sortBreadcrumbsByDate(io.sentry.SentryBaseEvent,java.util.Collection)
kotlinx.coroutines.JobImpl: JobImpl(kotlinx.coroutines.Job)
kotlin.jvm.internal.TypeIntrinsics: void throwCce(java.lang.String)
io.flutter.plugin.editing.InputConnectionAdaptor: boolean clearMetaKeyStates(int)
io.sentry.GsonSerializer: void $closeResource(java.lang.Throwable,java.lang.AutoCloseable)
com.google.android.gms.dynamite.zzq: com.google.android.gms.dynamic.IObjectWrapper zzi(com.google.android.gms.dynamic.IObjectWrapper,java.lang.String,int,com.google.android.gms.dynamic.IObjectWrapper)
io.sentry.RequestDetailsResolver: RequestDetailsResolver(io.sentry.SentryOptions)
io.sentry.util.StringUtils: java.lang.String removeSurrounding(java.lang.String,java.lang.String)
com.google.android.gms.maps.zzx: zzx(com.google.android.gms.maps.GoogleMap,com.google.android.gms.maps.GoogleMap$OnCameraIdleListener)
kotlinx.coroutines.channels.AbstractChannel: void onReceiveEnqueued()
com.google.android.gms.common.internal.zag: com.google.android.gms.common.internal.zag zab(android.app.Activity,android.content.Intent,int)
io.sentry.SentryTracer: java.lang.String getTag(java.lang.String)
io.sentry.SentryEnvelopeHeaderAdapter: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
io.sentry.android.core.AnrIntegration: void reportANR(io.sentry.IHub,io.sentry.ILogger,io.sentry.android.core.ApplicationNotResponding)
kotlinx.coroutines.ExecutorCoroutineDispatcher$Key$1: ExecutorCoroutineDispatcher$Key$1()
io.flutter.embedding.android.FlutterSplashView$SavedState: java.lang.String access$600(io.flutter.embedding.android.FlutterSplashView$SavedState)
com.google.android.gms.common.api.internal.zag: void zaf(com.google.android.gms.common.api.internal.zabq)
io.flutter.plugin.platform.PlatformViewsController: void onBeginFrame()
com.google.android.gms.maps.internal.zzg: void setOnCircleClickListener(com.google.android.gms.maps.internal.zzx)
androidx.fragment.app.FragmentActivity: void supportInvalidateOptionsMenu()
io.flutter.embedding.engine.FlutterJNI: void ensureRunningOnMainThread()
io.flutter.embedding.engine.systemchannels.RestorationChannel: java.util.Map packageData(byte[])
com.google.android.gms.internal.maps.zzb: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)
io.flutter.plugins.googlemaps.PolylinesController: void setGoogleMap(com.google.android.gms.maps.GoogleMap)
io.flutter.plugins.googlemaps.GoogleMapController$1: void onSnapshotReady(android.graphics.Bitmap)
kotlin.jvm.internal.Intrinsics: void throwParameterIsNullNPE(java.lang.String)
com.google.android.gms.common.ConnectionResult: android.app.PendingIntent getResolution()
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$11: java.lang.Object invoke(java.lang.Object)
io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler$1: void notImplemented()
io.sentry.protocol.OperatingSystem: void setBuild(java.lang.String)
com.google.android.gms.common.internal.zzr: boolean zzc(com.google.android.gms.common.internal.zzn,android.content.ServiceConnection,java.lang.String,java.util.concurrent.Executor)
com.google.android.gms.maps.internal.zzaq: boolean zza(int,android.os.Parcel,android.os.Parcel,int)
androidx.fragment.app.FragmentManagerImpl: androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator makeOpenCloseAnimation(float,float,float,float)
androidx.collection.MapCollections$KeySet: boolean add(java.lang.Object)
com.google.android.gms.common.api.internal.zabl: void onBackgroundStateChanged(boolean)
com.google.android.gms.internal.base.zac: void zac(android.os.Parcel,android.os.Parcelable)
io.sentry.flutter.SentryFlutterPlugin: boolean writeEnvelope(java.lang.String)
androidx.arch.core.internal.SafeIterableMap: androidx.arch.core.internal.SafeIterableMap$Entry put(java.lang.Object,java.lang.Object)
io.flutter.plugin.common.StandardMessageCodec: void writeLong(java.io.ByteArrayOutputStream,long)
io.sentry.android.ndk.NdkScopeObserver: void addBreadcrumb(io.sentry.Breadcrumb)
com.google.android.gms.maps.model.MarkerOptions: com.google.android.gms.maps.model.MarkerOptions visible(boolean)
io.flutter.embedding.android.FlutterView: void access$000(io.flutter.embedding.android.FlutterView,boolean,boolean)
io.sentry.protocol.SentrySpan: io.sentry.SpanStatus getStatus()
io.flutter.plugin.editing.TextInputPlugin: void clearPlatformViewClient(int)
io.sentry.protocol.Device: java.lang.Long getExternalStorageSize()
kotlin.coroutines.AbstractCoroutineContextElement: java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2)
com.google.gson.Gson$FutureTypeAdapter: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
kotlinx.coroutines.channels.AbstractChannel$Itr: java.lang.Object next()
com.google.android.gms.common.zzi: zzi(byte[])
io.sentry.android.ndk.INativeScope: void removeExtra(java.lang.String)
com.google.android.gms.internal.maps.zzk: com.google.android.gms.internal.maps.zzl zzb(android.os.IBinder)
io.sentry.android.core.util.ConnectivityChecker: android.net.ConnectivityManager getConnectivityManager(android.content.Context,io.sentry.ILogger)
com.google.android.gms.common.wrappers.InstantApps: boolean isInstantApp(android.content.Context)
io.flutter.plugin.platform.AccessibilityEventsDelegate: void setAccessibilityBridge(io.flutter.view.AccessibilityBridge)
io.flutter.plugin.common.MethodChannel: void invokeMethod(java.lang.String,java.lang.Object,io.flutter.plugin.common.MethodChannel$Result)
kotlinx.coroutines.internal.ExceptionsConstuctorKt$tryCopyException$5$1: java.lang.Object invoke(java.lang.Object)
com.google.android.gms.common.internal.zzv: zzv(android.os.IBinder)
com.google.android.gms.maps.model.PolylineOptions: com.google.android.gms.maps.model.PolylineOptions visible(boolean)
com.google.android.gms.maps.internal.zzg: boolean isTrafficEnabled()
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction: int access$4200(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction)
io.sentry.DateUtils: DateUtils()
kotlinx.coroutines.channels.AbstractChannel$RemoveReceiveOnCancel: AbstractChannel$RemoveReceiveOnCancel(kotlinx.coroutines.channels.AbstractChannel,kotlinx.coroutines.channels.Receive)
kotlinx.coroutines.JobSupport: kotlinx.coroutines.ChildHandle getParentHandle$kotlinx_coroutines_core()
androidx.fragment.app.FragmentManagerImpl: void addAddedFragments(androidx.collection.ArraySet)
com.google.gson.internal.LinkedTreeMap$1: int compare(java.lang.Object,java.lang.Object)
com.google.gson.internal.LinkedTreeMap$Node: boolean equals(java.lang.Object)
com.google.common.collect.Lists: int lastIndexOfImpl(java.util.List,java.lang.Object)
com.google.android.gms.internal.common.zzb: boolean onTransact(int,android.os.Parcel,android.os.Parcel,int)
com.google.android.gms.maps.GoogleMap: void setOnMarkerDragListener(com.google.android.gms.maps.GoogleMap$OnMarkerDragListener)
com.google.gson.JsonPrimitive: int getAsInt()
androidx.window.embedding.SplitPairRule: int hashCode()
com.google.android.gms.maps.zzag: void onResume()
kotlinx.coroutines.YieldContext: YieldContext()
com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper$1: java.lang.Object run()
androidx.window.layout.SidecarCompat$registerConfigurationChangeListener$configChangeObserver$1: SidecarCompat$registerConfigurationChangeListener$configChangeObserver$1(androidx.window.layout.SidecarCompat,android.app.Activity)
com.google.common.hash.BloomFilterStrategies: com.google.common.hash.BloomFilterStrategies[] values()
androidx.lifecycle.ProcessLifecycleOwnerInitializer: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])
io.flutter.embedding.engine.systemchannels.NavigationChannel$1: void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
com.google.gson.JsonPrimitive: boolean isString()
com.google.common.reflect.Types$GenericArrayTypeImpl: boolean equals(java.lang.Object)
com.google.android.gms.maps.model.Polygon: void setClickable(boolean)
com.google.common.collect.MapMakerInternalMap$Segment: java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean)
kotlin.jvm.internal.Reflection: kotlin.reflect.KFunction function(kotlin.jvm.internal.FunctionReference)
io.flutter.plugins.googlemaps.GoogleMapFactory: GoogleMapFactory(io.flutter.plugin.common.BinaryMessenger,io.flutter.plugins.googlemaps.LifecycleProvider)
com.google.gson.TypeAdapter: com.google.gson.TypeAdapter nullSafe()
kotlinx.coroutines.BuildersKt: kotlinx.coroutines.Job launch(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2)
androidx.fragment.app.FragmentManagerViewModel: boolean shouldDestroy(androidx.fragment.app.Fragment)
io.flutter.plugins.googlemaps.PolygonsController: boolean onPolygonTap(java.lang.String)
androidx.fragment.app.FragmentActivity: void onPanelClosed(int,android.view.Menu)
androidx.collection.ArraySet: int indexOf(java.lang.Object,int)
androidx.core.view.WindowInsetsControllerCompat$Impl: WindowInsetsControllerCompat$Impl()
io.sentry.Span: void setTag(java.lang.String,java.lang.String)
com.google.gson.internal.LinkedHashTreeMap$KeySet: int size()
androidx.lifecycle.ViewModel: ViewModel()
com.google.common.reflect.TypeCapture: java.lang.reflect.Type capture()
com.google.common.hash.LittleEndianByteArray$JavaLittleEndianBytes: long getLongLittleEndian(byte[],int)
com.google.android.gms.maps.zzb: void zzb(com.google.android.gms.internal.maps.zzx)
com.google.gson.stream.JsonReader: java.lang.String nextName()
io.flutter.embedding.android.FlutterSplashView: FlutterSplashView(android.content.Context)
kotlinx.coroutines.internal.ExceptionsConstuctorKt: kotlin.jvm.functions.Function1 createConstructor(java.lang.reflect.Constructor)
androidx.collection.ContainerHelpers: boolean equal(java.lang.Object,java.lang.Object)
kotlinx.coroutines.AbstractCoroutine: kotlin.coroutines.CoroutineContext getContext()
io.sentry.Sentry: void setTransaction(java.lang.String)
kotlinx.coroutines.internal.ExceptionsConstuctorKt$tryCopyException$5$1: java.lang.Void invoke(java.lang.Throwable)
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: void addWindowLayoutInfoListener(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
kotlin.ranges.IntRange$Companion: IntRange$Companion()
io.sentry.SentryOptions: void setTransportGate(io.sentry.transport.ITransportGate)
io.flutter.plugin.platform.VirtualDisplayController: void dispatchTouchEvent(android.view.MotionEvent)
com.google.android.gms.common.GooglePlayServicesUtilLight: boolean isRestrictedUserProfile(android.content.Context)
io.sentry.SentryOptions: java.util.Map getTags()
com.google.android.gms.maps.GoogleMap: void setOnPolygonClickListener(com.google.android.gms.maps.GoogleMap$OnPolygonClickListener)
io.flutter.embedding.android.FlutterSurfaceView: void access$200(io.flutter.embedding.android.FlutterSurfaceView)
kotlin.collections.EmptyIterator: boolean hasNext()
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType[] values()
io.flutter.embedding.android.KeyboardManager: KeyboardManager(android.view.View,io.flutter.plugin.editing.TextInputPlugin,io.flutter.embedding.android.KeyboardManager$Responder[])
com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
com.google.common.util.concurrent.CycleDetectingLockFactory$Policies$3: CycleDetectingLockFactory$Policies$3(java.lang.String,int)
kotlinx.coroutines.CoroutineDispatcher: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)
io.flutter.plugins.googlemaps.MarkersController: void changeMarker(java.lang.Object)
com.google.android.gms.common.GoogleSignatureVerifier: boolean zzb(android.content.pm.PackageInfo,boolean)
com.google.gson.Gson$3: void write(com.google.gson.stream.JsonWriter,java.lang.Number)
io.sentry.SynchronizedQueue: java.util.Queue decorated()
io.flutter.plugins.googlemaps.GoogleMapController: void updateInitialTileOverlays()
io.flutter.embedding.android.FlutterSplashView: java.lang.String access$402(io.flutter.embedding.android.FlutterSplashView,java.lang.String)
com.google.gson.JsonPrimitive: float getAsFloat()
io.sentry.android.core.SentryAndroidOptions: io.sentry.android.core.IDebugImagesLoader getDebugImagesLoader()
kotlin.collections.CollectionsKt___CollectionsKt: java.util.List toMutableList(java.util.Collection)
kotlinx.coroutines.JobNode: boolean isActive()
io.sentry.SessionAdapter: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
io.flutter.view.AccessibilityBridge$2: AccessibilityBridge$2(io.flutter.view.AccessibilityBridge)
io.sentry.transport.ReusableCountLatch$Sync: void access$200(io.sentry.transport.ReusableCountLatch$Sync)
com.google.gson.internal.bind.TypeAdapters$21: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
io.sentry.adapters.OrientationDeserializerAdapter: OrientationDeserializerAdapter(io.sentry.SentryOptions)
io.flutter.plugin.platform.PlatformViewsController: void attachToFlutterRenderer(io.flutter.embedding.engine.renderer.FlutterRenderer)
com.google.android.gms.internal.maps.zzab: void zzt(int)
io.sentry.MainEventProcessor: void setCommons(io.sentry.SentryBaseEvent)
com.google.gson.internal.bind.TypeAdapters$3: java.lang.Object read(com.google.gson.stream.JsonReader)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView: boolean childHasFocus(android.view.View)
io.sentry.android.ndk.SentryNdkUtil: void addPackage(io.sentry.protocol.SdkVersion)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: boolean onActivityResult(int,int,android.content.Intent)
kotlinx.coroutines.scheduling.LimitingDispatcher: void execute(java.lang.Runnable)
io.sentry.android.core.TempSensorBreadcrumbsIntegration: void close()
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean access$4600(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.sentry.SpanContext: SpanContext(io.sentry.SpanContext)
com.google.android.gms.maps.zzp: void zzb(com.google.android.gms.internal.maps.zzad)
androidx.fragment.app.FragmentActivity$HostCallbacks: androidx.lifecycle.ViewModelStore getViewModelStore()
kotlinx.coroutines.JobCancellationException: kotlinx.coroutines.JobCancellationException createCopy()
androidx.fragment.app.FragmentTransitionCompat21$2: void onTransitionEnd(android.transition.Transition)
io.flutter.plugins.googlemaps.PolylineBuilder: void setZIndex(float)
com.google.gson.internal.ConstructorConstructor: java.lang.String toString()
com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper: com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry newEntry(com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry)
io.sentry.config.EnvironmentVariablePropertiesProvider: java.util.Map getMap(java.lang.String)
androidx.fragment.app.DialogFragment$1: void run()
io.sentry.SentryEnvelopeItemHeaderAdapter: io.sentry.SentryEnvelopeItemHeader read(com.google.gson.stream.JsonReader)
androidx.window.layout.ExtensionsWindowLayoutInfoAdapter: androidx.window.layout.FoldingFeature translate$window_release(android.app.Activity,androidx.window.extensions.layout.FoldingFeature)
io.sentry.protocol.SentryStackFrame: void setImageAddr(java.lang.String)
com.google.common.reflect.TypeVisitor: void visit(java.lang.reflect.Type[])
io.sentry.android.core.EnvelopeFileObserverIntegration: java.lang.String getPath(io.sentry.SentryOptions)
com.google.android.gms.maps.GoogleMap: com.google.android.gms.maps.Projection getProjection()
kotlinx.coroutines.internal.ThreadContextKt$countAll$1: ThreadContextKt$countAll$1()
kotlin.coroutines.CombinedContext: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)
com.google.android.gms.maps.model.Marker: void setInfoWindowAnchor(float,float)
com.google.gson.internal.Excluder: boolean isInnerClass(java.lang.Class)
io.flutter.embedding.engine.FlutterEngineCache: FlutterEngineCache()
io.flutter.plugin.platform.PlatformPlugin: void setSystemChromeEnabledSystemUIOverlays(java.util.List)
androidx.collection.SimpleArrayMap: boolean containsKey(java.lang.Object)
com.google.android.gms.dynamic.zaa: void onDelegateCreated(com.google.android.gms.dynamic.LifecycleDelegate)
io.sentry.protocol.SentryThread: java.lang.Boolean isDaemon()
com.google.gson.internal.LinkedHashTreeMap$1: int compare(java.lang.Comparable,java.lang.Comparable)
kotlin.collections.EmptyList: int indexOf(java.lang.Void)
com.google.gson.TypeAdapter: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
io.flutter.embedding.android.AndroidTouchProcessor: int getPointerDeviceTypeForToolType(int)
com.google.gson.stream.JsonToken: JsonToken(java.lang.String,int)
com.google.gson.JsonElement: float getAsFloat()
com.google.android.gms.common.internal.ClientSettings: java.util.Set getRequiredScopes()
io.flutter.view.AccessibilityBridge$TextDirection: io.flutter.view.AccessibilityBridge$TextDirection valueOf(java.lang.String)
com.google.android.gms.signin.internal.zah: zah()
com.google.common.collect.ImmutableCollection: boolean addAll(java.util.Collection)
androidx.fragment.app.FragmentTransitionCompat21$3: FragmentTransitionCompat21$3(androidx.fragment.app.FragmentTransitionCompat21,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList,java.lang.Object,java.util.ArrayList)
kotlinx.coroutines.JobSupport$Finishing: boolean isActive()
io.flutter.plugins.urllauncher.WebViewActivity: android.webkit.WebView access$000(io.flutter.plugins.urllauncher.WebViewActivity)
com.google.common.collect.ImmutableList: void add(int,java.lang.Object)
com.google.android.gms.maps.UiSettings: boolean isMapToolbarEnabled()
io.sentry.android.core.TempSensorBreadcrumbsIntegration: TempSensorBreadcrumbsIntegration(android.content.Context)
com.google.android.gms.dynamite.zzq: int zzf(com.google.android.gms.dynamic.IObjectWrapper,java.lang.String,boolean)
io.sentry.android.core.ActivityLifecycleIntegration: void onActivityPostResumed(android.app.Activity)
com.google.android.gms.common.internal.zav: zav(int,android.os.IBinder,com.google.android.gms.common.ConnectionResult,boolean,boolean)
io.sentry.cache.EnvelopeCache: java.util.Date getTimestampFromCrashMarkerFile(java.io.File)
io.sentry.adapters.SpanIdDeserializerAdapter: java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext)
com.google.common.collect.MapMakerInternalMap$Strength: com.google.common.base.Equivalence defaultEquivalence()
io.flutter.plugins.googlemaps.CircleBuilder: boolean consumeTapEvents()
androidx.fragment.app.FragmentManagerImpl: void executeOpsTogether(java.util.ArrayList,java.util.ArrayList,int,int)
io.sentry.adapters.TimeZoneSerializerAdapter: com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,com.google.gson.JsonSerializationContext)
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: ExtensionWindowLayoutInfoBackend$MulticastConsumer(android.app.Activity)
com.google.android.gms.common.api.internal.zal: java.util.Set zab()
io.flutter.FlutterInjector$Builder$NamedThreadFactory: FlutterInjector$Builder$NamedThreadFactory(io.flutter.FlutterInjector$Builder,io.flutter.FlutterInjector$1)
com.google.gson.internal.bind.MapTypeAdapterFactory: MapTypeAdapterFactory(com.google.gson.internal.ConstructorConstructor,boolean)
io.sentry.android.core.Installation: java.lang.String id(android.content.Context)
kotlinx.coroutines.scheduling.Task: Task()
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: FlutterActivityAndFragmentDelegate(io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$Host)
androidx.window.embedding.SplitController$Companion: void initialize(android.content.Context,int)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: void onPause()
androidx.arch.core.internal.SafeIterableMap$ListIterator: java.util.Map$Entry next()
com.google.android.gms.common.GoogleApiAvailability: void showErrorNotification(android.content.Context,int)
io.flutter.plugin.editing.TextEditingDelta: void setDeltas(java.lang.CharSequence,java.lang.CharSequence,int,int)
io.sentry.SamplingContext: io.sentry.TransactionContext getTransactionContext()
com.google.android.gms.common.internal.ConnectionTelemetryConfiguration: ConnectionTelemetryConfiguration(com.google.android.gms.common.internal.RootTelemetryConfiguration,boolean,boolean,int[],int,int[])
androidx.fragment.app.Fragment: void startPostponedEnterTransition()
com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter nullValue()
com.google.common.hash.Murmur3_128HashFunction: com.google.common.hash.Hasher newHasher()
com.google.common.util.concurrent.AbstractFuture: boolean isDone()
com.google.android.gms.signin.internal.SignInClientImpl: int getMinApkVersion()
com.google.common.io.Files$FilePredicate$1: boolean apply(java.io.File)
androidx.arch.core.internal.SafeIterableMap$ListIterator: void supportRemove(androidx.arch.core.internal.SafeIterableMap$Entry)
com.google.android.gms.maps.model.MarkerOptions: MarkerOptions()
io.sentry.SentryClient: io.sentry.protocol.SentryTransaction processTransaction(io.sentry.protocol.SentryTransaction)
androidx.fragment.app.FragmentManagerImpl: androidx.lifecycle.ViewModelStore getViewModelStore(androidx.fragment.app.Fragment)
io.flutter.plugin.platform.PlatformViewsController: void access$600(io.flutter.plugin.platform.PlatformViewsController,int,int)
com.google.android.gms.maps.internal.zzl: void onCreate(android.os.Bundle)
androidx.fragment.app.Fragment: void performPrimaryNavigationFragmentChanged()
com.google.android.gms.maps.model.zzc: zzc()
io.flutter.embedding.android.FlutterTextureView: boolean access$100(io.flutter.embedding.android.FlutterTextureView)
com.google.gson.internal.LinkedTreeMap$KeySet$1: LinkedTreeMap$KeySet$1(com.google.gson.internal.LinkedTreeMap$KeySet)
io.flutter.plugins.googlemaps.GoogleMapBuilder: void setInitialTileOverlays(java.util.List)
kotlin.text.StringsKt__StringsKt: java.lang.String substringBefore(java.lang.String,java.lang.String,java.lang.String)
com.google.android.gms.internal.base.zaa: android.os.Parcel zaa()
com.google.common.collect.ImmutableSet$Builder: ImmutableSet$Builder()
androidx.window.core.Version: androidx.window.core.Version access$getVERSION_0_1$cp()
com.google.android.gms.maps.GoogleMapOptions: com.google.android.gms.maps.GoogleMapOptions zoomControlsEnabled(boolean)
io.flutter.embedding.engine.loader.FlutterLoader: java.lang.String findAppBundlePath()
io.flutter.plugins.urllauncher.UrlLauncher$LaunchStatus: UrlLauncher$LaunchStatus(java.lang.String,int)
com.google.android.gms.common.internal.zza: zza(com.google.android.gms.common.internal.BaseGmsClient,int,android.os.Bundle)
kotlin.text.StringsKt__AppendableKt: void appendElement(java.lang.Appendable,java.lang.Object,kotlin.jvm.functions.Function1)
androidx.window.embedding.ActivityStack: ActivityStack(java.util.List,boolean,int,kotlin.jvm.internal.DefaultConstructorMarker)
io.sentry.exception.ExceptionMechanismException: io.sentry.protocol.Mechanism getExceptionMechanism()
com.google.android.gms.common.api.internal.NonGmsServiceBrokerClient: void zaa(android.os.IBinder)
com.google.common.base.Preconditions: int checkPositionIndex(int,int)
io.sentry.adapters.SpanIdSerializerAdapter: SpanIdSerializerAdapter(io.sentry.SentryOptions)
com.google.android.gms.maps.model.PolygonOptions: com.google.android.gms.maps.model.PolygonOptions visible(boolean)
com.google.android.gms.dynamite.zzq: com.google.android.gms.dynamic.IObjectWrapper zzh(com.google.android.gms.dynamic.IObjectWrapper,java.lang.String,int)
io.flutter.view.VsyncWaiter$DisplayListener: void register()
kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KFunction function(kotlin.jvm.internal.FunctionReference)
io.sentry.Breadcrumb: void acceptUnknownProperties(java.util.Map)
io.sentry.android.core.SentryAndroidOptions: SentryAndroidOptions()
androidx.collection.MapCollections$ValuesCollection: void clear()
io.sentry.HostnameCache$HostnameCacheThreadFactory: HostnameCache$HostnameCacheThreadFactory()
io.flutter.embedding.android.FlutterActivity: void onFlutterTextureViewCreated(io.flutter.embedding.android.FlutterTextureView)
io.sentry.util.CollectionUtils$Predicate: boolean test(java.lang.Object)
com.google.android.gms.common.api.internal.NonGmsServiceBrokerClient: java.lang.String getEndpointPackageName()
com.google.android.gms.common.api.internal.ApiKey: ApiKey(com.google.android.gms.common.api.Api,com.google.android.gms.common.api.Api$ApiOptions,java.lang.String)
kotlinx.coroutines.JobKt: kotlinx.coroutines.CompletableJob Job(kotlinx.coroutines.Job)
io.sentry.Scope$IWithSession: void accept(io.sentry.Session)
com.google.android.gms.internal.maps.zzv: void zzw(java.lang.String)
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$15: java.lang.Object invoke(java.lang.Object)
kotlin.coroutines.AbstractCoroutineContextElement: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)
io.flutter.plugins.googlemaps.Convert: java.lang.String interpretPolylineOptions(java.lang.Object,io.flutter.plugins.googlemaps.PolylineOptionsSink)
com.google.android.gms.common.internal.GmsClientSupervisor: GmsClientSupervisor()
com.google.android.gms.internal.common.zzd: android.app.PendingIntent zza(android.content.Context,int,android.content.Intent,int)
com.google.android.gms.common.api.internal.zabq: void zaE(com.google.android.gms.common.api.Status,java.lang.Exception,boolean)
com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl: $Gson$Types$ParameterizedTypeImpl(java.lang.reflect.Type,java.lang.reflect.Type,java.lang.reflect.Type[])
kotlinx.coroutines.CancellableContinuationImpl: boolean isReusable()
kotlinx.coroutines.JobSupport: java.lang.Object tryMakeCompletingSlowPath(kotlinx.coroutines.Incomplete,java.lang.Object)
com.google.android.gms.maps.model.BitmapDescriptorFactory: void zza(com.google.android.gms.internal.maps.zzi)
com.google.android.gms.common.api.internal.zabq: boolean zaL(com.google.android.gms.common.api.internal.zai)
io.sentry.exception.SentryEnvelopeException: SentryEnvelopeException(java.lang.String)
androidx.core.os.LocaleListPlatformWrapper: java.lang.Object getLocaleList()
kotlinx.coroutines.flow.internal.SafeCollector$collectContextSize$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)
com.google.android.gms.tasks.zzt: void execute(java.lang.Runnable)
kotlinx.coroutines.JobSupport$Finishing: void addExceptionLocked(java.lang.Throwable)
androidx.lifecycle.LiveData$LifecycleBoundObserver: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)
io.sentry.protocol.SentryStackFrame: java.util.List getFramesOmitted()
io.flutter.embedding.engine.FlutterJNI: void nativeLoadDartDeferredLibrary(long,int,java.lang.String[])
androidx.window.layout.FoldingFeature$OcclusionType: FoldingFeature$OcclusionType(java.lang.String)
kotlinx.coroutines.CoroutineStart: boolean isLazy()
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: void onReattachedToActivityForConfigChanges(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding)
io.flutter.plugins.sharedpreferences.MethodCallHandlerImpl$1$1: MethodCallHandlerImpl$1$1(io.flutter.plugins.sharedpreferences.MethodCallHandlerImpl$1,boolean)
com.google.android.gms.maps.model.Polygon: void setPoints(java.util.List)
io.sentry.Hub: void setTransaction(java.lang.String)
io.flutter.embedding.android.FlutterImageView: void init()
io.flutter.plugin.editing.FlutterTextUtils: int getOffsetAfter(java.lang.CharSequence,int)
androidx.window.embedding.SplitController: void addSplitListener(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
com.google.common.hash.ChecksumHashFunction: java.lang.String toString()
kotlin.text.StringsKt__StringsKt: int lastIndexOf(java.lang.CharSequence,char,int,boolean)
com.google.android.gms.tasks.TaskCompletionSource: void setException(java.lang.Exception)
kotlinx.coroutines.EventLoopImplPlatform: void reschedule(long,kotlinx.coroutines.EventLoopImplBase$DelayedTask)
com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet access$100(int,java.lang.Object[])
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void updateTexImage()
io.sentry.SentryTraceHeader: java.lang.String getName()
com.google.android.gms.common.internal.zzt: android.content.Intent zzb(java.lang.String,java.lang.String)
io.sentry.protocol.Mechanism: java.lang.String getHelpLink()
io.flutter.plugins.googlemaps.GoogleMapController: void onStop(androidx.lifecycle.LifecycleOwner)
com.google.gson.internal.UnsafeAllocator$3: UnsafeAllocator$3(java.lang.reflect.Method)
com.google.common.hash.Murmur3_128HashFunction: int hashCode()
io.flutter.embedding.engine.FlutterJNI: boolean isCodePointEmoji(int)
io.sentry.android.core.SentryInitProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)
io.flutter.plugins.googlemaps.PolylinesController: PolylinesController(io.flutter.plugin.common.MethodChannel,float)
kotlin.jvm.internal.TypeIntrinsics: java.lang.Object beforeCheckcastToFunctionOfArity(java.lang.Object,int)
io.sentry.android.core.util.RootChecker: boolean checkRootFiles()
kotlinx.coroutines.internal.AtomicOp: java.lang.Object decide(java.lang.Object)
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void beforeTask(int)
com.google.android.gms.common.api.internal.zabu: com.google.android.gms.common.api.internal.ApiKey zab(com.google.android.gms.common.api.internal.zabu)
kotlin.ranges.IntRange: java.lang.Integer getStart()
com.google.android.gms.maps.internal.zzg: com.google.android.gms.maps.model.CameraPosition getCameraPosition()
com.google.android.gms.maps.CameraUpdateFactory: com.google.android.gms.maps.CameraUpdate scrollBy(float,float)
io.flutter.plugins.googlemaps.GoogleMapController: void onMarkerDrag(com.google.android.gms.maps.model.Marker)
io.sentry.Sentry: void endSession()
io.sentry.Hub: Hub(io.sentry.SentryOptions,io.sentry.Stack$StackItem)
io.sentry.protocol.SdkInfo: java.lang.Integer getVersionPatchlevel()
kotlin.text.StringsKt__StringsKt: int indexOf$StringsKt__StringsKt$default(java.lang.CharSequence,java.lang.CharSequence,int,int,boolean,boolean,int,java.lang.Object)
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory: com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode: PlatformChannel$SystemUiMode(java.lang.String,int,java.lang.String)
androidx.collection.MapCollections$ValuesCollection: MapCollections$ValuesCollection(androidx.collection.MapCollections)
kotlin.collections.EmptyMap: void clear()
io.sentry.flutter.SentryFlutterPlugin: void setEventOriginTag(io.sentry.SentryEvent)
com.google.gson.stream.JsonReader: void beginObject()
androidx.lifecycle.ClassesInfoCache: ClassesInfoCache()
io.sentry.protocol.Gpu: void setName(java.lang.String)
androidx.fragment.app.Fragment: void performActivityCreated(android.os.Bundle)
io.sentry.android.core.AnrIntegration: void register(io.sentry.IHub,io.sentry.android.core.SentryAndroidOptions)
androidx.window.embedding.SplitPairFilter: int hashCode()
io.sentry.OutboxSender: OutboxSender(io.sentry.IHub,io.sentry.IEnvelopeReader,io.sentry.ISerializer,io.sentry.ILogger,long)
kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)
com.google.android.gms.common.internal.safeparcel.SafeParcelReader: void zza(android.os.Parcel,int,int,int)
com.google.android.gms.maps.model.Polyline: void setColor(int)
androidx.fragment.app.BackStackState$1: java.lang.Object createFromParcel(android.os.Parcel)
com.google.android.gms.maps.model.Polygon: void remove()
com.google.android.gms.dynamic.zaa: zaa(com.google.android.gms.dynamic.DeferredLifecycleHelper)
kotlin.Result: java.lang.Object constructor-impl(java.lang.Object)
kotlinx.coroutines.EventLoop: long delta(boolean)
io.flutter.view.AccessibilityBridge$SemanticsNode: int access$2002(io.flutter.view.AccessibilityBridge$SemanticsNode,int)
com.google.android.gms.maps.UiSettings: void setMapToolbarEnabled(boolean)
io.sentry.NoOpTransaction: io.sentry.protocol.Contexts getContexts()
com.google.android.gms.common.api.internal.GoogleApiManager: void zaK()
com.google.common.base.MoreObjects$ToStringHelper: com.google.common.base.MoreObjects$ToStringHelper addHolder(java.lang.Object)
io.flutter.plugins.googlemaps.PolygonController: PolygonController(com.google.android.gms.maps.model.Polygon,boolean,float)
com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper: com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper instance()
kotlinx.coroutines.JobSupportKt: kotlinx.coroutines.internal.Symbol access$getSEALED$p()
io.flutter.plugin.editing.InputConnectionAdaptor: android.view.inputmethod.ExtractedText getExtractedText(android.view.inputmethod.ExtractedTextRequest,int)
androidx.arch.core.internal.FastSafeIterableMap: androidx.arch.core.internal.SafeIterableMap$Entry get(java.lang.Object)
androidx.lifecycle.DefaultLifecycleObserver: void onDestroy(androidx.lifecycle.LifecycleOwner)
io.sentry.protocol.SentryThread: void acceptUnknownProperties(java.util.Map)
io.sentry.android.core.NoOpDebugImagesLoader: NoOpDebugImagesLoader()
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView: void readyToDisplay(io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack,int,int,int,int)
com.google.gson.internal.bind.JsonTreeReader: void promoteNameToValue()
io.sentry.protocol.Contexts: void setBrowser(io.sentry.protocol.Browser)
androidx.fragment.app.FragmentActivity$HostCallbacks: android.view.LayoutInflater onGetLayoutInflater()
io.flutter.embedding.engine.FlutterEngine: io.flutter.plugin.localization.LocalizationPlugin getLocalizationPlugin()
kotlin.text.StringsKt__StringsJVMKt: boolean regionMatches(java.lang.String,int,java.lang.String,int,int,boolean)
com.google.gson.JsonDeserializationContext: java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type)
com.google.gson.internal.bind.TreeTypeAdapter$SingleTypeFactory: TreeTypeAdapter$SingleTypeFactory(java.lang.Object,com.google.gson.reflect.TypeToken,boolean,java.lang.Class)
io.flutter.view.AccessibilityBridge: int access$7100()
io.sentry.android.core.DefaultAndroidEventProcessor: java.lang.String getAbi()
com.google.android.gms.maps.CameraUpdateFactory: com.google.android.gms.maps.internal.ICameraUpdateFactoryDelegate zzb()
com.google.gson.internal.ConstructorConstructor$10: ConstructorConstructor$10(com.google.gson.internal.ConstructorConstructor)
io.flutter.view.VsyncWaiter: void init()
androidx.fragment.app.FragmentTransitionImpl: void setNameOverridesReordered(android.view.View,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.util.Map)
com.google.gson.LongSerializationPolicy$2: LongSerializationPolicy$2(java.lang.String,int)
kotlinx.coroutines.channels.RendezvousChannel: boolean isBufferAlwaysEmpty()
io.sentry.SentryBaseEvent: void setExtra(java.lang.String,java.lang.Object)
com.google.gson.JsonNull: boolean equals(java.lang.Object)
com.google.android.gms.signin.internal.zaf: void zag(com.google.android.gms.signin.internal.zai,com.google.android.gms.signin.internal.zae)
io.flutter.embedding.android.FlutterTextureView: void pause()
androidx.fragment.app.FragmentState: FragmentState(android.os.Parcel)
com.google.android.gms.common.api.internal.BasePendingResult$CallbackHandler: void handleMessage(android.os.Message)
io.flutter.plugins.googlemaps.TileProviderController$Worker: void success(java.lang.Object)
io.sentry.SentryOptions$Proxy: void setPass(java.lang.String)
androidx.window.R$id: R$id()
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: void accept(java.lang.Object)
com.google.android.gms.maps.model.VisibleRegion: java.lang.String toString()
kotlin.random.FallbackThreadLocalRandom$implStorage$1: java.lang.Object initialValue()
kotlin.Unit: Unit()
com.google.android.gms.maps.MapView: void onResume()
androidx.fragment.app.FragmentManagerImpl: void reportBackStackChanged()
androidx.window.embedding.ExtensionEmbeddingBackend: androidx.window.embedding.EmbeddingInterfaceCompat getEmbeddingExtension()
io.sentry.Hub: io.sentry.protocol.SentryId captureEnvelope(io.sentry.SentryEnvelope,java.lang.Object)
io.flutter.embedding.engine.systemchannels.RestorationChannel: byte[] getRestorationData()
com.google.android.gms.common.api.GoogleApiActivity: GoogleApiActivity()
androidx.fragment.app.FragmentManagerImpl: void completeExecute(androidx.fragment.app.BackStackRecord,boolean,boolean,boolean)
com.google.android.gms.common.api.internal.zzb: void onStart()
com.google.android.gms.maps.model.Cap: Cap(int,android.os.IBinder,java.lang.Float)
com.google.android.gms.common.api.internal.zabq: void zaj(com.google.android.gms.common.api.internal.zabq)
com.google.android.gms.maps.model.Cap: int hashCode()
io.sentry.IScopeObserver: void setExtra(java.lang.String,java.lang.String)
io.sentry.flutter.R$drawable: R$drawable()
com.google.gson.internal.LinkedHashTreeMap$KeySet: java.util.Iterator iterator()
com.google.android.gms.common.api.internal.LifecycleCallback: LifecycleCallback(com.google.android.gms.common.api.internal.LifecycleFragment)
androidx.window.embedding.SplitController$Companion: SplitController$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt$createCoroutineUnintercepted$$inlined$createCoroutineFromSuspendFunction$IntrinsicsKt__IntrinsicsJvmKt$1: java.lang.Object invokeSuspend(java.lang.Object)
com.google.gson.stream.JsonScope: JsonScope()
io.flutter.view.AccessibilityBridge: io.flutter.view.AccessibilityBridge$CustomAccessibilityAction access$6700(io.flutter.view.AccessibilityBridge,int)
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration$Autofill: java.lang.String translateAutofillHint(java.lang.String)
io.flutter.embedding.engine.FlutterEngineCache: void put(java.lang.String,io.flutter.embedding.engine.FlutterEngine)
io.sentry.android.ndk.NativeScope: void nativeRemoveUser()
kotlinx.coroutines.JobSupport: boolean isScopedCoroutine()
com.google.android.gms.common.internal.TelemetryLoggingOptions$Builder: TelemetryLoggingOptions$Builder(com.google.android.gms.common.internal.zaac)
com.google.android.gms.common.api.internal.GoogleApiManager: GoogleApiManager(android.content.Context,android.os.Looper,com.google.android.gms.common.GoogleApiAvailability)
com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment: void maybeDrainReferenceQueues()
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory: boolean excludeField(java.lang.reflect.Field,boolean)
com.tekartik.sqflite.SqflitePlugin: void access$700(com.tekartik.sqflite.SqflitePlugin,java.lang.Exception,com.tekartik.sqflite.operation.Operation,com.tekartik.sqflite.Database)
com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper: com.google.common.collect.MapMakerInternalMap$InternalEntry copy(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry)
com.google.android.gms.maps.model.TileOverlay: int hashCode()
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$12: java.lang.Object invoke(java.lang.Object)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$2: boolean onPreDraw()
androidx.core.view.ViewCompat$1: ViewCompat$1()
androidx.core.view.ViewCompat: boolean dispatchUnhandledKeyEventBeforeHierarchy(android.view.View,android.view.KeyEvent)
io.flutter.plugin.common.JSONUtil: java.lang.Object wrap(java.lang.Object)
io.sentry.android.core.ActivityLifecycleIntegration: void applyScope(io.sentry.Scope,io.sentry.ITransaction)
com.google.android.gms.internal.maps.zzg: com.google.android.gms.dynamic.IObjectWrapper zzf(java.lang.String)
androidx.window.layout.WindowInfoTrackerDecorator: androidx.window.layout.WindowInfoTracker decorate(androidx.window.layout.WindowInfoTracker)
io.sentry.config.AbstractPropertiesProvider: java.lang.String getProperty(java.lang.String)
androidx.loader.app.LoaderManagerImpl$LoaderInfo: java.lang.String toString()
io.sentry.IHub: io.sentry.protocol.SentryId captureException(java.lang.Throwable)
io.sentry.SentryEnvelopeItemHeaderAdapter: java.lang.Object read(com.google.gson.stream.JsonReader)
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
com.google.gson.internal.LinkedHashTreeMap$1: int compare(java.lang.Object,java.lang.Object)
io.sentry.Span: java.util.Map getTags()
com.google.gson.stream.JsonWriter: JsonWriter(java.io.Writer)
androidx.window.layout.WindowMetricsCalculatorCompat: android.graphics.Rect computeWindowBoundsP$window_release(android.app.Activity)
io.sentry.TracesSampler: TracesSampler(io.sentry.SentryOptions)
io.flutter.plugin.common.StandardMessageCodec: java.lang.Object readValueOfType(byte,java.nio.ByteBuffer)
kotlin.collections.EmptySet: java.lang.Object[] toArray(java.lang.Object[])
kotlin.reflect.KVisibility: kotlin.reflect.KVisibility[] values()
io.sentry.UncaughtExceptionHandlerIntegration: void uncaughtException(java.lang.Thread,java.lang.Throwable)
androidx.collection.MapCollections$EntrySet: boolean add(java.util.Map$Entry)
io.flutter.plugins.googlemaps.PolygonBuilder: void setZIndex(float)
com.google.common.collect.AbstractIndexedListIterator: java.lang.Object previous()
androidx.arch.core.internal.SafeIterableMap: SafeIterableMap()
io.sentry.MainEventProcessor: void setServerName(io.sentry.SentryBaseEvent)
io.sentry.NoOpHub: boolean isEnabled()
kotlin.Result$Failure: java.lang.String toString()
io.sentry.SentryBaseEvent: io.sentry.protocol.Request getRequest()
io.flutter.embedding.android.FlutterView: void attachOverlaySurfaceToRender(io.flutter.embedding.android.FlutterImageView)
kotlinx.coroutines.internal.OpDescriptor: boolean isEarlierThan(kotlinx.coroutines.internal.OpDescriptor)
com.google.android.gms.internal.maps.zza: android.os.IBinder asBinder()
androidx.arch.core.internal.FastSafeIterableMap: FastSafeIterableMap()
io.sentry.SpanId: boolean equals(java.lang.Object)
androidx.window.embedding.EmbeddingAdapter: boolean translateActivityPredicates$lambda-6(java.util.Set,android.app.Activity)
io.flutter.plugin.common.BasicMessageChannel: BasicMessageChannel(io.flutter.plugin.common.BinaryMessenger,java.lang.String,io.flutter.plugin.common.MessageCodec)
androidx.core.view.ViewCompat: void setTransitionName(android.view.View,java.lang.String)
com.google.gson.stream.JsonWriter: boolean isHtmlSafe()
androidx.fragment.app.FragmentActivity: void checkForValidRequestCode(int)
com.google.android.gms.maps.internal.zzg: void setBuildingsEnabled(boolean)
io.sentry.transport.ITransportGate: boolean isConnected()
io.flutter.plugin.platform.PlatformPlugin: void access$000(io.flutter.plugin.platform.PlatformPlugin,io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType)
com.google.android.gms.common.internal.BaseGmsClient: com.google.android.gms.common.Feature[] getApiFeatures()
io.flutter.embedding.engine.dart.DartMessenger$BufferedMessageInfo: DartMessenger$BufferedMessageInfo(java.nio.ByteBuffer,int,long)
io.sentry.UncaughtExceptionHandlerIntegration: UncaughtExceptionHandlerIntegration(io.sentry.UncaughtExceptionHandler)
io.sentry.android.core.SentryAndroidOptions: long getAnrTimeoutIntervalMillis()
kotlin.collections.EmptyList: boolean containsAll(java.util.Collection)
io.flutter.plugin.editing.InputConnectionAdaptor: boolean setComposingRegion(int,int)
androidx.collection.ArrayMap$1: int colGetSize()
io.flutter.plugins.googlemaps.GoogleMapController: GoogleMapController(int,android.content.Context,io.flutter.plugin.common.BinaryMessenger,io.flutter.plugins.googlemaps.LifecycleProvider,com.google.android.gms.maps.GoogleMapOptions)
androidx.collection.SimpleArrayMap: int binarySearchHashes(int[],int,int)
com.tekartik.sqflite.SqflitePlugin$BgResult: void error(java.lang.String,java.lang.String,java.lang.Object)
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: WindowInfoTrackerImpl$windowLayoutInfo$1(androidx.window.layout.WindowInfoTrackerImpl,android.app.Activity,kotlin.coroutines.Continuation)
kotlinx.coroutines.channels.AbstractChannel$Itr: java.lang.Object getResult()
androidx.fragment.app.Fragment: void onDetach()
com.google.android.gms.maps.internal.zzca: com.google.android.gms.maps.internal.zzf zza(android.content.Context,com.google.android.gms.maps.MapsInitializer$Renderer)
com.google.android.gms.common.api.internal.zabq: int zac()
com.google.common.collect.ImmutableList: boolean equals(java.lang.Object)
com.google.gson.internal.Primitives: boolean isWrapperType(java.lang.reflect.Type)
kotlinx.coroutines.UndispatchedMarker: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key)
androidx.window.layout.SidecarCompat$TranslatingCallback: void onWindowLayoutChanged(android.os.IBinder,androidx.window.sidecar.SidecarWindowLayoutInfo)
androidx.window.embedding.EmbeddingBackend: boolean isSplitSupported()
kotlinx.coroutines.internal.FastServiceLoader: FastServiceLoader()
io.sentry.NoOpEnvelopeReader: NoOpEnvelopeReader()
androidx.core.app.NotificationCompat$Builder: androidx.core.app.NotificationCompat$Builder setPriority(int)
kotlin.coroutines.jvm.internal.SuspendLambda: SuspendLambda(int)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: android.app.Activity attachedActivity()
io.flutter.embedding.engine.dart.DartExecutor: void setMessageHandler(java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler,io.flutter.plugin.common.BinaryMessenger$TaskQueue)
com.google.android.gms.signin.internal.zaa: com.google.android.gms.common.api.Status getStatus()
com.google.android.gms.common.internal.zzj: void writeToParcel(android.os.Parcel,int)
com.google.gson.FieldNamingStrategy: java.lang.String translateName(java.lang.reflect.Field)
androidx.window.embedding.ExtensionEmbeddingBackend: void setEmbeddingExtension(androidx.window.embedding.EmbeddingInterfaceCompat)
io.sentry.android.core.ManifestMetadataReader: android.os.Bundle getMetadata(android.content.Context)
io.flutter.embedding.android.FlutterView: android.view.WindowInsets onApplyWindowInsets(android.view.WindowInsets)
com.google.android.gms.common.api.internal.zabx: zabx(com.google.android.gms.common.api.internal.zabw)
com.google.android.gms.common.internal.zzai: java.lang.Object[] newArray(int)
androidx.core.app.NotificationCompatJellybean: android.os.Bundle[] toBundleArray(androidx.core.app.RemoteInput[])
androidx.fragment.app.FragmentManagerImpl: void forcePostponedTransactions()
kotlinx.coroutines.scheduling.TaskImpl: TaskImpl(java.lang.Runnable,long,kotlinx.coroutines.scheduling.TaskContext)
androidx.activity.ComponentActivity$1: void run()
com.google.android.gms.maps.model.PolylineOptions: int getColor()
io.sentry.SentryEnvelopeHeader: io.sentry.protocol.SdkVersion getSdkVersion()
io.sentry.GsonSerializer: java.lang.String serialize(java.util.Map)
kotlinx.coroutines.JobKt: void ensureActive(kotlinx.coroutines.Job)
kotlin.jvm.internal.CallableReference: java.util.List getParameters()
io.flutter.Log: void e(java.lang.String,java.lang.String)
kotlin.ranges.IntProgression: int getLast()
androidx.fragment.app.Fragment: boolean isHideReplaced()
androidx.window.embedding.SplitInfo: java.lang.String toString()
com.google.common.collect.MapMakerInternalMap$Segment: void clear()
androidx.lifecycle.Lifecycling: java.lang.reflect.Constructor generatedConstructor(java.lang.Class)
com.google.android.gms.common.GoogleApiAvailability: boolean zag(android.app.Activity,com.google.android.gms.common.api.internal.LifecycleFragment,int,int,android.content.DialogInterface$OnCancelListener)
kotlinx.coroutines.JobSupport: java.lang.Throwable createCauseException(java.lang.Object)
io.flutter.plugins.googlemaps.Convert: com.google.android.gms.maps.model.BitmapDescriptor toBitmapDescriptor(java.lang.Object)
com.google.android.gms.maps.internal.zzg: void setLatLngBoundsForCameraTarget(com.google.android.gms.maps.model.LatLngBounds)
io.sentry.NoOpTransaction: java.lang.String getTag(java.lang.String)
androidx.window.layout.ActivityCompatHelperApi30: ActivityCompatHelperApi30()
com.google.gson.internal.$Gson$Types$GenericArrayTypeImpl: java.lang.reflect.Type getGenericComponentType()
androidx.lifecycle.ReportFragment: void onActivityCreated(android.os.Bundle)
com.google.android.gms.common.internal.ClientSettings: java.lang.Integer zab()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean access$202(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,boolean)
kotlin.text.StringsKt__IndentKt: java.lang.String replaceIndent(java.lang.String,java.lang.String)
com.google.gson.internal.bind.TypeAdapters$16: void write(com.google.gson.stream.JsonWriter,java.lang.String)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityStarted(android.app.Activity)
io.flutter.plugin.common.JSONMethodCodec: java.lang.Object decodeEnvelope(java.nio.ByteBuffer)
io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler: MethodChannel$IncomingMethodCallHandler(io.flutter.plugin.common.MethodChannel,io.flutter.plugin.common.MethodChannel$MethodCallHandler)
com.google.common.collect.Iterators$9: boolean hasNext()
io.flutter.embedding.android.FlutterActivity: void onActivityResult(int,int,android.content.Intent)
androidx.activity.ComponentActivity: void onBackPressed()
io.sentry.Breadcrumb: java.util.Date getTimestamp()
com.google.android.gms.tasks.zzr: void zzb(com.google.android.gms.tasks.Task)
com.google.common.base.Predicates$ObjectPredicate$1: boolean apply(java.lang.Object)
io.flutter.plugins.googlemaps.GoogleMapController: void setZoomControlsEnabled(boolean)
kotlinx.coroutines.intrinsics.CancellableKt: void dispatcherFailure(kotlin.coroutines.Continuation,java.lang.Throwable)
com.google.gson.GsonBuilder: com.google.gson.GsonBuilder disableHtmlEscaping()
io.sentry.Breadcrumb: java.util.Map getUnknown()
com.google.gson.internal.LazilyParsedNumber: int intValue()
io.sentry.Hub: void removeExtra(java.lang.String)
androidx.fragment.app.FragmentController: androidx.fragment.app.FragmentController createController(androidx.fragment.app.FragmentHostCallback)
io.flutter.view.VsyncWaiter$DisplayListener: void onDisplayChanged(int)
com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment: MapMakerInternalMap$StrongKeyStrongValueSegment(com.google.common.collect.MapMakerInternalMap,int,int)
io.sentry.flutter.SentryFlutterPlugin: SentryFlutterPlugin()
io.flutter.embedding.engine.FlutterJNI: void nativeDestroy(long)
io.sentry.config.PropertiesProvider: java.lang.String getProperty(java.lang.String,java.lang.String)
kotlinx.coroutines.CommonPool: boolean isGoodCommonPool$kotlinx_coroutines_core(java.lang.Class,java.util.concurrent.ExecutorService)
io.flutter.embedding.engine.systemchannels.DeferredComponentChannel: io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager access$000(io.flutter.embedding.engine.systemchannels.DeferredComponentChannel)
com.google.common.collect.MapMaker: com.google.common.base.Equivalence getKeyEquivalence()
androidx.lifecycle.ProcessLifecycleOwner: void attach(android.content.Context)
androidx.fragment.app.FragmentManagerImpl$5: void onAnimationEnd(android.animation.Animator)
io.sentry.Span: java.lang.Throwable getThrowable()
com.google.gson.internal.JavaVersion: int getMajorJavaVersion(java.lang.String)
com.google.common.util.concurrent.AbstractFuture: AbstractFuture()
com.tekartik.sqflite.SqflitePlugin: void onUpdateCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.sentry.Hub: void setTag(java.lang.String,java.lang.String)
io.sentry.android.ndk.NativeScope: void nativeSetTag(java.lang.String,java.lang.String)
com.google.gson.internal.LinkedTreeMap$LinkedTreeMapIterator: void remove()
com.tekartik.sqflite.SqflitePlugin: java.lang.Object access$800()
com.google.common.hash.AbstractByteHasher: AbstractByteHasher()
androidx.window.layout.WindowInfoTrackerImpl: kotlinx.coroutines.flow.Flow windowLayoutInfo(android.app.Activity)
io.flutter.embedding.android.FlutterTextureView: FlutterTextureView(android.content.Context)
com.google.android.gms.common.internal.zzb: zzb(com.google.android.gms.common.internal.BaseGmsClient,android.os.Looper)
com.google.android.gms.common.api.internal.LifecycleActivity: LifecycleActivity(android.app.Activity)
io.flutter.plugins.flutter_plugin_android_lifecycle.FlutterAndroidLifecyclePlugin: FlutterAndroidLifecyclePlugin()
kotlin.jvm.internal.CallableReference: CallableReference(java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,boolean)
androidx.window.layout.WindowMetricsCalculatorCompat: androidx.window.layout.WindowMetrics computeCurrentWindowMetrics(android.app.Activity)
kotlin.jvm.internal.FunctionReferenceImpl: FunctionReferenceImpl(int,java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,int)
io.flutter.embedding.engine.systemchannels.RestorationChannel: boolean access$102(io.flutter.embedding.engine.systemchannels.RestorationChannel,boolean)
kotlinx.coroutines.channels.Send: Send()
io.flutter.plugin.mouse.MouseCursorPlugin: io.flutter.plugin.mouse.MouseCursorPlugin$MouseCursorViewDelegate access$100(io.flutter.plugin.mouse.MouseCursorPlugin)
com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry: void setValue(java.lang.Object,java.lang.ref.ReferenceQueue)
com.google.android.gms.common.api.internal.BackgroundDetector: boolean isInBackground()
com.google.android.gms.signin.internal.zal: java.lang.Object[] newArray(int)
com.google.gson.Gson: java.lang.String toJson(java.lang.Object,java.lang.reflect.Type)
kotlinx.coroutines.JobKt__JobKt: kotlinx.coroutines.CompletableJob Job$default(kotlinx.coroutines.Job,int,java.lang.Object)
com.google.android.gms.common.api.internal.NonGmsServiceBrokerClient: void onServiceDisconnected(android.content.ComponentName)
io.sentry.DuplicateEventDetectionEventProcessor: java.util.List allCauses(java.lang.Throwable)
androidx.collection.MapCollections: boolean retainAllHelper(java.util.Map,java.util.Collection)
com.google.android.gms.maps.zzc: zzc(com.google.android.gms.maps.GoogleMap,com.google.android.gms.maps.GoogleMap$OnInfoWindowClickListener)
androidx.lifecycle.CompositeGeneratedAdaptersObserver: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)
io.flutter.embedding.android.MotionEventTracker: android.view.MotionEvent pop(io.flutter.embedding.android.MotionEventTracker$MotionEventId)
com.google.gson.TypeAdapter: TypeAdapter()
androidx.collection.MapCollections: java.lang.Object[] toArrayHelper(java.lang.Object[],int)
kotlinx.coroutines.internal.SystemPropsKt: long systemProp(java.lang.String,long,long,long)
com.tekartik.sqflite.Database$1: void onCorruption(android.database.sqlite.SQLiteDatabase)
androidx.window.layout.WindowLayoutInfo: WindowLayoutInfo(java.util.List)
kotlinx.coroutines.CoroutineName: java.lang.String toString()
io.flutter.embedding.android.FlutterTextureView$1: void onSurfaceTextureAvailable(android.graphics.SurfaceTexture,int,int)
io.flutter.plugin.editing.ListenableEditingState: void endBatchEdit()
io.flutter.view.AccessibilityBridge: boolean onAccessibilityHoverEvent(android.view.MotionEvent)
io.sentry.HubAdapter: void clearBreadcrumbs()
io.flutter.embedding.engine.FlutterJNI: boolean isAttached()
com.google.gson.internal.ConstructorConstructor$1: ConstructorConstructor$1(com.google.gson.internal.ConstructorConstructor,com.google.gson.InstanceCreator,java.lang.reflect.Type)
com.google.common.collect.ImmutableList: com.google.common.collect.UnmodifiableListIterator listIterator(int)
com.google.android.gms.signin.internal.zah: java.lang.Object createFromParcel(android.os.Parcel)
androidx.core.view.ViewCompat: void setImportantForAccessibility(android.view.View,int)
com.google.android.gms.common.api.internal.zabq: boolean zaM(com.google.android.gms.common.ConnectionResult)
kotlinx.coroutines.scheduling.CoroutineScheduler: void signalBlockingWork(boolean)
io.sentry.NoOpSpan: void setThrowable(java.lang.Throwable)
com.google.android.gms.internal.maps.zzab: zzab(android.os.IBinder)
io.sentry.DiagnosticLogger: void log(io.sentry.SentryLevel,java.lang.Throwable,java.lang.String,java.lang.Object[])
kotlinx.coroutines.channels.AbstractSendChannel: kotlinx.coroutines.channels.ReceiveOrClosed takeFirstReceiveOrPeekClosed()
com.google.android.gms.common.api.internal.zzd: void onStop()
kotlinx.coroutines.channels.Channel$Factory: int getCHANNEL_DEFAULT_CAPACITY$kotlinx_coroutines_core()
io.flutter.plugin.common.StringCodec: StringCodec()
com.google.android.gms.common.internal.zzn: int zza()
com.google.android.gms.common.api.internal.zam: com.google.android.gms.common.ConnectionResult zab()
kotlinx.coroutines.JobSupport: java.util.concurrent.CancellationException getCancellationException()
com.tekartik.sqflite.SqflitePlugin: void onAttachedToEngine(android.content.Context,io.flutter.plugin.common.BinaryMessenger)
androidx.window.layout.ExtensionsWindowLayoutInfoAdapter: boolean validBounds(android.app.Activity,androidx.window.core.Bounds)
com.google.common.hash.Hashing$ChecksumType: com.google.common.hash.Hashing$ChecksumType[] values()
com.google.android.gms.common.internal.BaseGmsClient: android.os.IInterface getService()
io.sentry.android.core.PhoneStateBreadcrumbsIntegration: void register(io.sentry.IHub,io.sentry.SentryOptions)
pt.up.fe.ni.uni.MainActivity: void configureFlutterEngine(io.flutter.embedding.engine.FlutterEngine)
dev.fluttercommunity.plus.packageinfo.PackageInfoPlugin: PackageInfoPlugin()
com.tekartik.sqflite.SqflitePlugin: java.util.List cursorRowToList(android.database.Cursor,int)
io.sentry.SentryEvent: boolean isCrashed()
com.google.android.gms.auth.api.signin.GoogleSignInAccount: java.lang.String getGivenName()
androidx.activity.OnBackPressedCallback: OnBackPressedCallback(boolean)
kotlinx.coroutines.ExecutorCoroutineDispatcher$Key: ExecutorCoroutineDispatcher$Key(kotlin.jvm.internal.DefaultConstructorMarker)
com.google.android.gms.maps.model.Cap: Cap(int)
androidx.fragment.app.Fragment: void performDestroy()
com.google.android.gms.common.internal.zzd: void onPostInitComplete(int,android.os.IBinder,android.os.Bundle)
androidx.core.app.ComponentActivity: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)
com.google.android.gms.maps.model.CameraPosition$Builder: CameraPosition$Builder()
io.sentry.Span: io.sentry.protocol.SentryId getTraceId()
io.flutter.plugins.googlemaps.GoogleMapBuilder: void setMapType(int)
io.flutter.plugins.googlemaps.Convert: float toFractionalPixels(java.lang.Object,float)
io.sentry.protocol.SentrySpan: java.util.Date getTimestamp()
com.google.gson.internal.bind.JsonTreeWriter: com.google.gson.stream.JsonWriter value(boolean)
androidx.loader.app.LoaderManagerImpl$LoaderInfo: void setValue(java.lang.Object)
kotlinx.coroutines.CoroutineDispatcher: kotlin.coroutines.Continuation interceptContinuation(kotlin.coroutines.Continuation)
io.sentry.protocol.Request: void setMethod(java.lang.String)
io.flutter.embedding.android.FlutterView: boolean onTouchEvent(android.view.MotionEvent)
kotlinx.coroutines.flow.internal.DownstreamExceptionElement: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key)
androidx.fragment.app.FragmentManagerImpl$PopBackStackState: FragmentManagerImpl$PopBackStackState(androidx.fragment.app.FragmentManagerImpl,java.lang.String,int,int)
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.String getRouteName()
com.google.android.gms.maps.model.zzs: java.lang.Object createFromParcel(android.os.Parcel)
kotlinx.coroutines.internal.ScopeCoroutine: void afterResume(java.lang.Object)
kotlinx.coroutines.internal.MissingMainCoroutineDispatcher: java.lang.String toString()
kotlinx.coroutines.flow.internal.SafeCollector$collectContextSize$1: SafeCollector$collectContextSize$1()
com.google.android.gms.common.api.Scope: int hashCode()
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: io.flutter.plugin.common.BinaryMessenger messenger()
com.google.common.collect.AbstractIndexedListIterator: int nextIndex()
io.sentry.transport.AsyncHttpTransport: io.sentry.transport.HttpConnection access$300(io.sentry.transport.AsyncHttpTransport)
com.google.android.gms.maps.internal.zzas: boolean zza(int,android.os.Parcel,android.os.Parcel,int)
kotlinx.coroutines.internal.Symbol: Symbol(java.lang.String)
io.flutter.plugins.googlemaps.Convert: java.lang.Object markerIdToJson(java.lang.String)
com.google.android.gms.internal.common.zzb: android.os.IBinder asBinder()
androidx.fragment.app.FragmentManagerImpl: void dispatchOnFragmentStarted(androidx.fragment.app.Fragment,boolean)
com.google.android.gms.common.api.internal.zabq: void zaK()
androidx.arch.core.internal.SafeIterableMap$ListIterator: SafeIterableMap$ListIterator(androidx.arch.core.internal.SafeIterableMap$Entry,androidx.arch.core.internal.SafeIterableMap$Entry)
io.flutter.plugins.googlemaps.CircleController: boolean consumeTapEvents()
com.google.common.collect.RegularImmutableSet: int size()
io.sentry.ISentryClient: io.sentry.protocol.SentryId captureException(java.lang.Throwable)
com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper: com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment newSegment(com.google.common.collect.MapMakerInternalMap,int,int)
io.sentry.NoOpSpan: io.sentry.ISpan startChild(java.lang.String,java.lang.String)
com.google.android.gms.auth.api.signin.GoogleSignInAccount: com.google.android.gms.auth.api.signin.GoogleSignInAccount zaa(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.net.Uri,java.lang.Long,java.lang.String,java.util.Set)
com.google.common.collect.MapMakerInternalMap$WriteThroughEntry: int hashCode()
com.google.gson.internal.LinkedTreeMap$1: int compare(java.lang.Comparable,java.lang.Comparable)
io.sentry.IHub: io.sentry.SentryTraceHeader traceHeaders()
io.sentry.android.core.EnvelopeFileObserver$CachedEnvelopeHint: boolean isRetry()
io.sentry.SentryOptions: void setLogger(io.sentry.ILogger)
io.sentry.flutter.R: R()
io.sentry.transport.AsyncHttpTransport: AsyncHttpTransport(io.sentry.SentryOptions,io.sentry.transport.RateLimiter,io.sentry.transport.ITransportGate,io.sentry.RequestDetails)
io.flutter.embedding.android.FlutterView$ZeroSides: io.flutter.embedding.android.FlutterView$ZeroSides valueOf(java.lang.String)
io.sentry.protocol.Device: void setScreenWidthPixels(java.lang.Integer)
io.sentry.protocol.Device: void acceptUnknownProperties(java.util.Map)
io.sentry.UserFeedback: UserFeedback(io.sentry.protocol.SentryId,java.lang.String,java.lang.String,java.lang.String)
com.google.gson.internal.bind.TypeAdapters$1: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
io.sentry.IHub: void removeTag(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void setLocalizationPlugin(io.flutter.plugin.localization.LocalizationPlugin)
kotlin.sequences.ConstrainedOnceSequence: java.util.Iterator iterator()
com.google.gson.internal.reflect.UnsafeReflectionAccessor: java.lang.Object getUnsafeInstance()
io.sentry.SentryEvent: io.sentry.protocol.DebugMeta getDebugMeta()
androidx.fragment.app.FragmentManagerImpl: void moveToState(androidx.fragment.app.Fragment,int,int,int,boolean)
com.google.common.collect.ImmutableSet: boolean isHashCodeFast()
com.google.android.gms.maps.model.Circle: int hashCode()
kotlin.collections.EmptyList: boolean isEmpty()
io.sentry.ILogger: void log(io.sentry.SentryLevel,java.lang.Throwable,java.lang.String,java.lang.Object[])
com.google.gson.stream.JsonReader: int peekNumber()
com.google.android.gms.common.api.internal.zabq: void zar(com.google.android.gms.common.ConnectionResult,java.lang.Exception)
kotlin.collections.EmptyMap: boolean isEmpty()
io.flutter.embedding.engine.FlutterShellArgs: io.flutter.embedding.engine.FlutterShellArgs fromIntent(android.content.Intent)
com.google.gson.internal.bind.TypeAdapters$8: java.util.concurrent.atomic.AtomicInteger read(com.google.gson.stream.JsonReader)
io.flutter.embedding.android.FlutterImageView$SurfaceKind: io.flutter.embedding.android.FlutterImageView$SurfaceKind valueOf(java.lang.String)
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean access$1900(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.view.AccessibilityBridge$Flag)
com.google.common.collect.SingletonImmutableSet: com.google.common.collect.ImmutableList createAsList()
io.sentry.NoOpHub: void popScope()
androidx.collection.MapCollections$MapIterator: java.util.Map$Entry next()
com.google.common.collect.SingletonImmutableSet: int hashCode()
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: boolean isAttachedToActivity()
com.google.gson.internal.bind.TypeAdapters$23: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
kotlinx.coroutines.CompletedExceptionally: CompletedExceptionally(java.lang.Throwable,boolean,int,kotlin.jvm.internal.DefaultConstructorMarker)
kotlin.jvm.internal.CallableReference: boolean isSuspend()
io.sentry.protocol.Gpu: void setApiType(java.lang.String)
androidx.fragment.app.FragmentManagerViewModel: boolean isCleared()
kotlinx.coroutines.CancellableContinuationImpl: kotlinx.coroutines.internal.Symbol tryResumeImpl(java.lang.Object,java.lang.Object,kotlin.jvm.functions.Function1)
com.google.common.collect.MapMakerInternalMap$Segment: void clearReferenceQueue(java.lang.ref.ReferenceQueue)
io.flutter.plugin.common.StandardMessageCodec: void writeDouble(java.io.ByteArrayOutputStream,double)
com.google.android.gms.common.api.internal.zaae: void zac()
io.flutter.plugins.googlemaps.Convert: void interpretGoogleMapOptions(java.lang.Object,io.flutter.plugins.googlemaps.GoogleMapOptionsSink)
com.google.gson.internal.bind.TypeAdapters$10: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
kotlinx.coroutines.channels.ConflatedChannel: java.lang.Object pollInternal()
com.google.android.gms.signin.zab: com.google.android.gms.common.api.Api$Client buildClient(android.content.Context,android.os.Looper,com.google.android.gms.common.internal.ClientSettings,java.lang.Object,com.google.android.gms.common.api.GoogleApiClient$ConnectionCallbacks,com.google.android.gms.common.api.GoogleApiClient$OnConnectionFailedListener)
com.google.android.gms.maps.model.Polygon: void setVisible(boolean)
io.sentry.android.core.Installation: void $closeResource(java.lang.Throwable,java.lang.AutoCloseable)
io.sentry.SentryExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)
com.google.android.gms.maps.internal.zzg: void setOnPolylineClickListener(com.google.android.gms.maps.internal.zzbh)
com.tekartik.sqflite.SqflitePlugin: boolean access$300(com.tekartik.sqflite.SqflitePlugin,com.tekartik.sqflite.Database,com.tekartik.sqflite.operation.Operation)
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterJNI spawn(java.lang.String,java.lang.String,java.lang.String,java.util.List)
io.sentry.UncaughtExceptionHandlerIntegration: void register(io.sentry.IHub,io.sentry.SentryOptions)
io.flutter.plugins.urllauncher.WebViewActivity: void onDestroy()
io.sentry.protocol.SentryPackage: void setVersion(java.lang.String)
androidx.collection.SimpleArrayMap: java.lang.Object removeAt(int)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: void onNewIntent(android.content.Intent)
io.sentry.Session: java.lang.String getEnvironment()
com.google.gson.internal.LinkedHashTreeMap$Node: java.lang.String toString()
com.google.gson.internal.Primitives: boolean isPrimitive(java.lang.reflect.Type)
io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder: void send()
com.google.gson.internal.bind.TypeAdapters$5: void write(com.google.gson.stream.JsonWriter,java.lang.Number)
io.sentry.Breadcrumb: java.lang.String getType()
androidx.window.layout.SidecarAdapter$Companion: SidecarAdapter$Companion()
androidx.fragment.app.FragmentManagerImpl: void completeShowHideFragment(androidx.fragment.app.Fragment)
io.sentry.android.core.LifecycleWatcher: java.util.TimerTask getTimerTask()
com.google.android.gms.common.internal.ClientSettings: android.accounts.Account getAccountOrDefault()
kotlinx.coroutines.internal.ScopeCoroutine: kotlin.coroutines.jvm.internal.CoroutineStackFrame getCallerFrame()
androidx.fragment.app.FragmentTransitionCompat21: void beginDelayedTransition(android.view.ViewGroup,java.lang.Object)
com.google.android.gms.internal.maps.zzv: void zzv(float)
io.sentry.Scope: io.sentry.protocol.User getUser()
io.sentry.android.core.EnvelopeFileObserver$CachedEnvelopeHint: boolean waitFlush()
kotlin.jvm.internal.PackageReference: java.lang.String toString()
androidx.collection.MapCollections$MapIterator: java.lang.String toString()
io.flutter.plugins.urllauncher.WebViewActivity: boolean onKeyDown(int,android.view.KeyEvent)
io.flutter.plugin.common.StandardMessageCodec: byte[] readBytes(java.nio.ByteBuffer)
androidx.arch.core.executor.ArchTaskExecutor$1: void execute(java.lang.Runnable)
kotlinx.coroutines.CompletedContinuation: CompletedContinuation(java.lang.Object,kotlinx.coroutines.CancelHandler,kotlin.jvm.functions.Function1,java.lang.Object,java.lang.Throwable)
io.flutter.plugins.googlemaps.MarkerController: void setZIndex(float)
io.sentry.SentryOptions: void setMaxCacheItems(int)
com.google.common.collect.Maps$EntryFunction: java.lang.Object apply(java.lang.Object)
com.google.android.gms.common.internal.GmsClient: GmsClient(android.content.Context,android.os.Looper,com.google.android.gms.common.internal.GmsClientSupervisor,com.google.android.gms.common.GoogleApiAvailability,int,com.google.android.gms.common.internal.ClientSettings,com.google.android.gms.common.api.internal.ConnectionCallbacks,com.google.android.gms.common.api.internal.OnConnectionFailedListener)
androidx.window.embedding.EmbeddingAdapter: boolean translateActivityPairPredicates$lambda-1(androidx.window.embedding.EmbeddingAdapter,java.util.Set,android.util.Pair)
kotlinx.coroutines.channels.ArrayChannel: boolean enqueueReceiveInternal(kotlinx.coroutines.channels.Receive)
io.flutter.util.ViewUtils: int generateViewId(int)
kotlinx.coroutines.JobSupport$ChildCompletion: java.lang.Object invoke(java.lang.Object)
io.sentry.transport.ITransport: void flush(long)
kotlinx.coroutines.android.AndroidDispatcherFactory: int getLoadPriority()
io.sentry.SentryBaseEvent: void setRelease(java.lang.String)
io.sentry.DiagnosticLogger: void log(io.sentry.SentryLevel,java.lang.String,java.lang.Object[])
io.flutter.embedding.engine.dart.DartMessenger$HandlerInfo: DartMessenger$HandlerInfo(io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler,io.flutter.embedding.engine.dart.DartMessenger$DartMessengerTaskQueue)
kotlinx.coroutines.JobSupport: void onStart()
com.google.gson.JsonArray: boolean contains(com.google.gson.JsonElement)
com.google.android.gms.common.internal.BaseGmsClient: java.util.ArrayList zzf(com.google.android.gms.common.internal.BaseGmsClient)
androidx.fragment.app.Fragment: void performSaveInstanceState(android.os.Bundle)
androidx.fragment.app.FragmentManagerImpl: boolean generateOpsForPendingActions(java.util.ArrayList,java.util.ArrayList)
io.sentry.transport.AsyncHttpTransport: AsyncHttpTransport(io.sentry.transport.QueuedThreadPoolExecutor,io.sentry.SentryOptions,io.sentry.transport.RateLimiter,io.sentry.transport.ITransportGate,io.sentry.transport.HttpConnection)
io.flutter.embedding.android.FlutterActivity: void onFlutterSurfaceViewCreated(io.flutter.embedding.android.FlutterSurfaceView)
io.flutter.embedding.engine.systemchannels.DeferredComponentChannel$1: void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
com.google.android.gms.common.internal.zza: void zza(java.lang.Object)
com.google.common.util.concurrent.AbstractFuture$SynchronizedHelper: AbstractFuture$SynchronizedHelper()
io.sentry.Scope: void setLevel(io.sentry.SentryLevel)
com.google.android.gms.common.api.internal.zaae: void onStart()
com.google.common.collect.ImmutableCollection: void clear()
io.flutter.plugin.editing.ListenableEditingState: int getComposingEnd()
androidx.fragment.app.FragmentTransitionCompat21: java.lang.Object cloneTransition(java.lang.Object)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle: PlatformChannel$SystemChromeStyle(java.lang.Integer,io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness,java.lang.Boolean,java.lang.Integer,io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness,java.lang.Integer,java.lang.Boolean)
com.google.android.gms.common.zzb: java.lang.Object[] newArray(int)
io.flutter.plugin.localization.LocalizationPlugin: void sendLocalesToFlutter(android.content.res.Configuration)
com.google.android.gms.common.internal.zzd: void zzc(int,android.os.IBinder,com.google.android.gms.common.internal.zzj)
kotlinx.coroutines.scheduling.LimitingDispatcher: int getTaskMode()
androidx.lifecycle.EmptyActivityLifecycleCallbacks: void onActivitySaveInstanceState(android.app.Activity,android.os.Bundle)
io.sentry.UncaughtExceptionHandler$Adapter: io.sentry.UncaughtExceptionHandler getInstance()
com.google.android.gms.common.internal.GmsClient: java.util.Set getScopesForConnectionlessNonSignIn()
io.flutter.plugins.googlemaps.MarkersController: MarkersController(io.flutter.plugin.common.MethodChannel)
io.sentry.android.core.DefaultAndroidEventProcessor: void setThreads(io.sentry.SentryEvent)
io.sentry.SentryOptions: io.sentry.SentryLevel getDiagnosticLevel()
com.google.android.gms.maps.model.PolygonOptions: PolygonOptions(java.util.List,java.util.List,float,int,int,float,boolean,boolean,boolean,int,java.util.List)
com.google.gson.FieldNamingPolicy$3: FieldNamingPolicy$3(java.lang.String,int)
io.sentry.SentryEnvelopeHeader: SentryEnvelopeHeader()
kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.jvm.internal.CoroutineStackFrame getCallerFrame()
io.sentry.Span: void setStatus(io.sentry.SpanStatus)
androidx.core.os.LocaleListPlatformWrapper: int hashCode()
io.flutter.embedding.android.FlutterSplashView: io.flutter.embedding.android.FlutterView access$000(io.flutter.embedding.android.FlutterSplashView)
kotlinx.coroutines.flow.internal.SafeCollector: void releaseIntercepted()
com.tekartik.sqflite.SqflitePlugin: com.tekartik.sqflite.Database getDatabaseOrError(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
com.google.android.gms.common.internal.zzn: java.lang.String toString()
io.flutter.plugin.editing.InputConnectionAdaptor: boolean handleHorizontalMovement(boolean,boolean)
io.sentry.Hub: void setLevel(io.sentry.SentryLevel)
com.google.android.gms.common.internal.ClientSettings: java.util.Set getAllRequestedScopes()
kotlinx.coroutines.internal.ExceptionsConstuctorKt$tryCopyException$4$1: java.lang.Object invoke(java.lang.Object)
com.google.common.base.Predicates$ObjectPredicate$1: Predicates$ObjectPredicate$1(java.lang.String,int)
io.flutter.plugin.platform.PlatformPlugin: void access$800(io.flutter.plugin.platform.PlatformPlugin)
io.sentry.SentryBaseEvent: io.sentry.protocol.Contexts getContexts()
io.flutter.plugins.googlemaps.GoogleMapController: void setCameraTargetBounds(com.google.android.gms.maps.model.LatLngBounds)
com.google.gson.FieldAttributes: java.lang.Class getDeclaredClass()
com.google.gson.internal.bind.TypeAdapters$15: java.lang.Character read(com.google.gson.stream.JsonReader)
kotlin.text.StringsKt__StringsKt: int lastIndexOf(java.lang.CharSequence,java.lang.String,int,boolean)
io.flutter.embedding.engine.systemchannels.RestorationChannel$1: void notImplemented()
androidx.core.app.ActivityCompat: void startActivityForResult(android.app.Activity,android.content.Intent,int,android.os.Bundle)
com.google.common.collect.ImmutableCollection: ImmutableCollection()
com.google.android.gms.common.api.internal.BackgroundDetector: void onActivityResumed(android.app.Activity)
io.flutter.embedding.engine.FlutterJNI: io.flutter.view.FlutterCallbackInformation nativeLookupCallbackInformation(long)
io.sentry.Breadcrumb: java.lang.Object getData(java.lang.String)
io.sentry.SynchronizedCollection: int hashCode()
androidx.window.embedding.SplitInfo: androidx.window.embedding.ActivityStack getSecondaryActivityStack()
com.google.android.gms.signin.internal.zaj: java.lang.Object[] newArray(int)
com.google.android.gms.maps.model.Circle: Circle(com.google.android.gms.internal.maps.zzl)
com.google.android.gms.maps.model.zzv: java.lang.Object createFromParcel(android.os.Parcel)
com.google.android.gms.common.wrappers.Wrappers: Wrappers()
io.flutter.view.AccessibilityBridge$StringAttributeType: io.flutter.view.AccessibilityBridge$StringAttributeType[] values()
kotlinx.coroutines.flow.internal.SafeCollector_commonKt$checkContext$result$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)
io.flutter.view.AccessibilityBridge$StringAttribute: AccessibilityBridge$StringAttribute(io.flutter.view.AccessibilityBridge$1)
com.google.android.gms.internal.maps.zzv: void zzq(boolean)
com.google.android.gms.maps.model.Polyline: void setPattern(java.util.List)
com.google.android.gms.common.api.internal.LifecycleCallback: void onSaveInstanceState(android.os.Bundle)
io.sentry.HubAdapter: void setSpanContext(java.lang.Throwable,io.sentry.ISpan,java.lang.String)
io.sentry.Sentry: void removeExtra(java.lang.String)
io.flutter.embedding.engine.systemchannels.TextInputChannel: void updateEditingState(int,java.lang.String,int,int,int,int)
com.tekartik.sqflite.SqflitePlugin$5: void run()
com.google.android.gms.dynamite.zzd: zzd()
androidx.core.os.LocaleListPlatformWrapper: java.lang.String toString()
io.sentry.protocol.SdkInfo: void setVersionMajor(java.lang.Integer)
androidx.core.view.WindowInsetsControllerCompat: void setAppearanceLightStatusBars(boolean)
com.google.android.gms.common.zze: zze(byte[])
com.google.android.gms.auth.api.signin.internal.Storage: com.google.android.gms.auth.api.signin.GoogleSignInAccount getSavedDefaultGoogleSignInAccount()
com.google.android.gms.common.internal.BaseGmsClient: void checkConnected()
com.google.android.gms.maps.CameraUpdateFactory: com.google.android.gms.maps.CameraUpdate zoomBy(float,android.graphics.Point)
kotlinx.coroutines.ExecutorCoroutineDispatcher: ExecutorCoroutineDispatcher()
com.google.android.gms.common.api.internal.zabq: void zaC(com.google.android.gms.common.ConnectionResult)
io.flutter.view.AccessibilityBridge: android.view.accessibility.AccessibilityNodeInfo findFocus(int)
io.flutter.plugins.urllauncher.UrlLauncher: void closeWebView()
io.flutter.embedding.engine.FlutterEngineCache: io.flutter.embedding.engine.FlutterEngineCache getInstance()
com.google.common.util.concurrent.AbstractFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)
kotlin.ranges.IntProgression$Companion: IntProgression$Companion()
io.flutter.plugin.editing.ListenableEditingState: android.text.Editable replace(int,int,java.lang.CharSequence,int,int)
io.flutter.view.AccessibilityBridge$SemanticsNode: void ensureInverseTransform()
io.flutter.embedding.android.RenderMode: io.flutter.embedding.android.RenderMode valueOf(java.lang.String)
com.google.gson.internal.bind.TypeAdapters$28: void write(com.google.gson.stream.JsonWriter,java.util.Locale)
androidx.activity.ComponentActivity$2: ComponentActivity$2(androidx.activity.ComponentActivity)
io.flutter.embedding.engine.FlutterJNI: void onBeginFrame()
androidx.window.embedding.SplitPairFilter: boolean matchesActivityPair(android.app.Activity,android.app.Activity)
kotlinx.coroutines.JobSupport$Finishing: java.util.List sealLocked(java.lang.Throwable)
kotlin.ranges.RangesKt___RangesKt: long coerceAtLeast(long,long)
androidx.fragment.app.FragmentManagerState: int describeContents()
androidx.arch.core.internal.SafeIterableMap$ListIterator: androidx.arch.core.internal.SafeIterableMap$Entry nextNode()
io.flutter.plugin.platform.PlatformPlugin: void playSystemSound(io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType)
com.google.android.gms.maps.internal.zzas: zzas()
io.sentry.Scope: java.util.List getAttachments()
com.google.gson.internal.LinkedHashTreeMap: void removeInternal(com.google.gson.internal.LinkedHashTreeMap$Node,boolean)
com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$Node[] doubleCapacity(com.google.gson.internal.LinkedHashTreeMap$Node[])
com.google.common.util.concurrent.Uninterruptibles: java.lang.Object getUninterruptibly(java.util.concurrent.Future)
com.google.gson.stream.JsonReader: int doPeek()
com.google.android.gms.common.api.Api: Api(java.lang.String,com.google.android.gms.common.api.Api$AbstractClientBuilder,com.google.android.gms.common.api.Api$ClientKey)
io.sentry.CircularFifoQueue: boolean offer(java.lang.Object)
io.sentry.SendCachedEnvelopeFireAndForgetIntegration$SendFireAndForgetFactory: io.sentry.SendCachedEnvelopeFireAndForgetIntegration$SendFireAndForget create(io.sentry.IHub,io.sentry.SentryOptions)
com.google.android.gms.internal.maps.zzj: void zzx(float)
kotlinx.coroutines.internal.ExceptionsConstuctorKt$tryCopyException$$inlined$sortedByDescending$1: int compare(java.lang.Object,java.lang.Object)
io.sentry.Dsn: java.lang.String getPath()
com.google.android.gms.common.internal.Objects: com.google.android.gms.common.internal.Objects$ToStringHelper toStringHelper(java.lang.Object)
io.sentry.NoOpHub: void setFingerprint(java.util.List)
com.google.gson.internal.$Gson$Types: int indexOf(java.lang.Object[],java.lang.Object)
kotlinx.coroutines.internal.LockFreeLinkedListNode: void access$finishAdd(kotlinx.coroutines.internal.LockFreeLinkedListNode,kotlinx.coroutines.internal.LockFreeLinkedListNode)
kotlinx.coroutines.UndispatchedMarker: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)
io.sentry.TracesSampler: TracesSampler(io.sentry.SentryOptions,java.util.Random)
io.sentry.android.core.AndroidOptionsInitializer: void init(io.sentry.android.core.SentryAndroidOptions,android.content.Context,io.sentry.ILogger)
com.google.android.gms.internal.maps.zzj: void zzs(int)
io.flutter.embedding.engine.systemchannels.PlatformChannel: int access$100(io.flutter.embedding.engine.systemchannels.PlatformChannel,org.json.JSONArray)
com.google.common.util.concurrent.CycleDetectingLockFactory$Policies: com.google.common.util.concurrent.CycleDetectingLockFactory$Policies[] values()
io.flutter.view.AccessibilityBridge$SemanticsNode: java.util.List access$3802(io.flutter.view.AccessibilityBridge$SemanticsNode,java.util.List)
androidx.core.app.NotificationCompat: android.os.Bundle getExtras(android.app.Notification)
io.flutter.plugin.editing.TextInputPlugin$2: TextInputPlugin$2(io.flutter.plugin.editing.TextInputPlugin,boolean,double[],double[])
androidx.fragment.app.FragmentManagerState: void writeToParcel(android.os.Parcel,int)
com.google.android.gms.auth.api.signin.GoogleSignInAccount: int hashCode()
com.google.android.gms.common.internal.BaseGmsClient: boolean zzo(com.google.android.gms.common.internal.BaseGmsClient)
kotlinx.coroutines.channels.Receive: Receive()
androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager: void onViewDetachedFromWindow(android.view.View)
androidx.fragment.app.BackStackState: int describeContents()
kotlinx.coroutines.CancellableContinuationImpl: void callCancelHandler(kotlinx.coroutines.CancelHandler,java.lang.Throwable)
io.sentry.IHub: io.sentry.protocol.SentryId getLastEventId()
kotlinx.coroutines.JobKt: void cancel(kotlin.coroutines.CoroutineContext,java.util.concurrent.CancellationException)
com.google.android.gms.common.api.internal.LifecycleCallback: void onStart()
io.sentry.protocol.SdkInfo: void acceptUnknownProperties(java.util.Map)
dev.fluttercommunity.plus.packageinfo.PackageInfoPlugin: java.lang.String signatureToSha1(byte[])
io.flutter.embedding.android.FlutterSplashView$2: void onFlutterUiDisplayed()
com.tekartik.sqflite.operation.SqlErrorInfo: java.util.Map getMap(com.tekartik.sqflite.operation.Operation)
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: androidx.core.util.Consumer getCallback()
io.sentry.CircularFifoQueue: int access$500(io.sentry.CircularFifoQueue)
androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon(android.content.Context)
com.google.android.gms.common.internal.BaseGmsClient: void zzl(int,android.os.Bundle,int)
io.flutter.plugin.platform.PlatformPlugin$1: void playSystemSound(io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType)
com.google.gson.internal.bind.TypeAdapters$6: java.lang.Number read(com.google.gson.stream.JsonReader)
com.google.android.gms.maps.model.MarkerOptions: com.google.android.gms.maps.model.MarkerOptions flat(boolean)
io.flutter.embedding.android.FlutterView: FlutterView(android.content.Context,io.flutter.embedding.android.FlutterTextureView)
androidx.window.layout.WindowMetricsCalculator$Companion: androidx.window.layout.WindowMetricsCalculator getOrCreate()
com.google.gson.JsonSerializationContext: com.google.gson.JsonElement serialize(java.lang.Object)
io.sentry.android.core.EnvelopeFileObserver$CachedEnvelopeHint: void reset()
com.google.gson.internal.$Gson$Types: boolean equal(java.lang.Object,java.lang.Object)
androidx.fragment.app.FragmentManagerImpl: void attachFragment(androidx.fragment.app.Fragment)
com.google.common.util.concurrent.AbstractFuture: boolean cancel(boolean)
com.google.android.gms.maps.internal.zzg: void setOnCameraMoveListener(com.google.android.gms.maps.internal.zzt)
io.sentry.NoOpTransaction: void setName(java.lang.String)
io.sentry.SentryOptions: java.lang.String getDsn()
kotlin.coroutines.AbstractCoroutineContextElement: AbstractCoroutineContextElement(kotlin.coroutines.CoroutineContext$Key)
io.flutter.embedding.engine.systemchannels.TextInputChannel: TextInputChannel(io.flutter.embedding.engine.dart.DartExecutor)
io.sentry.MainEventProcessor: void setTags(io.sentry.SentryBaseEvent)
io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler$1: BasicMessageChannel$IncomingMessageHandler$1(io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler,io.flutter.plugin.common.BinaryMessenger$BinaryReply)
kotlinx.coroutines.flow.FlowKt__BuildersKt: kotlinx.coroutines.flow.Flow flow(kotlin.jvm.functions.Function2)
kotlinx.coroutines.flow.internal.DownstreamExceptionElement: kotlin.coroutines.CoroutineContext$Key getKey()
io.sentry.Hub: void endSession()
com.google.android.gms.maps.model.PatternItem: java.lang.String toString()
io.sentry.android.core.DefaultAndroidEventProcessor: boolean shouldApplyScopeData(io.sentry.SentryBaseEvent,java.lang.Object)
com.google.gson.JsonElement: byte getAsByte()
io.flutter.embedding.engine.systemchannels.TextInputChannel: void setTextInputMethodHandler(io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputMethodHandler)
com.google.gson.internal.bind.JsonTreeReader: java.lang.Object popStack()
io.sentry.SentryExceptionFactory: io.sentry.protocol.SentryException getSentryException(java.lang.Throwable,io.sentry.protocol.Mechanism,java.lang.Thread,boolean)
androidx.savedstate.SavedStateRegistryController: void performSave(android.os.Bundle)
io.sentry.android.ndk.INativeScope: void setTag(java.lang.String,java.lang.String)
kotlinx.coroutines.internal.SystemPropsKt__SystemProps_commonKt: long systemProp$default(java.lang.String,long,long,long,int,java.lang.Object)
com.google.android.gms.maps.GoogleMap: boolean isBuildingsEnabled()
io.sentry.DirectoryProcessor$SendCachedEnvelopeHint: boolean isRetry()
kotlinx.coroutines.JobSupport$Finishing: java.lang.Object getExceptionsHolder()
com.google.common.collect.MapMakerInternalMap$Values: boolean contains(java.lang.Object)
com.google.gson.FieldNamingPolicy: java.lang.String modifyString(char,java.lang.String,int)
io.flutter.view.AccessibilityBridge$TextDirection: io.flutter.view.AccessibilityBridge$TextDirection fromInt(int)
com.google.common.reflect.Types$GenericArrayTypeImpl: Types$GenericArrayTypeImpl(java.lang.reflect.Type)
com.tekartik.sqflite.operation.MethodCallOperation: java.lang.Object getArgument(java.lang.String)
io.sentry.transport.NoOpTransport: io.sentry.transport.NoOpTransport getInstance()
androidx.collection.ContainerHelpers: int binarySearch(int[],int,int)
com.google.gson.internal.bind.TypeAdapters$6: void write(com.google.gson.stream.JsonWriter,java.lang.Number)
kotlinx.coroutines.Job$DefaultImpls: java.lang.Object fold(kotlinx.coroutines.Job,java.lang.Object,kotlin.jvm.functions.Function2)
com.google.gson.internal.Excluder: com.google.gson.internal.Excluder excludeFieldsWithoutExposeAnnotation()
io.flutter.view.VsyncWaiter: io.flutter.view.VsyncWaiter getInstance(android.hardware.display.DisplayManager,io.flutter.embedding.engine.FlutterJNI)
androidx.fragment.app.BackStackRecord: androidx.fragment.app.Fragment trackAddedFragmentsInPop(java.util.ArrayList,androidx.fragment.app.Fragment)
io.flutter.plugins.connectivity.Connectivity: android.net.wifi.WifiInfo getWifiInfo()
androidx.core.graphics.drawable.IconCompat: java.lang.String toString()
com.google.android.gms.common.internal.GmsClientSupervisor: com.google.android.gms.common.internal.GmsClientSupervisor getInstance(android.content.Context)
kotlinx.coroutines.channels.AbstractChannel: AbstractChannel(kotlin.jvm.functions.Function1)
com.google.android.gms.common.api.internal.NonGmsServiceBrokerClient: void zae(java.lang.String)
io.sentry.protocol.Message: Message()
io.flutter.embedding.android.DrawableSplashScreen$1: void onAnimationRepeat(android.animation.Animator)
com.google.gson.FieldNamingPolicy$5: java.lang.String translateName(java.lang.reflect.Field)
io.flutter.plugin.common.StandardMessageCodec: java.lang.Object readValue(java.nio.ByteBuffer)
kotlinx.coroutines.EventLoop: void dispatchUnconfined(kotlinx.coroutines.DispatchedTask)
com.google.common.collect.ImmutableList$SubList: java.util.Iterator iterator()
io.sentry.SentryOptions: void setTracesSampler(io.sentry.SentryOptions$TracesSamplerCallback)
io.sentry.android.core.DefaultAndroidEventProcessor: boolean isExternalStorageMounted()
kotlinx.coroutines.internal.DispatchedContinuation: kotlinx.coroutines.CancellableContinuationImpl claimReusableCancellableContinuation()
androidx.window.embedding.SplitPairRule: boolean getClearTop()
io.flutter.embedding.android.FlutterView: void addFlutterEngineAttachmentListener(io.flutter.embedding.android.FlutterView$FlutterEngineAttachmentListener)
com.google.android.gms.tasks.zzw: void zzf()
com.google.gson.JsonObject: com.google.gson.JsonArray getAsJsonArray(java.lang.String)
com.google.common.reflect.Types$JavaVersion: boolean jdkTypeDuplicatesOwnerName()
io.flutter.plugins.googlemaps.TileOverlayController: TileOverlayController(com.google.android.gms.maps.model.TileOverlay)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: boolean isAttachedToBroadcastReceiver()
kotlin.ResultKt: void throwOnFailure(java.lang.Object)
kotlinx.coroutines.InvokeOnCompletion: void invoke(java.lang.Throwable)
com.google.common.collect.MapMakerInternalMap$DummyInternalEntry: java.lang.Object getKey()
com.google.android.gms.common.internal.BaseGmsClient: com.google.android.gms.common.internal.BaseGmsClient$BaseOnConnectionFailedListener zzc(com.google.android.gms.common.internal.BaseGmsClient)
kotlin.random.AbstractPlatformRandom: AbstractPlatformRandom()
io.flutter.embedding.android.DrawableSplashScreen$DrawableSplashScreenView: DrawableSplashScreen$DrawableSplashScreenView(android.content.Context,android.util.AttributeSet,int)
io.sentry.Scope: Scope(io.sentry.Scope)
androidx.window.core.Version$Companion: androidx.window.core.Version getUNKNOWN()
androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator: FragmentManagerImpl$AnimationOrAnimator(android.animation.Animator)
com.google.common.reflect.Types$JavaVersion$3: java.lang.String typeName(java.lang.reflect.Type)
io.sentry.TracesSampler: boolean sample(java.lang.Double)
com.javih.add2calendar.Add2CalendarPlugin: void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.sentry.android.ndk.NdkScopeObserver: void setExtra(java.lang.String,java.lang.String)
io.sentry.SentryBaseEvent: void addBreadcrumb(io.sentry.Breadcrumb)
io.sentry.Hub: io.sentry.protocol.SentryId getLastEventId()
kotlinx.coroutines.flow.internal.SafeCollectorKt$emitFun$1: SafeCollectorKt$emitFun$1()
androidx.fragment.app.FragmentManagerImpl: void removeRetainedFragment(androidx.fragment.app.Fragment)
kotlin.Pair: java.lang.Object getSecond()
com.google.android.gms.common.internal.safeparcel.SafeParcelReader: java.util.ArrayList createTypedList(android.os.Parcel,int,android.os.Parcelable$Creator)
com.google.android.gms.common.api.internal.zabq: void zao()
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState: boolean hasSelection()
io.sentry.protocol.Contexts: io.sentry.protocol.App getApp()
io.sentry.protocol.Device: void setStorageSize(java.lang.Long)
androidx.core.app.NotificationCompat$Builder: java.lang.CharSequence limitCharSequenceLength(java.lang.CharSequence)
io.flutter.embedding.engine.dart.DartMessenger$Reply: DartMessenger$Reply(io.flutter.embedding.engine.FlutterJNI,int)
androidx.fragment.app.FragmentManagerImpl: boolean checkForMenus()
androidx.window.layout.WindowInfoTracker$Companion: void reset()
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void executeTask(kotlinx.coroutines.scheduling.Task)
io.flutter.plugins.googlemaps.PolylinesController: java.lang.String getPolylineId(java.lang.Object)
androidx.collection.MapCollections$ArrayIterator: boolean hasNext()
io.flutter.embedding.engine.renderer.FlutterRenderer: boolean isDisplayingFlutterUi()
kotlinx.coroutines.EventLoopImplPlatform: EventLoopImplPlatform()
androidx.fragment.app.FragmentManagerState: FragmentManagerState(android.os.Parcel)
com.google.android.gms.common.api.internal.zabs: int hashCode()
kotlinx.coroutines.internal.ThreadContextKt$findOne$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)
io.flutter.plugins.pathprovider.PathProviderPlugin: void onAttachedToEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.WindowInsets access$400(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
androidx.versionedparcelable.VersionedParcelParcel: VersionedParcelParcel(android.os.Parcel,int,int,java.lang.String,androidx.collection.ArrayMap,androidx.collection.ArrayMap,androidx.collection.ArrayMap)
androidx.window.embedding.MatcherUtils: boolean areActivityOrIntentComponentsMatching$window_release(android.app.Activity,android.content.ComponentName)
com.google.android.gms.maps.model.Marker: void setDraggable(boolean)
com.google.android.gms.maps.model.Polyline: boolean equals(java.lang.Object)
io.flutter.embedding.engine.loader.ApplicationInfoLoader: boolean getBoolean(android.os.Bundle,java.lang.String,boolean)
com.google.android.gms.common.internal.BaseGmsClient: java.lang.Object zzd(com.google.android.gms.common.internal.BaseGmsClient)
androidx.window.layout.WindowMetrics: int hashCode()
io.sentry.IHub: io.sentry.ITransaction startTransaction(io.sentry.TransactionContext,boolean)
io.sentry.protocol.SentryStackTrace: java.lang.Boolean getSnapshot()
io.flutter.view.AccessibilityBridge$SemanticsNode: void access$4500(io.flutter.view.AccessibilityBridge$SemanticsNode,java.nio.ByteBuffer,java.lang.String[],java.nio.ByteBuffer[])
com.google.android.gms.maps.model.Polygon: void setZIndex(float)
io.sentry.protocol.SentrySpan: java.lang.String getOp()
io.flutter.plugin.common.JSONMethodCodec: java.nio.ByteBuffer encodeErrorEnvelopeWithStacktrace(java.lang.String,java.lang.String,java.lang.Object,java.lang.String)
com.google.android.gms.common.internal.BaseGmsClient: void connect(com.google.android.gms.common.internal.BaseGmsClient$ConnectionProgressReportCallbacks)
androidx.fragment.app.Fragment: void performStart()
androidx.fragment.app.FragmentController: void dispatchPause()
com.google.common.reflect.Types$JavaVersion$3: java.lang.reflect.Type usedInGenericType(java.lang.reflect.Type)
com.google.gson.internal.UnsafeAllocator$2: java.lang.Object newInstance(java.lang.Class)
com.google.gson.internal.LinkedHashTreeMap: LinkedHashTreeMap()
com.google.android.gms.common.api.Scope: java.lang.String getScopeUri()
com.google.android.gms.common.api.Scope: Scope(int,java.lang.String)
io.sentry.SentryClient: io.sentry.SentryEvent applyScope(io.sentry.SentryEvent,io.sentry.Scope,java.lang.Object)
com.google.common.base.Equivalence: com.google.common.base.Equivalence identity()
io.flutter.embedding.android.FlutterSplashView$SavedState$1: java.lang.Object[] newArray(int)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: java.lang.Object getAppComponent()
com.google.common.reflect.Types$JavaVersion$4: boolean jdkTypeDuplicatesOwnerName()
com.google.android.gms.common.api.internal.zzb: void onCreate(android.os.Bundle)
io.flutter.plugin.editing.TextInputPlugin: void setTextInputClient(int,io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration)
io.flutter.plugins.urllauncher.UrlLauncher: void setActivity(android.app.Activity)
com.google.common.collect.MapMakerInternalMap$AbstractStrongKeyEntry: int getHash()
com.google.gson.stream.JsonReader: void nextNull()
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$14: void invoke(java.lang.String)
androidx.activity.OnBackPressedDispatcher$OnBackPressedCancellable: OnBackPressedDispatcher$OnBackPressedCancellable(androidx.activity.OnBackPressedDispatcher,androidx.activity.OnBackPressedCallback)
com.google.gson.internal.bind.TypeAdapters$28: java.lang.Object read(com.google.gson.stream.JsonReader)
androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: ExtensionEmbeddingBackend$SplitListenerWrapper(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
com.google.common.primitives.Ints: int saturatedCast(long)
io.sentry.android.core.DefaultAndroidEventProcessor: void mergeOS(io.sentry.SentryBaseEvent)
kotlinx.coroutines.internal.LockFreeLinkedListNode: boolean addOneIfEmpty(kotlinx.coroutines.internal.LockFreeLinkedListNode)
com.google.common.collect.MapMakerInternalMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)
com.google.gson.JsonArray: void addAll(com.google.gson.JsonArray)
com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory: JsonAdapterAnnotationTypeAdapterFactory(com.google.gson.internal.ConstructorConstructor)
io.sentry.util.StringUtils: java.lang.String capitalize(java.lang.String)
androidx.window.embedding.SplitInfo: androidx.window.embedding.ActivityStack getPrimaryActivityStack()
io.sentry.OptionsContainer: java.lang.Object createInstance()
com.google.android.gms.common.internal.safeparcel.SafeParcelReader: int[] createIntArray(android.os.Parcel,int)
androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: void accept(java.util.List)
com.google.gson.LongSerializationPolicy: LongSerializationPolicy(java.lang.String,int)
io.sentry.protocol.SentryThread: java.lang.Integer getPriority()
io.sentry.protocol.SentryStackFrame: void setModule(java.lang.String)
androidx.fragment.app.Fragment: androidx.lifecycle.ViewModelStore getViewModelStore()
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.Task trySteal(boolean)
io.flutter.embedding.android.FlutterActivity: boolean shouldDestroyEngineWithHost()
androidx.window.layout.FoldingFeature: androidx.window.layout.FoldingFeature$Orientation getOrientation()
com.google.gson.Gson: Gson(com.google.gson.internal.Excluder,com.google.gson.FieldNamingStrategy,java.util.Map,boolean,boolean,boolean,boolean,boolean,boolean,boolean,com.google.gson.LongSerializationPolicy,java.lang.String,int,int,java.util.List,java.util.List,java.util.List)
kotlinx.coroutines.channels.RendezvousChannel: boolean isBufferEmpty()
com.google.android.gms.common.api.internal.zaae: void onResume()
com.google.android.gms.common.api.internal.zaaf: com.google.android.gms.common.api.internal.ApiKey zaa()
io.flutter.plugin.platform.VirtualDisplayController: void onFlutterViewDetached()
androidx.window.layout.WindowMetricsCalculator$Companion$reset$1: WindowMetricsCalculator$Companion$reset$1()
kotlinx.coroutines.scheduling.NonBlockingContext: NonBlockingContext()
io.flutter.embedding.engine.FlutterShellArgs: java.lang.String[] toArray()
com.tekartik.sqflite.SqflitePlugin: java.util.Map makeOpenResult(int,boolean,boolean)
com.google.android.gms.common.internal.safeparcel.SafeParcelReader: android.os.Parcelable createParcelable(android.os.Parcel,int,android.os.Parcelable$Creator)
com.google.android.gms.maps.model.MapStyleOptions: MapStyleOptions(java.lang.String)
io.sentry.android.core.AnrIntegration: void register(io.sentry.IHub,io.sentry.SentryOptions)
io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener$1: void run()
com.google.common.collect.ImmutableList: ImmutableList()
com.tekartik.sqflite.operation.BaseOperation: void success(java.lang.Object)
kotlinx.coroutines.android.HandlerContext: HandlerContext(android.os.Handler,java.lang.String,int,kotlin.jvm.internal.DefaultConstructorMarker)
com.google.common.hash.BloomFilter$Strategy: boolean mightContain(java.lang.Object,com.google.common.hash.Funnel,int,com.google.common.hash.BloomFilterStrategies$LockFreeBitArray)
io.flutter.embedding.android.FlutterActivity: io.flutter.embedding.engine.FlutterEngine getFlutterEngine()
com.google.android.gms.common.api.internal.LifecycleActivity: android.app.Activity zza()
com.google.android.gms.common.api.internal.GoogleApiManager: com.google.android.gms.common.internal.zal zan(com.google.android.gms.common.api.internal.GoogleApiManager)
io.flutter.plugin.platform.PlatformPlugin$2: PlatformPlugin$2(io.flutter.plugin.platform.PlatformPlugin)
io.flutter.plugins.googlemaps.PolygonBuilder: void setGeodesic(boolean)
io.flutter.embedding.android.FlutterActivity: android.os.Bundle getMetaData()
io.sentry.SentryOptions: void addIgnoredExceptionForType(java.lang.Class)
com.google.android.gms.common.api.internal.BackgroundDetector: void zza(boolean)
io.sentry.protocol.Mechanism: void setData(java.util.Map)
com.google.android.gms.common.zzk: byte[] zzf()
com.google.gson.internal.bind.TypeAdapters$25: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
com.google.gson.stream.JsonWriter: void setLenient(boolean)
com.google.android.gms.common.internal.ConnectionTelemetryConfiguration: boolean getMethodTimingTelemetryEnabled()
com.google.common.util.concurrent.AbstractFuture: java.util.concurrent.CancellationException cancellationExceptionWithCause(java.lang.String,java.lang.Throwable)
com.google.common.collect.Maps$EntryFunction: com.google.common.collect.Maps$EntryFunction[] values()
androidx.window.embedding.ActivityRule: boolean equals(java.lang.Object)
com.google.android.gms.common.internal.RootTelemetryConfiguration: void writeToParcel(android.os.Parcel,int)
com.google.gson.JsonArray: boolean remove(com.google.gson.JsonElement)
com.google.android.gms.common.api.GoogleApi: com.google.android.gms.common.internal.ClientSettings$Builder createClientSettingsBuilder()
androidx.fragment.app.Fragment: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])
com.google.android.gms.common.internal.ClientSettings: java.lang.String zac()
androidx.core.view.KeyEventDispatcher: boolean dispatchBeforeHierarchy(android.view.View,android.view.KeyEvent)
com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper: boolean casValue(com.google.common.util.concurrent.AbstractFuture,java.lang.Object,java.lang.Object)
androidx.core.app.NotificationCompat$Style: android.widget.RemoteViews makeHeadsUpContentView(androidx.core.app.NotificationBuilderWithBuilderAccessor)
io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler: java.util.concurrent.atomic.AtomicReference access$300(io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler)
com.google.gson.Gson: com.google.gson.TypeAdapter floatAdapter(boolean)
androidx.fragment.app.DialogFragment: void setShowsDialog(boolean)
io.flutter.plugins.urllauncher.MethodCallHandlerImpl: MethodCallHandlerImpl(io.flutter.plugins.urllauncher.UrlLauncher)
com.google.android.gms.maps.model.Circle: void setClickable(boolean)
androidx.collection.MapCollections$KeySet: MapCollections$KeySet(androidx.collection.MapCollections)
io.sentry.protocol.User: void setUsername(java.lang.String)
io.flutter.embedding.engine.loader.ApplicationInfoLoader: void skipTag(android.content.res.XmlResourceParser)
kotlin.coroutines.jvm.internal.DebugMetadataKt: int getLabel(kotlin.coroutines.jvm.internal.BaseContinuationImpl)
com.google.android.gms.maps.internal.zzg: void setOnCameraMoveStartedListener(com.google.android.gms.maps.internal.zzv)
io.flutter.plugins.googlemaps.GoogleMapController: void onCreate(androidx.lifecycle.LifecycleOwner)
kotlin.comparisons.ComparisonsKt__ComparisonsKt: int compareValues(java.lang.Comparable,java.lang.Comparable)
androidx.fragment.app.FragmentManagerImpl$6: androidx.fragment.app.Fragment instantiate(java.lang.ClassLoader,java.lang.String)
com.google.android.gms.maps.internal.zzby: zzby(android.os.IBinder)
com.google.android.gms.common.GooglePlayServicesUtilLight: boolean isPlayServicesPossiblyUpdating(android.content.Context,int)
io.flutter.embedding.android.FlutterView: void onConfigurationChanged(android.content.res.Configuration)
io.flutter.plugin.common.StandardMethodCodec: java.nio.ByteBuffer encodeErrorEnvelope(java.lang.String,java.lang.String,java.lang.Object)
com.google.android.gms.common.internal.safeparcel.SafeParcelReader: boolean readBoolean(android.os.Parcel,int)
androidx.fragment.app.FragmentTransition: void setViewVisibility(java.util.ArrayList,int)
com.google.gson.stream.MalformedJsonException: MalformedJsonException(java.lang.Throwable)
kotlin.collections.EmptyList: java.lang.Object get(int)
kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: void dispatchWithContext$kotlinx_coroutines_core(java.lang.Runnable,kotlinx.coroutines.scheduling.TaskContext,boolean)
com.google.gson.FieldAttributes: FieldAttributes(java.lang.reflect.Field)
io.sentry.transport.TransportResult$ErrorTransportResult: TransportResult$ErrorTransportResult(int)
kotlin.collections.CollectionsKt__CollectionsKt: java.util.List listOf(java.lang.Object[])
androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions: java.util.Map$Entry next()
io.sentry.NoOpSpan: void setTag(java.lang.String,java.lang.String)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: int access$100(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
com.google.gson.FieldNamingPolicy: com.google.gson.FieldNamingPolicy valueOf(java.lang.String)
androidx.activity.ComponentActivity: androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher()
io.flutter.plugin.editing.ListenableEditingState: int getSelectionStart()
com.google.gson.Gson: void toJson(com.google.gson.JsonElement,java.lang.Appendable)
com.google.gson.JsonPrimitive: void setValue(java.lang.Object)
com.google.common.collect.ImmutableCollection$ArrayBasedBuilder: com.google.common.collect.ImmutableCollection$ArrayBasedBuilder add(java.lang.Object)
io.sentry.Sentry: void setUser(io.sentry.protocol.User)
com.google.android.gms.maps.internal.zzbe: zzbe()
io.sentry.CircularFifoQueue: boolean isAtFullCapacity()
com.google.android.gms.common.internal.zze: void onServiceConnected(android.content.ComponentName,android.os.IBinder)
io.sentry.adapters.ContextsDeserializerAdapter: java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext)
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$10: java.lang.Object invoke(java.lang.Object)
com.google.gson.internal.Excluder: com.google.gson.internal.Excluder clone()
androidx.lifecycle.LifecycleRegistry: void setCurrentState(androidx.lifecycle.Lifecycle$State)
androidx.window.core.Version$Companion: Version$Companion()
com.google.gson.internal.bind.TypeAdapters$9: TypeAdapters$9()
io.sentry.protocol.SentryException: java.lang.Long getThreadId()
androidx.collection.MapCollections$EntrySet: void clear()
io.sentry.SentryTracer: java.util.Date getStartTimestamp()
com.google.gson.JsonArray: boolean getAsBoolean()
androidx.lifecycle.DefaultLifecycleObserver: void onStop(androidx.lifecycle.LifecycleOwner)
androidx.fragment.app.FragmentManagerState$1: java.lang.Object[] newArray(int)
io.flutter.plugin.platform.PlatformPlugin: void access$200(io.flutter.plugin.platform.PlatformPlugin,io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription)
com.google.common.collect.SingletonImmutableSet: int size()
io.sentry.flutter.SentryFlutterPlugin: void addPackages(io.sentry.SentryEvent,io.sentry.protocol.SdkVersion)
com.google.gson.internal.bind.TypeAdapters$2: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
com.google.android.gms.internal.maps.zzy: void zzu(int)
com.google.common.collect.Sets: int hashCodeImpl(java.util.Set)
io.flutter.plugins.googlemaps.MarkerController: boolean isInfoWindowShown()
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void park()
io.flutter.embedding.engine.systemchannels.DeferredComponentChannel: java.util.Map access$100(io.flutter.embedding.engine.systemchannels.DeferredComponentChannel)
androidx.fragment.app.FragmentActivity: android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet)
androidx.fragment.app.DialogFragment: void onStart()
com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment: com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment self()
androidx.fragment.app.DialogFragment: void onAttach(android.content.Context)
io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType: TextInputChannel$InputType(io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType,boolean,boolean)
androidx.collection.SimpleArrayMap: java.lang.Object keyAt(int)
io.sentry.SentryEvent: void setDebugMeta(io.sentry.protocol.DebugMeta)
androidx.window.layout.ExtensionInterfaceCompat: void setExtensionCallback(androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface)
androidx.fragment.app.Fragment: java.lang.Object getHost()
com.google.gson.internal.bind.TypeAdapters$20: java.lang.StringBuffer read(com.google.gson.stream.JsonReader)
io.flutter.plugin.platform.SingleViewPresentation$PresentationState: io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup access$000(io.flutter.plugin.platform.SingleViewPresentation$PresentationState)
io.flutter.embedding.engine.systemchannels.AccessibilityChannel: void dispatchSemanticsAction(int,io.flutter.view.AccessibilityBridge$Action)
androidx.fragment.app.Fragment: int getStateAfterAnimating()
kotlinx.coroutines.flow.internal.DownstreamExceptionElement: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)
com.google.gson.JsonElement: java.lang.String getAsString()
io.flutter.plugins.googlemaps.GoogleMapController: void onMapClick(com.google.android.gms.maps.model.LatLng)
com.google.common.collect.ImmutableCollection: java.lang.Object[] toArray()
kotlinx.coroutines.internal.DispatchedContinuation: kotlinx.coroutines.CancellableContinuationImpl getReusableCancellableContinuation()
kotlin.coroutines.jvm.internal.ModuleNameRetriever: java.lang.String getModuleName(kotlin.coroutines.jvm.internal.BaseContinuationImpl)
io.sentry.SentryOptions: io.sentry.ISerializer getSerializer()
io.sentry.cache.IEnvelopeCache: void store(io.sentry.SentryEnvelope,java.lang.Object)
kotlinx.coroutines.scheduling.CoroutineScheduler: void parkedWorkersStackTopUpdate(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker,int,int)
io.flutter.FlutterInjector: java.util.concurrent.ExecutorService executorService()
io.sentry.cache.IEnvelopeCache: void store(io.sentry.SentryEnvelope)
androidx.core.app.CoreComponentFactory: android.content.BroadcastReceiver instantiateReceiver(java.lang.ClassLoader,java.lang.String,android.content.Intent)
com.google.android.gms.common.zzh: byte[] zzb()
com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl: boolean equals(java.lang.Object)
com.google.gson.internal.LinkedTreeMap: com.google.gson.internal.LinkedTreeMap$Node find(java.lang.Object,boolean)
com.google.gson.DefaultDateTypeAdapter: java.lang.Class verifyDateType(java.lang.Class)
io.flutter.plugins.googlemaps.GoogleMapController: void onDestroy(androidx.lifecycle.LifecycleOwner)
io.sentry.cache.EnvelopeCache: java.util.Iterator iterator()
kotlin.collections.EmptyList: boolean removeAll(java.util.Collection)
io.sentry.RequestDetails: java.net.URL getUrl()
com.google.android.gms.internal.common.zzc: android.os.Parcelable zza(android.os.Parcel,android.os.Parcelable$Creator)
androidx.window.layout.SidecarWindowBackend: SidecarWindowBackend(androidx.window.layout.ExtensionInterfaceCompat)
androidx.fragment.app.FragmentManagerImpl: int getBackStackEntryCount()
com.google.gson.GsonBuilder: com.google.gson.GsonBuilder excludeFieldsWithoutExposeAnnotation()
io.flutter.plugins.googlemaps.GoogleMapController: void setInitialCircles(java.lang.Object)
com.google.gson.internal.bind.TypeAdapters$7: void write(com.google.gson.stream.JsonWriter,java.lang.Number)
com.google.android.gms.maps.model.MarkerOptions: com.google.android.gms.maps.model.MarkerOptions title(java.lang.String)
io.flutter.plugins.GeneratedPluginRegistrant: void registerWith(io.flutter.embedding.engine.FlutterEngine)
kotlinx.coroutines.intrinsics.UndispatchedKt: void startCoroutineUndispatched(kotlin.jvm.functions.Function2,java.lang.Object,kotlin.coroutines.Continuation)
com.google.gson.Gson: void checkValidFloatingPoint(double)
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag valueOf(java.lang.String)
kotlin.coroutines.jvm.internal.ModuleNameRetriever$Cache: ModuleNameRetriever$Cache(java.lang.reflect.Method,java.lang.reflect.Method,java.lang.reflect.Method)
io.sentry.protocol.SentryStackTrace: void acceptUnknownProperties(java.util.Map)
io.flutter.plugins.googlemaps.TileProviderController$Worker: TileProviderController$Worker(io.flutter.plugins.googlemaps.TileProviderController,int,int,int)
com.google.gson.GsonBuilder: com.google.gson.GsonBuilder setDateFormat(int,int)
io.flutter.plugins.googlemaps.PolylineBuilder: boolean consumeTapEvents()
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: boolean isAttached()
com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper: void setValue(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object)
androidx.window.layout.HardwareFoldingFeature: HardwareFoldingFeature(androidx.window.core.Bounds,androidx.window.layout.HardwareFoldingFeature$Type,androidx.window.layout.FoldingFeature$State)
io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry$ShimRegistrarAggregate: void addPlugin(io.flutter.embedding.engine.plugins.shim.ShimRegistrar)
com.google.gson.internal.LinkedTreeMap$Node: java.lang.Object getValue()
io.flutter.embedding.engine.FlutterJNI: void nativeInit(android.content.Context,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,long)
com.google.android.gms.common.internal.zaw: java.lang.Object createFromParcel(android.os.Parcel)
io.flutter.plugins.connectivity.ConnectivityBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)
io.sentry.transport.StdoutTransport: void close()
com.tekartik.sqflite.SqflitePlugin: void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
com.google.android.gms.common.internal.MethodInvocation: void writeToParcel(android.os.Parcel,int)
kotlin.text.StringsKt__StringsKt: int indexOf$default(java.lang.CharSequence,char,int,boolean,int,java.lang.Object)
io.flutter.plugins.pathprovider.PathProviderPlugin$PathProviderPlatformThread: void getTemporaryDirectory(io.flutter.plugin.common.MethodChannel$Result)
androidx.collection.SparseArrayCompat: SparseArrayCompat()
com.google.gson.internal.bind.TypeAdapters$34: com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken)
com.google.android.gms.maps.GoogleMap: com.google.android.gms.maps.model.TileOverlay addTileOverlay(com.google.android.gms.maps.model.TileOverlayOptions)
io.flutter.plugins.pathprovider.PathProviderPlugin$PathProviderPlatformThread: void getExternalStorageDirectories(java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
io.sentry.protocol.SentryId: SentryId()
androidx.lifecycle.ProcessLifecycleOwner: void dispatchStopIfNeeded()
io.sentry.adapters.SpanIdSerializerAdapter: com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,com.google.gson.JsonSerializationContext)
io.sentry.android.core.PhoneStateBreadcrumbsIntegration: PhoneStateBreadcrumbsIntegration(android.content.Context)
io.flutter.plugin.editing.TextInputPlugin: android.view.autofill.AutofillManager access$500(io.flutter.plugin.editing.TextInputPlugin)
com.google.android.gms.maps.model.TileOverlay: void setZIndex(float)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$DefaultFlutterAssets: FlutterEngineConnectionRegistry$DefaultFlutterAssets(io.flutter.embedding.engine.loader.FlutterLoader,io.flutter.embedding.engine.FlutterEngineConnectionRegistry$1)
com.google.android.gms.internal.maps.zzy: void zzo()
com.google.gson.internal.Excluder$1: com.google.gson.TypeAdapter delegate()
kotlin.ranges.IntRange$Companion: IntRange$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
kotlinx.coroutines.channels.AbstractSendChannel: kotlinx.coroutines.channels.Closed getClosedForSend()
io.flutter.FlutterInjector$Builder: FlutterInjector$Builder()
com.google.gson.stream.JsonWriter: void beforeName()
com.google.gson.reflect.TypeToken: boolean isAssignableFrom(java.lang.reflect.Type)
androidx.versionedparcelable.VersionedParcel: boolean isStream()
com.google.android.gms.maps.UiSettings: UiSettings(com.google.android.gms.maps.internal.IUiSettingsDelegate)
io.flutter.plugin.platform.VirtualDisplayController: android.view.View getView()
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: android.app.Activity getActivity()
kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.CoroutineScheduler$Worker currentWorker()
com.google.android.gms.common.internal.ClientSettings$Builder: ClientSettings$Builder()
com.google.android.gms.maps.model.MarkerOptions: com.google.android.gms.maps.model.LatLng getPosition()
androidx.window.embedding.EmptyEmbeddingComponent: void setEmbeddingRules(java.util.Set)
com.google.gson.JsonSyntaxException: JsonSyntaxException(java.lang.Throwable)
kotlinx.coroutines.channels.AbstractSendChannel$SendBuffered: java.lang.String toString()
androidx.versionedparcelable.VersionedParcelParcel: int readInt()
io.flutter.plugin.common.MethodCall: java.lang.Object arguments()
com.google.common.util.concurrent.CycleDetectingLockFactory$Policies$1: CycleDetectingLockFactory$Policies$1(java.lang.String,int)
io.sentry.NoOpSpan: void finish()
com.google.android.gms.internal.maps.zzj: void zzn()
io.sentry.UnknownPropertiesTypeAdapterFactory: com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken)
com.google.gson.FieldNamingPolicy$6: FieldNamingPolicy$6(java.lang.String,int)
androidx.arch.core.executor.DefaultTaskExecutor: DefaultTaskExecutor()
io.flutter.plugins.pathprovider.PathProviderPlugin: java.lang.String access$100(io.flutter.plugins.pathprovider.PathProviderPlugin)
com.google.common.collect.MapMakerInternalMap: java.lang.Object remove(java.lang.Object)
com.google.android.gms.maps.model.MarkerOptions: boolean isDraggable()
io.sentry.UncaughtExceptionHandlerIntegration: void close()
androidx.lifecycle.ReportFragment: void dispatchCreate(androidx.lifecycle.ReportFragment$ActivityInitializationListener)
io.sentry.Session: java.lang.String getIpAddress()
com.google.common.reflect.Types$JavaVersion$1: java.lang.reflect.Type newArrayType(java.lang.reflect.Type)
io.sentry.Sentry: void captureUserFeedback(io.sentry.UserFeedback)
com.google.android.gms.common.internal.RootTelemetryConfigManager: com.google.android.gms.common.internal.RootTelemetryConfiguration getConfig()
io.flutter.embedding.android.FlutterActivity: io.flutter.embedding.android.SplashScreen provideSplashScreen()
com.google.android.gms.maps.CameraUpdateFactory: com.google.android.gms.maps.CameraUpdate newLatLngBounds(com.google.android.gms.maps.model.LatLngBounds,int)
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$9: java.lang.Object invoke(java.lang.Object)
com.google.common.io.Files$FilePredicate$2: boolean apply(java.io.File)
com.google.android.gms.common.api.internal.zact: void zab(com.google.android.gms.signin.internal.zak)
com.google.android.gms.maps.model.PolylineOptions: com.google.android.gms.maps.model.PolylineOptions zIndex(float)
androidx.versionedparcelable.VersionedParcel: java.lang.reflect.Method getWriteMethod(java.lang.Class)
androidx.window.layout.SidecarAdapter: boolean isEqualSidecarDeviceState(androidx.window.sidecar.SidecarDeviceState,androidx.window.sidecar.SidecarDeviceState)
kotlin.coroutines.CombinedContext: int size()
io.flutter.embedding.android.FlutterActivity: android.view.View createFlutterView()
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$13: void invoke(int)
com.google.common.collect.MapMaker: com.google.common.collect.MapMakerInternalMap$Strength getKeyStrength()
com.google.gson.internal.Excluder: com.google.gson.internal.Excluder withExclusionStrategy(com.google.gson.ExclusionStrategy,boolean,boolean)
io.flutter.view.AccessibilityBridge: boolean isTouchExplorationEnabled()
kotlin.text.StringsKt__IndentKt: java.lang.String trimIndent(java.lang.String)
kotlinx.coroutines.JobSupportKt: kotlinx.coroutines.Empty access$getEMPTY_NEW$p()
io.sentry.protocol.SentryStackTrace: java.util.List getFrames()
com.google.android.gms.dynamite.zzh: com.google.android.gms.dynamite.DynamiteModule$VersionPolicy$SelectionResult selectModule(android.content.Context,java.lang.String,com.google.android.gms.dynamite.DynamiteModule$VersionPolicy$IVersions)
io.flutter.plugins.googlemaps.CirclesController: void addCircle(java.lang.Object)
io.sentry.SentryOptions: void merge(io.sentry.SentryOptions)
io.sentry.NoOpHub: io.sentry.protocol.SentryId captureMessage(java.lang.String,io.sentry.SentryLevel)
io.flutter.embedding.engine.loader.FlutterLoader: java.lang.String getLookupKeyForAsset(java.lang.String,java.lang.String)
com.google.common.collect.MapMakerInternalMap$Segment: boolean reclaimKey(com.google.common.collect.MapMakerInternalMap$InternalEntry,int)
io.sentry.SentryItemType: SentryItemType(java.lang.String,int,java.lang.String)
io.flutter.plugin.editing.InputConnectionAdaptor: InputConnectionAdaptor(android.view.View,int,io.flutter.embedding.engine.systemchannels.TextInputChannel,io.flutter.embedding.android.KeyboardManager,io.flutter.plugin.editing.ListenableEditingState,android.view.inputmethod.EditorInfo)
io.flutter.plugin.editing.ListenableEditingState: void setEditingState(io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState)
kotlin.coroutines.AbstractCoroutineContextElement: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)
io.flutter.embedding.android.SplashScreen: boolean doesSplashViewRememberItsTransition()
kotlinx.coroutines.NodeList: java.lang.String toString()
androidx.window.layout.SidecarWindowBackend: void unregisterLayoutChangeCallback(androidx.core.util.Consumer)
com.google.android.gms.common.api.GoogleApiActivity: void onActivityResult(int,int,android.content.Intent)
androidx.window.embedding.SplitRule: int getMinWidth()
io.sentry.NoOpLogger: boolean isEnabled(io.sentry.SentryLevel)
com.google.gson.internal.bind.JsonTreeWriter: com.google.gson.stream.JsonWriter nullValue()
io.sentry.ITransaction: void setName(java.lang.String)
com.google.gson.internal.bind.SqlDateTypeAdapter: java.sql.Date read(com.google.gson.stream.JsonReader)
io.flutter.embedding.android.FlutterSurfaceView: boolean access$100(io.flutter.embedding.android.FlutterSurfaceView)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView: void setOnDescendantFocusChangeListener(android.view.View$OnFocusChangeListener)
com.google.common.collect.ImmutableSet$Builder: com.google.common.collect.ImmutableSet build()
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView: void dispatchDraw(android.graphics.Canvas)
com.google.android.gms.dynamite.zzo: int zzb(android.content.Context,java.lang.String,boolean)
kotlinx.coroutines.android.AndroidDispatcherFactory: kotlinx.coroutines.android.HandlerContext createDispatcher(java.util.List)
io.flutter.plugins.googlemaps.GoogleMapController: void setTrafficEnabled(boolean)
io.sentry.HubAdapter: void endSession()
com.google.gson.LongSerializationPolicy$1: LongSerializationPolicy$1(java.lang.String,int)
io.sentry.NoOpTransaction: void setThrowable(java.lang.Throwable)
io.sentry.adapters.SpanStatusSerializerAdapter: SpanStatusSerializerAdapter(io.sentry.SentryOptions)
io.flutter.embedding.engine.FlutterJNI: void updateJavaAssetManager(android.content.res.AssetManager,java.lang.String)
androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager: void onViewAttachedToWindow(android.view.View)
kotlin.text.StringsKt___StringsKt: java.lang.String drop(java.lang.String,int)
io.sentry.android.core.SentryInitProvider: SentryInitProvider()
io.sentry.Sentry: void setExtra(java.lang.String,java.lang.String)
com.google.android.gms.maps.model.Polyline: void setClickable(boolean)
kotlinx.coroutines.internal.ExceptionsConstuctorKt$tryCopyException$$inlined$sortedByDescending$1: ExceptionsConstuctorKt$tryCopyException$$inlined$sortedByDescending$1()
androidx.core.content.ContextCompat: java.util.concurrent.Executor getMainExecutor(android.content.Context)
io.sentry.protocol.Device: void setScreenDpi(java.lang.Integer)
com.google.android.gms.dynamite.zze: zze()
io.sentry.Breadcrumb: void setData(java.lang.String,java.lang.Object)
io.sentry.SentryBaseEvent: void setTags(java.util.Map)
io.flutter.plugins.googlemaps.Convert: android.graphics.Point toPoint(java.lang.Object,float)
com.google.common.base.Equivalence$Identity: int doHash(java.lang.Object)
io.sentry.android.core.SystemEventsBreadcrumbsIntegration: void close()
androidx.lifecycle.CompositeGeneratedAdaptersObserver: CompositeGeneratedAdaptersObserver(androidx.lifecycle.GeneratedAdapter[])
com.google.gson.internal.LinkedTreeMap$KeySet: int size()
kotlinx.coroutines.ThreadLocalEventLoop: void setEventLoop$kotlinx_coroutines_core(kotlinx.coroutines.EventLoop)
androidx.lifecycle.ReportFragment: ReportFragment()
io.flutter.plugins.pathprovider.PathProviderPlugin: java.lang.String getPathProviderStorageDirectory()
io.sentry.protocol.Mechanism: void setType(java.lang.String)
androidx.fragment.app.FragmentFactory: java.lang.Class loadClass(java.lang.ClassLoader,java.lang.String)
com.google.gson.internal.$Gson$Types$WildcardTypeImpl: java.lang.reflect.Type[] getLowerBounds()
com.google.common.hash.BloomFilterStrategies$1: boolean put(java.lang.Object,com.google.common.hash.Funnel,int,com.google.common.hash.BloomFilterStrategies$LockFreeBitArray)
kotlin.text.StringsKt__StringsKt: boolean regionMatchesImpl(java.lang.CharSequence,int,java.lang.CharSequence,int,int,boolean)
androidx.fragment.app.FragmentTransitionImpl$3: void run()
io.sentry.ISentryClient: void close()
io.flutter.view.AccessibilityBridge$3: void onChange(boolean,android.net.Uri)
io.sentry.flutter.SentryFlutterPlugin: void initNativeSdk(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.plugin.common.StandardMessageCodec: void writeAlignment(java.io.ByteArrayOutputStream,int)
io.sentry.protocol.Device: void setLanguage(java.lang.String)
androidx.fragment.app.Fragment: androidx.fragment.app.FragmentManager getChildFragmentManager()
com.google.common.hash.BloomFilterStrategies$2: BloomFilterStrategies$2(java.lang.String,int)
com.google.gson.internal.bind.TypeAdapters$10: TypeAdapters$10()
io.sentry.UncaughtExceptionHandler$Adapter: void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)
com.google.android.gms.common.internal.Preconditions: void checkState(boolean,java.lang.Object)
com.google.common.collect.MapMaker: int getInitialCapacity()
io.sentry.android.core.TempSensorBreadcrumbsIntegration: void register(io.sentry.IHub,io.sentry.SentryOptions)
io.sentry.SamplingContext: SamplingContext(io.sentry.TransactionContext,io.sentry.CustomSamplingContext)
io.sentry.Breadcrumb: io.sentry.Breadcrumb http(java.lang.String,java.lang.String)
kotlinx.coroutines.CoroutineExceptionHandler$Key: CoroutineExceptionHandler$Key()
androidx.collection.MapCollections$MapIterator: boolean hasNext()
dev.fluttercommunity.plus.packageinfo.PackageInfoPlugin$Companion: PackageInfoPlugin$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
kotlin.SynchronizedLazyImpl: SynchronizedLazyImpl(kotlin.jvm.functions.Function0,java.lang.Object,int,kotlin.jvm.internal.DefaultConstructorMarker)
io.sentry.NoOpSpan: void finish(io.sentry.SpanStatus)
com.google.common.collect.MapMakerInternalMap$Segment: MapMakerInternalMap$Segment(com.google.common.collect.MapMakerInternalMap,int,int)
io.flutter.embedding.android.FlutterTextureView: void connectSurfaceToRenderer()
kotlinx.coroutines.JobSupport: java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2)
com.google.gson.stream.JsonReader: void endObject()
kotlin.text.StringsKt__StringsKt: java.util.List lines(java.lang.CharSequence)
com.google.gson.internal.$Gson$Types: java.lang.reflect.GenericArrayType arrayOf(java.lang.reflect.Type)
io.sentry.protocol.Device: java.lang.Long getStorageSize()
androidx.arch.core.executor.ArchTaskExecutor: void postToMainThread(java.lang.Runnable)
kotlinx.coroutines.CancellableContinuationImpl: boolean tryResume()
io.sentry.SentryOptions: void setSdkVersion(io.sentry.protocol.SdkVersion)
com.google.android.gms.maps.model.BitmapDescriptorFactory: com.google.android.gms.maps.model.BitmapDescriptor fromAsset(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: boolean nativeGetIsSoftwareRenderingEnabled()
androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State[] values()
io.flutter.plugin.common.StandardMethodCodec: java.nio.ByteBuffer encodeErrorEnvelopeWithStacktrace(java.lang.String,java.lang.String,java.lang.Object,java.lang.String)
io.flutter.plugins.googlemaps.TileOverlaysController: java.util.Map getTileOverlayInfo(java.lang.String)
io.flutter.plugins.googlemaps.PolygonController: void setZIndex(float)
androidx.fragment.app.FragmentTransitionImpl: FragmentTransitionImpl()
com.google.android.gms.internal.common.zza: android.os.Parcel zzB(int,android.os.Parcel)
io.sentry.config.SystemPropertyPropertiesProvider: SystemPropertyPropertiesProvider()
androidx.fragment.app.FragmentManagerImpl: void hideFragment(androidx.fragment.app.Fragment)
io.flutter.embedding.engine.systemchannels.RestorationChannel: byte[] access$002(io.flutter.embedding.engine.systemchannels.RestorationChannel,byte[])
androidx.core.util.DebugUtils: void buildShortClassTag(java.lang.Object,java.lang.StringBuilder)
com.google.android.gms.dynamite.zzn: zzn(com.google.android.gms.dynamite.zzm)
io.flutter.embedding.engine.systemchannels.DeferredComponentChannel$1: DeferredComponentChannel$1(io.flutter.embedding.engine.systemchannels.DeferredComponentChannel)
kotlinx.coroutines.CoroutineDispatcher: CoroutineDispatcher()
com.google.android.gms.dynamic.DeferredLifecycleHelper: java.util.LinkedList zab(com.google.android.gms.dynamic.DeferredLifecycleHelper)
androidx.window.layout.FoldingFeature$State: FoldingFeature$State(java.lang.String)
io.sentry.Session: java.util.UUID getSessionId()
com.google.android.gms.maps.model.Marker: void setPosition(com.google.android.gms.maps.model.LatLng)
com.google.android.gms.common.internal.safeparcel.SafeParcelReader: void readList(android.os.Parcel,int,java.util.List,java.lang.ClassLoader)
io.sentry.Hub: boolean isEnabled()
io.flutter.embedding.android.FlutterSplashView: boolean hasSplashCompleted()
com.google.android.gms.common.internal.zzk: java.lang.Object createFromParcel(android.os.Parcel)
com.google.gson.internal.bind.DateTypeAdapter: void write(com.google.gson.stream.JsonWriter,java.util.Date)
com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)
com.google.gson.stream.JsonReader: int peekKeyword()
io.sentry.android.core.DefaultAndroidEventProcessor: java.lang.String[] getProguardUUIDs()
androidx.window.embedding.ExtensionEmbeddingBackend: void registerSplitListenerForActivity(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
io.sentry.protocol.Browser: java.lang.String getName()
io.sentry.NoOpHub: io.sentry.protocol.SentryId captureException(java.lang.Throwable,java.lang.Object)
androidx.window.core.Version: androidx.window.core.Version access$getVERSION_1_0$cp()
io.flutter.plugin.editing.TextInputPlugin$1: void hide()
androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback: SidecarCompat$DistinctSidecarElementCallback(androidx.window.layout.SidecarAdapter,androidx.window.sidecar.SidecarInterface$SidecarCallback)
io.sentry.protocol.SentryTransaction: java.lang.String getType()
androidx.window.layout.WindowMetricsCalculator$Companion$overrideDecorator$1: java.lang.Object invoke(java.lang.Object)
kotlin.ranges.IntProgression: java.lang.String toString()
io.flutter.embedding.engine.dart.DartExecutor$DartEntrypoint: boolean equals(java.lang.Object)
com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper: com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment newSegment(com.google.common.collect.MapMakerInternalMap,int,int)
com.google.android.gms.common.internal.GmsClient: GmsClient(android.content.Context,android.os.Looper,int,com.google.android.gms.common.internal.ClientSettings,com.google.android.gms.common.api.internal.ConnectionCallbacks,com.google.android.gms.common.api.internal.OnConnectionFailedListener)
io.sentry.SentryOptions: void addEventProcessor(io.sentry.EventProcessor)
kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart[] $values()
kotlin.ranges.IntProgression$Companion: kotlin.ranges.IntProgression fromClosedRange(int,int,int)
io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics: FlutterRenderer$ViewportMetrics()
com.google.android.gms.common.internal.zzn: java.lang.String zzd()
com.google.common.collect.ImmutableSet: int hashCode()
kotlin.jvm.internal.TypeIntrinsics: boolean isFunctionOfArity(java.lang.Object,int)
com.google.android.gms.dynamic.IObjectWrapper$Stub: IObjectWrapper$Stub()
com.google.android.gms.internal.maps.zzab: boolean zzB(com.google.android.gms.internal.maps.zzad)
com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableList createAsList()
com.google.android.gms.common.api.Status: void writeToParcel(android.os.Parcel,int)
com.google.android.gms.common.util.PlatformVersion: boolean isAtLeastO()
com.google.android.gms.common.api.internal.GoogleApiManager: com.google.android.gms.common.api.internal.zaae zaj(com.google.android.gms.common.api.internal.GoogleApiManager)
androidx.activity.ComponentActivity: void onSaveInstanceState(android.os.Bundle)
kotlinx.coroutines.DebugKt: boolean getRECOVER_STACK_TRACES()
com.google.common.collect.MapMakerInternalMap$SafeToArraySet: java.lang.Object[] toArray(java.lang.Object[])
io.sentry.protocol.SentryStackFrame: java.lang.Integer getLineno()
kotlinx.coroutines.internal.SystemPropsKt__SystemProps_commonKt: int systemProp$default(java.lang.String,int,int,int,int,java.lang.Object)
io.sentry.DateUtils$1: java.text.SimpleDateFormat initialValue()
io.sentry.Attachment: java.lang.String getContentType()
io.flutter.plugin.localization.LocalizationPlugin$1: java.lang.String getStringResource(java.lang.String,java.lang.String)
androidx.window.layout.FoldingFeature: androidx.window.layout.FoldingFeature$OcclusionType getOcclusionType()
com.google.gson.internal.bind.JsonTreeWriter: com.google.gson.stream.JsonWriter endArray()
io.flutter.plugins.googlemaps.GoogleMapBuilder: void setTrackCameraPosition(boolean)
com.google.common.collect.Lists: java.util.ArrayList newArrayListWithCapacity(int)
com.google.gson.reflect.TypeToken: java.lang.reflect.Type getType()
com.google.common.hash.LittleEndianByteArray$LittleEndianBytes: long getLongLittleEndian(byte[],int)
com.google.gson.internal.bind.DateTypeAdapter: DateTypeAdapter()
io.sentry.transport.NoOpEnvelopeCache: void discard(io.sentry.SentryEnvelope)
androidx.collection.ArraySet$1: java.lang.Object colSetValue(int,java.lang.Object)
androidx.window.embedding.SplitPlaceholderRule: androidx.window.embedding.SplitPlaceholderRule plus$window_release(androidx.window.embedding.ActivityFilter)
com.google.gson.internal.bind.TreeTypeAdapter$GsonContextImpl: com.google.gson.JsonElement serialize(java.lang.Object)
io.flutter.plugin.common.StandardMessageCodec: void writeValue(java.io.ByteArrayOutputStream,java.lang.Object)
kotlinx.coroutines.JobSupport: java.lang.String access$cancellationExceptionMessage(kotlinx.coroutines.JobSupport)
io.flutter.embedding.engine.FlutterEngine: void attachToJni()
androidx.core.view.WindowInsetsControllerCompat$Impl: void setAppearanceLightStatusBars(boolean)
com.google.android.gms.common.api.internal.GoogleApiManager: com.google.android.gms.common.api.internal.GoogleApiManager zam(android.content.Context)
com.google.android.gms.common.internal.zac: java.lang.String zaf(android.content.Context,int)
com.google.android.gms.common.api.internal.zacd: com.google.android.gms.common.api.internal.zacd zaa(com.google.android.gms.common.api.internal.GoogleApiManager,int,com.google.android.gms.common.api.internal.ApiKey)
com.google.android.gms.maps.model.PolylineOptions: com.google.android.gms.maps.model.Cap getStartCap()
com.google.gson.Gson: java.lang.Object fromJson(com.google.gson.JsonElement,java.lang.Class)
androidx.lifecycle.LifecycleRegistry: void pushParentState(androidx.lifecycle.Lifecycle$State)
io.sentry.flutter.R$attr: R$attr()
com.google.common.collect.MapMakerInternalMap$Strength: MapMakerInternalMap$Strength(java.lang.String,int)
com.google.android.gms.common.GoogleApiAvailabilityLight: int isGooglePlayServicesAvailable(android.content.Context,int)
io.flutter.embedding.engine.FlutterEngine: java.util.Set access$000(io.flutter.embedding.engine.FlutterEngine)
io.sentry.ISentryClient: void flush(long)
io.flutter.view.AccessibilityBridge: void sendLatestAccessibilityFlagsToFlutter()
androidx.lifecycle.ProcessLifecycleOwner$2: void onCreate()
com.google.android.gms.signin.internal.zad: boolean zaa(int,android.os.Parcel,android.os.Parcel,int)
com.google.android.gms.dynamite.zzc: java.lang.Class loadClass(java.lang.String,boolean)
io.flutter.embedding.android.RenderMode: io.flutter.embedding.android.RenderMode[] values()
androidx.core.graphics.drawable.IconCompat: int getResId()
io.flutter.plugin.platform.PlatformViewsController$1: void createAndroidViewForPlatformView(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest)
com.google.gson.internal.bind.TypeAdapters$25: TypeAdapters$25()
com.google.android.gms.common.internal.safeparcel.SafeParcelReader: java.lang.Integer readIntegerObject(android.os.Parcel,int)
com.google.common.base.Preconditions: java.lang.String badPositionIndex(int,int,java.lang.String)
com.google.android.gms.common.internal.zzy: zzy()
com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl: java.lang.String toString()
io.flutter.embedding.engine.dart.DartMessenger$DefaultTaskQueueFactory: DartMessenger$DefaultTaskQueueFactory()
androidx.window.layout.SidecarWindowBackend$ExtensionListenerImpl: SidecarWindowBackend$ExtensionListenerImpl(androidx.window.layout.SidecarWindowBackend)
com.google.gson.stream.JsonToken: com.google.gson.stream.JsonToken[] values()
com.google.android.gms.common.internal.RootTelemetryConfiguration: boolean getMethodTimingTelemetryEnabled()
io.flutter.plugins.googlemaps.PolygonController: java.lang.String getGoogleMapsPolygonId()
io.flutter.view.AccessibilityViewEmbedder$ViewAndId: int hashCode()
kotlinx.coroutines.CancellableContinuationImpl: void callCancelHandler(kotlin.jvm.functions.Function1,java.lang.Throwable)
io.sentry.SentryClient: io.sentry.SentryBaseEvent applyScope(io.sentry.SentryBaseEvent,io.sentry.Scope)
com.google.android.gms.internal.maps.zzy: java.lang.String zzk()
io.sentry.transport.ReusableCountLatch$Sync: void increment()
androidx.activity.OnBackPressedCallback: void remove()
io.flutter.plugin.common.StandardMethodCodec: StandardMethodCodec(io.flutter.plugin.common.StandardMessageCodec)
androidx.lifecycle.ClassesInfoCache$MethodReference: ClassesInfoCache$MethodReference(int,java.lang.reflect.Method)
com.google.android.gms.common.api.internal.zact: void onConnectionSuspended(int)
kotlin.collections.EmptyList: void clear()
kotlinx.coroutines.scheduling.WorkQueue: kotlinx.coroutines.scheduling.Task add$default(kotlinx.coroutines.scheduling.WorkQueue,kotlinx.coroutines.scheduling.Task,boolean,int,java.lang.Object)
androidx.savedstate.SavedStateRegistry: void performSave(android.os.Bundle)
com.google.android.gms.common.internal.zzq: boolean handleMessage(android.os.Message)
com.google.android.gms.maps.Projection: com.google.android.gms.maps.model.VisibleRegion getVisibleRegion()
com.google.gson.internal.ConstructorConstructor$14: java.lang.Object construct()
io.sentry.HubAdapter: io.sentry.protocol.SentryId captureEvent(io.sentry.SentryEvent,java.lang.Object)
io.flutter.embedding.engine.dart.DartExecutor$DefaultBinaryMessenger: void setMessageHandler(java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler,io.flutter.plugin.common.BinaryMessenger$TaskQueue)
com.google.common.collect.MapMakerInternalMap$SafeToArraySet: java.lang.Object[] toArray()
io.sentry.android.core.DefaultAndroidEventProcessor: io.sentry.protocol.SentryTransaction process(io.sentry.protocol.SentryTransaction,java.lang.Object)
kotlin.text.DelimitedRangesSequence$iterator$1: void calcNext()
com.google.gson.internal.UnsafeAllocator: void assertInstantiable(java.lang.Class)
com.google.gson.internal.LinkedHashTreeMap$EntrySet: java.util.Iterator iterator()
com.google.android.gms.maps.model.zzi: java.lang.Object createFromParcel(android.os.Parcel)
androidx.lifecycle.Lifecycle$Event: Lifecycle$Event(java.lang.String,int)
com.google.gson.stream.JsonReader: boolean fillBuffer(int)
kotlinx.coroutines.JobNode: JobNode()
com.google.android.gms.internal.maps.zzh: com.google.android.gms.internal.maps.zzi zzb(android.os.IBinder)
io.sentry.MainEventProcessor: void processNonCachedEvent(io.sentry.SentryBaseEvent)
kotlinx.coroutines.JobSupport: void notifyCancelling(kotlinx.coroutines.NodeList,java.lang.Throwable)
io.sentry.util.Pair: java.lang.Object getSecond()
com.google.android.gms.maps.internal.zze: com.google.android.gms.internal.maps.zzi zzj()
androidx.collection.MapCollections$MapIterator: java.lang.Object getValue()
io.flutter.embedding.android.FlutterActivity: void switchLaunchThemeForNormalTheme()
androidx.fragment.app.FragmentController: void dispatchConfigurationChanged(android.content.res.Configuration)
io.flutter.plugins.googlemaps.CircleBuilder: void setStrokeColor(int)
io.flutter.plugins.googlemaps.GoogleMapController: void updateInitialCircles()
androidx.arch.core.internal.SafeIterableMap$Entry: java.lang.Object getValue()
androidx.window.embedding.EmbeddingBackend: java.util.Set getSplitRules()
com.google.common.hash.LittleEndianByteArray$UnsafeByteArray$2: LittleEndianByteArray$UnsafeByteArray$2(java.lang.String,int)
io.flutter.embedding.android.KeyboardManager$PerEventCallbackBuilder$Callback: KeyboardManager$PerEventCallbackBuilder$Callback(io.flutter.embedding.android.KeyboardManager$PerEventCallbackBuilder)
io.sentry.protocol.SdkInfo: void setVersionMinor(java.lang.Integer)
io.sentry.SentryOptions: boolean isEnableExternalConfiguration()
io.sentry.HubAdapter: void removeExtra(java.lang.String)
kotlinx.coroutines.channels.ArrayChannel: boolean isBufferAlwaysEmpty()
androidx.fragment.app.FragmentManagerImpl: void setBackStackIndex(int,androidx.fragment.app.BackStackRecord)
io.flutter.embedding.engine.FlutterJNI: void nativeNotifyLowMemoryWarning(long)
kotlinx.coroutines.scheduling.DefaultScheduler: DefaultScheduler()
kotlinx.coroutines.internal.InlineList: java.lang.Object constructor-impl(java.lang.Object)
io.flutter.embedding.android.FlutterSplashView$SavedState$1: FlutterSplashView$SavedState$1()
io.sentry.adapters.MapAdapter: com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,com.google.gson.JsonSerializationContext)
io.flutter.view.VsyncWaiter: long access$000(io.flutter.view.VsyncWaiter)
io.sentry.SynchronizedCollection: java.lang.Object[] toArray()
kotlin.coroutines.jvm.internal.ContinuationImpl: ContinuationImpl(kotlin.coroutines.Continuation)
com.google.android.gms.common.internal.zzc: void zzf()
io.flutter.embedding.engine.dart.DartMessenger: void setMessageHandler(java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler)
kotlinx.coroutines.internal.ThreadSafeHeap: int getSize()
io.flutter.embedding.engine.systemchannels.RestorationChannel: boolean access$200(io.flutter.embedding.engine.systemchannels.RestorationChannel)
io.sentry.HubAdapter: void setUser(io.sentry.protocol.User)
com.google.android.gms.common.api.internal.GoogleApiManager: void zaz(com.google.android.gms.common.ConnectionResult,int)
androidx.window.core.Bounds: int getRight()
io.flutter.view.AccessibilityBridge: void predictCursorMovement(io.flutter.view.AccessibilityBridge$SemanticsNode,int,boolean,boolean)
com.google.android.gms.common.stats.ConnectionTracker: ConnectionTracker()
io.sentry.Scope: void setContexts(java.lang.String,java.lang.Number)
com.google.common.util.concurrent.CycleDetectingLockFactory$Policies$1: void handlePotentialDeadlock(com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException)
com.google.android.gms.maps.internal.zzca: android.content.Context zzc(android.content.Context,com.google.android.gms.maps.MapsInitializer$Renderer)
com.google.android.gms.maps.model.CircleOptions: com.google.android.gms.maps.model.CircleOptions strokeWidth(float)
io.flutter.plugins.googlemaps.GoogleMapsPlugin: void onReattachedToActivityForConfigChanges(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding)
com.google.android.gms.internal.maps.zzc: void zzc(android.os.Parcel,boolean)
com.google.gson.internal.bind.TypeAdapters$11: java.lang.Object read(com.google.gson.stream.JsonReader)
io.sentry.protocol.SentryThread: void setDaemon(java.lang.Boolean)
com.google.android.gms.common.internal.zaw: java.lang.Object[] newArray(int)
io.flutter.plugin.platform.PlatformPlugin: void access$300(io.flutter.plugin.platform.PlatformPlugin,java.util.List)
com.google.android.gms.maps.model.MarkerOptions: void writeToParcel(android.os.Parcel,int)
io.sentry.android.ndk.NativeModuleListLoader: io.sentry.protocol.DebugImage[] nativeLoadModuleList()
io.sentry.protocol.Device: void setManufacturer(java.lang.String)
io.sentry.NoOpSerializer: void serialize(java.lang.Object,java.io.Writer)
com.google.android.gms.maps.model.zzh: java.lang.Object createFromParcel(android.os.Parcel)
kotlinx.coroutines.JobSupport$addLastAtomic$$inlined$addLastIf$1: java.lang.Object prepare(java.lang.Object)
kotlin.collections.MapsKt__MapsKt: java.util.Map emptyMap()
io.sentry.util.LogUtils: void logIfNotRetryable(io.sentry.ILogger,java.lang.Object)
kotlin.jvm.internal.CallableReference: kotlin.reflect.KCallable getReflected()
com.google.common.collect.MapMakerInternalMap$EntrySet: java.util.Iterator iterator()
com.google.android.gms.maps.internal.zzbz: void zzb(android.os.Bundle,android.os.Bundle)
com.google.android.gms.common.internal.TelemetryData: TelemetryData(int,java.util.List)
io.flutter.view.AccessibilityBridge$SemanticsNode: void updateRecursively(float[],java.util.Set,boolean)
com.google.gson.internal.bind.TypeAdapters$16: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter: java.lang.Object read(com.google.gson.stream.JsonReader)
kotlin.coroutines.CoroutineContext$Element$DefaultImpls: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Element,kotlin.coroutines.CoroutineContext$Key)
com.google.common.base.Equivalence: int hash(java.lang.Object)
io.flutter.plugin.platform.PlatformViewsController: boolean usesVirtualDisplay(java.lang.Integer)
kotlinx.coroutines.CancellableContinuationImpl: java.lang.Void alreadyResumedError(java.lang.Object)
com.google.android.gms.maps.model.zza: zza()
com.google.common.hash.ChecksumHashFunction$ChecksumHasher: ChecksumHashFunction$ChecksumHasher(com.google.common.hash.ChecksumHashFunction,java.util.zip.Checksum,com.google.common.hash.ChecksumHashFunction$1)
androidx.fragment.app.FragmentActivity: void onLowMemory()
io.sentry.SendCachedEnvelopeFireAndForgetIntegration$SendFireAndForgetDirPath: java.lang.String getDirPath()
kotlin.jvm.internal.FunctionReference: kotlin.reflect.KCallable computeReflected()
androidx.tracing.Trace: void endSection()
androidx.versionedparcelable.ParcelImpl$1: java.lang.Object createFromParcel(android.os.Parcel)
io.sentry.SentryBaseEvent: void setDist(java.lang.String)
com.google.android.gms.maps.model.Cap: boolean equals(java.lang.Object)
io.sentry.protocol.SentrySpan: java.lang.String getDescription()
kotlinx.coroutines.JobSupport: boolean addLastAtomic(java.lang.Object,kotlinx.coroutines.NodeList,kotlinx.coroutines.JobNode)
io.sentry.SentryClient: boolean sample()
androidx.activity.ComponentActivity: androidx.lifecycle.ViewModelStore getViewModelStore()
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: FlutterEngineConnectionRegistry(android.content.Context,io.flutter.embedding.engine.FlutterEngine,io.flutter.embedding.engine.loader.FlutterLoader)
kotlinx.coroutines.internal.ThreadContextKt$updateState$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)
kotlin.text.StringsKt__StringsKt: int indexOf(java.lang.CharSequence,java.lang.String,int,boolean)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView: android.graphics.Matrix getPlatformViewMatrix()
io.flutter.plugins.googlemaps.GoogleMapController: void setInitialMarkers(java.lang.Object)
io.flutter.view.AccessibilityBridge$1: void onTap(int)
io.sentry.NoOpLogger: NoOpLogger()
io.sentry.HubAdapter: io.sentry.protocol.SentryId captureMessage(java.lang.String,io.sentry.SentryLevel)
com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper: com.google.common.collect.MapMakerInternalMap$InternalEntry copy(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry)
com.google.gson.internal.bind.JsonTreeWriter: com.google.gson.JsonElement peek()
io.sentry.android.core.AndroidOptionsInitializer: void init(io.sentry.android.core.SentryAndroidOptions,android.content.Context,io.sentry.ILogger,io.sentry.android.core.IBuildInfoProvider)
io.flutter.plugin.editing.TextInputPlugin: void setTextInputEditingState(android.view.View,io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState)
com.google.common.reflect.TypeToken$TypeFilter$2: boolean apply(com.google.common.reflect.TypeToken)
kotlin.coroutines.AbstractCoroutineContextElement: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key)
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.RestorationChannel getRestorationChannel()
com.google.gson.internal.Streams$AppendableWriter$CurrentWrite: int length()
io.flutter.view.AccessibilityBridge$1: void updateSemantics(java.nio.ByteBuffer,java.lang.String[],java.nio.ByteBuffer[])
io.sentry.UncaughtExceptionHandlerIntegration$UncaughtExceptionHint: void markFlushed()
com.google.android.gms.maps.internal.zzg: float getMinZoomLevel()
com.google.android.gms.common.internal.service.zan: com.google.android.gms.common.api.Api$Client buildClient(android.content.Context,android.os.Looper,com.google.android.gms.common.internal.ClientSettings,java.lang.Object,com.google.android.gms.common.api.internal.ConnectionCallbacks,com.google.android.gms.common.api.internal.OnConnectionFailedListener)
com.google.android.gms.maps.model.zzu: zzu(com.google.android.gms.maps.model.TileOverlayOptions,com.google.android.gms.maps.model.TileProvider)
com.google.gson.JsonPrimitive: JsonPrimitive(java.lang.Number)
androidx.core.app.RemoteActionCompatParcelizer: androidx.core.app.RemoteActionCompat read(androidx.versionedparcelable.VersionedParcel)
io.sentry.NoOpSpan: java.lang.String getOperation()
kotlinx.coroutines.channels.Closed: java.lang.Throwable getSendException()
io.flutter.plugins.sharedpreferences.MethodCallHandlerImpl: void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
androidx.fragment.app.FragmentManagerImpl: void dispatchDestroy()
kotlinx.coroutines.internal.ExceptionsConstuctorKt: int fieldsCount$default(java.lang.Class,int,int,java.lang.Object)
dev.fluttercommunity.plus.packageinfo.PackageInfoPlugin: void onAttachedToEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
io.sentry.protocol.Message: void acceptUnknownProperties(java.util.Map)
androidx.versionedparcelable.VersionedParcelParcel: void setOutputField(int)
com.google.gson.internal.LazilyParsedNumber: long longValue()
com.google.common.util.concurrent.AbstractFuture$Waiter: void unpark()
com.google.android.gms.common.internal.BaseGmsClient: android.os.Bundle getConnectionHint()
com.google.android.gms.maps.internal.zzby: boolean isTiltGesturesEnabled()
com.google.gson.internal.bind.TimeTypeAdapter: java.lang.Object read(com.google.gson.stream.JsonReader)
androidx.collection.SparseArrayCompat: int size()
com.tekartik.sqflite.SqflitePlugin$6: SqflitePlugin$6(com.tekartik.sqflite.SqflitePlugin,boolean,java.lang.String,com.tekartik.sqflite.SqflitePlugin$BgResult,java.lang.Boolean,com.tekartik.sqflite.Database,io.flutter.plugin.common.MethodCall,boolean,int)
io.flutter.plugin.platform.PlatformPlugin: boolean access$1100(io.flutter.plugin.platform.PlatformPlugin)
com.google.android.gms.maps.model.Dot: java.lang.String toString()
com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper: com.google.common.collect.MapMakerInternalMap$InternalEntry copy(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry)
com.google.android.gms.common.api.internal.zzd: void onDestroy()
io.sentry.ITransaction: java.lang.String getName()
com.google.gson.JsonPrimitive: boolean isNumber()
com.google.android.gms.common.ConnectionResult: boolean equals(java.lang.Object)
com.google.gson.JsonSyntaxException: JsonSyntaxException(java.lang.String)
io.flutter.plugins.googlemaps.GoogleMapBuilder: void setCameraTargetBounds(com.google.android.gms.maps.model.LatLngBounds)
com.google.android.gms.common.internal.BaseGmsClient: void zzp(int,android.os.IInterface)
io.sentry.Span: java.util.Date getTimestamp()
io.sentry.transport.NoOpTransportGate: boolean isConnected()
io.sentry.config.AbstractPropertiesProvider: java.util.Map getMap(java.lang.String)
com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.Object)
io.sentry.NoOpHub: void pushScope()
io.flutter.embedding.engine.systemchannels.TextInputChannel: java.util.HashMap createEditingDeltaJSON(java.util.ArrayList)
com.google.common.collect.ImmutableCollection: boolean retainAll(java.util.Collection)
com.google.android.gms.maps.model.Marker: void remove()
kotlin.coroutines.jvm.internal.SuspendLambda: SuspendLambda(int,kotlin.coroutines.Continuation)
io.sentry.SentryThreadFactory: java.util.List getCurrentThreads(java.util.List)
io.sentry.SynchronizedCollection: boolean isEmpty()
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: androidx.window.layout.WindowLayoutInfo getLastInfo()
com.google.android.gms.common.internal.zzu: java.lang.String zzc()
kotlinx.coroutines.flow.internal.NoOpContinuation: kotlin.coroutines.CoroutineContext getContext()
com.google.gson.internal.bind.ObjectTypeAdapter$1: ObjectTypeAdapter$1()
com.google.android.gms.dynamite.zzr: zzr(android.os.IBinder)
androidx.lifecycle.ViewModelProvider$KeyedFactory: androidx.lifecycle.ViewModel create(java.lang.Class)
io.sentry.util.Objects: Objects()
com.google.android.gms.maps.model.zzg: zzg()
io.sentry.android.core.util.MainThreadChecker: boolean isMainThread(io.sentry.protocol.SentryThread)
io.sentry.SentryOptions: io.sentry.protocol.SdkVersion getSdkVersion()
io.sentry.util.StringUtils: StringUtils()
io.flutter.plugin.editing.TextInputPlugin: void access$700(io.flutter.plugin.editing.TextInputPlugin,double,double,double[])
com.google.android.gms.common.api.internal.zap: void onSaveInstanceState(android.os.Bundle)
com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper: TypeAdapterRuntimeTypeWrapper(com.google.gson.Gson,com.google.gson.TypeAdapter,java.lang.reflect.Type)
com.google.android.gms.common.api.internal.ListenerHolder$ListenerKey: int hashCode()
io.sentry.protocol.App: void setAppStartTime(java.util.Date)
androidx.window.embedding.ActivityRule: ActivityRule(java.util.Set,boolean)
com.google.gson.internal.bind.TypeAdapters$12: java.lang.Object read(com.google.gson.stream.JsonReader)
io.sentry.SentryOptions: boolean isDebug()
com.google.gson.reflect.TypeToken: boolean typeEquals(java.lang.reflect.ParameterizedType,java.lang.reflect.ParameterizedType,java.util.Map)
io.sentry.protocol.Contexts: void setApp(io.sentry.protocol.App)
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$2: SentryFlutterPlugin$initNativeSdk$2$2(io.sentry.android.core.SentryAndroidOptions)
kotlinx.coroutines.scheduling.Task: Task(long,kotlinx.coroutines.scheduling.TaskContext)
com.google.android.gms.common.api.internal.zad: zad(int,com.google.android.gms.tasks.TaskCompletionSource)
io.flutter.plugin.editing.InputConnectionAdaptor: boolean beginBatchEdit()
com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)
io.sentry.protocol.User: java.lang.String getIpAddress()
io.sentry.protocol.Gpu: void setMultiThreadedRendering(java.lang.Boolean)
io.sentry.protocol.SentryTransaction: java.util.Date getStartTimestamp()
io.flutter.embedding.engine.systemchannels.PlatformChannel: java.util.List decodeSystemUiOverlays(org.json.JSONArray)
kotlinx.coroutines.channels.AbstractSendChannel: AbstractSendChannel(kotlin.jvm.functions.Function1)
androidx.fragment.app.FragmentTransitionCompat21$2: void onTransitionCancel(android.transition.Transition)
com.google.android.gms.auth.api.signin.internal.Storage: com.google.android.gms.auth.api.signin.internal.Storage getInstance(android.content.Context)
io.sentry.SynchronizedCollection: boolean remove(java.lang.Object)
com.google.gson.internal.bind.TypeAdapters$4: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper: void putThread(com.google.common.util.concurrent.AbstractFuture$Waiter,java.lang.Thread)
androidx.fragment.app.Fragment: void onAttach(android.content.Context)
io.flutter.view.AccessibilityBridge: io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler access$600(io.flutter.view.AccessibilityBridge)
com.google.common.collect.MapMakerInternalMap$HashIterator: boolean advanceTo(com.google.common.collect.MapMakerInternalMap$InternalEntry)
com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment: com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment self()
io.flutter.embedding.engine.FlutterJNI: void attachToNative()
io.flutter.plugin.editing.TextInputPlugin$1: void requestAutofill()
kotlinx.coroutines.internal.MissingMainCoroutineDispatcher: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)
io.sentry.Hub: io.sentry.ITransaction startTransaction(io.sentry.TransactionContext,io.sentry.CustomSamplingContext,boolean)
com.google.gson.internal.Excluder$1: Excluder$1(com.google.gson.internal.Excluder,boolean,boolean,com.google.gson.Gson,com.google.gson.reflect.TypeToken)
io.flutter.plugin.platform.SingleViewPresentation$PresentationContext: java.lang.Object getSystemService(java.lang.String)
androidx.window.layout.ActivityCompatHelperApi24: boolean isInMultiWindowMode(android.app.Activity)
io.flutter.embedding.engine.FlutterJNI: void onDisplayOverlaySurface(int,int,int,int,int)
io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry: io.flutter.plugin.common.PluginRegistry$Registrar registrarFor(java.lang.String)
com.google.android.gms.auth.api.signin.GoogleSignInAccount: GoogleSignInAccount(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.net.Uri,java.lang.String,long,java.lang.String,java.util.List,java.lang.String,java.lang.String)
androidx.core.os.LocaleListCompatWrapper: java.lang.Object getLocaleList()
com.google.common.hash.BloomFilterStrategies$2: long upperEight(byte[])
androidx.collection.ArrayMap$1: int colIndexOfValue(java.lang.Object)
androidx.fragment.app.FragmentManagerImpl: void makeRemovedFragmentsInvisible(androidx.collection.ArraySet)
androidx.fragment.app.FragmentManagerImpl: void dispatchPictureInPictureModeChanged(boolean)
kotlinx.coroutines.channels.AbstractChannel: boolean enqueueReceiveInternal(kotlinx.coroutines.channels.Receive)
io.flutter.plugins.urllauncher.WebViewActivity$2: WebViewActivity$2(io.flutter.plugins.urllauncher.WebViewActivity)
com.google.android.gms.dynamite.zzo: zzo(int,int)
com.google.gson.internal.Streams$AppendableWriter: void write(char[],int,int)
com.google.gson.stream.JsonWriter: void flush()
io.flutter.embedding.engine.systemchannels.TextInputChannel: void newline(int)
io.flutter.plugins.googlemaps.PolygonBuilder: PolygonBuilder(float)
androidx.fragment.app.Fragment: java.lang.Object getSharedElementReturnTransition()
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType fromValue(java.lang.String)
io.sentry.SentryEnvelopeItemHeader: SentryEnvelopeItemHeader(io.sentry.SentryItemType,int,java.lang.String,java.lang.String,java.lang.String)
io.sentry.android.core.SentryAndroidOptions: void setEnableAutoActivityLifecycleTracing(boolean)
com.google.gson.JsonStreamParser: void remove()
androidx.lifecycle.LiveData: java.lang.Object getValue()
io.flutter.plugins.urllauncher.WebViewActivity$FlutterWebChromeClient$1: boolean shouldOverrideUrlLoading(android.webkit.WebView,android.webkit.WebResourceRequest)
io.flutter.plugins.googlemaps.CircleController: void setVisible(boolean)
io.sentry.SentryOptions: void setEnvelopeDiskCache(io.sentry.cache.IEnvelopeCache)
androidx.lifecycle.LiveData: void onActive()
androidx.core.os.LocaleListCompat: boolean equals(java.lang.Object)
io.sentry.SentryOptions: void setSerializer(io.sentry.ISerializer)
io.sentry.protocol.SentryStackTrace: java.util.Map getRegisters()
io.sentry.protocol.Gpu: java.lang.Integer getId()
com.google.common.collect.MapMakerInternalMap$Segment: java.lang.Object remove(java.lang.Object,int)
com.google.android.gms.common.api.internal.zabq: com.google.android.gms.common.api.Api$Client zaf()
io.flutter.embedding.android.FlutterActivity: void configureWindowForTransparency()
kotlin.jvm.internal.Intrinsics: void throwUninitializedPropertyAccessException(java.lang.String)
com.google.gson.Gson$1: java.lang.Double read(com.google.gson.stream.JsonReader)
kotlinx.coroutines.channels.AbstractChannel: kotlinx.coroutines.channels.ChannelIterator iterator()
androidx.fragment.app.Fragment: boolean getAllowEnterTransitionOverlap()
io.sentry.android.core.SentryAndroidOptions: void enableAllAutoBreadcrumbs(boolean)
io.sentry.IHub: void pushScope()
io.flutter.embedding.engine.FlutterJNI: void nativeRegisterTexture(long,long,java.lang.ref.WeakReference)
com.google.gson.internal.bind.TypeAdapters$30: TypeAdapters$30()
androidx.core.app.NotificationCompat$Action: android.os.Bundle getExtras()
androidx.loader.app.LoaderManagerImpl: java.lang.String toString()
com.google.android.gms.common.util.ArrayUtils: boolean contains(int[],int)
io.sentry.SentryEnvelope: io.sentry.SentryEnvelope from(io.sentry.ISerializer,io.sentry.SentryBaseEvent,io.sentry.protocol.SdkVersion)
com.google.common.base.Equivalence: boolean equivalent(java.lang.Object,java.lang.Object)
com.google.gson.JsonSerializationContext: com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type)
io.sentry.ISerializer: void serialize(java.lang.Object,java.io.Writer)
io.sentry.SpanContext: io.sentry.SpanStatus getStatus()
kotlinx.coroutines.CancellableContinuationImpl: void resume(java.lang.Object,kotlin.jvm.functions.Function1)
androidx.lifecycle.LiveData$LifecycleBoundObserver: void detachObserver()
io.flutter.embedding.engine.renderer.FlutterRenderer: void access$400(io.flutter.embedding.engine.renderer.FlutterRenderer,long)
io.sentry.android.core.util.RootChecker: boolean isDeviceRooted()
com.google.gson.internal.LinkedTreeMap$Node: com.google.gson.internal.LinkedTreeMap$Node first()
kotlinx.coroutines.CoroutineId: boolean equals(java.lang.Object)
kotlinx.coroutines.internal.ScopeCoroutine: void afterCompletion(java.lang.Object)
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: java.lang.Long yoinkParentIdFromParcel(android.view.accessibility.AccessibilityNodeInfo)
com.google.android.gms.common.api.internal.zabq: int zab()
com.google.android.gms.common.api.internal.zzd: com.google.android.gms.common.api.internal.zzd zzc(androidx.fragment.app.FragmentActivity)
io.flutter.plugins.googlemaps.GoogleMapController: boolean onMarkerClick(com.google.android.gms.maps.model.Marker)
io.sentry.Stack: void push(io.sentry.Stack$StackItem)
androidx.fragment.app.FragmentTransitionCompat21: void setEpicenter(java.lang.Object,android.view.View)
io.sentry.transport.HttpConnection: java.lang.String getErrorMessageFromStream(java.net.HttpURLConnection)
com.google.android.gms.common.api.Status: int getStatusCode()
androidx.core.app.ComponentActivity: void onCreate(android.os.Bundle)
com.google.common.base.Ascii: boolean isUpperCase(char)
io.flutter.plugins.googlemaps.Convert: java.lang.String toString(java.lang.Object)
io.sentry.transport.ReusableCountLatch: ReusableCountLatch()
com.google.android.gms.tasks.zzr: zzr()
io.flutter.plugin.platform.SingleViewPresentation: void onCreate(android.os.Bundle)
io.sentry.ISpan: void setDescription(java.lang.String)
io.flutter.util.PathUtils: java.lang.String getDataDirectory(android.content.Context)
io.flutter.embedding.engine.systemchannels.PlatformChannel: int decodeOrientations(org.json.JSONArray)
kotlinx.coroutines.scheduling.TaskImpl: java.lang.String toString()
io.sentry.NoOpTransaction: io.sentry.SpanContext getSpanContext()
kotlin.collections.EmptyMap: boolean equals(java.lang.Object)
io.sentry.adapters.SpanIdDeserializerAdapter: io.sentry.SpanId deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext)
kotlin.collections.IntIterator: IntIterator()
com.google.android.gms.maps.zzaf: zzaf(com.google.android.gms.maps.zzag,com.google.android.gms.maps.OnMapReadyCallback)
io.flutter.embedding.engine.FlutterJNI: void nativeUnregisterTexture(long,long)
androidx.window.embedding.EmbeddingInterfaceCompat: void setEmbeddingCallback(androidx.window.embedding.EmbeddingInterfaceCompat$EmbeddingCallbackInterface)
io.sentry.SentryBaseEvent: java.lang.String getDist()
io.flutter.embedding.android.FlutterSplashView: FlutterSplashView(android.content.Context,android.util.AttributeSet,int)
kotlin.coroutines.ContinuationInterceptor$Key: ContinuationInterceptor$Key()
androidx.fragment.app.Fragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)
io.sentry.util.CollectionUtils: int size(java.lang.Iterable)
com.google.gson.internal.bind.TypeAdapters$2: TypeAdapters$2()
io.sentry.protocol.Message: java.util.List getParams()
com.google.android.gms.common.internal.GmsClientSupervisor: android.os.HandlerThread getOrStartHandlerThread()
com.google.android.gms.internal.maps.zzab: int zzh()
io.sentry.protocol.Device: java.lang.Float getBatteryTemperature()
io.sentry.protocol.SentryThread: java.lang.Boolean isCrashed()
androidx.arch.core.internal.SafeIterableMap$AscendingIterator: androidx.arch.core.internal.SafeIterableMap$Entry forward(androidx.arch.core.internal.SafeIterableMap$Entry)
androidx.lifecycle.ClassesInfoCache$MethodReference: void invokeCallback(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event,java.lang.Object)
com.google.gson.internal.$Gson$Types$GenericArrayTypeImpl: $Gson$Types$GenericArrayTypeImpl(java.lang.reflect.Type)
androidx.activity.ImmLeaksCleaner: ImmLeaksCleaner(android.app.Activity)
io.flutter.embedding.android.FlutterSurfaceView$1: void surfaceCreated(android.view.SurfaceHolder)
androidx.window.embedding.EmbeddingBackend: void unregisterSplitListenerForActivity(androidx.core.util.Consumer)
androidx.window.core.Version: int compareTo(androidx.window.core.Version)
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.LifecycleChannel getLifecycleChannel()
io.flutter.embedding.engine.dart.DartMessenger: void send(java.lang.String,java.nio.ByteBuffer)
kotlin.jvm.internal.FunctionReference: boolean isExternal()
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken,com.google.gson.TypeAdapter)
com.google.common.collect.ImmutableSet: ImmutableSet()
androidx.collection.ArraySet$1: int colGetSize()
androidx.fragment.app.FragmentManagerImpl: void dispatchOnFragmentDestroyed(androidx.fragment.app.Fragment,boolean)
com.google.common.collect.MapMakerInternalMap$Values: MapMakerInternalMap$Values(com.google.common.collect.MapMakerInternalMap)
kotlinx.coroutines.android.HandlerContext: int hashCode()
androidx.core.graphics.drawable.IconCompatParcelizer: androidx.core.graphics.drawable.IconCompat read(androidx.versionedparcelable.VersionedParcel)
kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart[] values()
com.google.gson.internal.Excluder: com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken)
io.flutter.embedding.engine.FlutterJNI: void registerTexture(long,io.flutter.embedding.engine.renderer.SurfaceTextureWrapper)
com.google.android.gms.common.internal.safeparcel.SafeParcelReader: int validateObjectHeader(android.os.Parcel)
com.google.android.gms.auth.api.signin.GoogleSignInAccount: android.accounts.Account getAccount()
com.google.gson.stream.JsonReader: boolean isLenient()
com.google.android.gms.common.api.internal.zzb: android.app.Activity getLifecycleActivity()
androidx.collection.SimpleArrayMap: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)
kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.Task createTask(java.lang.Runnable,kotlinx.coroutines.scheduling.TaskContext)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView: void unsetOnDescendantFocusChangeListener()
androidx.window.layout.SidecarCompat: void unregisterComponentCallback(android.app.Activity)
io.sentry.util.Pair: Pair(java.lang.Object,java.lang.Object)
kotlin.reflect.KVisibility: kotlin.reflect.KVisibility[] $values()
androidx.collection.SimpleArrayMap: SimpleArrayMap()
io.flutter.view.AccessibilityBridge: void onWindowNameChange(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.view.AccessibilityBridge$SemanticsNode: java.util.List access$3600(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.sentry.android.ndk.NativeScope: void addBreadcrumb(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
com.google.gson.FieldAttributes: java.lang.reflect.Type getDeclaredType()
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding: void addOnNewIntentListener(io.flutter.plugin.common.PluginRegistry$NewIntentListener)
com.google.gson.internal.$Gson$Types: java.lang.reflect.Type getCollectionElementType(java.lang.reflect.Type,java.lang.Class)
io.sentry.SentryEvent: io.sentry.SentryLevel getLevel()
androidx.window.embedding.SplitRule: int hashCode()
com.google.gson.internal.bind.TypeAdapters$14: TypeAdapters$14()
kotlinx.coroutines.channels.ChannelResult: java.lang.Object constructor-impl(java.lang.Object)
androidx.fragment.app.Fragment: void onLowMemory()
androidx.fragment.app.FragmentTransition: void setOutEpicenter(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,java.lang.Object,androidx.collection.ArrayMap,boolean,androidx.fragment.app.BackStackRecord)
io.flutter.plugin.platform.PlatformPlugin$1: boolean clipboardHasStrings()
io.sentry.android.core.DefaultAndroidEventProcessor: void setPackageInfo(io.sentry.SentryBaseEvent,io.sentry.protocol.App)
io.sentry.android.core.AndroidLogger: int toLogcatLevel(io.sentry.SentryLevel)
kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt$createCoroutineUnintercepted$$inlined$createCoroutineFromSuspendFunction$IntrinsicsKt__IntrinsicsJvmKt$2: IntrinsicsKt__IntrinsicsJvmKt$createCoroutineUnintercepted$$inlined$createCoroutineFromSuspendFunction$IntrinsicsKt__IntrinsicsJvmKt$2(kotlin.coroutines.Continuation,kotlin.coroutines.CoroutineContext,kotlin.jvm.functions.Function1)
androidx.core.view.ViewCompat: int getImportantForAccessibility(android.view.View)
androidx.fragment.app.FragmentViewLifecycleOwner: FragmentViewLifecycleOwner()
com.google.android.gms.maps.GoogleMap: float getMinZoomLevel()
com.google.android.gms.common.GoogleApiAvailability: boolean isUserResolvableError(int)
io.flutter.embedding.engine.FlutterJNI: void cleanupMessageData(long)
com.google.common.collect.MapMakerInternalMap: boolean containsKey(java.lang.Object)
io.sentry.adapters.ContextsDeserializerAdapter: io.sentry.protocol.Contexts deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext)
com.google.android.gms.common.api.internal.zao: void run()
kotlinx.coroutines.internal.ArrayQueue: ArrayQueue()
com.google.android.gms.common.api.Scope: Scope(java.lang.String)
com.google.gson.Gson: void toJson(java.lang.Object,java.lang.Appendable)
androidx.fragment.app.Fragment$AnimationInfo: Fragment$AnimationInfo()
io.sentry.protocol.Request: java.util.Map getOthers()
io.flutter.embedding.android.FlutterActivity: io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode getBackgroundMode()
kotlin.collections.EmptySet: java.util.Iterator iterator()
kotlinx.coroutines.channels.AbstractChannel: boolean enqueueReceive(kotlinx.coroutines.channels.Receive)
com.google.android.gms.common.internal.Preconditions: void checkArgument(boolean,java.lang.String,java.lang.Object[])
androidx.fragment.app.Fragment: java.lang.Object getEnterTransition()
com.google.android.gms.maps.model.VisibleRegion: int hashCode()
kotlin.text.StringsKt__StringsKt: kotlin.sequences.Sequence lineSequence(java.lang.CharSequence)
androidx.arch.core.internal.SafeIterableMap: int size()
io.sentry.adapters.ContextsSerializerAdapter: ContextsSerializerAdapter(io.sentry.SentryOptions)
androidx.fragment.app.FragmentManagerImpl$5: FragmentManagerImpl$5(androidx.fragment.app.FragmentManagerImpl,android.view.ViewGroup,android.view.View,androidx.fragment.app.Fragment)
androidx.core.app.NotificationCompat$Action: boolean isContextual()
io.sentry.android.core.ManifestMetadataReader: boolean readBool(android.os.Bundle,io.sentry.ILogger,java.lang.String,boolean)
io.sentry.SentryOptions: void setEnvelopeReader(io.sentry.IEnvelopeReader)
com.google.android.gms.common.api.Scope: java.lang.String toString()
com.google.android.gms.tasks.zzw: void zzi()
io.sentry.transport.AsyncHttpTransport$EnvelopeSender: io.sentry.SentryEnvelope access$500(io.sentry.transport.AsyncHttpTransport$EnvelopeSender)
com.google.common.collect.MapMakerInternalMap$HashIterator: com.google.common.collect.MapMakerInternalMap$WriteThroughEntry nextEntry()
kotlinx.coroutines.EventLoopImplBase$DelayedTask: void setIndex(int)
io.flutter.embedding.engine.FlutterJNI: void nativeSurfaceWindowChanged(long,android.view.Surface)
io.sentry.android.core.SystemEventsBreadcrumbsIntegration: SystemEventsBreadcrumbsIntegration(android.content.Context)
com.google.android.gms.maps.model.Tile: Tile(int,int,byte[])
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1: ReflectiveTypeAdapterFactory$1(com.google.gson.internal.bind.ReflectiveTypeAdapterFactory,java.lang.String,boolean,boolean,java.lang.reflect.Field,boolean,com.google.gson.TypeAdapter,com.google.gson.Gson,com.google.gson.reflect.TypeToken,boolean)
com.google.gson.internal.bind.TypeAdapters$32: TypeAdapters$32(java.lang.Class,com.google.gson.TypeAdapter)
com.google.android.gms.common.internal.service.zam: zam(com.google.android.gms.common.internal.TelemetryData)
androidx.arch.core.internal.SafeIterableMap: java.lang.String toString()
com.google.gson.Gson$3: java.lang.Object read(com.google.gson.stream.JsonReader)
com.google.gson.FieldAttributes: java.lang.String getName()
kotlin.coroutines.CoroutineContext$Element$DefaultImpls: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext$Element,kotlin.coroutines.CoroutineContext)
io.sentry.SentryOptions$Proxy: java.lang.String getUser()
com.google.android.gms.common.internal.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)
io.flutter.view.AccessibilityBridge$1: AccessibilityBridge$1(io.flutter.view.AccessibilityBridge)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType valueOf(java.lang.String)
kotlin.collections.EmptySet: boolean contains(java.lang.Void)
androidx.window.layout.WindowMetricsCalculatorDecorator: androidx.window.layout.WindowMetricsCalculator decorate(androidx.window.layout.WindowMetricsCalculator)
com.google.common.util.concurrent.AbstractFuture: boolean setException(java.lang.Throwable)
io.flutter.plugins.googlemaps.PolygonController: void remove()
androidx.fragment.app.BackStackRecord: boolean isPostponed()
io.sentry.protocol.OperatingSystem: void setRawDescription(java.lang.String)
kotlinx.coroutines.internal.ThreadContextKt: java.lang.Object threadContextElements(kotlin.coroutines.CoroutineContext)
androidx.savedstate.SavedStateRegistry: android.os.Bundle consumeRestoredStateForKey(java.lang.String)
androidx.window.layout.ActivityCompatHelperApi24: ActivityCompatHelperApi24()
com.google.android.gms.internal.maps.zzab: void zzw(com.google.android.gms.maps.model.Cap)
io.flutter.plugins.googlemaps.GoogleMapController: void setRotateGesturesEnabled(boolean)
io.sentry.ILogger: boolean isEnabled(io.sentry.SentryLevel)
com.google.android.gms.maps.model.CameraPosition$Builder: com.google.android.gms.maps.model.CameraPosition$Builder bearing(float)
com.google.android.gms.maps.model.Cap: java.lang.String toString()
io.sentry.SentryOptions: void setCacheDirPath(java.lang.String)
kotlin.random.FallbackThreadLocalRandom$implStorage$1: FallbackThreadLocalRandom$implStorage$1()
com.google.gson.internal.bind.JsonTreeReader: int nextInt()
io.sentry.ISentryClient: io.sentry.protocol.SentryId captureException(java.lang.Throwable,io.sentry.Scope)
kotlin.jvm.internal.ClassReference: boolean equals(java.lang.Object)
com.google.gson.reflect.TypeToken: java.lang.AssertionError buildUnexpectedTypeError(java.lang.reflect.Type,java.lang.Class[])
com.google.android.gms.common.api.internal.zah: com.google.android.gms.common.Feature[] zab(com.google.android.gms.common.api.internal.zabq)
kotlinx.coroutines.JobNode: java.lang.String toString()
io.sentry.protocol.SentryPackage: SentryPackage()
kotlinx.coroutines.Dispatchers: kotlinx.coroutines.CoroutineDispatcher getIO()
androidx.fragment.app.FragmentActivity: void onAttachFragment(androidx.fragment.app.Fragment)
io.flutter.plugin.editing.ListenableEditingState: void setSpan(java.lang.Object,int,int,int)
kotlin.collections.EmptyList: boolean addAll(int,java.util.Collection)
io.flutter.embedding.android.FlutterActivity: android.graphics.drawable.Drawable getSplashScreenFromManifest()
androidx.window.embedding.SplitRule$Api30Impl: SplitRule$Api30Impl()
com.google.common.base.Preconditions: void checkState(boolean,java.lang.String,int)
io.flutter.plugin.common.BasicMessageChannel: void send(java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
kotlinx.coroutines.flow.internal.SafeCollectorKt$emitFun$1: java.lang.Object invoke(java.lang.Object,java.lang.Object,java.lang.Object)
io.flutter.plugins.googlemaps.TileOverlayBuilder: void setFadeIn(boolean)
androidx.core.app.NotificationCompat$Builder: androidx.core.app.NotificationCompat$Builder setWhen(long)
io.flutter.plugins.googlemaps.GoogleMapController: void updateInitialPolylines()
io.sentry.HubAdapter: void setLevel(io.sentry.SentryLevel)
io.flutter.embedding.engine.FlutterJNI: void nativeInvokePlatformMessageResponseCallback(long,int,java.nio.ByteBuffer,int)
kotlinx.coroutines.CoroutineStart: void isLazy$annotations()
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry: void release()
io.sentry.SynchronizedCollection: SynchronizedCollection(java.util.Collection)
androidx.core.app.NotificationCompatBuilder: java.util.List combineLists(java.util.List,java.util.List)
io.flutter.embedding.engine.FlutterJNI: void nativeOnVsync(long,long,long)
io.sentry.SentryValues: java.util.List getValues()
com.google.android.gms.common.internal.zzb: boolean zzb(android.os.Message)
io.flutter.plugins.googlemaps.MarkersController: boolean onMarkerTap(java.lang.String)
androidx.window.layout.WindowLayoutInfo: boolean equals(java.lang.Object)
com.google.android.gms.maps.internal.zza: java.lang.Boolean zzb(byte)
androidx.fragment.app.FragmentActivity: void onRequestPermissionsResult(int,java.lang.String[],int[])
com.google.android.gms.maps.model.MarkerOptions: com.google.android.gms.maps.model.MarkerOptions infoWindowAnchor(float,float)
io.flutter.embedding.android.FlutterView: boolean hasRenderedFirstFrame()
io.sentry.flutter.R$id: R$id()
kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object resumedState(kotlinx.coroutines.NotCompleted,java.lang.Object,int,kotlin.jvm.functions.Function1,java.lang.Object)
com.google.common.base.Throwables: void throwIfUnchecked(java.lang.Throwable)
com.google.android.gms.internal.maps.zzaf: com.google.android.gms.internal.maps.zzag zzb(android.os.IBinder)
kotlin.collections.CollectionsKt___CollectionsKt: java.lang.String joinToString(java.lang.Iterable,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,kotlin.jvm.functions.Function1)
com.google.android.gms.maps.internal.zzg: void setTrafficEnabled(boolean)
kotlinx.coroutines.channels.ChannelResult$Closed: java.lang.String toString()
io.sentry.IHub: void setExtra(java.lang.String,java.lang.String)
io.sentry.SentryBaseEvent: java.lang.Throwable getThrowable()
com.google.gson.DefaultDateTypeAdapter: DefaultDateTypeAdapter(java.lang.Class,int)
com.google.common.collect.MapMakerInternalMap$Segment: com.google.common.collect.MapMakerInternalMap$InternalEntry getFirst(int)
io.sentry.protocol.DebugMeta: java.util.List getImages()
com.google.android.gms.maps.model.MarkerOptions: com.google.android.gms.maps.model.MarkerOptions alpha(float)
io.flutter.embedding.engine.systemchannels.KeyEventChannel: io.flutter.plugin.common.BasicMessageChannel$Reply createReplyHandler(io.flutter.embedding.engine.systemchannels.KeyEventChannel$EventResponseHandler)
androidx.window.embedding.ActivityStack: java.lang.String toString()
com.google.gson.LongSerializationPolicy: LongSerializationPolicy(java.lang.String,int,com.google.gson.LongSerializationPolicy$1)
kotlinx.coroutines.scheduling.LimitingDispatcher: void afterTask()
kotlin.ExceptionsKt__ExceptionsKt: void addSuppressed(java.lang.Throwable,java.lang.Throwable)
com.google.android.gms.common.api.internal.zacv: void doExecute(com.google.android.gms.common.api.Api$AnyClient,com.google.android.gms.tasks.TaskCompletionSource)
io.sentry.SentryClient$SortBreadcrumbsByDate: int compare(io.sentry.Breadcrumb,io.sentry.Breadcrumb)
io.flutter.embedding.engine.loader.FlutterLoader: io.flutter.embedding.engine.loader.ResourceExtractor access$000(io.flutter.embedding.engine.loader.FlutterLoader,android.content.Context)
com.google.android.gms.maps.GoogleMap: com.google.android.gms.maps.UiSettings getUiSettings()
com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl: java.lang.reflect.Type[] getActualTypeArguments()
androidx.window.layout.HardwareFoldingFeature$Type: androidx.window.layout.HardwareFoldingFeature$Type access$getFOLD$cp()
com.google.gson.LongSerializationPolicy$1: com.google.gson.JsonElement serialize(java.lang.Long)
io.flutter.plugin.platform.PlatformPlugin$2: void onSystemUiVisibilityChange(int)
kotlin.internal.jdk8.JDK8PlatformImplementations: kotlin.random.Random defaultPlatformRandom()
com.google.common.collect.MapMakerInternalMap$WriteThroughEntry: java.lang.Object getValue()
androidx.fragment.app.FragmentContainer: androidx.fragment.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle)
io.sentry.NoOpLogger: void log(io.sentry.SentryLevel,java.lang.String,java.lang.Throwable)
androidx.fragment.app.FragmentState$1: java.lang.Object[] newArray(int)
com.google.gson.FieldNamingPolicy: com.google.gson.FieldNamingPolicy[] values()
androidx.window.layout.FoldingFeature$State$Companion: FoldingFeature$State$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
io.sentry.DiagnosticLogger: void log(io.sentry.SentryLevel,java.lang.String,java.lang.Throwable)
io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness: SettingsChannel$PlatformBrightness(java.lang.String,int,java.lang.String)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: void onPostResume()
com.google.gson.internal.PreJava9DateFormatProvider: PreJava9DateFormatProvider()
com.google.android.gms.maps.model.ButtCap: java.lang.String toString()
io.flutter.plugin.editing.TextInputPlugin$1: void clearClient()
io.sentry.SpanContext: java.util.Map getTags()
io.sentry.UserFeedback: void setName(java.lang.String)
androidx.core.view.ViewGroupCompat: boolean isTransitionGroup(android.view.ViewGroup)
io.sentry.protocol.SdkInfo: void setSdkName(java.lang.String)
io.flutter.plugins.googlemaps.GoogleMapBuilder: void setZoomGesturesEnabled(boolean)
androidx.fragment.app.FragmentController: void dispatchCreate()
androidx.fragment.app.Fragment: void onResume()
io.sentry.android.core.LifecycleWatcher: void onCreate(androidx.lifecycle.LifecycleOwner)
io.sentry.protocol.Device: java.lang.String getConnectionType()
io.flutter.plugins.googlemaps.GoogleMapController: void destroyMapViewIfNecessary()
androidx.loader.app.LoaderManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])
io.sentry.SentryTracer: void setName(java.lang.String)
com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of(java.lang.Object)
io.sentry.SentryEnvelopeItemHeader: io.sentry.SentryItemType getType()
io.sentry.transport.ReusableCountLatch$Sync: int tryAcquireShared(int)
kotlin.coroutines.EmptyCoroutineContext: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)
io.flutter.plugins.googlemaps.TileOverlaysController: void removeTileOverlay(java.lang.String)
com.google.common.base.Joiner: com.google.common.base.Joiner useForNull(java.lang.String)
com.google.gson.internal.bind.JsonTreeWriter: com.google.gson.stream.JsonWriter name(java.lang.String)
io.flutter.embedding.android.FlutterSurfaceView$2: FlutterSurfaceView$2(io.flutter.embedding.android.FlutterSurfaceView)
androidx.versionedparcelable.VersionedParcel: VersionedParcel(androidx.collection.ArrayMap,androidx.collection.ArrayMap,androidx.collection.ArrayMap)
com.google.android.gms.auth.api.signin.GoogleSignInAccount: java.lang.String getDisplayName()
kotlin.text.StringsKt__IndentKt$getIndentFunction$2: StringsKt__IndentKt$getIndentFunction$2(java.lang.String)
com.google.android.gms.common.stats.ConnectionTracker: com.google.android.gms.common.stats.ConnectionTracker getInstance()
kotlin.random.AbstractPlatformRandom: int nextInt()
com.google.android.gms.maps.internal.zzg: void setOnInfoWindowClickListener(com.google.android.gms.maps.internal.zzad)
com.google.common.util.concurrent.ThreadFactoryBuilder: java.util.concurrent.ThreadFactory build()
io.flutter.plugins.googlemaps.TileProviderController: android.os.Handler access$000(io.flutter.plugins.googlemaps.TileProviderController)
io.flutter.embedding.android.FlutterSplashView$2: FlutterSplashView$2(io.flutter.embedding.android.FlutterSplashView)
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void tryTerminateWorker()
io.flutter.plugin.editing.InputConnectionAdaptor: boolean setComposingText(java.lang.CharSequence,int)
com.google.android.gms.common.ConnectionResult: java.lang.String getErrorMessage()
androidx.fragment.app.FragmentHostCallback: void onAttachFragment(androidx.fragment.app.Fragment)
androidx.fragment.app.FragmentManagerImpl$3: FragmentManagerImpl$3(androidx.fragment.app.FragmentManagerImpl,android.view.ViewGroup,androidx.fragment.app.Fragment)
androidx.collection.ArrayMap$1: java.util.Map colGetMap()
com.google.gson.reflect.TypeToken: boolean isAssignableFrom(java.lang.reflect.Type,java.lang.reflect.GenericArrayType)
io.flutter.plugins.googlemaps.PolygonController: void setGeodesic(boolean)
io.flutter.plugins.googlemaps.MarkersController: void onMarkerDragStart(java.lang.String,com.google.android.gms.maps.model.LatLng)
com.google.android.gms.common.internal.safeparcel.SafeParcelWriter: void writeBoolean(android.os.Parcel,int,boolean)
kotlinx.coroutines.JobSupport: kotlinx.coroutines.DisposableHandle invokeOnCompletion(boolean,boolean,kotlin.jvm.functions.Function1)
io.flutter.embedding.android.FlutterSplashView$1: void onFlutterEngineDetachedFromFlutterView()
io.flutter.plugins.googlemaps.GoogleMapController: void setInitialPolylines(java.lang.Object)
io.sentry.HubAdapter: void pushScope()
com.google.gson.internal.$Gson$Types: java.lang.Class declaringClassOf(java.lang.reflect.TypeVariable)
io.sentry.adapters.SentryLevelSerializerAdapter: com.google.gson.JsonElement serialize(io.sentry.SentryLevel,java.lang.reflect.Type,com.google.gson.JsonSerializationContext)
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$3: void invoke(java.lang.String)
kotlinx.coroutines.internal.AtomicOp: java.lang.Object perform(java.lang.Object)
com.google.android.gms.common.internal.RootTelemetryConfigManager: RootTelemetryConfigManager()
io.sentry.Breadcrumb: Breadcrumb(java.util.Date)
com.google.android.gms.maps.GoogleMapOptions: GoogleMapOptions()
io.sentry.cache.CacheStrategy: io.sentry.SentryEnvelope buildNewEnvelope(io.sentry.SentryEnvelope,io.sentry.SentryEnvelopeItem)
io.sentry.protocol.SentryRuntime: void acceptUnknownProperties(java.util.Map)
com.google.common.collect.ImmutableSet: boolean shouldTrim(int,int)
com.google.android.gms.common.util.DeviceProperties: boolean zza(android.content.Context)
io.sentry.SynchronizedCollection: boolean addAll(java.util.Collection)
io.sentry.SentryExceptionFactory: java.util.List getSentryExceptions(java.util.Deque)
androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.Lifecycle$State min(androidx.lifecycle.Lifecycle$State,androidx.lifecycle.Lifecycle$State)
io.flutter.plugins.googlemaps.PolylineController: void setStartCap(com.google.android.gms.maps.model.Cap)
io.flutter.plugin.platform.PlatformViewsController$1: void ensureValidAndroidVersion(int)
androidx.fragment.app.FragmentController: boolean dispatchCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction: java.lang.String access$2900(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction)
androidx.fragment.app.BackStackState$1: java.lang.Object[] newArray(int)
io.flutter.plugins.googlemaps.PolylineController: void setZIndex(float)
com.google.android.gms.dynamite.zzg: zzg()
io.flutter.embedding.engine.FlutterJNI: void dispatchSemanticsAction(int,int,java.nio.ByteBuffer,int)
io.sentry.android.ndk.INativeScope: void setUser(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: java.util.List getMutators()
com.google.android.gms.common.GoogleApiAvailabilityLight: GoogleApiAvailabilityLight()
kotlin.Pair: Pair(java.lang.Object,java.lang.Object)
androidx.fragment.app.FragmentManagerImpl: void detachFragment(androidx.fragment.app.Fragment)
androidx.lifecycle.LiveData$LifecycleBoundObserver: LiveData$LifecycleBoundObserver(androidx.lifecycle.LiveData,androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Observer)
androidx.lifecycle.EmptyActivityLifecycleCallbacks: EmptyActivityLifecycleCallbacks()
io.flutter.plugins.googlemaps.PolylineController: void setConsumeTapEvents(boolean)
androidx.window.layout.SidecarWindowBackend: void getWindowLayoutChangeCallbacks$annotations()
com.google.android.gms.common.api.internal.zaae: void zad(android.app.Activity,com.google.android.gms.common.api.internal.GoogleApiManager,com.google.android.gms.common.api.internal.ApiKey)
io.sentry.SentryBaseEvent: java.lang.String getTag(java.lang.String)
kotlinx.coroutines.CompletedContinuation: CompletedContinuation(java.lang.Object,kotlinx.coroutines.CancelHandler,kotlin.jvm.functions.Function1,java.lang.Object,java.lang.Throwable,int,kotlin.jvm.internal.DefaultConstructorMarker)
io.sentry.NoOpHub: void configureScope(io.sentry.ScopeCallback)
com.google.android.gms.dynamic.DeferredLifecycleHelper: void onCreate(android.os.Bundle)
io.flutter.plugin.platform.PlatformViewsController: android.view.MotionEvent$PointerProperties parsePointerProperties(java.lang.Object)
androidx.core.view.ViewCompat$AccessibilityViewProperty: java.lang.Object get(android.view.View)
com.google.android.gms.common.internal.zag: void onClick(android.content.DialogInterface,int)
com.google.android.gms.signin.zab: zab()
com.google.android.gms.maps.model.PolygonOptions: int getStrokeJointType()
com.google.gson.JsonElement: boolean getAsBoolean()
kotlinx.coroutines.JobSupport: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)
com.google.android.gms.maps.zzv: void zzb()
com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter: java.lang.String keyToString(com.google.gson.JsonElement)
androidx.versionedparcelable.VersionedParcelParcel: void writeCharSequence(java.lang.CharSequence)
com.google.android.gms.common.internal.zat: zat(android.accounts.Account,int,com.google.android.gms.auth.api.signin.GoogleSignInAccount)
androidx.fragment.app.FragmentActivity: void onResume()
com.google.android.gms.common.api.Status: java.lang.String toString()
io.sentry.protocol.DebugImage: java.lang.String getDebugFile()
io.sentry.SpanContext: java.lang.Boolean getSampled()
io.flutter.plugins.googlemaps.PolylineController: void setVisible(boolean)
io.sentry.NoOpTransaction: io.sentry.SpanStatus getStatus()
io.flutter.plugins.googlemaps.PolygonsController: PolygonsController(io.flutter.plugin.common.MethodChannel,float)
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: void accept(androidx.window.extensions.layout.WindowLayoutInfo)
com.google.gson.JsonPrimitive: JsonPrimitive(java.lang.Boolean)
com.google.common.collect.Maps$EntryFunction: Maps$EntryFunction(java.lang.String,int,com.google.common.collect.Maps$1)
io.flutter.plugins.urllauncher.WebViewActivity$1: void onReceive(android.content.Context,android.content.Intent)
com.google.android.gms.maps.model.CircleOptions: com.google.android.gms.maps.model.CircleOptions fillColor(int)
com.google.gson.internal.bind.TypeAdapters$10: java.util.concurrent.atomic.AtomicIntegerArray read(com.google.gson.stream.JsonReader)
kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object tryResume(java.lang.Object,java.lang.Object)
com.google.android.gms.common.api.GoogleApi$Settings$Builder: GoogleApi$Settings$Builder()
com.google.android.gms.internal.maps.zzg: com.google.android.gms.dynamic.IObjectWrapper zzd()
kotlin.collections.EmptySet: int getSize()
com.google.android.gms.common.api.internal.zabq: boolean zaN(boolean)
com.google.common.collect.MapMakerInternalMap$HashIterator: boolean nextInChain()
androidx.core.app.RemoteInput: android.app.RemoteInput[] fromCompat(androidx.core.app.RemoteInput[])
io.flutter.plugins.googlemaps.TileOverlayBuilder: void setTileProvider(com.google.android.gms.maps.model.TileProvider)
io.sentry.SentryOptions: java.lang.String getEnvironment()
com.google.android.gms.common.api.internal.zabq: void zaw()
com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment: com.google.common.collect.MapMakerInternalMap$Segment self()
io.flutter.plugins.googlemaps.GoogleMapBuilder: void setBuildingsEnabled(boolean)
kotlinx.coroutines.CoroutineStart: void invoke(kotlin.jvm.functions.Function1,kotlin.coroutines.Continuation)
com.google.android.gms.maps.internal.zzao: zzao()
com.google.common.reflect.Types$JavaVersion: Types$JavaVersion(java.lang.String,int,com.google.common.reflect.Types$1)
io.sentry.MainEventProcessor: io.sentry.protocol.SentryTransaction process(io.sentry.protocol.SentryTransaction,java.lang.Object)
com.google.common.base.Predicates$ObjectPredicate$4: Predicates$ObjectPredicate$4(java.lang.String,int)
kotlin.jvm.KotlinReflectionNotSupportedError: KotlinReflectionNotSupportedError()
io.sentry.NoOpHub: void flush(long)
com.google.android.gms.common.api.internal.TaskApiCall$Builder: com.google.android.gms.common.api.internal.TaskApiCall build()
io.sentry.SentryTracer: java.lang.Throwable getThrowable()
com.google.common.collect.MapMakerInternalMap$Values: java.util.Iterator iterator()
io.sentry.android.ndk.NativeScope: NativeScope()
io.sentry.ShutdownHookIntegration: java.lang.Thread getHook()
io.sentry.SentryTracer: java.util.List getSpans()
io.sentry.SentryLevel: SentryLevel(java.lang.String,int)
com.google.android.gms.maps.model.PolygonOptions: boolean isGeodesic()
kotlin.text.DelimitedRangesSequence: kotlin.jvm.functions.Function2 access$getGetNextMatch$p(kotlin.text.DelimitedRangesSequence)
io.sentry.SentryTracer: void setDescription(java.lang.String)
io.sentry.transport.AsyncHttpTransport$EnvelopeSender: io.sentry.transport.TransportResult flush()
io.flutter.view.AccessibilityViewEmbedder$ViewAndId: AccessibilityViewEmbedder$ViewAndId(android.view.View,int)
com.google.common.collect.ImmutableCollection$ArrayBasedBuilder: void getReadyToExpandTo(int)
kotlinx.coroutines.JobNode: kotlinx.coroutines.NodeList getList()
androidx.window.embedding.EmbeddingInterfaceCompat$EmbeddingCallbackInterface: void onSplitInfoChanged(java.util.List)
kotlin.collections.EmptyIterator: java.lang.Void previous()
kotlin.jvm.internal.FunctionReference: kotlin.reflect.KFunction getReflected()
io.sentry.protocol.SentryStackFrame: void setFunction(java.lang.String)
com.google.gson.FieldNamingPolicy: java.lang.String separateCamelCase(java.lang.String,java.lang.String)
io.sentry.SentryOptions: void setSslSocketFactory(javax.net.ssl.SSLSocketFactory)
com.google.common.base.Predicates$ObjectPredicate: com.google.common.base.Predicates$ObjectPredicate valueOf(java.lang.String)
kotlinx.coroutines.BlockingEventLoop: java.lang.Thread getThread()
androidx.lifecycle.ReportFragment: void onStop()
io.sentry.Sentry: void addBreadcrumb(io.sentry.Breadcrumb)
kotlinx.coroutines.JobSupport: boolean isActive()
io.flutter.plugins.googlemaps.GoogleMapBuilder: void setMyLocationEnabled(boolean)
androidx.collection.SimpleArrayMap: java.lang.Object put(java.lang.Object,java.lang.Object)
kotlin.internal.ProgressionUtilKt: int mod(int,int)
kotlinx.coroutines.JobSupport: java.lang.Object getState$kotlinx_coroutines_core()
io.flutter.embedding.android.FlutterView: void onDetachedFromWindow()
io.flutter.plugins.connectivity.ConnectivityPlugin: void setupChannels(io.flutter.plugin.common.BinaryMessenger,android.content.Context)
com.google.common.hash.HashCode: boolean equals(java.lang.Object)
kotlinx.coroutines.android.AndroidDispatcherFactory: AndroidDispatcherFactory()
io.sentry.transport.ProxyAuthenticator: java.lang.String getPassword()
io.sentry.SentryOptions: boolean isTracingEnabled()
io.flutter.view.AccessibilityBridge: boolean externalViewRequestSendAccessibilityEvent(android.view.View,android.view.View,android.view.accessibility.AccessibilityEvent)
kotlin.ranges.IntRange: java.lang.String toString()
kotlinx.coroutines.CancellableContinuationImpl: CancellableContinuationImpl(kotlin.coroutines.Continuation,int)
io.flutter.embedding.android.DrawableSplashScreen$DrawableSplashScreenView: void setSplashDrawable(android.graphics.drawable.Drawable)
io.flutter.embedding.android.FlutterImageView: void pause()
com.google.android.gms.maps.model.PolygonOptions: com.google.android.gms.maps.model.PolygonOptions strokeColor(int)
io.flutter.embedding.engine.systemchannels.NavigationChannel: void pushRoute(java.lang.String)
io.sentry.android.core.DefaultAndroidEventProcessor: void setDist(io.sentry.SentryBaseEvent,java.lang.String)
io.flutter.plugins.googlemaps.PolygonController: void setFillColor(int)
androidx.lifecycle.EmptyActivityLifecycleCallbacks: void onActivityStarted(android.app.Activity)
com.google.gson.internal.LinkedHashTreeMap$KeySet: boolean remove(java.lang.Object)
io.flutter.plugins.googlemaps.TileOverlayBuilder: TileOverlayBuilder()
io.sentry.ISentryClient: io.sentry.protocol.SentryId captureEvent(io.sentry.SentryEvent,io.sentry.Scope)
androidx.core.view.LayoutInflaterCompat: void setFactory2(android.view.LayoutInflater,android.view.LayoutInflater$Factory2)
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry$1: FlutterRenderer$SurfaceTextureRegistryEntry$1(io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry)
io.flutter.plugin.common.JSONMethodCodec: io.flutter.plugin.common.MethodCall decodeMethodCall(java.nio.ByteBuffer)
com.google.gson.internal.LinkedTreeMap$LinkedTreeMapIterator: boolean hasNext()
kotlin.collections.EmptyMap: java.util.Set entrySet()
androidx.fragment.app.FragmentManagerImpl: void attachController(androidx.fragment.app.FragmentHostCallback,androidx.fragment.app.FragmentContainer,androidx.fragment.app.Fragment)
androidx.fragment.app.DialogFragment: void onDetach()
androidx.arch.core.executor.DefaultTaskExecutor: boolean isMainThread()
com.google.android.gms.common.internal.zac: java.lang.String zae(android.content.Context,int)
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void afterTask(int)
androidx.collection.ArraySet: java.lang.Object removeAt(int)
kotlinx.coroutines.scheduling.CoroutineScheduler: void signalCpuWork()
io.sentry.Scope: Scope(io.sentry.SentryOptions)
io.sentry.Sentry: io.sentry.protocol.SentryId captureEvent(io.sentry.SentryEvent,java.lang.Object)
androidx.core.app.NotificationCompat$Builder: androidx.core.app.NotificationCompat$Builder setContentTitle(java.lang.CharSequence)
com.google.android.gms.signin.zac: int hashCode()
com.google.android.gms.maps.internal.zzg: void setOnPolygonClickListener(com.google.android.gms.maps.internal.zzbf)
kotlin.coroutines.CoroutineContext$plus$1: kotlin.coroutines.CoroutineContext invoke(kotlin.coroutines.CoroutineContext,kotlin.coroutines.CoroutineContext$Element)
kotlinx.coroutines.EventLoopImplBase: void enqueue(java.lang.Runnable)
com.google.common.util.concurrent.AbstractFuture$SynchronizedHelper: boolean casWaiters(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Waiter,com.google.common.util.concurrent.AbstractFuture$Waiter)
io.flutter.embedding.android.FlutterActivity: android.app.Activity getActivity()
io.sentry.protocol.Contexts: io.sentry.protocol.Gpu getGpu()
io.flutter.embedding.android.FlutterTextureView: void changeSurfaceSize(int,int)
com.google.android.gms.tasks.zzu: zzu()
io.sentry.protocol.Gpu: java.lang.Integer getMemorySize()
com.google.android.gms.maps.internal.zzg: com.google.android.gms.internal.maps.zzag addTileOverlay(com.google.android.gms.maps.model.TileOverlayOptions)
com.google.android.gms.common.internal.BaseGmsClient: boolean hasConnectionInfo()
io.sentry.protocol.App: void setDeviceAppHash(java.lang.String)
androidx.fragment.app.Fragment: void restoreViewState(android.os.Bundle)
com.google.common.hash.HashCode$IntHashCode: byte[] asBytes()
io.flutter.embedding.engine.FlutterJNI: void onSurfaceCreated(android.view.Surface)
androidx.window.core.Version: boolean equals(java.lang.Object)
kotlinx.coroutines.NonDisposableHandle: boolean childCancelled(java.lang.Throwable)
io.sentry.android.core.util.MainThreadChecker: MainThreadChecker()
io.flutter.plugin.platform.PlatformViewsController$1: PlatformViewsController$1(io.flutter.plugin.platform.PlatformViewsController)
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: void onDetachedFromActivityForConfigChanges()
com.google.common.collect.MapMakerInternalMap$Segment: void expand()
kotlinx.coroutines.DebugKt: boolean getDEBUG()
io.flutter.plugins.urllauncher.UrlLauncherPlugin: void onDetachedFromActivityForConfigChanges()
androidx.fragment.app.FragmentTransitionImpl: boolean isNullOrEmpty(java.util.List)
com.google.common.util.concurrent.AbstractFuture: void access$600(com.google.common.util.concurrent.AbstractFuture)
io.sentry.Session: void end()
com.tekartik.sqflite.SqflitePlugin$BgResult: void success(java.lang.Object)
kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object takeState$kotlinx_coroutines_core()
io.flutter.plugins.googlemaps.GoogleMapController: void moveCamera(com.google.android.gms.maps.CameraUpdate)
com.google.common.collect.Platform: java.lang.Object[] copy(java.lang.Object[],int,int,java.lang.Object[])
io.sentry.protocol.Message: java.lang.String getFormatted()
io.sentry.HubAdapter: void setExtra(java.lang.String,java.lang.String)
kotlinx.coroutines.internal.MainDispatchersKt: kotlinx.coroutines.internal.MissingMainCoroutineDispatcher createMissingDispatcher$default(java.lang.Throwable,java.lang.String,int,java.lang.Object)
androidx.lifecycle.DefaultLifecycleObserver: void onCreate(androidx.lifecycle.LifecycleOwner)
io.sentry.android.core.EnvelopeFileObserver: EnvelopeFileObserver(java.lang.String,io.sentry.IEnvelopeSender,io.sentry.ILogger,long)
io.flutter.plugins.googlemaps.PolylineController: java.lang.String getGoogleMapsPolylineId()
io.sentry.android.core.util.ConnectivityChecker$Status: io.sentry.android.core.util.ConnectivityChecker$Status valueOf(java.lang.String)
io.flutter.plugin.platform.PlatformViewsController: void attachAccessibilityBridge(io.flutter.view.AccessibilityBridge)
androidx.fragment.app.FragmentTransitionCompat21$1: FragmentTransitionCompat21$1(androidx.fragment.app.FragmentTransitionCompat21,android.graphics.Rect)
androidx.window.embedding.SplitRule: SplitRule(int,int,float,int,int,kotlin.jvm.internal.DefaultConstructorMarker)
com.google.android.gms.common.api.internal.GoogleApiManager: boolean handleMessage(android.os.Message)
io.sentry.protocol.Request: java.lang.String getQueryString()
com.google.android.gms.common.internal.safeparcel.SafeParcelWriter: void writeFloatObject(android.os.Parcel,int,java.lang.Float,boolean)
com.google.gson.internal.Primitives: void add(java.util.Map,java.util.Map,java.lang.Class,java.lang.Class)
com.tekartik.sqflite.SqflitePlugin: void access$900(com.tekartik.sqflite.SqflitePlugin,com.tekartik.sqflite.Database)
com.google.gson.internal.$Gson$Types: java.lang.reflect.WildcardType supertypeOf(java.lang.reflect.Type)
kotlin.collections.ArraysKt___ArraysJvmKt: void sortWith(java.lang.Object[],java.util.Comparator)
com.google.android.gms.common.api.GoogleApiActivity: void zab()
io.flutter.plugins.sharedpreferences.MethodCallHandlerImpl: java.util.Map getAllPrefs()
io.flutter.embedding.engine.systemchannels.TextInputChannel: void updateEditingStateWithTag(int,java.util.HashMap)
io.flutter.plugins.googlemaps.PolylinesController: void removePolylines(java.util.List)
io.flutter.embedding.engine.loader.FlutterLoader: java.lang.String fullAssetPathFrom(java.lang.String)
io.flutter.plugins.googlemaps.Convert: com.google.android.gms.maps.model.Tile interpretTile(java.util.Map)
com.google.android.gms.maps.model.Polyline: void remove()
io.sentry.protocol.Contexts: Contexts(io.sentry.protocol.Contexts)
com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper: boolean casValue(com.google.common.util.concurrent.AbstractFuture,java.lang.Object,java.lang.Object)
com.google.android.gms.maps.model.BitmapDescriptorFactory: com.google.android.gms.internal.maps.zzi zzb()
io.sentry.android.core.SentryAndroidOptions: void setEnableAppComponentBreadcrumbs(boolean)
io.flutter.plugins.googlemaps.GoogleMapController: void onResume(androidx.lifecycle.LifecycleOwner)
io.flutter.view.AccessibilityBridge$1: void updateCustomAccessibilityActions(java.nio.ByteBuffer,java.lang.String[])
com.google.android.gms.common.api.Status: Status(int)
com.google.gson.internal.LinkedHashTreeMap$AvlIterator: com.google.gson.internal.LinkedHashTreeMap$Node next()
io.flutter.plugin.platform.PlatformPlugin: java.lang.CharSequence access$900(io.flutter.plugin.platform.PlatformPlugin,io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat)
com.google.gson.Gson: com.google.gson.FieldNamingStrategy fieldNamingStrategy()
com.google.common.hash.LittleEndianByteArray$UnsafeByteArray$2: long getLongLittleEndian(byte[],int)
kotlinx.coroutines.internal.SystemPropsKt__SystemProps_commonKt: long systemProp(java.lang.String,long,long,long)
io.flutter.plugin.common.StandardMessageCodec: void writeBytes(java.io.ByteArrayOutputStream,byte[])
io.sentry.exception.ExceptionMechanismException: ExceptionMechanismException(io.sentry.protocol.Mechanism,java.lang.Throwable,java.lang.Thread,boolean)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization: TextInputChannel$TextCapitalization(java.lang.String,int,java.lang.String)
com.google.android.gms.common.api.internal.zap: void zaf(com.google.android.gms.common.api.internal.zap,com.google.android.gms.common.ConnectionResult,int)
com.google.gson.internal.bind.MapTypeAdapterFactory: com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken)
io.flutter.plugins.connectivity.Connectivity: java.lang.String getWifiBSSID()
io.flutter.plugin.editing.ListenableEditingState: void setComposingRange(int,int)
io.sentry.Scope: void setContexts(java.lang.String,java.lang.Object)
com.google.android.gms.common.api.internal.NonGmsServiceBrokerClient: void connect(com.google.android.gms.common.internal.BaseGmsClient$ConnectionProgressReportCallbacks)
io.flutter.embedding.engine.systemchannels.SystemChannel: SystemChannel(io.flutter.embedding.engine.dart.DartExecutor)
io.sentry.CircularFifoQueue: java.lang.Object poll()
androidx.fragment.app.FragmentTransitionCompat21$2: void onTransitionPause(android.transition.Transition)
io.sentry.SentryItemType: io.sentry.SentryItemType[] values()
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel: PlatformViewsChannel(io.flutter.embedding.engine.dart.DartExecutor)
io.sentry.CircularFifoQueue: int access$600(io.sentry.CircularFifoQueue,int)
io.flutter.plugin.common.BasicMessageChannel: java.lang.String access$300(io.flutter.plugin.common.BasicMessageChannel)
io.sentry.Sentry: void init(io.sentry.OptionsContainer,io.sentry.Sentry$OptionsConfiguration,boolean)
io.sentry.android.core.NdkIntegration: NdkIntegration(java.lang.Class)
com.google.gson.internal.$Gson$Types$WildcardTypeImpl: int hashCode()
com.google.gson.internal.ConstructorConstructor: ConstructorConstructor(java.util.Map)
kotlinx.coroutines.CoroutineName: java.lang.String getName()
com.google.android.gms.common.internal.zac: java.lang.String zac(android.content.Context,int)
com.google.android.gms.internal.maps.zzac: com.google.android.gms.internal.maps.zzad zzb(android.os.IBinder)
com.google.android.gms.common.api.Api$ClientKey: Api$ClientKey()
io.flutter.plugin.editing.TextInputPlugin: void onProvideAutofillVirtualStructure(android.view.ViewStructure,int)
io.sentry.protocol.DebugImage: void setCodeFile(java.lang.String)
kotlin.ranges.IntProgression: int hashCode()
com.google.gson.stream.JsonWriter: void newline()
androidx.window.layout.ExtensionsWindowLayoutInfoAdapter: ExtensionsWindowLayoutInfoAdapter()
androidx.collection.ArraySet: void clear()
com.google.android.gms.maps.model.Circle: void remove()
io.sentry.android.core.DefaultAndroidEventProcessor: java.lang.String getApplicationName()
androidx.loader.app.LoaderManagerImpl$LoaderInfo: void onInactive()
com.google.android.gms.common.api.internal.BackgroundDetector: void initialize(android.app.Application)
com.google.common.collect.Iterators$9: java.lang.Object next()
io.flutter.embedding.engine.renderer.FlutterRenderer: io.flutter.view.TextureRegistry$SurfaceTextureEntry createSurfaceTexture()
kotlinx.coroutines.channels.AbstractSendChannel: java.lang.String toString()
com.google.android.gms.common.api.internal.zaad: void zad(com.google.android.gms.tasks.TaskCompletionSource,boolean)
androidx.core.view.WindowInsetsControllerCompat$Impl: void setAppearanceLightNavigationBars(boolean)
androidx.fragment.app.BackStackState: void writeToParcel(android.os.Parcel,int)
com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper: com.google.common.collect.MapMakerInternalMap$Segment newSegment(com.google.common.collect.MapMakerInternalMap,int,int)
com.google.gson.stream.JsonReader: JsonReader(java.io.Reader)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$Host access$000(io.flutter.embedding.android.FlutterActivityAndFragmentDelegate)
androidx.fragment.app.Fragment: androidx.fragment.app.FragmentActivity requireActivity()
kotlinx.coroutines.EventLoopImplBase$DelayedTask: int scheduleTask(long,kotlinx.coroutines.EventLoopImplBase$DelayedTaskQueue,kotlinx.coroutines.EventLoopImplBase)
kotlinx.coroutines.EventLoopKt: kotlinx.coroutines.EventLoop createEventLoop()
com.tekartik.sqflite.SqflitePlugin$1: void run()
kotlin.collections.EmptyMap: int getSize()
kotlinx.coroutines.scheduling.CoroutineScheduler: void execute(java.lang.Runnable)
io.sentry.protocol.SentryThread: void setCurrent(java.lang.Boolean)
androidx.arch.core.executor.ArchTaskExecutor: void executeOnDiskIO(java.lang.Runnable)
io.sentry.android.ndk.NativeScope: void removeExtra(java.lang.String)
com.google.gson.JsonArray: com.google.gson.JsonElement remove(int)
kotlinx.coroutines.internal.DispatchedContinuation: void resumeWith(java.lang.Object)
com.google.android.gms.dynamic.zae: void onClick(android.view.View)
com.tekartik.sqflite.SqflitePlugin$8: void run()
com.google.android.gms.maps.model.zzw: java.lang.Object[] newArray(int)
io.sentry.transport.TransportResult: boolean isSuccess()
com.google.gson.internal.LinkedHashTreeMap: void rotateLeft(com.google.gson.internal.LinkedHashTreeMap$Node)
androidx.fragment.app.Fragment: androidx.core.app.SharedElementCallback getEnterTransitionCallback()
io.sentry.IEnvelopeSender: void processEnvelopeFile(java.lang.String,java.lang.Object)
kotlin.coroutines.ContinuationInterceptor$DefaultImpls: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.ContinuationInterceptor,kotlin.coroutines.CoroutineContext$Key)
kotlin.coroutines.jvm.internal.DebugMetadataKt: java.lang.StackTraceElement getStackTraceElement(kotlin.coroutines.jvm.internal.BaseContinuationImpl)
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType: PlatformChannel$HapticFeedbackType(java.lang.String,int,java.lang.String)
com.google.gson.internal.bind.JsonTreeWriter$1: void write(char[],int,int)
androidx.window.layout.WindowMetricsCalculator: androidx.window.layout.WindowMetrics computeCurrentWindowMetrics(android.app.Activity)
io.flutter.plugins.googlemaps.GoogleMapBuilder: void setInitialPolylines(java.lang.Object)
com.google.android.gms.common.internal.safeparcel.SafeParcelWriter: void writeIntArray(android.os.Parcel,int,int[],boolean)
com.google.android.gms.common.api.internal.NonGmsServiceBrokerClient: int getMinApkVersion()
kotlinx.coroutines.channels.LinkedListChannel: boolean isBufferAlwaysEmpty()
com.google.android.gms.maps.model.TileOverlayOptions: boolean isVisible()
androidx.window.embedding.EmbeddingBackend: void unregisterRule(androidx.window.embedding.EmbeddingRule)
io.sentry.protocol.User: java.lang.String getUsername()
com.google.common.collect.MapMakerInternalMap$ValueIterator: java.lang.Object next()
io.flutter.plugins.googlemaps.PolygonBuilder: com.google.android.gms.maps.model.PolygonOptions build()
androidx.window.layout.SidecarWindowBackend: void access$setGlobalInstance$cp(androidx.window.layout.SidecarWindowBackend)
com.google.android.gms.maps.model.TileOverlay: boolean getFadeIn()
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1: void read(com.google.gson.stream.JsonReader,java.lang.Object)
io.sentry.IEnvelopeReader: io.sentry.SentryEnvelope read(java.io.InputStream)
com.google.common.collect.MapMakerInternalMap$Values: java.lang.Object[] toArray()
io.flutter.plugins.sharedpreferences.MethodCallHandlerImpl: MethodCallHandlerImpl(android.content.Context)
io.sentry.Sentry: void init(io.sentry.SentryOptions,boolean)
androidx.window.embedding.EmbeddingAdapter: java.util.function.Predicate translateActivityPairPredicates(java.util.Set)
io.flutter.embedding.engine.FlutterEngine: FlutterEngine(android.content.Context,io.flutter.embedding.engine.loader.FlutterLoader,io.flutter.embedding.engine.FlutterJNI,io.flutter.plugin.platform.PlatformViewsController,java.lang.String[],boolean,boolean)
androidx.window.embedding.SplitRuleParser: androidx.window.embedding.ActivityFilter parseActivityFilter(android.content.Context,android.content.res.XmlResourceParser)
io.flutter.embedding.engine.FlutterJNI: void setPlatformMessageHandler(io.flutter.embedding.engine.dart.PlatformMessageHandler)
com.google.gson.internal.ConstructorConstructor$8: java.lang.Object construct()
androidx.window.layout.FoldingFeature: boolean isSeparating()
io.flutter.embedding.engine.systemchannels.KeyEventChannel: KeyEventChannel(io.flutter.plugin.common.BinaryMessenger)
androidx.lifecycle.ProcessLifecycleOwner$3$1: void onActivityPostStarted(android.app.Activity)
com.google.gson.internal.ConstructorConstructor$1: java.lang.Object construct()
io.sentry.IHub: io.sentry.ISpan getSpan()
io.flutter.view.AccessibilityBridge: io.flutter.embedding.engine.systemchannels.AccessibilityChannel access$700(io.flutter.view.AccessibilityBridge)
androidx.fragment.app.Fragment: android.view.LayoutInflater onGetLayoutInflater(android.os.Bundle)
io.flutter.embedding.engine.renderer.FlutterRenderer: void stopRenderingToSurface()
io.sentry.IHub: void popScope()
com.google.android.gms.maps.UiSettings: void setMyLocationButtonEnabled(boolean)
androidx.lifecycle.ReportFragment: void dispatchResume(androidx.lifecycle.ReportFragment$ActivityInitializationListener)
com.google.common.hash.ChecksumHashFunction: ChecksumHashFunction(com.google.common.hash.ImmutableSupplier,int,java.lang.String)
com.google.common.collect.MapMaker: com.google.common.collect.MapMaker weakKeys()
kotlinx.coroutines.InvokeOnCancelling: InvokeOnCancelling(kotlin.jvm.functions.Function1)
io.flutter.plugins.googlemaps.Convert: float toFloat(java.lang.Object)
androidx.window.core.Version: int getMajor()
kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Throwable tryReleaseClaimedContinuation(kotlinx.coroutines.CancellableContinuation)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState: boolean hasComposing()
com.google.android.gms.maps.internal.zzg: boolean setMapStyle(com.google.android.gms.maps.model.MapStyleOptions)
com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry: com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry copy(java.lang.ref.ReferenceQueue,com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry)
io.sentry.Scope: void clearBreadcrumbs()
io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler: BasicMessageChannel$IncomingMessageHandler(io.flutter.plugin.common.BasicMessageChannel,io.flutter.plugin.common.BasicMessageChannel$MessageHandler)
com.google.common.util.concurrent.ThreadFactoryBuilder: java.lang.String format(java.lang.String,java.lang.Object[])
io.flutter.plugins.googlemaps.Convert: com.google.android.gms.maps.model.CameraPosition toCameraPosition(java.lang.Object)
com.google.android.gms.maps.model.Circle: void setStrokeColor(int)
kotlin.coroutines.jvm.internal.BaseContinuationImpl: java.lang.Object invokeSuspend(java.lang.Object)
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int getIndexInArray()
io.sentry.android.core.R: R()
io.flutter.embedding.android.FlutterView: boolean acquireLatestImageViewFrame()
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.String access$3700(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.sentry.protocol.User: java.util.Map getOthers()
androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager: void onGlobalLayout()
kotlin.coroutines.jvm.internal.BaseContinuationImpl: BaseContinuationImpl(kotlin.coroutines.Continuation)
com.google.android.gms.maps.model.TileOverlayOptions: float getTransparency()
io.sentry.Scope: void setRequest(io.sentry.protocol.Request)
kotlinx.coroutines.InactiveNodeList: boolean isActive()
io.sentry.NoOpTransaction: void setStatus(io.sentry.SpanStatus)
com.google.android.gms.common.internal.zze: zze(com.google.android.gms.common.internal.BaseGmsClient,int)
com.google.gson.stream.JsonReader: java.lang.String nextUnquotedValue()
com.google.gson.internal.$Gson$Types: java.lang.reflect.WildcardType subtypeOf(java.lang.reflect.Type)
io.sentry.SentryEvent: java.util.List getThreads()
androidx.window.layout.WindowMetrics: boolean equals(java.lang.Object)
androidx.fragment.app.Fragment: void setOnStartEnterTransitionListener(androidx.fragment.app.Fragment$OnStartEnterTransitionListener)
io.sentry.SentryLevel: io.sentry.SentryLevel[] values()
com.google.gson.reflect.TypeToken: boolean isAssignableFrom(java.lang.reflect.Type,java.lang.reflect.ParameterizedType,java.util.Map)
io.sentry.OptionsContainer: OptionsContainer(java.lang.Class)
com.google.android.gms.common.GoogleApiAvailability: android.content.Intent getErrorResolutionIntent(android.content.Context,int,java.lang.String)
com.google.common.collect.ImmutableList$SubList: java.util.ListIterator listIterator(int)
io.flutter.embedding.engine.systemchannels.TextInputChannel: void previous(int)
kotlinx.coroutines.AbstractCoroutine: void resumeWith(java.lang.Object)
kotlinx.coroutines.JobSupport: java.lang.String stateString(java.lang.Object)
kotlinx.coroutines.CancellableContinuationImpl: kotlinx.coroutines.CancelHandler makeCancelHandler(kotlin.jvm.functions.Function1)
com.google.android.gms.common.api.internal.BackgroundDetector: void onActivityDestroyed(android.app.Activity)
com.google.gson.JsonPrimitive: java.lang.Number getAsNumber()
androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions: void supportRemove(androidx.arch.core.internal.SafeIterableMap$Entry)
kotlin.sequences.SequencesKt__SequencesKt$asSequence$$inlined$Sequence$1: java.util.Iterator iterator()
com.google.gson.internal.bind.TimeTypeAdapter: void write(com.google.gson.stream.JsonWriter,java.sql.Time)
io.flutter.embedding.android.FlutterView: void detachFromFlutterEngine()
io.sentry.protocol.Device: void setName(java.lang.String)
io.flutter.plugins.googlemaps.GoogleMapsPlugin: void onAttachedToEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
com.google.common.collect.ImmutableCollection: int copyIntoArray(java.lang.Object[],int)
io.flutter.plugins.googlemaps.GoogleMapBuilder: void setLiteModeEnabled(boolean)
androidx.fragment.app.FragmentManagerImpl$EndViewTransitionAnimation: FragmentManagerImpl$EndViewTransitionAnimation(android.view.animation.Animation,android.view.ViewGroup,android.view.View)
io.sentry.transport.AsyncHttpTransport$AsyncConnectionThreadFactory: AsyncHttpTransport$AsyncConnectionThreadFactory()
com.google.android.gms.maps.model.Polygon: void setStrokeWidth(float)
androidx.core.app.CoreComponentFactory: java.lang.Object checkCompatWrapper(java.lang.Object)
io.sentry.android.core.util.ConnectivityChecker: ConnectivityChecker()
io.sentry.protocol.Contexts: void setDevice(io.sentry.protocol.Device)
com.google.gson.internal.$Gson$Types: java.lang.reflect.Type resolve(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type)
io.sentry.android.ndk.SentryNdk: void initSentryNative(io.sentry.android.core.SentryAndroidOptions)
androidx.collection.SimpleArrayMap: boolean containsValue(java.lang.Object)
com.google.android.gms.common.api.internal.ListenerHolder$ListenerKey: boolean equals(java.lang.Object)
io.flutter.plugin.platform.PlatformViewsController: void removeOverlaySurfaces()
com.tekartik.sqflite.operation.BaseReadOperation: com.tekartik.sqflite.SqlCommand getSqlCommand()
com.google.android.gms.maps.internal.zzby: void setZoomGesturesEnabled(boolean)
io.sentry.Scope: void setTag(java.lang.String,java.lang.String)
io.sentry.Sentry: io.sentry.ITransaction startTransaction(io.sentry.TransactionContext)
androidx.fragment.app.FragmentHostCallback: android.view.View onFindViewById(int)
com.google.android.gms.common.api.internal.zabs: com.google.android.gms.common.Feature zaa(com.google.android.gms.common.api.internal.zabs)
io.sentry.HubAdapter: void setTransaction(java.lang.String)
io.flutter.plugins.googlemaps.Convert: double toDouble(java.lang.Object)
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.AccessibilityChannel getAccessibilityChannel()
com.google.gson.internal.ConstructorConstructor: com.google.gson.internal.ObjectConstructor newUnsafeAllocator(java.lang.reflect.Type,java.lang.Class)
com.google.android.gms.common.internal.IAccountAccessor$Stub: com.google.android.gms.common.internal.IAccountAccessor asInterface(android.os.IBinder)
androidx.fragment.app.FragmentManagerImpl: FragmentManagerImpl()
io.sentry.SentryEvent: SentryEvent(io.sentry.protocol.SentryId,java.util.Date)
io.sentry.ISpan: java.lang.Throwable getThrowable()
kotlin.coroutines.AbstractCoroutineContextKey: kotlin.coroutines.CoroutineContext$Element tryCast$kotlin_stdlib(kotlin.coroutines.CoroutineContext$Element)
com.google.android.gms.internal.base.zac: void zad(android.os.Parcel,android.os.IInterface)
kotlin.collections.CollectionsKt___CollectionsKt: java.lang.Object single(java.lang.Iterable)
io.flutter.view.VsyncWaiter$1: void asyncWaitForVsync(long)
io.sentry.android.core.SentryAndroidOptions: void setAnrEnabled(boolean)
io.flutter.view.AccessibilityBridge$SemanticsNode: java.util.List access$5700(io.flutter.view.AccessibilityBridge$SemanticsNode)
kotlinx.coroutines.JobSupport: java.lang.String toString()
kotlinx.coroutines.scheduling.WorkQueue: kotlinx.coroutines.scheduling.Task addLast(kotlinx.coroutines.scheduling.Task)
com.google.gson.internal.bind.TypeAdapters$18: java.lang.Object read(com.google.gson.stream.JsonReader)
io.flutter.plugin.editing.InputConnectionAdaptor: boolean performPrivateCommand(java.lang.String,android.os.Bundle)
kotlinx.coroutines.internal.LockFreeTaskQueue: java.lang.Object removeFirstOrNull()
io.flutter.embedding.android.FlutterView: FlutterView(android.content.Context,io.flutter.embedding.android.FlutterSurfaceView)
com.google.android.gms.common.api.zzb: java.lang.Object createFromParcel(android.os.Parcel)
kotlinx.coroutines.EventLoopImplBase: long getNextTime()
io.sentry.GsonSerializer: void serialize(java.lang.Object,java.io.Writer)
io.sentry.Breadcrumb: io.sentry.Breadcrumb http(java.lang.String,java.lang.String,java.lang.Integer)
com.google.gson.internal.bind.SqlDateTypeAdapter$1: com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken)
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$1: void touch(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
com.google.android.gms.maps.GoogleMapOptions: java.lang.Integer getBackgroundColor()
com.google.gson.internal.$Gson$Types: java.lang.reflect.Type canonicalize(java.lang.reflect.Type)
io.flutter.plugins.googlemaps.GoogleMapController: void onRestoreInstanceState(android.os.Bundle)
androidx.fragment.app.Fragment: android.animation.Animator onCreateAnimator(int,boolean,int)
com.google.gson.internal.bind.TypeAdapters$26: TypeAdapters$26()
com.google.common.collect.ImmutableList$Builder: com.google.common.collect.ImmutableList$Builder add(java.lang.Object)
io.sentry.IHub: io.sentry.SentryOptions getOptions()
androidx.window.R$attr: R$attr()
io.sentry.DateUtils$1: DateUtils$1()
com.google.common.reflect.Types$JavaVersion$3: java.lang.reflect.Type newArrayType(java.lang.reflect.Type)
com.google.gson.GsonBuilder: com.google.gson.GsonBuilder setLenient()
androidx.core.app.NotificationCompat$Builder: NotificationCompat$Builder(android.content.Context)
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction: java.lang.String access$3500(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction)
kotlinx.coroutines.flow.internal.SafeCollector: java.lang.Object emit(java.lang.Object,kotlin.coroutines.Continuation)
kotlinx.coroutines.internal.ThreadSafeHeap: boolean isEmpty()
com.google.android.gms.maps.model.TileOverlay: float getTransparency()
io.sentry.SentryTracer: void setRequest(io.sentry.protocol.Request)
kotlinx.coroutines.channels.Channel$Factory: Channel$Factory()
com.google.android.gms.common.stats.ConnectionTracker: boolean zzd(android.content.ServiceConnection)
com.google.android.gms.common.GoogleApiAvailabilityLight: boolean isUserResolvableError(int)
io.sentry.android.core.SentryInitProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)
com.google.android.gms.common.GoogleApiAvailability: android.app.PendingIntent getErrorResolutionPendingIntent(android.content.Context,com.google.android.gms.common.ConnectionResult)
com.google.android.gms.common.api.Scope: void writeToParcel(android.os.Parcel,int)
com.google.android.gms.signin.SignInOptions: boolean equals(java.lang.Object)
com.google.android.gms.common.ConnectionResult: java.lang.String zza(int)
androidx.fragment.app.FragmentManagerImpl$4: void onAnimationEnd(android.animation.Animator)
io.flutter.plugins.googlemaps.MarkersController: void onMarkerDragEnd(java.lang.String,com.google.android.gms.maps.model.LatLng)
androidx.fragment.app.Fragment: void onPictureInPictureModeChanged(boolean)
com.google.gson.Gson$FutureTypeAdapter: void setDelegate(com.google.gson.TypeAdapter)
io.sentry.android.ndk.DebugImagesLoader: DebugImagesLoader(io.sentry.android.core.SentryAndroidOptions,io.sentry.android.ndk.NativeModuleListLoader)
androidx.fragment.app.Fragment: androidx.fragment.app.FragmentManager requireFragmentManager()
io.sentry.SentryOptions: java.util.List getIntegrations()
com.google.android.gms.maps.model.MarkerOptions: com.google.android.gms.maps.model.MarkerOptions position(com.google.android.gms.maps.model.LatLng)
io.flutter.embedding.android.MotionEventTracker: io.flutter.embedding.android.MotionEventTracker$MotionEventId track(android.view.MotionEvent)
kotlinx.coroutines.CoroutineDispatcher$Key$1: kotlinx.coroutines.CoroutineDispatcher invoke(kotlin.coroutines.CoroutineContext$Element)
com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter name(java.lang.String)
androidx.core.view.KeyEventDispatcher: boolean actionBarOnMenuKeyEventPre28(android.app.ActionBar,android.view.KeyEvent)
io.flutter.plugins.googlemaps.PolylineController: void setEndCap(com.google.android.gms.maps.model.Cap)
io.sentry.Stack$StackItem: io.sentry.Scope getScope()
androidx.fragment.app.DialogFragment: void setupDialog(android.app.Dialog,int)
io.sentry.SentryOptions: SentryOptions(boolean)
androidx.collection.SimpleArrayMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)
androidx.fragment.app.FragmentController: android.os.Parcelable saveAllState()
io.sentry.SpanStatus: io.sentry.SpanStatus fromHttpStatusCode(int)
androidx.core.app.Person: java.lang.String resolveToLegacyUri()
com.google.gson.Gson$4: void write(com.google.gson.stream.JsonWriter,java.util.concurrent.atomic.AtomicLong)
androidx.fragment.app.DialogFragment: void onStop()
kotlinx.coroutines.EventLoopImplBase$DelayedTask: boolean timeToExecute(long)
kotlinx.coroutines.JobSupport: void onCompletionInternal(java.lang.Object)
com.google.android.gms.maps.GoogleMapOptions: void writeToParcel(android.os.Parcel,int)
androidx.arch.core.executor.ArchTaskExecutor: boolean isMainThread()
com.google.common.base.Strings: java.lang.String lenientFormat(java.lang.String,java.lang.Object[])
com.google.android.gms.common.internal.ClientSettings: java.lang.String getRealClientPackageName()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPostCreated(android.app.Activity,android.os.Bundle)
io.sentry.ISpan: void setOperation(java.lang.String)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: boolean isFlutterEngineFromHost()
com.google.gson.stream.MalformedJsonException: MalformedJsonException(java.lang.String,java.lang.Throwable)
io.sentry.Sentry$OptionsConfiguration: void configure(io.sentry.SentryOptions)
io.flutter.embedding.engine.systemchannels.PlatformChannel$1: void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean access$5900(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.view.AccessibilityBridge$Flag)
kotlinx.coroutines.InvokeOnCompletion: java.lang.Object invoke(java.lang.Object)
com.google.android.gms.maps.model.zzl: zzl()
kotlinx.coroutines.internal.ConcurrentKt: boolean removeFutureOnCancel(java.util.concurrent.Executor)
androidx.collection.MapCollections$ValuesCollection: boolean remove(java.lang.Object)
com.google.common.util.concurrent.AbstractFuture: boolean set(java.lang.Object)
io.sentry.android.core.ManifestMetadataReader: boolean isAutoInit(android.content.Context,io.sentry.ILogger)
kotlin.collections.EmptyList: java.util.List subList(int,int)
io.flutter.plugins.pathprovider.PathProviderPlugin: java.util.List getPathProviderExternalStorageDirectories(java.lang.String)
io.sentry.MainEventProcessor: boolean isCachedHint(java.lang.Object)
com.google.android.gms.dynamite.DynamiteModule: android.content.Context getModuleContext()
io.sentry.Hub: void setExtra(java.lang.String,java.lang.String)
io.flutter.plugins.googlemaps.Convert: java.lang.Float toFloatWrapper(java.lang.Object)
com.google.common.util.concurrent.CycleDetectingLockFactory$Policies: CycleDetectingLockFactory$Policies(java.lang.String,int,com.google.common.util.concurrent.CycleDetectingLockFactory$1)
com.google.common.collect.MapMakerInternalMap$AbstractStrongKeyEntry: com.google.common.collect.MapMakerInternalMap$InternalEntry getNext()
io.sentry.android.core.ManifestMetadataReader: java.lang.String readString(android.os.Bundle,io.sentry.ILogger,java.lang.String,java.lang.String)
kotlinx.coroutines.internal.ExceptionsConstuctorKt$createConstructor$$inlined$safeCtor$2: java.lang.Object invoke(java.lang.Object)
io.sentry.android.core.SystemEventsBreadcrumbsIntegration: SystemEventsBreadcrumbsIntegration(android.content.Context,java.util.List)
io.flutter.plugin.platform.PlatformViewRegistryImpl: PlatformViewRegistryImpl()
io.flutter.view.AccessibilityBridge$SemanticsNode: java.util.List access$3300(io.flutter.view.AccessibilityBridge$SemanticsNode)
com.google.android.gms.common.zzj: zzj(byte[])
androidx.fragment.app.Fragment: void performDetach()
io.flutter.embedding.engine.plugins.lifecycle.HiddenLifecycleReference: androidx.lifecycle.Lifecycle getLifecycle()
kotlin.jvm.internal.CallableReference: CallableReference(java.lang.Object)
com.google.gson.JsonPrimitive: com.google.gson.JsonPrimitive deepCopy()
com.google.common.collect.MapMakerInternalMap$Segment: void preWriteCleanup()
io.sentry.Span: io.sentry.SpanContext getSpanContext()
io.sentry.Sentry: void removeTag(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: boolean isCodePointRegionalIndicator(int)
io.flutter.view.AccessibilityBridge$SemanticsNode: java.util.List access$4100(io.flutter.view.AccessibilityBridge$SemanticsNode)
androidx.window.layout.HardwareFoldingFeature: androidx.window.layout.FoldingFeature$State getState()
com.google.android.gms.maps.model.CircleOptions: void writeToParcel(android.os.Parcel,int)
io.sentry.adapters.SpanStatusDeserializerAdapter: java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext)
io.flutter.embedding.engine.FlutterJNI: void ensureAttachedToNative()
io.sentry.cache.EnvelopeCache: void updateCurrentSession(java.io.File,io.sentry.SentryEnvelope)
com.google.android.gms.common.api.internal.zzc: void run()
io.sentry.android.core.LifecycleWatcher: void addSessionBreadcrumb(java.lang.String)
kotlinx.coroutines.JobSupport: java.lang.String toDebugString()
io.flutter.plugins.googlemaps.PolylineBuilder: void setPattern(java.util.List)
com.google.android.gms.maps.GoogleMapOptions: com.google.android.gms.maps.model.CameraPosition getCamera()
androidx.window.embedding.SplitInfo: float getSplitRatio()
com.google.gson.JsonArray: com.google.gson.JsonElement get(int)
io.sentry.protocol.DebugMeta: void setSdkInfo(io.sentry.protocol.SdkInfo)
com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper: com.google.common.collect.MapMakerInternalMap$InternalEntry newEntry(com.google.common.collect.MapMakerInternalMap$Segment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$InternalEntry)
io.flutter.embedding.engine.FlutterJNI: void setDeferredComponentManager(io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager)
com.google.android.gms.common.api.internal.BackgroundDetector: void onActivitySaveInstanceState(android.app.Activity,android.os.Bundle)
kotlinx.coroutines.intrinsics.CancellableKt: void startCoroutineCancellable(kotlin.coroutines.Continuation,kotlin.coroutines.Continuation)
com.google.android.gms.maps.model.zzs: java.lang.Object[] newArray(int)
io.sentry.android.ndk.NativeScope: void setUser(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
com.google.gson.internal.bind.TypeAdapters$10: java.lang.Object read(com.google.gson.stream.JsonReader)
kotlinx.coroutines.AbstractCoroutine: boolean isActive()
kotlinx.coroutines.channels.ConflatedChannel: java.lang.Object offerInternal(java.lang.Object)
androidx.window.layout.ExtensionInterfaceCompat: void onWindowLayoutChangeListenerAdded(android.app.Activity)
androidx.collection.MapCollections$EntrySet: boolean retainAll(java.util.Collection)
io.flutter.plugin.editing.FlutterTextUtils: boolean isKeycapBase(int)
androidx.window.embedding.ExtensionEmbeddingBackend: java.util.Set getSplitRules()
io.sentry.SentryClient: java.util.List getAttachmentsFromScope(io.sentry.Scope)
androidx.window.core.Version$Companion: androidx.window.core.Version getVERSION_1_0()
androidx.window.core.Version: androidx.window.core.Version access$getUNKNOWN$cp()
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void setNextParkedWorker(java.lang.Object)
com.google.android.gms.maps.zzp: zzp(com.google.android.gms.maps.GoogleMap,com.google.android.gms.maps.GoogleMap$OnPolylineClickListener)
io.flutter.embedding.engine.loader.ApplicationInfoLoader: void parseDomainConfig(android.content.res.XmlResourceParser,org.json.JSONArray,boolean)
kotlinx.coroutines.UndispatchedCoroutine: void afterResume(java.lang.Object)
com.google.android.gms.common.util.PlatformVersion: boolean isAtLeastLollipop()
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureFinalizerRunnable: void run()
kotlin.jvm.internal.CallableReference: java.lang.Object callBy(java.util.Map)
com.google.gson.internal.bind.TypeAdapters$27: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
kotlinx.coroutines.internal.FastServiceLoader: java.util.List parseFile(java.io.BufferedReader)
kotlinx.coroutines.scheduling.DefaultScheduler: kotlinx.coroutines.CoroutineDispatcher getIO()
io.sentry.Sentry: void init(java.lang.String)
io.sentry.protocol.DebugMeta: void acceptUnknownProperties(java.util.Map)
io.sentry.protocol.App: java.util.Map getUnknown()
io.sentry.CircularFifoQueue: void readObject(java.io.ObjectInputStream)
io.flutter.embedding.engine.FlutterEngineCache: void remove(java.lang.String)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding: void onRestoreInstanceState(android.os.Bundle)
com.google.android.gms.maps.Projection: com.google.android.gms.maps.model.LatLng fromScreenLocation(android.graphics.Point)
com.google.android.gms.common.api.internal.zzd: int zza(com.google.android.gms.common.api.internal.zzd)
com.google.android.gms.maps.zzo: zzo(com.google.android.gms.maps.GoogleMap,com.google.android.gms.maps.GoogleMap$OnPolygonClickListener)
io.sentry.protocol.DebugImage: void setUuid(java.lang.String)
com.google.android.gms.common.api.internal.NonGmsServiceBrokerClient: boolean isConnecting()
com.google.android.gms.common.api.internal.BasePendingResult: void setResult(com.google.android.gms.common.api.Result)
kotlinx.coroutines.CoroutineDispatcher$Key$1: java.lang.Object invoke(java.lang.Object)
com.google.gson.internal.bind.JsonTreeWriter: com.google.gson.stream.JsonWriter value(long)
io.flutter.embedding.engine.systemchannels.PlatformChannel: PlatformChannel(io.flutter.embedding.engine.dart.DartExecutor)
kotlin.jvm.internal.CollectionToArray: java.lang.Object[] toArray(java.util.Collection,java.lang.Object[])
io.sentry.Attachment: Attachment(byte[],java.lang.String,java.lang.String)
com.google.android.gms.maps.zzah: zzah(android.view.ViewGroup,android.content.Context,com.google.android.gms.maps.GoogleMapOptions)
com.google.common.collect.Maps$EntryFunction$1: java.lang.Object apply(java.util.Map$Entry)
com.google.common.reflect.Types$JavaVersion: java.lang.String typeName(java.lang.reflect.Type)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutator: FlutterMutatorsStack$FlutterMutator(io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack,android.graphics.Matrix)
com.google.common.util.concurrent.AbstractFuture$TrustedFuture: AbstractFuture$TrustedFuture()
com.google.android.gms.maps.model.MarkerOptions: java.lang.String getTitle()
io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup: int atMost(int)
io.sentry.Span: java.lang.Boolean isSampled()
kotlinx.coroutines.InactiveNodeList: InactiveNodeList(kotlinx.coroutines.NodeList)
kotlin.text.DelimitedRangesSequence$iterator$1: kotlin.ranges.IntRange next()
com.google.gson.internal.bind.MapTypeAdapterFactory: com.google.gson.TypeAdapter getKeyAdapter(com.google.gson.Gson,java.lang.reflect.Type)
io.sentry.android.core.ActivityLifecycleIntegration: void onActivityPaused(android.app.Activity)
dev.fluttercommunity.plus.packageinfo.PackageInfoPlugin: void onDetachedFromEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
io.flutter.view.AccessibilityBridge$SemanticsNode: void access$4900(io.flutter.view.AccessibilityBridge$SemanticsNode,float[],java.util.Set,boolean)
io.sentry.TransactionContext: TransactionContext(java.lang.String,java.lang.String)
kotlinx.coroutines.channels.Closed: void completeResumeReceive(java.lang.Object)
io.flutter.plugins.googlemaps.GoogleMapController: void setPadding(float,float,float,float)
io.sentry.NoOpHub: void startSession()
com.google.android.gms.maps.MapsInitializer$Renderer: com.google.android.gms.maps.MapsInitializer$Renderer[] values()
io.sentry.android.core.AppComponentsBreadcrumbsIntegration: AppComponentsBreadcrumbsIntegration(android.content.Context)
androidx.fragment.app.FragmentManagerImpl: void saveFragmentViewState(androidx.fragment.app.Fragment)
io.sentry.util.CollectionUtils: java.util.Map newHashMap(java.util.Map)
com.google.android.gms.common.api.internal.zact: void onConnectionFailed(com.google.android.gms.common.ConnectionResult)
io.sentry.OutboxSender: boolean waitFlush(java.lang.Object)
kotlin.sequences.SequencesKt___SequencesKt: java.util.List toMutableList(kotlin.sequences.Sequence)
androidx.window.layout.FoldingFeature$Orientation: FoldingFeature$Orientation(java.lang.String)
io.flutter.view.AccessibilityBridge$4: void onTouchExplorationStateChanged(boolean)
com.google.android.gms.common.api.internal.zap: zap(com.google.android.gms.common.api.internal.LifecycleFragment,com.google.android.gms.common.GoogleApiAvailability)
io.sentry.SpanId: SpanId(java.lang.String)
io.flutter.plugins.googlemaps.Convert: java.util.Map pointToJson(android.graphics.Point)
androidx.core.view.ViewCompat: java.lang.String getTransitionName(android.view.View)
io.sentry.OutboxSender: void $closeResource(java.lang.Throwable,java.lang.AutoCloseable)
io.flutter.plugins.googlemaps.Convert: android.graphics.Point toPoint(java.lang.Object)
com.tekartik.sqflite.LogLevel: boolean hasSqlLevel(int)
io.flutter.embedding.android.FlutterTextureView: android.view.Surface access$500(io.flutter.embedding.android.FlutterTextureView)
io.sentry.android.core.DefaultAndroidEventProcessor: java.lang.String getAbi2()
com.google.gson.Gson: void toJson(com.google.gson.JsonElement,com.google.gson.stream.JsonWriter)
androidx.lifecycle.LifecycleDispatcher$DispatcherActivityCallback: void onActivitySaveInstanceState(android.app.Activity,android.os.Bundle)
io.sentry.protocol.App: java.lang.String getBuildType()
com.google.android.gms.maps.GoogleMap: void setMaxZoomPreference(float)
com.google.android.gms.maps.model.TileOverlayOptions: com.google.android.gms.maps.model.TileOverlayOptions zIndex(float)
androidx.loader.app.LoaderManagerImpl$LoaderInfo: void markForRedelivery()
com.google.gson.internal.LinkedTreeMap: int size()
com.tekartik.sqflite.SqflitePlugin: void onExecuteCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
com.google.android.gms.common.api.internal.zap: int zae(com.google.android.gms.common.api.internal.zam)
kotlin.text.DelimitedRangesSequence$iterator$1: boolean hasNext()
com.google.gson.internal.ConstructorConstructor$4: java.lang.Object construct()
io.sentry.NoOpHub: void bindClient(io.sentry.ISentryClient)
io.flutter.embedding.engine.systemchannels.RestorationChannel$1: void error(java.lang.String,java.lang.String,java.lang.Object)
kotlinx.coroutines.channels.AbstractChannel$enqueueReceiveInternal$$inlined$addLastIfPrevAndIf$1: AbstractChannel$enqueueReceiveInternal$$inlined$addLastIfPrevAndIf$1(kotlinx.coroutines.internal.LockFreeLinkedListNode,kotlinx.coroutines.channels.AbstractChannel)
io.sentry.CircularFifoQueue: void clear()
androidx.lifecycle.LifecycleDispatcher$DispatcherActivityCallback: void onActivityStopped(android.app.Activity)
androidx.lifecycle.LiveData$LifecycleBoundObserver: boolean isAttachedTo(androidx.lifecycle.LifecycleOwner)
kotlin.jvm.internal.ClassReference$Companion: ClassReference$Companion()
androidx.lifecycle.ProcessLifecycleOwner$3: void onActivityPaused(android.app.Activity)
io.flutter.embedding.engine.FlutterJNI: void nativeRunBundleAndSnapshotFromLibrary(long,java.lang.String,java.lang.String,java.lang.String,android.content.res.AssetManager,java.util.List)
com.google.android.gms.maps.CameraUpdateFactory: com.google.android.gms.maps.CameraUpdate zoomIn()
kotlin.sequences.TransformingSequence: TransformingSequence(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1)
com.google.android.gms.common.api.internal.zabu: zabu(com.google.android.gms.common.api.internal.GoogleApiManager,com.google.android.gms.common.api.Api$Client,com.google.android.gms.common.api.internal.ApiKey)
io.sentry.HubAdapter: HubAdapter()
io.flutter.plugins.connectivity.ConnectivityPlugin: ConnectivityPlugin()
com.google.android.gms.maps.model.CircleOptions: com.google.android.gms.maps.model.CircleOptions radius(double)
com.google.gson.internal.bind.TypeAdapters$27: java.lang.Object read(com.google.gson.stream.JsonReader)
androidx.fragment.app.FragmentManagerImpl$StartEnterTransitionListener: FragmentManagerImpl$StartEnterTransitionListener(androidx.fragment.app.BackStackRecord,boolean)
io.flutter.view.FlutterMain: java.lang.String getLookupKeyForAsset(java.lang.String)
io.flutter.plugins.sharedpreferences.MethodCallHandlerImpl: java.lang.String encodeList(java.util.List)
io.flutter.plugin.platform.PlatformViewsController: io.flutter.plugin.platform.PlatformViewRegistryImpl access$100(io.flutter.plugin.platform.PlatformViewsController)
com.google.common.collect.MapMakerInternalMap: java.util.ArrayList toArrayList(java.util.Collection)
androidx.collection.SimpleArrayMap: SimpleArrayMap(int)
io.sentry.CircularFifoQueue: int size()
io.sentry.CircularFifoQueue: void writeObject(java.io.ObjectOutputStream)
androidx.window.layout.WindowMetricsCalculatorCompat: android.graphics.Point getRealSizeForDisplay$window_release(android.view.Display)
io.sentry.android.core.util.Permissions: boolean hasPermission(android.content.Context,java.lang.String)
kotlinx.coroutines.EventLoopImplBase: boolean access$isCompleted(kotlinx.coroutines.EventLoopImplBase)
io.sentry.NoOpTransaction: void setRequest(io.sentry.protocol.Request)
com.google.common.util.concurrent.SettableFuture: com.google.common.util.concurrent.SettableFuture create()
kotlin.text.DelimitedRangesSequence: int access$getLimit$p(kotlin.text.DelimitedRangesSequence)
com.google.gson.internal.bind.JsonTreeWriter: com.google.gson.stream.JsonWriter value(java.lang.Number)
io.sentry.SentryTracer: io.sentry.ISpan startChild(io.sentry.SpanId,java.lang.String,java.lang.String)
io.sentry.GsonSerializer: io.sentry.SentryEnvelope deserializeEnvelope(java.io.InputStream)
com.google.android.gms.common.stats.ConnectionTracker: void zzb(android.content.Context,android.content.ServiceConnection)
io.sentry.SentryOptions: void setDistinctId(java.lang.String)
com.google.android.gms.common.Feature: Feature(java.lang.String,long)
io.sentry.android.ndk.NativeModuleListLoader: io.sentry.protocol.DebugImage[] loadModuleList()
androidx.versionedparcelable.VersionedParcelParcel: java.lang.String readString()
com.google.android.gms.common.api.internal.GoogleApiManager: long zad(com.google.android.gms.common.api.internal.GoogleApiManager)
io.flutter.embedding.android.FlutterView: void onProvideAutofillVirtualStructure(android.view.ViewStructure,int)
kotlin.Unit: java.lang.String toString()
io.sentry.android.core.ActivityLifecycleIntegration: boolean isRunningTransaction(android.app.Activity)
com.google.common.collect.MapMakerInternalMap$Segment: void setValue(com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object)
io.sentry.android.core.SentryAndroidOptions: boolean isAnrReportInDebug()
io.flutter.plugins.googlemaps.CircleBuilder: void setStrokeWidth(float)
com.google.android.gms.maps.model.Polygon: void setFillColor(int)
androidx.lifecycle.ClassesInfoCache$CallbackInfo: ClassesInfoCache$CallbackInfo(java.util.Map)
io.sentry.android.core.DefaultAndroidEventProcessor: void setSideLoadedInfo(io.sentry.SentryBaseEvent)
io.flutter.embedding.android.FlutterSurfaceView$1: FlutterSurfaceView$1(io.flutter.embedding.android.FlutterSurfaceView)
com.google.gson.FieldNamingPolicy$3: java.lang.String translateName(java.lang.reflect.Field)
com.google.gson.internal.Excluder: com.google.gson.internal.Excluder disableInnerClassSerialization()
com.google.common.collect.ImmutableCollection$Builder: ImmutableCollection$Builder()
kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.Continuation intercepted()
io.sentry.protocol.SentryException: java.lang.String getModule()
io.sentry.DiagnosticLogger: io.sentry.ILogger getLogger()
kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt$createCoroutineUnintercepted$$inlined$createCoroutineFromSuspendFunction$IntrinsicsKt__IntrinsicsJvmKt$4: java.lang.Object invokeSuspend(java.lang.Object)
com.google.android.gms.common.internal.zzt: android.content.Intent zza()
io.sentry.config.PropertiesProvider: java.lang.Double getDoubleProperty(java.lang.String)
io.sentry.protocol.SentryStackFrame: void setPostContext(java.util.List)
kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState valueOf(java.lang.String)
androidx.window.embedding.SplitInfo: boolean contains(android.app.Activity)
com.google.android.gms.common.internal.RootTelemetryConfiguration: boolean getMethodInvocationTelemetryEnabled()
com.google.android.gms.common.internal.Preconditions: void checkArgument(boolean)
androidx.core.view.WindowInsetsControllerCompat$Impl20: void unsetWindowFlag(int)
io.flutter.embedding.engine.loader.FlutterLoader: java.util.concurrent.ExecutorService access$200(io.flutter.embedding.engine.loader.FlutterLoader)
com.google.android.gms.maps.model.zzl: java.lang.Object createFromParcel(android.os.Parcel)
androidx.window.embedding.MatcherUtils: boolean areComponentsMatching$window_release(android.content.ComponentName,android.content.ComponentName)
io.flutter.plugins.googlemaps.Convert: java.lang.String interpretMarkerOptions(java.lang.Object,io.flutter.plugins.googlemaps.MarkerOptionsSink)
com.google.android.gms.common.internal.zan: java.lang.Object[] newArray(int)
io.flutter.view.AccessibilityBridge$SemanticsNode: int access$1600(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.sentry.protocol.SentryException: java.lang.String getType()
kotlinx.coroutines.Job$DefaultImpls: kotlin.coroutines.CoroutineContext$Element get(kotlinx.coroutines.Job,kotlin.coroutines.CoroutineContext$Key)
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory newFactoryForMultipleTypes(java.lang.Class,java.lang.Class,com.google.gson.TypeAdapter)
com.google.gson.internal.bind.TypeAdapters$29: void write(com.google.gson.stream.JsonWriter,com.google.gson.JsonElement)
io.flutter.embedding.engine.dart.DartExecutor: void notifyLowMemoryWarning()
com.google.gson.internal.bind.TypeAdapters$24: TypeAdapters$24()
kotlin.coroutines.jvm.internal.BaseContinuationImpl: java.lang.String toString()
androidx.fragment.app.Fragment: androidx.fragment.app.FragmentManager getFragmentManager()
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry: void finalize()
com.google.gson.internal.LinkedHashTreeMap$LinkedTreeMapIterator: void remove()
io.sentry.SentryEnvelopeItemHeader: java.lang.String getContentType()
io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler$1: MethodChannel$IncomingMethodCallHandler$1(io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler,io.flutter.plugin.common.BinaryMessenger$BinaryReply)
io.sentry.android.core.ApplicationNotResponding: ApplicationNotResponding(java.lang.String,java.lang.Thread)
com.google.gson.Gson: java.lang.Object fromJson(java.io.Reader,java.lang.reflect.Type)
io.sentry.flutter.SentryFlutterPlugin: void onDetachedFromEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
com.google.android.gms.common.api.internal.zag: void zae(java.lang.Exception)
io.flutter.plugins.googlemaps.MarkerController: void setRotation(float)
com.google.android.gms.maps.UiSettings: boolean isRotateGesturesEnabled()
io.sentry.SentryEvent: java.lang.String getModule(java.lang.String)
io.sentry.MainEventProcessor: void setSdk(io.sentry.SentryBaseEvent)
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: void addListener(java.util.concurrent.Executor,androidx.core.util.Consumer,kotlinx.coroutines.flow.Flow)
androidx.fragment.app.FragmentTransitionCompat21: boolean canHandle(java.lang.Object)
io.flutter.plugins.googlemaps.PolygonsController: void removePolygons(java.util.List)
io.sentry.Scope$SessionPair: io.sentry.Session getCurrent()
com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$Node find(java.lang.Object,boolean)
com.google.common.collect.RegularImmutableSet: java.lang.Object[] internalArray()
io.flutter.embedding.engine.loader.FlutterLoader: void ensureInitializationComplete(android.content.Context,java.lang.String[])
io.flutter.embedding.engine.FlutterJNI: android.graphics.Bitmap getBitmap()
kotlinx.coroutines.channels.ChannelResult$Companion: ChannelResult$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
kotlin.text.DelimitedRangesSequence: java.lang.CharSequence access$getInput$p(kotlin.text.DelimitedRangesSequence)
kotlin.sequences.TransformingSequence$iterator$1: void remove()
com.google.android.gms.maps.model.CircleOptions: com.google.android.gms.maps.model.CircleOptions clickable(boolean)
androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl: ExtensionEmbeddingBackend$EmbeddingCallbackImpl(androidx.window.embedding.ExtensionEmbeddingBackend)
kotlinx.coroutines.DispatcherExecutor: void execute(java.lang.Runnable)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding: FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding(android.app.Activity,androidx.lifecycle.Lifecycle)
com.google.common.collect.MapMakerInternalMap$Strength$2: com.google.common.base.Equivalence defaultEquivalence()
io.sentry.protocol.Device: java.util.Date getBootTime()
androidx.lifecycle.ReportFragment: void injectIfNeededIn(android.app.Activity)
io.sentry.NoOpSentryClient: io.sentry.protocol.SentryId captureEnvelope(io.sentry.SentryEnvelope,java.lang.Object)
com.google.android.gms.maps.MapView: void onSaveInstanceState(android.os.Bundle)
com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry: com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry copy(java.lang.ref.ReferenceQueue,com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry)
com.tekartik.sqflite.operation.BatchOperation: void handleErrorContinue(java.util.List)
com.google.gson.stream.JsonReader: char readEscapeCharacter()
kotlin.coroutines.jvm.internal.SuspendLambda: int getArity()
kotlin.collections.EmptyList: int hashCode()
io.flutter.embedding.android.FlutterSurfaceView: boolean access$002(io.flutter.embedding.android.FlutterSurfaceView,boolean)
kotlinx.coroutines.ExceptionsKt: java.util.concurrent.CancellationException CancellationException(java.lang.String,java.lang.Throwable)
io.flutter.plugins.googlemaps.GoogleMapBuilder: void setPadding(float,float,float,float)
com.google.android.gms.maps.zzn: zzn(com.google.android.gms.maps.GoogleMap,com.google.android.gms.maps.GoogleMap$OnCircleClickListener)
io.sentry.SentryEnvelope: SentryEnvelope(io.sentry.protocol.SentryId,io.sentry.protocol.SdkVersion,io.sentry.SentryEnvelopeItem)
com.google.android.gms.maps.model.BitmapDescriptorFactory: com.google.android.gms.maps.model.BitmapDescriptor defaultMarker(float)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$DefaultFlutterAssets: FlutterEngineConnectionRegistry$DefaultFlutterAssets(io.flutter.embedding.engine.loader.FlutterLoader)
androidx.window.embedding.SplitController: java.util.Set getSplitRules()
io.flutter.plugins.googlemaps.PolylineBuilder: void setWidth(float)
com.google.common.collect.MapMakerInternalMap$AbstractWeakKeyEntry: MapMakerInternalMap$AbstractWeakKeyEntry(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$InternalEntry)
kotlin.ranges.IntRange: IntRange(int,int)
com.google.android.gms.common.api.internal.BasePendingResult: void zal(com.google.android.gms.common.api.Result)
kotlinx.coroutines.internal.ThreadContextKt$findOne$1: kotlinx.coroutines.ThreadContextElement invoke(kotlinx.coroutines.ThreadContextElement,kotlin.coroutines.CoroutineContext$Element)
io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsEmoji(int)
io.sentry.Span: io.sentry.SpanStatus getStatus()
io.flutter.embedding.engine.FlutterEngine$1: void onEngineWillDestroy()
io.sentry.ITransaction: void setRequest(io.sentry.protocol.Request)
com.google.common.hash.LittleEndianByteArray$UnsafeByteArray: void putLongLittleEndian(byte[],int,long)
com.google.gson.reflect.TypeToken: com.google.gson.reflect.TypeToken get(java.lang.Class)
com.google.gson.internal.ConstructorConstructor$5: java.lang.Object construct()
com.google.android.gms.maps.GoogleMap: void setTrafficEnabled(boolean)
com.google.gson.internal.LinkedHashTreeMap: boolean equal(java.lang.Object,java.lang.Object)
io.sentry.SentryOptions$Proxy: void setUser(java.lang.String)
io.flutter.view.AccessibilityBridge: io.flutter.view.AccessibilityBridge$CustomAccessibilityAction getOrCreateAccessibilityAction(int)
kotlin.sequences.ConstrainedOnceSequence: ConstrainedOnceSequence(kotlin.sequences.Sequence)
kotlin.text.StringsKt__StringsKt: java.lang.String substringAfter(java.lang.String,char,java.lang.String)
io.sentry.NoOpHub: NoOpHub()
com.google.common.collect.Maps$EntryFunction$1: java.lang.Object apply(java.lang.Object)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: void install()
kotlinx.coroutines.channels.AbstractChannel$RemoveReceiveOnCancel: java.lang.Object invoke(java.lang.Object)
androidx.fragment.app.FragmentTransition$1: void run()
androidx.core.graphics.drawable.IconCompatParcelizer: IconCompatParcelizer()
androidx.fragment.app.FragmentManagerImpl: boolean isDestroyed()
com.google.common.util.concurrent.SettableFuture: boolean setException(java.lang.Throwable)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: void onSaveInstanceState(android.os.Bundle)
com.google.gson.internal.LinkedHashTreeMap: java.lang.Object writeReplace()
io.sentry.MainEventProcessor: io.sentry.SentryEvent process(io.sentry.SentryEvent,java.lang.Object)
io.sentry.SentryTracer: java.lang.String getName()
io.sentry.android.core.AppComponentsBreadcrumbsIntegration: void onLowMemory()
com.google.gson.Gson$2: java.lang.Float read(com.google.gson.stream.JsonReader)
androidx.collection.MapCollections$EntrySet: boolean removeAll(java.util.Collection)
androidx.fragment.app.FragmentActivity: void onDestroy()
androidx.collection.SparseArrayCompat: void clear()
androidx.collection.ArraySet: java.lang.String toString()
com.google.common.base.MoreObjects$ToStringHelper: com.google.common.base.MoreObjects$ToStringHelper add(java.lang.String,int)
kotlinx.coroutines.CancellableContinuationKt: kotlinx.coroutines.CancellableContinuationImpl getOrCreateCancellableContinuation(kotlin.coroutines.Continuation)
io.flutter.embedding.engine.FlutterJNI: void nativeImageHeaderCallback(long,int,int)
kotlinx.coroutines.DispatchedTaskKt: boolean isReusableMode(int)
androidx.core.app.CoreComponentFactory: android.content.ContentProvider instantiateProvider(java.lang.ClassLoader,java.lang.String)
com.tekartik.sqflite.SqflitePlugin: com.tekartik.sqflite.Database executeOrError(com.tekartik.sqflite.Database,io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
androidx.arch.core.internal.SafeIterableMap: java.util.Map$Entry eldest()
kotlinx.coroutines.android.HandlerContext: HandlerContext(android.os.Handler,java.lang.String)
io.sentry.cache.CacheStrategy: boolean isDirectoryValid()
androidx.versionedparcelable.VersionedParcelParcel: boolean readField(int)
io.sentry.UserFeedback: java.lang.String toString()
com.google.android.gms.maps.model.MarkerOptions: java.lang.String getSnippet()
androidx.window.layout.SidecarWindowBackend: void setWindowExtension(androidx.window.layout.ExtensionInterfaceCompat)
com.google.gson.internal.$Gson$Types: java.lang.Class getRawType(java.lang.reflect.Type)
com.google.common.hash.LittleEndianByteArray$UnsafeByteArray$3: LittleEndianByteArray$UnsafeByteArray$3()
com.google.common.reflect.TypeToken: TypeToken(java.lang.reflect.Type)
kotlin.io.CloseableKt: void closeFinally(java.io.Closeable,java.lang.Throwable)
com.google.common.reflect.TypeToken$TypeFilter: TypeToken$TypeFilter(java.lang.String,int,com.google.common.reflect.TypeToken$1)
io.sentry.Attachment: Attachment(java.lang.String)
com.google.android.gms.common.api.internal.GoogleApiManager: java.util.Map zat(com.google.android.gms.common.api.internal.GoogleApiManager)
com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment: java.lang.ref.ReferenceQueue access$400(com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment)
io.flutter.plugins.googlemaps.GoogleMapBuilder: void setTrafficEnabled(boolean)
io.sentry.NoOpHub: void setUser(io.sentry.protocol.User)
io.flutter.embedding.android.DrawableSplashScreen$DrawableSplashScreenView: void setSplashDrawable(android.graphics.drawable.Drawable,android.widget.ImageView$ScaleType)
io.sentry.Stack: int size()
io.sentry.adapters.ContextsDeserializerAdapter: ContextsDeserializerAdapter(io.sentry.SentryOptions)
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: java.lang.Long access$500(io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors,android.view.accessibility.AccessibilityNodeInfo,int)
com.google.android.gms.maps.CameraUpdateFactory: com.google.android.gms.maps.CameraUpdate zoomOut()
androidx.fragment.app.FragmentTransitionImpl$1: FragmentTransitionImpl$1(androidx.fragment.app.FragmentTransitionImpl,int,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)
io.flutter.embedding.engine.systemchannels.AccessibilityChannel: AccessibilityChannel(io.flutter.embedding.engine.dart.DartExecutor,io.flutter.embedding.engine.FlutterJNI)
kotlinx.coroutines.channels.AbstractChannel$RemoveReceiveOnCancel: void invoke(java.lang.Throwable)
io.flutter.embedding.engine.FlutterJNI: void removeEngineLifecycleListener(io.flutter.embedding.engine.FlutterEngine$EngineLifecycleListener)
com.google.android.gms.maps.model.LatLngBounds: LatLngBounds(com.google.android.gms.maps.model.LatLng,com.google.android.gms.maps.model.LatLng)
androidx.fragment.app.FragmentManagerImpl$StartEnterTransitionListener: void completeTransaction()
com.google.common.collect.Sets: java.util.HashSet newHashSet()
io.sentry.NoOpHub: void captureUserFeedback(io.sentry.UserFeedback)
kotlinx.coroutines.CancellableContinuationImpl: void callOnCancellation(kotlin.jvm.functions.Function1,java.lang.Throwable)
com.google.common.collect.MapMakerInternalMap: int rehash(int)
io.sentry.transport.NoOpTransport: void flush(long)
com.google.android.gms.dynamic.zzb: zzb(android.os.IBinder)
com.google.android.gms.common.api.internal.zach: zach(com.google.android.gms.common.api.internal.zai,int,com.google.android.gms.common.api.GoogleApi)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: void onSaveInstanceState(android.os.Bundle)
io.sentry.adapters.OrientationSerializerAdapter: com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,com.google.gson.JsonSerializationContext)
com.google.android.gms.signin.internal.zak: void writeToParcel(android.os.Parcel,int)
io.flutter.embedding.android.WindowInfoRepositoryCallbackAdapterWrapper: void addWindowLayoutInfoListener(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
com.google.android.gms.dynamite.zzb: java.lang.ClassLoader zza()
com.google.gson.internal.bind.util.ISO8601Utils: int parseInt(java.lang.String,int,int)
androidx.window.layout.SidecarAdapter$Companion: int getRawSidecarDevicePosture(androidx.window.sidecar.SidecarDeviceState)
io.sentry.protocol.Device: void setId(java.lang.String)
kotlin.text.StringsKt__StringNumberConversionsKt: java.lang.Long toLongOrNull(java.lang.String)
androidx.core.app.Person: java.lang.CharSequence getName()
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding: boolean onActivityResult(int,int,android.content.Intent)
com.google.gson.internal.bind.TypeAdapters$24: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
dev.fluttercommunity.plus.packageinfo.PackageInfoPlugin: void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher: void processRemaining(java.nio.ByteBuffer)
com.google.gson.internal.bind.JsonTreeWriter: com.google.gson.stream.JsonWriter value(java.lang.Boolean)
androidx.window.layout.WindowInfoTrackerImpl$Companion: WindowInfoTrackerImpl$Companion()
com.google.android.gms.common.internal.zzab: zzab()
io.sentry.SentryClient: void captureSession(io.sentry.Session,java.lang.Object)
io.sentry.protocol.OperatingSystem: void setName(java.lang.String)
androidx.arch.core.internal.FastSafeIterableMap: java.util.Map$Entry ceil(java.lang.Object)
com.google.common.hash.Hashing$ChecksumType$2: java.lang.Object get()
io.sentry.config.ClasspathPropertiesLoader: void $closeResource(java.lang.Throwable,java.lang.AutoCloseable)
io.sentry.adapters.SentryIdDeserializerAdapter: SentryIdDeserializerAdapter(io.sentry.SentryOptions)
io.flutter.plugins.googlemaps.MarkerBuilder: MarkerBuilder()
com.google.gson.stream.JsonReader: java.lang.String locationString()
com.google.gson.internal.reflect.UnsafeReflectionAccessor: UnsafeReflectionAccessor()
io.flutter.view.VsyncWaiter: io.flutter.view.VsyncWaiter getInstance(float,io.flutter.embedding.engine.FlutterJNI)
io.sentry.protocol.Request: void setHeaders(java.util.Map)
com.google.gson.internal.bind.TypeAdapters$27: TypeAdapters$27()
kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt$createCoroutineUnintercepted$$inlined$createCoroutineFromSuspendFunction$IntrinsicsKt__IntrinsicsJvmKt$4: IntrinsicsKt__IntrinsicsJvmKt$createCoroutineUnintercepted$$inlined$createCoroutineFromSuspendFunction$IntrinsicsKt__IntrinsicsJvmKt$4(kotlin.coroutines.Continuation,kotlin.coroutines.CoroutineContext,kotlin.jvm.functions.Function2,java.lang.Object)
io.sentry.protocol.SdkVersion: void setVersion(java.lang.String)
com.google.gson.JsonPrimitive: boolean isBoolean()
io.sentry.transport.QueuedThreadPoolExecutor: void afterExecute(java.lang.Runnable,java.lang.Throwable)
com.google.android.gms.internal.common.zzb: zzb(java.lang.String)
io.flutter.plugins.urllauncher.UrlLauncherPlugin: void onDetachedFromEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
io.flutter.embedding.engine.renderer.FlutterRenderer: io.flutter.embedding.engine.FlutterJNI access$200(io.flutter.embedding.engine.renderer.FlutterRenderer)
io.flutter.embedding.engine.renderer.FlutterRenderer: void markTextureFrameAvailable(long)
io.flutter.embedding.android.FlutterActivity: void onResume()
com.google.android.gms.common.wrappers.PackageManagerWrapper: java.lang.CharSequence getApplicationLabel(java.lang.String)
com.google.common.hash.LittleEndianByteArray$JavaLittleEndianBytes: com.google.common.hash.LittleEndianByteArray$JavaLittleEndianBytes[] values()
com.google.common.base.Predicates$ObjectPredicate: com.google.common.base.Predicates$ObjectPredicate[] values()
com.google.android.gms.common.internal.BaseGmsClient: java.lang.String getEndpointPackageName()
kotlinx.coroutines.DispatchedTask: DispatchedTask(int)
com.google.android.gms.maps.zzn: void zzb(com.google.android.gms.internal.maps.zzl)
io.sentry.DirectoryProcessor$SendCachedEnvelopeHint: DirectoryProcessor$SendCachedEnvelopeHint(long,io.sentry.ILogger)
com.google.gson.Gson: java.lang.Object fromJson(com.google.gson.JsonElement,java.lang.reflect.Type)
kotlinx.coroutines.CoroutineExceptionHandlerKt: java.lang.Throwable handlerException(java.lang.Throwable,java.lang.Throwable)
io.sentry.protocol.SentryStackFrame: void setPlatform(java.lang.String)
io.sentry.NoOpHub: void setLevel(io.sentry.SentryLevel)
kotlinx.coroutines.CancellableContinuationImpl: void completeResume(java.lang.Object)
io.flutter.view.AccessibilityBridge$SemanticsNode: int access$1400(io.flutter.view.AccessibilityBridge$SemanticsNode)
com.google.gson.JsonObject: int hashCode()
io.flutter.embedding.android.FlutterActivity: void onDestroy()
androidx.collection.MapCollections$KeySet: boolean addAll(java.util.Collection)
com.google.gson.internal.LinkedTreeMap$EntrySet$1: java.util.Map$Entry next()
io.sentry.Hub: void validateOptions(io.sentry.SentryOptions)
kotlinx.coroutines.EventLoopImplBase$DelayedTask: kotlinx.coroutines.internal.ThreadSafeHeap getHeap()
kotlin.text.StringsKt__StringsKt$splitToSequence$1: java.lang.Object invoke(java.lang.Object)
io.flutter.plugin.platform.PlatformPlugin$1: void setSystemUiOverlayStyle(io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle)
androidx.lifecycle.LiveData$ObserverWrapper: LiveData$ObserverWrapper(androidx.lifecycle.LiveData,androidx.lifecycle.Observer)
io.sentry.protocol.SentryStackFrame: java.util.Map getVars()
androidx.fragment.app.FragmentTransition: android.view.View getInEpicenterView(androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.lang.Object,boolean)
androidx.activity.ComponentActivity$3: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)
com.google.gson.JsonElement: boolean isJsonNull()
com.google.gson.JsonArray: void add(java.lang.Character)
com.google.android.gms.common.internal.safeparcel.SafeParcelReader: void ensureAtEnd(android.os.Parcel,int)
com.google.android.gms.common.api.internal.GoogleApiManager: long zab(com.google.android.gms.common.api.internal.GoogleApiManager)
androidx.activity.ImmLeaksCleaner: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)
io.sentry.android.core.DefaultAndroidEventProcessor: java.lang.Long getMemorySize(android.app.ActivityManager$MemoryInfo)
com.google.android.gms.internal.maps.zzae: void zzk(float)
io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler: java.lang.String getStackTrace(java.lang.Exception)
androidx.window.layout.WindowInfoTrackerImpl: androidx.window.layout.WindowBackend access$getWindowBackend$p(androidx.window.layout.WindowInfoTrackerImpl)
io.sentry.protocol.SentryException: io.sentry.protocol.SentryStackTrace getStacktrace()
com.google.gson.JsonArray: java.math.BigInteger getAsBigInteger()
com.google.gson.internal.LinkedHashTreeMap$Node: java.lang.Object getValue()
com.google.gson.internal.LinkedTreeMap: void rotateRight(com.google.gson.internal.LinkedTreeMap$Node)
kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: java.lang.String toString()
com.google.android.gms.maps.MapView: void onDestroy()
com.google.android.gms.common.internal.zzm: java.lang.Object[] newArray(int)
com.google.android.gms.maps.UiSettings: void setCompassEnabled(boolean)
androidx.fragment.app.FragmentController: FragmentController(androidx.fragment.app.FragmentHostCallback)
io.flutter.plugins.pathprovider.PathProviderPlugin: void setup(io.flutter.plugin.common.BinaryMessenger,android.content.Context)
com.google.common.util.concurrent.CycleDetectingLockFactory$Policies$2: void handlePotentialDeadlock(com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException)
io.flutter.embedding.engine.FlutterJNI: void nativeCleanupMessageData(long)
com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter: TypeAdapters$EnumTypeAdapter(java.lang.Class)
io.flutter.plugin.editing.ListenableEditingState: void notifyListener(io.flutter.plugin.editing.ListenableEditingState$EditingStateWatcher,boolean,boolean,boolean)
com.google.android.gms.internal.maps.zzae: float zzd()
io.flutter.embedding.engine.systemchannels.LifecycleChannel: LifecycleChannel(io.flutter.embedding.engine.dart.DartExecutor)
io.sentry.hints.Resettable: void reset()
com.google.android.gms.common.api.internal.zza: void run()
io.flutter.plugin.editing.ListenableEditingState: java.util.ArrayList extractBatchTextEditingDeltas()
com.google.android.gms.maps.zzag: void onStart()
io.sentry.android.core.AnrIntegration: void close()
androidx.fragment.app.FragmentManagerImpl: void executePostponedTransaction(java.util.ArrayList,java.util.ArrayList)
kotlinx.coroutines.EventLoopImplBase: void schedule(long,kotlinx.coroutines.EventLoopImplBase$DelayedTask)
com.google.android.gms.internal.maps.zzb: zzb(java.lang.String)
kotlin.collections.EmptySet: EmptySet()
androidx.window.embedding.SplitPlaceholderRule: SplitPlaceholderRule(java.util.Set,android.content.Intent,int,int,float,int,int,kotlin.jvm.internal.DefaultConstructorMarker)
com.google.common.hash.HashCode: java.lang.String toString()
io.sentry.SendFireAndForgetEnvelopeSender: SendFireAndForgetEnvelopeSender(io.sentry.SendCachedEnvelopeFireAndForgetIntegration$SendFireAndForgetDirPath)
androidx.fragment.app.FragmentController: androidx.fragment.app.Fragment findFragmentByWho(java.lang.String)
io.sentry.SentryClient: java.util.List filterForTransaction(java.util.List)
kotlinx.coroutines.internal.LockFreeLinkedListNode: java.lang.Object getNext()
androidx.arch.core.executor.DefaultTaskExecutor: void postToMainThread(java.lang.Runnable)
com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper: AbstractFuture$UnsafeAtomicHelper(com.google.common.util.concurrent.AbstractFuture$1)
com.google.android.gms.internal.maps.zzae: zzae(android.os.IBinder)
androidx.collection.ArraySet$1: int colIndexOfKey(java.lang.Object)
kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: CoroutineScheduler$WorkerState(java.lang.String,int)
com.google.android.gms.maps.model.PolygonOptions: boolean isClickable()
com.google.android.gms.common.internal.BaseGmsClient: android.accounts.Account getAccount()
com.google.gson.internal.LinkedTreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)
com.google.android.gms.maps.GoogleMap: com.google.android.gms.maps.model.CameraPosition getCameraPosition()
io.flutter.plugins.pathprovider.PathProviderPlugin: PathProviderPlugin()
com.google.android.gms.common.internal.BaseGmsClient: int getMinApkVersion()
androidx.window.embedding.SplitPairFilter: boolean matchesActivityIntentPair(android.app.Activity,android.content.Intent)
com.google.android.gms.common.api.Status: java.lang.String getStatusMessage()
androidx.collection.SimpleArrayMap: int indexOfValue(java.lang.Object)
io.flutter.embedding.android.KeyboardManager$PerEventCallbackBuilder: KeyboardManager$PerEventCallbackBuilder(io.flutter.embedding.android.KeyboardManager,android.view.KeyEvent)
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$15: SentryFlutterPlugin$initNativeSdk$2$15(io.sentry.android.core.SentryAndroidOptions)
io.flutter.embedding.android.AndroidTouchProcessor: boolean onTouchEvent(android.view.MotionEvent)
androidx.fragment.app.BackStackRecord: void executeOps()
kotlinx.coroutines.internal.OnUndeliveredElementKt$bindCancellationFun$1: OnUndeliveredElementKt$bindCancellationFun$1(kotlin.jvm.functions.Function1,java.lang.Object,kotlin.coroutines.CoroutineContext)
io.flutter.plugin.mouse.MouseCursorPlugin$1: MouseCursorPlugin$1(io.flutter.plugin.mouse.MouseCursorPlugin)
io.sentry.protocol.Mechanism: java.lang.Boolean isHandled()
com.google.common.base.Throwables: java.lang.reflect.Method getGetMethod()
io.sentry.cache.IEnvelopeCache: void discard(io.sentry.SentryEnvelope)
com.google.gson.FieldAttributes: java.lang.annotation.Annotation getAnnotation(java.lang.Class)
kotlinx.coroutines.scheduling.WorkQueue: void decrementIfBlocking(kotlinx.coroutines.scheduling.Task)
kotlinx.coroutines.internal.LockFreeTaskQueue: int getSize()
androidx.fragment.app.BackStackRecord: java.lang.String getName()
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: void detachFromActivityInternal()
androidx.fragment.app.FragmentTransitionCompat21: void removeTarget(java.lang.Object,android.view.View)
kotlin.collections.CollectionsKt__MutableCollectionsKt: boolean addAll(java.util.Collection,java.lang.Iterable)
io.sentry.android.core.DefaultAndroidEventProcessor: java.lang.String getDeviceId()
io.sentry.transport.RateLimiter: void updateRetryAfterLimits(java.lang.String,java.lang.String,int)
io.sentry.config.CompositePropertiesProvider: CompositePropertiesProvider(java.util.List)
io.sentry.SessionAdapter: boolean initAttrs(com.google.gson.stream.JsonWriter,boolean)
com.google.android.gms.maps.zzah: void createDelegate(com.google.android.gms.dynamic.OnDelegateCreatedListener)
io.flutter.embedding.engine.dart.DartExecutor: void executeDartEntrypoint(io.flutter.embedding.engine.dart.DartExecutor$DartEntrypoint,java.util.List)
com.google.android.gms.dynamic.zac: int zaa()
io.sentry.Sentry: void setLevel(io.sentry.SentryLevel)
io.sentry.SentryEvent: boolean isErrored()
com.javih.add2calendar.Add2CalendarPlugin: void registerWith(io.flutter.plugin.common.PluginRegistry$Registrar)
io.sentry.android.core.DefaultAndroidEventProcessor: void mergeUser(io.sentry.SentryBaseEvent)
com.google.android.gms.maps.model.Circle: boolean equals(java.lang.Object)
io.sentry.SentryEvent: void setModule(java.lang.String,java.lang.String)
androidx.fragment.app.FragmentContainer: FragmentContainer()
io.sentry.NoOpSpan: io.sentry.NoOpSpan getInstance()
com.google.gson.internal.bind.TypeAdapters$28: java.util.Locale read(com.google.gson.stream.JsonReader)
io.sentry.flutter.SentryFlutterPlugin: void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.embedding.android.FlutterActivity: void onStart()
kotlin.jvm.internal.CallableReference: kotlin.reflect.KDeclarationContainer getOwner()
com.google.common.collect.MapMakerInternalMap: void reclaimKey(com.google.common.collect.MapMakerInternalMap$InternalEntry)
com.google.common.base.Predicates$ObjectPredicate: Predicates$ObjectPredicate(java.lang.String,int,com.google.common.base.Predicates$1)
com.google.android.gms.dynamite.zzo: int zza(android.content.Context,java.lang.String)
io.sentry.android.core.LifecycleWatcher: void onStop(androidx.lifecycle.LifecycleOwner)
androidx.window.embedding.SplitInfo: int hashCode()
io.sentry.android.core.LifecycleWatcher: void onStart(androidx.lifecycle.LifecycleOwner)
io.flutter.embedding.android.FlutterImageView$SurfaceKind: io.flutter.embedding.android.FlutterImageView$SurfaceKind[] values()
io.flutter.plugins.googlemaps.TileOverlayBuilder: void setVisible(boolean)
com.tekartik.sqflite.SqflitePlugin: boolean execute(com.tekartik.sqflite.Database,com.tekartik.sqflite.operation.Operation)
androidx.window.layout.SidecarWindowBackend: androidx.window.layout.SidecarWindowBackend access$getGlobalInstance$cp()
androidx.window.embedding.EmbeddingCompat: void setEmbeddingCallback(androidx.window.embedding.EmbeddingInterfaceCompat$EmbeddingCallbackInterface)
io.sentry.android.ndk.NativeScope: void setTag(java.lang.String,java.lang.String)
io.sentry.SentryOptions: void setAttachServerName(boolean)
kotlinx.coroutines.JobSupport$Finishing: java.lang.Throwable getRootCause()
androidx.loader.app.LoaderManagerImpl$LoaderViewModel$1: androidx.lifecycle.ViewModel create(java.lang.Class)
androidx.collection.MapCollections$ValuesCollection: boolean addAll(java.util.Collection)
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory: java.util.Map getBoundFields(com.google.gson.Gson,com.google.gson.reflect.TypeToken,java.lang.Class)
com.google.android.gms.maps.model.Marker: void setTitle(java.lang.String)
com.google.gson.stream.JsonReader: void endArray()
kotlinx.coroutines.CoroutineContextKt: kotlinx.coroutines.UndispatchedCoroutine undispatchedCompletion(kotlin.coroutines.jvm.internal.CoroutineStackFrame)
androidx.lifecycle.ClassesInfoCache: void verifyAndPutHandler(java.util.Map,androidx.lifecycle.ClassesInfoCache$MethodReference,androidx.lifecycle.Lifecycle$Event,java.lang.Class)
io.sentry.SentryClient$SortBreadcrumbsByDate: SentryClient$SortBreadcrumbsByDate()
io.flutter.embedding.android.FlutterView: void setWindowInfoListenerDisplayFeatures(androidx.window.layout.WindowLayoutInfo)
com.google.gson.internal.bind.TypeAdapters$26$1: void write(com.google.gson.stream.JsonWriter,java.sql.Timestamp)
com.google.android.gms.common.api.GoogleApi: com.google.android.gms.tasks.Task doBestEffortWrite(com.google.android.gms.common.api.internal.TaskApiCall)
androidx.fragment.app.FragmentManagerImpl: androidx.fragment.app.Fragment findFragmentByWho(java.lang.String)
io.flutter.embedding.android.FlutterActivity: void onFlutterUiDisplayed()
io.flutter.plugins.googlemaps.PolylineBuilder: void setConsumeTapEvents(boolean)
com.google.android.gms.internal.maps.zzab: void zzq(int)
io.sentry.HubAdapter: io.sentry.SentryOptions getOptions()
androidx.fragment.app.FragmentTransitionImpl: void bfsAddViewChildren(java.util.List,android.view.View)
androidx.window.embedding.EmbeddingBackend: void registerRule(androidx.window.embedding.EmbeddingRule)
io.sentry.DiagnosticLogger: boolean isEnabled(io.sentry.SentryLevel)
io.sentry.android.core.ActivityLifecycleIntegration: void stopTracing(android.app.Activity,boolean)
io.flutter.embedding.android.FlutterSurfaceView$1: void surfaceDestroyed(android.view.SurfaceHolder)
com.google.android.gms.common.internal.safeparcel.SafeParcelReader: int readInt(android.os.Parcel,int)
com.google.android.gms.tasks.zzw: com.google.android.gms.tasks.Task addOnCompleteListener(com.google.android.gms.tasks.OnCompleteListener)
com.tekartik.sqflite.operation.BatchOperation$BatchOperationResult: void error(java.lang.String,java.lang.String,java.lang.Object)
com.google.common.collect.MapMakerInternalMap$Segment: void maybeClearReferenceQueues()
io.flutter.plugin.platform.PlatformViewFactory: io.flutter.plugin.common.MessageCodec getCreateArgsCodec()
io.sentry.transport.QueuedThreadPoolExecutor: QueuedThreadPoolExecutor(int,int,java.util.concurrent.ThreadFactory,java.util.concurrent.RejectedExecutionHandler,io.sentry.ILogger)
com.google.android.gms.common.internal.ClientSettings: com.google.android.gms.signin.SignInOptions zaa()
com.google.android.gms.common.api.internal.zabu: void zaf(com.google.android.gms.common.internal.IAccountAccessor,java.util.Set)
androidx.fragment.app.Fragment: void onCreate(android.os.Bundle)
com.google.android.gms.tasks.zzw: com.google.android.gms.tasks.Task addOnCompleteListener(java.util.concurrent.Executor,com.google.android.gms.tasks.OnCompleteListener)
io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler: void removeView(java.lang.Object[])
io.flutter.plugins.googlemaps.MarkerController: void setAlpha(float)
androidx.fragment.app.FragmentManagerImpl: androidx.fragment.app.FragmentTransaction beginTransaction()
io.flutter.plugins.googlemaps.Convert: java.util.Map toObjectMap(java.lang.Object)
com.google.android.gms.maps.internal.zzb: com.google.android.gms.dynamic.IObjectWrapper zoomTo(float)
kotlin.random.AbstractPlatformRandom: int nextBits(int)
io.sentry.android.core.ActivityLifecycleIntegration: void register(io.sentry.IHub,io.sentry.SentryOptions)
io.flutter.embedding.engine.FlutterJNI: void requestDartDeferredLibrary(int)
com.google.android.gms.common.internal.zzac: android.os.IBinder asBinder()
io.sentry.transport.NoOpTransportGate: io.sentry.transport.NoOpTransportGate getInstance()
androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: androidx.core.util.Consumer getCallback()
io.flutter.plugin.editing.TextInputPlugin: android.view.inputmethod.InputMethodManager getInputMethodManager()
com.google.android.gms.common.api.internal.BackgroundDetector: void onActivityStarted(android.app.Activity)
kotlin.internal.PlatformImplementations: kotlin.random.Random defaultPlatformRandom()
io.sentry.config.CompositePropertiesProvider: java.lang.String getProperty(java.lang.String)
io.flutter.plugin.platform.PlatformViewsController: io.flutter.embedding.engine.FlutterOverlaySurface createOverlaySurface(io.flutter.embedding.android.FlutterImageView)
com.google.android.gms.signin.internal.zai: zai(int,com.google.android.gms.common.internal.zat)
com.google.common.collect.MapMakerInternalMap$SafeToArraySet: MapMakerInternalMap$SafeToArraySet(com.google.common.collect.MapMakerInternalMap$1)
com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper: com.google.common.collect.MapMakerInternalMap$Strength valueStrength()
kotlinx.coroutines.CoroutineContextKt: kotlinx.coroutines.CoroutineDispatcher createDefaultDispatcher()
com.tekartik.sqflite.SqflitePlugin: void onDetachedFromEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
androidx.fragment.app.FragmentActivity: int allocateRequestIndex(androidx.fragment.app.Fragment)
io.sentry.protocol.App: void setAppName(java.lang.String)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: void updateSystemUiOverlays()
io.sentry.IHub: void flush(long)
androidx.fragment.app.FragmentTransition: java.lang.Object getExitTransition(androidx.fragment.app.FragmentTransitionImpl,androidx.fragment.app.Fragment,boolean)
kotlin.random.jdk8.PlatformThreadLocalRandom: java.util.Random getImpl()
com.google.common.collect.ImmutableSet: boolean access$000(int,int)
com.tekartik.sqflite.SqlCommand: java.lang.String[] getQuerySqlArguments(java.util.List)
kotlin.text.CharsKt__CharJVMKt: int digitOf(char,int)
kotlinx.coroutines.CoroutineDispatcher: java.lang.String toString()
com.google.gson.stream.JsonReader: boolean hasNext()
com.google.gson.internal.LinkedHashTreeMap$KeySet$1: java.lang.Object next()
kotlin.collections.EmptySet: boolean add(java.lang.Object)
io.sentry.ISpan: io.sentry.SpanStatus getStatus()
kotlinx.coroutines.internal.LockFreeLinkedListNode: kotlinx.coroutines.internal.LockFreeLinkedListNode findPrevNonRemoved(kotlinx.coroutines.internal.LockFreeLinkedListNode)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView: FlutterMutatorView(android.content.Context,float,io.flutter.embedding.android.AndroidTouchProcessor)
io.sentry.flutter.R$integer: R$integer()
io.sentry.protocol.Request: java.util.Map getEnvs()
kotlin.collections.EmptyList: int size()
com.tekartik.sqflite.Database: void openReadOnly()
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: void pushClipRRect(int,int,int,int,float[])
com.google.gson.internal.bind.TypeAdapters$5: java.lang.Number read(com.google.gson.stream.JsonReader)
com.google.android.gms.common.api.Status: java.lang.String zza()
com.google.android.gms.common.api.internal.zzb: com.google.android.gms.common.api.internal.zzb zzc(android.app.Activity)
androidx.collection.MapCollections$KeySet: void clear()
androidx.fragment.app.FragmentTransition: void calculatePopFragments(androidx.fragment.app.BackStackRecord,android.util.SparseArray,boolean)
com.google.android.gms.common.api.internal.GoogleApiManager: com.google.android.gms.common.api.Status zai(com.google.android.gms.common.api.internal.ApiKey,com.google.android.gms.common.ConnectionResult)
io.flutter.plugin.editing.ListenableEditingState$1: android.text.Editable getEditable()
com.google.android.gms.common.api.internal.zzb: android.os.Bundle zzb(com.google.android.gms.common.api.internal.zzb)
kotlinx.coroutines.JobSupport: void initParentJob(kotlinx.coroutines.Job)
com.google.android.gms.dynamic.ObjectWrapper: java.lang.Object unwrap(com.google.android.gms.dynamic.IObjectWrapper)
com.google.android.gms.common.api.internal.zabx: void zab()
com.google.common.base.Preconditions: void checkState(boolean,java.lang.String,java.lang.Object)
androidx.fragment.app.FragmentManagerImpl$6: FragmentManagerImpl$6(androidx.fragment.app.FragmentManagerImpl)
com.google.gson.internal.bind.util.ISO8601Utils: java.lang.String format(java.util.Date)
io.sentry.HostnameCache: void updateCache()
kotlinx.coroutines.channels.ArrayChannel: java.lang.Object offerInternal(java.lang.Object)
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$3: java.lang.Object invoke(java.lang.Object)
androidx.window.embedding.EmbeddingTranslatingCallback: EmbeddingTranslatingCallback(androidx.window.embedding.EmbeddingInterfaceCompat$EmbeddingCallbackInterface,androidx.window.embedding.EmbeddingAdapter)
com.google.android.gms.common.internal.zal: int zab(android.content.Context,com.google.android.gms.common.api.Api$Client)
io.flutter.embedding.engine.systemchannels.TextInputChannel: void unspecifiedAction(int)
kotlin.collections.ArraysKt___ArraysKt: char single(char[])
androidx.fragment.app.Fragment: android.content.Context requireContext()
androidx.core.app.Person: java.lang.String getKey()
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: ShimRegistrar(java.lang.String,java.util.Map)
com.tekartik.sqflite.SqflitePlugin: boolean executeOrError(com.tekartik.sqflite.Database,com.tekartik.sqflite.operation.Operation)
androidx.fragment.app.Fragment$4: boolean onHasView()
io.sentry.SentryClient: io.sentry.Session updateSessionData(io.sentry.SentryEvent,java.lang.Object,io.sentry.Scope)
com.google.gson.internal.LazilyParsedNumber: float floatValue()
com.google.common.collect.ImmutableList$SubList: int internalArrayStart()
com.google.gson.stream.JsonReader: void close()
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$13: SentryFlutterPlugin$initNativeSdk$2$13(io.sentry.android.core.SentryAndroidOptions)
io.sentry.SentryOptions: void setDist(java.lang.String)
kotlin.sequences.SequencesKt__SequencesKt: kotlin.sequences.Sequence constrainOnce(kotlin.sequences.Sequence)
com.google.android.gms.maps.GoogleMap: void resetMinMaxZoomPreference()
androidx.fragment.app.Fragment: void setAnimatingAway(android.view.View)
com.google.gson.GsonBuilder: com.google.gson.GsonBuilder setFieldNamingPolicy(com.google.gson.FieldNamingPolicy)
com.google.gson.internal.PreJava9DateFormatProvider: java.text.DateFormat getUSDateTimeFormat(int,int)
io.flutter.embedding.android.FlutterTextureView: void detachFromRenderer()
com.google.common.collect.MapMakerInternalMap$1: com.google.common.collect.MapMakerInternalMap$WeakValueReference copyFor(java.lang.ref.ReferenceQueue,com.google.common.collect.MapMakerInternalMap$InternalEntry)
io.flutter.embedding.android.FlutterImageView: void logW(java.lang.String,java.lang.Object[])
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.String access$6000(io.flutter.view.AccessibilityBridge$SemanticsNode)
com.google.android.gms.auth.api.signin.GoogleSignInAccount: boolean equals(java.lang.Object)
com.google.common.reflect.Types$JavaVersion: java.lang.reflect.Type usedInGenericType(java.lang.reflect.Type)
com.google.android.gms.dynamic.zae: zae(android.content.Context,android.content.Intent)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: boolean isAttachedToService()
com.google.android.gms.common.util.PlatformVersion: boolean isAtLeastQ()
io.sentry.SentryEnvelopeItemHeaderAdapter: SentryEnvelopeItemHeaderAdapter()
io.sentry.android.core.EnvelopeFileObserverIntegration: EnvelopeFileObserverIntegration()
kotlinx.coroutines.internal.LockFreeLinkedListNode: void finishAdd(kotlinx.coroutines.internal.LockFreeLinkedListNode)
kotlinx.coroutines.scheduling.WorkQueue: void offloadAllWorkTo(kotlinx.coroutines.scheduling.GlobalQueue)
com.google.android.gms.common.wrappers.PackageManagerWrapper: PackageManagerWrapper(android.content.Context)
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.PlatformChannel getPlatformChannel()
com.google.gson.internal.LinkedTreeMap$Node: LinkedTreeMap$Node(com.google.gson.internal.LinkedTreeMap$Node,java.lang.Object,com.google.gson.internal.LinkedTreeMap$Node,com.google.gson.internal.LinkedTreeMap$Node)
io.sentry.HubAdapter: io.sentry.protocol.SentryId captureEnvelope(io.sentry.SentryEnvelope,java.lang.Object)
io.flutter.plugin.editing.TextInputPlugin: io.flutter.plugin.editing.TextInputPlugin$InputTarget access$100(io.flutter.plugin.editing.TextInputPlugin)
io.flutter.plugins.googlemaps.CirclesController: void setGoogleMap(com.google.android.gms.maps.GoogleMap)
io.flutter.view.AccessibilityBridge$SemanticsNode: int access$000(io.flutter.view.AccessibilityBridge$SemanticsNode)
kotlin.coroutines.jvm.internal.BaseContinuationImpl: kotlin.coroutines.jvm.internal.CoroutineStackFrame getCallerFrame()
com.google.android.gms.common.api.internal.GoogleApiManager: boolean zaF()
com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper: com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry newEntry(com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry)
androidx.fragment.app.FragmentTransitionCompat21: java.lang.Object wrapTransitionInSet(java.lang.Object)
androidx.window.embedding.ActivityStack: boolean contains(android.app.Activity)
io.flutter.plugins.googlemaps.GoogleMapsPlugin: void onDetachedFromActivity()
com.google.android.gms.common.util.PlatformVersion: boolean isAtLeastJellyBean()
com.google.common.collect.MapMakerInternalMap$EntrySet: void clear()
io.sentry.adapters.TimeZoneSerializerAdapter: com.google.gson.JsonElement serialize(java.util.TimeZone,java.lang.reflect.Type,com.google.gson.JsonSerializationContext)
com.google.gson.stream.JsonWriter: void string(java.lang.String)
kotlinx.coroutines.internal.LockFreeLinkedListHead: LockFreeLinkedListHead()
io.flutter.plugin.common.JSONMethodCodec: java.lang.Object unwrapNull(java.lang.Object)
io.sentry.SentryValues: SentryValues(java.util.List)
androidx.collection.MapCollections$MapIterator: void remove()
com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableList asList()
io.sentry.Sentry: io.sentry.protocol.SentryId captureException(java.lang.Throwable,java.lang.Object)
io.flutter.embedding.engine.systemchannels.MouseCursorChannel$1: MouseCursorChannel$1(io.flutter.embedding.engine.systemchannels.MouseCursorChannel)
com.google.android.gms.common.GoogleApiAvailability: void zad(android.app.Activity,android.app.Dialog,java.lang.String,android.content.DialogInterface$OnCancelListener)
com.google.android.gms.maps.model.Polyline: void setStartCap(com.google.android.gms.maps.model.Cap)
com.google.gson.internal.bind.TypeAdapters$32: java.lang.String toString()
io.sentry.SentryOptions: java.lang.Boolean getDebug()
io.sentry.android.core.LifecycleWatcher: void access$000(io.sentry.android.core.LifecycleWatcher,java.lang.String)
io.sentry.protocol.App: java.lang.String getAppBuild()
com.google.gson.reflect.TypeToken: boolean isAssignableFrom(java.lang.Class)
com.tekartik.sqflite.SqflitePlugin: boolean access$100(com.tekartik.sqflite.SqflitePlugin,com.tekartik.sqflite.Database,com.tekartik.sqflite.operation.Operation)
io.sentry.SentryTraceHeader: SentryTraceHeader(io.sentry.protocol.SentryId,io.sentry.SpanId,java.lang.Boolean)
io.sentry.config.ClasspathPropertiesLoader: ClasspathPropertiesLoader(java.lang.String,java.lang.ClassLoader,io.sentry.ILogger)
com.google.common.collect.MapMakerInternalMap$1: com.google.common.collect.MapMakerInternalMap$WeakValueReference copyFor(java.lang.ref.ReferenceQueue,com.google.common.collect.MapMakerInternalMap$DummyInternalEntry)
com.google.gson.internal.LinkedHashTreeMap$Node: int hashCode()
io.sentry.android.core.IDebugImagesLoader: java.util.List loadDebugImages()
io.sentry.android.core.AndroidOptionsInitializer: void init(io.sentry.android.core.SentryAndroidOptions,android.content.Context)
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$8: void invoke(long)
kotlin.collections.ArraysKt___ArraysJvmKt: java.lang.Object[] copyInto$default(java.lang.Object[],java.lang.Object[],int,int,int,int,java.lang.Object)
io.sentry.DateUtils$2: java.lang.Object initialValue()
androidx.window.layout.WindowInfoTrackerImpl: WindowInfoTrackerImpl(androidx.window.layout.WindowMetricsCalculator,androidx.window.layout.WindowBackend)
io.flutter.embedding.engine.systemchannels.KeyEventChannel: void sendFlutterKeyEvent(io.flutter.embedding.engine.systemchannels.KeyEventChannel$FlutterKeyEvent,boolean,io.flutter.embedding.engine.systemchannels.KeyEventChannel$EventResponseHandler)
io.sentry.NoOpSpan: io.sentry.ISpan startChild(java.lang.String)
io.flutter.embedding.android.FlutterActivity: java.lang.String getDartEntrypointFunctionName()
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding: void onNewIntent(android.content.Intent)
kotlinx.coroutines.ExecutorCoroutineDispatcherImpl: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)
com.google.gson.Gson: void toJson(java.lang.Object,java.lang.reflect.Type,com.google.gson.stream.JsonWriter)
kotlinx.coroutines.DebugStringsKt: java.lang.String getClassSimpleName(java.lang.Object)
io.sentry.SentryOptions: java.util.List getScopeObservers()
com.google.gson.internal.ConstructorConstructor$6: java.lang.Object construct()
kotlin.jvm.internal.ClassReference: java.lang.Class getJClass()
androidx.window.core.Bounds: int getHeight()
androidx.core.app.NotificationCompat$BigTextStyle: void addCompatExtras(android.os.Bundle)
io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry$ShimRegistrarAggregate: ShimPluginRegistry$ShimRegistrarAggregate()
androidx.fragment.app.FragmentManagerImpl: void dispatchResume()
com.google.android.gms.common.internal.BaseGmsClient: com.google.android.gms.common.ConnectionResult zza(com.google.android.gms.common.internal.BaseGmsClient)
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: SurfaceTextureWrapper(android.graphics.SurfaceTexture)
androidx.fragment.app.BackStackRecord: void doAddOp(int,androidx.fragment.app.Fragment,java.lang.String,int)
kotlin.jvm.internal.FunctionReference: FunctionReference(int)
io.flutter.plugin.platform.PlatformViewsController: io.flutter.plugin.editing.TextInputPlugin access$1000(io.flutter.plugin.platform.PlatformViewsController)
com.google.android.gms.maps.internal.zzb: com.google.android.gms.dynamic.IObjectWrapper newLatLngBounds(com.google.android.gms.maps.model.LatLngBounds,int)
io.sentry.android.core.BuildConfig: BuildConfig()
io.sentry.SessionAdapter: io.sentry.Session read(com.google.gson.stream.JsonReader)
com.google.gson.stream.JsonWriter: void close()
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode fromValue(java.lang.String)
com.google.android.gms.maps.internal.zzb: com.google.android.gms.dynamic.IObjectWrapper scrollBy(float,float)
androidx.lifecycle.LiveData$1: void run()
com.google.android.gms.common.internal.GmsClient: java.util.Set getScopes()
io.flutter.embedding.android.FlutterActivity: android.content.Context getContext()
androidx.fragment.app.FragmentManagerImpl: void handleOnBackPressed()
io.flutter.plugin.editing.TextInputPlugin: void notifyValueChanged(java.lang.String)
kotlinx.coroutines.EventLoop: void incrementUseCount(boolean)
io.sentry.SentryEnvelopeItem$CachedItem: byte[] orEmptyArray(byte[])
io.flutter.embedding.engine.FlutterJNI: void dispatchPointerDataPacket(java.nio.ByteBuffer,int)
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.RestorationChannel access$200(io.flutter.embedding.engine.FlutterEngine)
com.google.android.gms.tasks.zzw: void zzb(java.lang.Object)
com.google.android.gms.common.api.internal.BasePendingResult: void forceFailureUnlessReady(com.google.android.gms.common.api.Status)
io.sentry.UncaughtExceptionHandlerIntegration: UncaughtExceptionHandlerIntegration()
com.google.gson.JsonIOException: JsonIOException(java.lang.String)
com.google.android.gms.common.internal.BaseGmsClient: android.os.Bundle getGetServiceRequestExtraArgs()
androidx.fragment.app.FragmentViewLifecycleOwner: void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event)
com.google.android.gms.common.wrappers.PackageManagerWrapper: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)
kotlin.collections.EmptyMap: boolean containsValue(java.lang.Object)
io.flutter.plugin.localization.LocalizationPlugin: java.util.Locale localeFromString(java.lang.String)
kotlinx.coroutines.android.HandlerContext: kotlinx.coroutines.MainCoroutineDispatcher getImmediate()
io.flutter.plugin.common.JSONMethodCodec: java.nio.ByteBuffer encodeErrorEnvelope(java.lang.String,java.lang.String,java.lang.Object)
androidx.arch.core.executor.TaskExecutor: TaskExecutor()
com.google.gson.internal.LinkedHashTreeMap: java.util.Set keySet()
com.google.android.gms.common.GoogleApiAvailabilityLight: android.app.PendingIntent getErrorResolutionPendingIntent(android.content.Context,int,int)
io.sentry.IHub: io.sentry.protocol.SentryId captureMessage(java.lang.String,io.sentry.SentryLevel)
com.google.gson.JsonObject: com.google.gson.JsonElement get(java.lang.String)
io.flutter.plugin.platform.PlatformView: void onFlutterViewDetached()
androidx.core.graphics.drawable.IconCompat: IconCompat(int)
kotlinx.coroutines.internal.FastServiceLoader: java.util.List loadMainDispatcherFactory$kotlinx_coroutines_core()
io.flutter.plugin.common.BasicMessageChannel: void send(java.lang.Object)
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean hadAction(io.flutter.view.AccessibilityBridge$Action)
kotlin.UninitializedPropertyAccessException: UninitializedPropertyAccessException()
com.google.common.reflect.TypeToken: boolean equals(java.lang.Object)
com.google.gson.internal.bind.TypeAdapters$28: TypeAdapters$28()
com.google.gson.JsonArray: java.math.BigDecimal getAsBigDecimal()
io.sentry.SentryTracer: void finish(io.sentry.SpanStatus)
androidx.window.core.Version$bigInteger$2: java.lang.Object invoke()
io.sentry.flutter.R$layout: R$layout()
io.sentry.SentryBaseEvent: void setBreadcrumbs(java.util.List)
androidx.versionedparcelable.VersionedParcelParcel: void closeField()
kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt$createCoroutineUnintercepted$$inlined$createCoroutineFromSuspendFunction$IntrinsicsKt__IntrinsicsJvmKt$2: java.lang.Object invokeSuspend(java.lang.Object)
com.google.android.gms.common.internal.zzj: zzj(android.os.Bundle,com.google.android.gms.common.Feature[],int,com.google.android.gms.common.internal.ConnectionTelemetryConfiguration)
kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object tryResume(java.lang.Object,java.lang.Object,kotlin.jvm.functions.Function1)
androidx.window.embedding.SplitController: SplitController(kotlin.jvm.internal.DefaultConstructorMarker)
androidx.lifecycle.ProcessLifecycleOwner: androidx.lifecycle.Lifecycle getLifecycle()
kotlinx.coroutines.CancellableContinuationImpl: void resumeImpl(java.lang.Object,int,kotlin.jvm.functions.Function1)
io.sentry.android.ndk.NativeScope: void nativeAddBreadcrumb(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper: void setValue(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object)
io.sentry.android.core.DefaultAndroidEventProcessor: java.lang.Long getUnusedInternalStorage(android.os.StatFs)
io.flutter.view.AccessibilityBridge: android.view.accessibility.AccessibilityManager access$900(io.flutter.view.AccessibilityBridge)
io.sentry.SpanContext: io.sentry.protocol.SentryId getTraceId()
io.sentry.android.core.LifecycleWatcher: java.util.concurrent.atomic.AtomicBoolean isRunningSession()
com.google.android.gms.maps.CameraUpdateFactory: void zza(com.google.android.gms.maps.internal.ICameraUpdateFactoryDelegate)
com.google.android.gms.signin.internal.SignInClientImpl: SignInClientImpl(android.content.Context,android.os.Looper,boolean,com.google.android.gms.common.internal.ClientSettings,android.os.Bundle,com.google.android.gms.common.api.GoogleApiClient$ConnectionCallbacks,com.google.android.gms.common.api.GoogleApiClient$OnConnectionFailedListener)
com.google.android.gms.common.internal.safeparcel.SafeParcelReader: void zzb(android.os.Parcel,int,int)
androidx.window.layout.WindowMetricsCalculator$Companion$reset$1: androidx.window.layout.WindowMetricsCalculator invoke(androidx.window.layout.WindowMetricsCalculator)
kotlinx.coroutines.ChildContinuation: java.lang.Object invoke(java.lang.Object)
com.google.gson.internal.ConstructorConstructor$13: ConstructorConstructor$13(com.google.gson.internal.ConstructorConstructor)
com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper: com.google.common.collect.MapMakerInternalMap$InternalEntry newEntry(com.google.common.collect.MapMakerInternalMap$Segment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$InternalEntry)
io.sentry.transport.HttpConnection: io.sentry.transport.TransportResult readAndLog(java.net.HttpURLConnection)
io.flutter.view.AccessibilityBridge: void updateSemantics(java.nio.ByteBuffer,java.lang.String[],java.nio.ByteBuffer[])
com.google.gson.internal.ConstructorConstructor$10: java.lang.Object construct()
androidx.window.layout.SidecarWindowBackend$Companion: void resetInstance()
io.flutter.embedding.engine.FlutterJNI$Factory: FlutterJNI$Factory()
androidx.window.layout.SidecarWindowBackend$Companion: androidx.window.layout.ExtensionInterfaceCompat initAndVerifyExtension(android.content.Context)
com.google.android.gms.maps.model.TileOverlay: void setTransparency(float)
kotlin.collections.CollectionsKt___CollectionsKt: java.lang.Comparable minOrNull(java.lang.Iterable)
io.sentry.adapters.MapAdapter: MapAdapter()
com.google.common.collect.Maps$EntryFunction$1: Maps$EntryFunction$1(java.lang.String,int)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$InsetsListener: ImeSyncDeferringInsetsCallback$InsetsListener(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
com.google.android.gms.maps.UiSettings: void setZoomControlsEnabled(boolean)
com.google.android.gms.common.api.internal.LifecycleCallback: com.google.android.gms.common.api.internal.LifecycleFragment getChimeraLifecycleFragmentImpl(com.google.android.gms.common.api.internal.LifecycleActivity)
com.google.android.gms.maps.model.CircleOptions: com.google.android.gms.maps.model.CircleOptions visible(boolean)
io.sentry.Session$State: Session$State(java.lang.String,int)
com.google.gson.Gson$1: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
io.flutter.plugin.common.EventChannel: EventChannel(io.flutter.plugin.common.BinaryMessenger,java.lang.String,io.flutter.plugin.common.MethodCodec)
com.google.gson.internal.bind.TypeAdapters$13: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
io.sentry.android.core.EnvelopeFileObserverIntegration: io.sentry.android.core.EnvelopeFileObserverIntegration getOutboxFileObserver()
io.flutter.view.AccessibilityBridge: void access$1300(io.flutter.view.AccessibilityBridge)
com.google.android.gms.internal.maps.zza: android.os.Parcel zza()
com.google.gson.internal.Streams$AppendableWriter: void close()
com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry: void setValue(java.lang.Object)
com.google.android.gms.maps.model.CircleOptions: java.util.List getStrokePattern()
io.sentry.protocol.SentryStackFrame: void setAbsPath(java.lang.String)
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class,com.google.gson.TypeAdapter)
io.sentry.android.core.SentryAndroidOptions: void setEnableActivityLifecycleBreadcrumbs(boolean)
io.flutter.view.AccessibilityBridge$AccessibilityFeature: io.flutter.view.AccessibilityBridge$AccessibilityFeature valueOf(java.lang.String)
androidx.core.view.WindowInsetsControllerCompat$Impl23: WindowInsetsControllerCompat$Impl23(android.view.Window,android.view.View)
com.tekartik.sqflite.operation.BatchOperation: com.tekartik.sqflite.operation.OperationResult getOperationResult()
androidx.fragment.app.Fragment: boolean performContextItemSelected(android.view.MenuItem)
com.google.android.gms.common.internal.ClientSettings$Builder: com.google.android.gms.common.internal.ClientSettings build()
androidx.core.app.NotificationCompatJellybean: android.os.Bundle toBundle(androidx.core.app.RemoteInput)
io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding: FlutterPlugin$FlutterPluginBinding(android.content.Context,io.flutter.embedding.engine.FlutterEngine,io.flutter.plugin.common.BinaryMessenger,io.flutter.view.TextureRegistry,io.flutter.plugin.platform.PlatformViewRegistry,io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterAssets)
io.sentry.ISpan: io.sentry.ISpan startChild(java.lang.String)
androidx.window.core.Version: java.lang.String toString()
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: boolean isAttachedToContentProvider()
androidx.fragment.app.Fragment: void onHiddenChanged(boolean)
com.google.gson.internal.LinkedTreeMap$EntrySet: void clear()
com.google.common.collect.AbstractIndexedListIterator: java.lang.Object next()
io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler: void onListen(java.lang.Object,io.flutter.plugin.common.BinaryMessenger$BinaryReply)
androidx.window.layout.HardwareFoldingFeature: androidx.window.layout.FoldingFeature$OcclusionType getOcclusionType()
io.flutter.embedding.engine.dart.DartExecutor$DefaultBinaryMessenger: void setMessageHandler(java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler)
androidx.collection.SimpleArrayMap: java.lang.Object replace(java.lang.Object,java.lang.Object)
io.sentry.android.core.SentryAndroidOptions: boolean isAnrEnabled()
com.google.android.gms.common.api.internal.BackgroundDetector: void onActivityCreated(android.app.Activity,android.os.Bundle)
io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry$ShimRegistrarAggregate: void onDetachedFromActivity()
androidx.window.embedding.SplitPlaceholderRule: boolean equals(java.lang.Object)
com.google.android.gms.common.api.internal.NonGmsServiceBrokerClient: void getRemoteService(com.google.android.gms.common.internal.IAccountAccessor,java.util.Set)
com.google.android.gms.common.internal.zaab: java.lang.Object createFromParcel(android.os.Parcel)
io.flutter.plugins.googlemaps.PolygonsController: java.lang.String getPolygonId(java.lang.Object)
io.sentry.android.core.SentryInitProvider: void shutdown()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.View access$602(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,android.view.View)
kotlin.collections.EmptyIterator: EmptyIterator()
kotlin.ranges.IntRange: boolean equals(java.lang.Object)
androidx.collection.MapCollections$EntrySet: int hashCode()
com.google.common.collect.MapMaker: MapMaker()
kotlin.coroutines.intrinsics.CoroutineSingletons: CoroutineSingletons(java.lang.String,int)
com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper: boolean casListeners(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Listener,com.google.common.util.concurrent.AbstractFuture$Listener)
com.google.common.collect.Lists: int indexOfImpl(java.util.List,java.lang.Object)
com.google.gson.internal.LinkedHashTreeMap: java.lang.Object get(java.lang.Object)
androidx.fragment.app.FragmentState$1: androidx.fragment.app.FragmentState createFromParcel(android.os.Parcel)
io.sentry.transport.NoOpTransport: NoOpTransport()
com.google.android.gms.maps.model.zzm: java.lang.Object createFromParcel(android.os.Parcel)
androidx.fragment.app.FragmentManagerImpl$StartEnterTransitionListener: void cancelTransaction()
androidx.window.embedding.SplitController$Companion: SplitController$Companion()
io.flutter.plugin.platform.PlatformViewsController: void unlockInputConnection(io.flutter.plugin.platform.VirtualDisplayController)
io.sentry.Hub: void clearBreadcrumbs()
androidx.versionedparcelable.VersionedParcelParcel: void writeByteArray(byte[])
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$16: java.lang.Object invoke(java.lang.Object)
kotlin.text.StringsKt__StringsJVMKt: boolean startsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)
androidx.window.layout.SidecarWindowBackend: void registerLayoutChangeCallback(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
io.flutter.plugins.sharedpreferences.MethodCallHandlerImpl$1: void run()
com.google.android.gms.common.api.Status: Status(com.google.android.gms.common.ConnectionResult,java.lang.String)
io.flutter.Log: void d(java.lang.String,java.lang.String)
androidx.lifecycle.LiveData: boolean hasActiveObservers()
com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter value(boolean)
androidx.window.layout.SidecarCompat$Companion: android.os.IBinder getActivityWindowToken$window_release(android.app.Activity)
io.sentry.protocol.Contexts: io.sentry.SpanContext getTrace()
com.google.android.gms.internal.maps.zzg: zzg(android.os.IBinder)
io.sentry.protocol.SentryStackFrame: java.lang.Boolean isInApp()
com.google.android.gms.internal.maps.zzae: void zzj(boolean)
io.sentry.NoOpSerializer: io.sentry.NoOpSerializer getInstance()
com.google.android.gms.common.api.internal.zabu: void zad(com.google.android.gms.common.api.internal.zabu)
kotlinx.coroutines.internal.ThreadState: void append(kotlinx.coroutines.ThreadContextElement,java.lang.Object)
io.sentry.SentryEnvelope: SentryEnvelope(io.sentry.protocol.SentryId,io.sentry.protocol.SdkVersion,java.lang.Iterable)
io.flutter.FlutterInjector$Builder: void fillDefaults()
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin: void setupChannel(io.flutter.plugin.common.BinaryMessenger,android.content.Context)
com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment: void maybeDrainReferenceQueues()
io.flutter.plugin.platform.PlatformView: void onFlutterViewAttached(android.view.View)
com.google.gson.internal.bind.JsonTreeReader: java.lang.String getPath()
io.sentry.protocol.Device: void setSimulator(java.lang.Boolean)
androidx.core.util.LogWriter: void flush()
com.google.gson.internal.Excluder: boolean isValidUntil(com.google.gson.annotations.Until)
com.google.gson.internal.bind.TypeAdapters$25: java.util.Currency read(com.google.gson.stream.JsonReader)
io.sentry.protocol.SentryStackTrace: void setFrames(java.util.List)
com.google.android.gms.signin.SignInOptions: SignInOptions(boolean,boolean,java.lang.String,boolean,java.lang.String,java.lang.String,boolean,java.lang.Long,java.lang.Long,com.google.android.gms.signin.zaf)
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$1: void synchronizeToNativeViewHierarchy(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
com.google.android.gms.maps.internal.zzg: void setOnMarkerDragListener(com.google.android.gms.maps.internal.zzav)
com.google.gson.internal.bind.JsonTreeReader: com.google.gson.stream.JsonToken peek()
com.google.gson.Gson: com.google.gson.JsonElement toJsonTree(java.lang.Object,java.lang.reflect.Type)
io.sentry.protocol.SentryId: java.lang.String toString()
io.flutter.plugins.googlemaps.GoogleMapController: void setGoogleMapListener(io.flutter.plugins.googlemaps.GoogleMapListener)
androidx.window.embedding.ActivityStack: java.util.List getActivities$window_release()
kotlin.internal.jdk7.JDK7PlatformImplementations$ReflectSdkVersion: JDK7PlatformImplementations$ReflectSdkVersion()
com.tekartik.sqflite.SqflitePlugin: java.lang.Object cursorValue(android.database.Cursor,int)
kotlin.collections.EmptyList: java.lang.Object[] toArray()
com.google.android.gms.common.internal.BaseGmsClient$LegacyClientCallbackAdapter: void onReportServiceBinding(com.google.android.gms.common.ConnectionResult)
com.google.gson.Gson$5: void write(com.google.gson.stream.JsonWriter,java.util.concurrent.atomic.AtomicLongArray)
io.sentry.SentryBaseEvent: io.sentry.protocol.SentryId getEventId()
io.flutter.plugin.editing.TextInputPlugin$1: void finishAutofillContext(boolean)
androidx.core.os.LocaleListCompatWrapper: java.lang.String toString()
io.flutter.embedding.android.AndroidTouchProcessor: int getPointerChangeForAction(int)
io.sentry.SentryOptions$Proxy: java.lang.String getPort()
androidx.window.layout.SidecarAdapter$Companion: int getSidecarDevicePosture$window_release(androidx.window.sidecar.SidecarDeviceState)
io.sentry.android.core.SentryAndroidOptions: boolean isEnableAppComponentBreadcrumbs()
androidx.collection.MapCollections$ValuesCollection: boolean add(java.lang.Object)
io.flutter.plugins.urllauncher.UrlLauncher$LaunchStatus: io.flutter.plugins.urllauncher.UrlLauncher$LaunchStatus[] values()
androidx.fragment.app.Fragment: void performCreate(android.os.Bundle)
io.flutter.plugin.platform.PlatformPlugin: void setSystemChromeApplicationSwitcherDescription(io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription)
androidx.fragment.app.FragmentHostCallback: void onDump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])
io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type: io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type[] values()
kotlinx.coroutines.JobCancellationException: java.lang.Throwable fillInStackTrace()
androidx.window.embedding.EmbeddingInterfaceCompat: void setSplitRules(java.util.Set)
io.sentry.android.ndk.NdkScopeObserver: NdkScopeObserver(io.sentry.SentryOptions)
com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper$1: sun.misc.Unsafe run()
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration$Autofill: io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration$Autofill fromJson(org.json.JSONObject)
kotlinx.coroutines.CancelledContinuation: CancelledContinuation(kotlin.coroutines.Continuation,java.lang.Throwable,boolean)
androidx.window.embedding.EmbeddingAdapter: boolean translateIntentPredicates$lambda-8(java.util.Set,android.content.Intent)
io.flutter.plugin.mouse.MouseCursorPlugin: android.view.PointerIcon access$000(io.flutter.plugin.mouse.MouseCursorPlugin,java.lang.String)
com.google.common.base.MoreObjects$ToStringHelper$ValueHolder: MoreObjects$ToStringHelper$ValueHolder(com.google.common.base.MoreObjects$1)
kotlinx.coroutines.AbstractCoroutine: void onCancelled(java.lang.Throwable,boolean)
androidx.window.embedding.EmbeddingCompat: EmbeddingCompat(androidx.window.extensions.embedding.ActivityEmbeddingComponent,androidx.window.embedding.EmbeddingAdapter)
kotlin.text.StringsKt__StringsKt: java.lang.String substringAfter$default(java.lang.String,java.lang.String,java.lang.String,int,java.lang.Object)
kotlinx.coroutines.internal.LockFreeTaskQueueCore: boolean isEmpty()
com.google.android.gms.common.internal.safeparcel.AbstractSafeParcelable: AbstractSafeParcelable()
com.google.gson.internal.ConstructorConstructor$7: ConstructorConstructor$7(com.google.gson.internal.ConstructorConstructor)
io.flutter.plugin.editing.TextInputPlugin: void hideTextInput(android.view.View)
com.google.android.gms.common.internal.safeparcel.SafeParcelWriter: void writeTypedArray(android.os.Parcel,int,android.os.Parcelable[],int,boolean)
com.google.common.reflect.TypeToken: TypeToken()
kotlin.coroutines.intrinsics.CoroutineSingletons: kotlin.coroutines.intrinsics.CoroutineSingletons valueOf(java.lang.String)
io.sentry.protocol.User: java.lang.String getId()
com.google.android.gms.common.api.internal.zap: void onActivityResult(int,int,android.content.Intent)
androidx.core.view.ViewCompat$AccessibilityViewProperty: boolean extrasAvailable()
io.sentry.Span: void setThrowable(java.lang.Throwable)
io.flutter.embedding.engine.dart.DartExecutor$DefaultBinaryMessenger: DartExecutor$DefaultBinaryMessenger(io.flutter.embedding.engine.dart.DartMessenger,io.flutter.embedding.engine.dart.DartExecutor$1)
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.PlatformView getView()
com.google.android.gms.common.ConnectionResult: ConnectionResult(int,int,android.app.PendingIntent,java.lang.String)
androidx.fragment.app.FragmentTransition: androidx.collection.ArrayMap calculateNameOverrides(int,java.util.ArrayList,java.util.ArrayList,int,int)
io.flutter.plugins.connectivity.ConnectivityPlugin: void teardownChannels()
io.sentry.SentryOptions: boolean isEnableUncaughtExceptionHandler()
io.flutter.plugins.googlemaps.Convert: java.lang.String interpretTileOverlayOptions(java.util.Map,io.flutter.plugins.googlemaps.TileOverlaySink)
androidx.fragment.app.FragmentManagerImpl: int postponePostponableTransactions(java.util.ArrayList,java.util.ArrayList,int,int,androidx.collection.ArraySet)
androidx.core.view.ViewCompat$UnhandledKeyEventManager: androidx.core.view.ViewCompat$UnhandledKeyEventManager at(android.view.View)
io.sentry.android.core.DefaultAndroidEventProcessor: long getBlockSizeLong(android.os.StatFs)
io.sentry.ISpan: io.sentry.SentryTraceHeader toSentryTrace()
io.sentry.cache.EnvelopeCache: java.io.File getCurrentSessionFile()
io.flutter.embedding.android.FlutterView: io.flutter.embedding.engine.FlutterEngine getAttachedFlutterEngine()
io.sentry.CircularFifoQueue: boolean add(java.lang.Object)
com.google.android.gms.common.api.internal.zabq: void zak(com.google.android.gms.common.api.internal.zabq,int)
io.sentry.Scope: void setContexts(java.lang.String,java.lang.String)
io.flutter.plugin.platform.PlatformViewsController: void finishFrame(boolean)
io.sentry.protocol.Browser: Browser(io.sentry.protocol.Browser)
com.google.common.primitives.Longs: long fromBytes(byte,byte,byte,byte,byte,byte,byte,byte)
io.sentry.Sentry: io.sentry.ITransaction startTransaction(io.sentry.TransactionContext,io.sentry.CustomSamplingContext)
io.flutter.plugins.googlemaps.GoogleMapsPlugin: void onDetachedFromActivityForConfigChanges()
com.google.gson.DefaultDateTypeAdapter: DefaultDateTypeAdapter(int,int)
androidx.fragment.app.FragmentTransition: java.lang.Object configureSharedElementsReordered(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,java.util.ArrayList,java.lang.Object,java.lang.Object)
androidx.fragment.app.FragmentTransition: androidx.collection.ArrayMap captureInSharedElements(androidx.fragment.app.FragmentTransitionImpl,androidx.collection.ArrayMap,java.lang.Object,androidx.fragment.app.FragmentTransition$FragmentContainerTransition)
kotlinx.coroutines.channels.AbstractChannel: void onReceiveDequeued()
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean access$4802(io.flutter.view.AccessibilityBridge$SemanticsNode,boolean)
io.flutter.embedding.android.FlutterTextureView$1: void onSurfaceTextureSizeChanged(android.graphics.SurfaceTexture,int,int)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: void doInitialFlutterViewRun()
io.sentry.HubAdapter: io.sentry.protocol.SentryId getLastEventId()
androidx.fragment.app.FragmentManagerImpl: void checkStateLoss()
com.google.android.gms.common.internal.zzc: void zze()
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$3: SentryFlutterPlugin$initNativeSdk$2$3(io.sentry.android.core.SentryAndroidOptions)
com.google.android.gms.dynamic.DeferredLifecycleHelper: void onSaveInstanceState(android.os.Bundle)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean access$300(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
androidx.fragment.app.Fragment: java.lang.Object getExitTransition()
androidx.collection.ArraySet: boolean containsAll(java.util.Collection)
io.flutter.plugins.googlemaps.Convert: java.util.List toPoints(java.lang.Object)
com.tekartik.sqflite.SqlCommand: java.lang.String toString()
io.sentry.IHub: void setUser(io.sentry.protocol.User)
io.flutter.view.VsyncWaiter: long access$002(io.flutter.view.VsyncWaiter,long)
io.flutter.plugin.editing.ListenableEditingState: android.text.SpannableStringBuilder replace(int,int,java.lang.CharSequence,int,int)
kotlin.collections.EmptySet: int hashCode()
io.sentry.SentryTracer: java.lang.String getOperation()
io.flutter.embedding.engine.FlutterJNI: long performNativeAttach(io.flutter.embedding.engine.FlutterJNI)
io.sentry.NoOpTransportFactory: io.sentry.NoOpTransportFactory getInstance()
androidx.lifecycle.ProcessLifecycleOwner$3: void onActivityCreated(android.app.Activity,android.os.Bundle)
com.google.android.gms.internal.maps.zzj: void zzw(boolean)
kotlinx.coroutines.flow.internal.SafeCollector: kotlin.coroutines.CoroutineContext getContext()
io.sentry.protocol.Device: java.lang.String getFamily()
kotlin.Pair: java.lang.Object getFirst()
io.flutter.embedding.engine.loader.FlutterLoader: FlutterLoader(io.flutter.embedding.engine.FlutterJNI)
io.flutter.plugin.platform.SingleViewPresentation$ImmContext: java.lang.Object getSystemService(java.lang.String)
io.flutter.plugin.platform.PlatformPlugin: void access$500(io.flutter.plugin.platform.PlatformPlugin)
kotlinx.coroutines.JobSupport: boolean tryFinalizeSimpleState(kotlinx.coroutines.Incomplete,java.lang.Object)
androidx.window.layout.SidecarCompat: androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface access$getExtensionCallback$p(androidx.window.layout.SidecarCompat)
com.google.android.gms.common.internal.Preconditions: void checkState(boolean)
io.sentry.OutboxSender: void processFile(java.io.File,java.lang.Object)
io.flutter.embedding.android.KeyboardManager: void access$000(io.flutter.embedding.android.KeyboardManager,android.view.KeyEvent)
io.sentry.Scope: void setFingerprint(java.util.List)
com.google.gson.internal.Excluder: boolean excludeField(java.lang.reflect.Field,boolean)
io.sentry.SentryOptions: void setEnableShutdownHook(boolean)
io.flutter.plugin.common.StringCodec: java.lang.Object decodeMessage(java.nio.ByteBuffer)
androidx.window.layout.SidecarCompat$FirstAttachAdapter: void onViewDetachedFromWindow(android.view.View)
com.google.gson.internal.bind.JsonTreeReader: java.lang.String toString()
com.google.android.gms.common.api.internal.NonGmsServiceBrokerClient: void disconnect()
com.google.gson.Gson$1: Gson$1(com.google.gson.Gson)
io.flutter.plugin.editing.TextInputPlugin: void updateAutofillConfigurationIfNeeded(io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration)
io.sentry.android.core.AndroidTransportGate: boolean isConnected(io.sentry.android.core.util.ConnectivityChecker$Status)
androidx.core.view.WindowInsetsControllerCompat: WindowInsetsControllerCompat(android.view.Window,android.view.View)
androidx.fragment.app.Fragment: java.lang.Object getReturnTransition()
com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl: java.lang.reflect.Type getRawType()
androidx.fragment.app.FragmentManagerImpl: void performPendingDeferredStart(androidx.fragment.app.Fragment)
com.google.gson.JsonPrimitive: boolean equals(java.lang.Object)
io.flutter.plugins.googlemaps.TileOverlayController: void remove()
kotlinx.coroutines.flow.internal.SafeCollector: SafeCollector(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.CoroutineContext)
androidx.lifecycle.SingleGeneratedAdapterObserver: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.TextInputChannel getTextInputChannel()
io.flutter.plugin.platform.SingleViewPresentation$ImmContext: SingleViewPresentation$ImmContext(android.content.Context,android.view.inputmethod.InputMethodManager)
androidx.fragment.app.FragmentHostCallback: FragmentHostCallback(androidx.fragment.app.FragmentActivity)
io.flutter.embedding.android.FlutterSurfaceView: void init()
androidx.fragment.app.FragmentManagerImpl: void updateOnBackPressedCallbackEnabled()
io.sentry.Sentry: void addBreadcrumb(io.sentry.Breadcrumb,java.lang.Object)
androidx.window.layout.SidecarCompat: SidecarCompat(android.content.Context)
io.flutter.plugins.googlemaps.MarkerBuilder: void setRotation(float)
io.sentry.SentryEvent: SentryEvent()
io.sentry.protocol.Device: io.sentry.protocol.Device$DeviceOrientation getOrientation()
com.google.android.gms.common.api.internal.zabq: boolean zaz()
com.google.android.gms.maps.internal.zzbg: boolean zza(int,android.os.Parcel,android.os.Parcel,int)
io.flutter.plugins.googlemaps.PolylineController: PolylineController(com.google.android.gms.maps.model.Polyline,boolean,float)
com.google.common.collect.Maps$EntryFunction: Maps$EntryFunction(java.lang.String,int)
com.google.gson.stream.JsonReader: java.lang.String nextQuotedValue(char)
kotlin.collections.EmptyList: java.util.Iterator iterator()
com.google.gson.internal.ConstructorConstructor: com.google.gson.internal.ObjectConstructor newDefaultConstructor(java.lang.Class)
com.google.android.gms.common.api.Status: Status(int,java.lang.String)
androidx.collection.MapCollections$ValuesCollection: boolean contains(java.lang.Object)
io.flutter.embedding.engine.loader.FlutterLoader: io.flutter.embedding.engine.loader.ResourceExtractor initResources(android.content.Context)
io.sentry.transport.TransportResult$ErrorTransportResult: int getResponseCode()
io.flutter.FlutterInjector: FlutterInjector(io.flutter.embedding.engine.loader.FlutterLoader,io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager,io.flutter.embedding.engine.FlutterJNI$Factory,java.util.concurrent.ExecutorService)
io.sentry.IpAddressUtils: IpAddressUtils()
kotlinx.coroutines.internal.ThreadContextKt$findOne$1: ThreadContextKt$findOne$1()
androidx.window.layout.ExtensionInterfaceCompat: void onWindowLayoutChangeListenerRemoved(android.app.Activity)
io.sentry.SentryEvent: java.util.Map getModules()
com.google.android.gms.maps.model.Polyline: java.lang.String getId()
com.google.common.hash.ChecksumHashFunction: com.google.common.hash.Hasher newHasher()
androidx.lifecycle.Lifecycling: int getObserverConstructorType(java.lang.Class)
com.google.android.gms.maps.model.LatLng: LatLng(double,double)
io.sentry.ISentryClient: void captureSession(io.sentry.Session)
com.google.android.gms.common.api.internal.zaad: java.util.Map zab(com.google.android.gms.common.api.internal.zaad)
io.sentry.android.core.AndroidOptionsInitializer: void init(io.sentry.android.core.SentryAndroidOptions,android.content.Context,io.sentry.ILogger,io.sentry.android.core.IBuildInfoProvider,io.sentry.android.core.ILoadClass)
androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)
kotlinx.coroutines.flow.internal.SafeCollector: java.lang.Object emit(kotlin.coroutines.Continuation,java.lang.Object)
androidx.fragment.app.Fragment: void initLifecycle()
io.flutter.embedding.engine.FlutterJNI: void dispatchEmptyPlatformMessage(java.lang.String,int)
io.sentry.CircularFifoQueue: java.lang.Object element()
com.google.android.gms.signin.internal.zal: zal()
androidx.fragment.app.FragmentManagerImpl: void dispatchOnFragmentResumed(androidx.fragment.app.Fragment,boolean)
io.sentry.android.ndk.NativeScope: void removeTag(java.lang.String)
com.google.android.gms.common.internal.zzb: void handleMessage(android.os.Message)
io.sentry.transport.NoOpEnvelopeCache: void store(io.sentry.SentryEnvelope,java.lang.Object)
com.google.android.gms.common.internal.zal: int zaa(android.content.Context,int)
kotlinx.coroutines.AbstractCoroutine: java.lang.String nameString$kotlinx_coroutines_core()
kotlinx.coroutines.CompletionStateKt: java.lang.Object toState(java.lang.Object,kotlinx.coroutines.CancellableContinuation)
com.tekartik.sqflite.operation.BaseOperation: void error(java.lang.String,java.lang.String,java.lang.Object)
io.sentry.SentryOptions: void setConnectionTimeoutMillis(int)
com.google.common.hash.HashCode: com.google.common.hash.HashCode fromInt(int)
io.sentry.android.core.SentryAndroidOptions: void setEnableActivityLifecycleTracingAutoFinish(boolean)
androidx.window.layout.WindowMetricsCalculatorCompat: WindowMetricsCalculatorCompat()
io.sentry.android.core.DefaultAndroidEventProcessor: void setCommons(io.sentry.SentryBaseEvent,boolean,boolean)
com.google.common.collect.UnmodifiableListIterator: void add(java.lang.Object)
io.flutter.plugin.platform.VirtualDisplayController$1$1: void run()
io.sentry.SentryOptions: javax.net.ssl.SSLSocketFactory getSslSocketFactory()
io.sentry.SentryClient: io.sentry.SentryEnvelope buildEnvelope(io.sentry.SentryBaseEvent,java.util.List)
com.google.android.gms.common.internal.safeparcel.SafeParcelWriter: void zzd(android.os.Parcel,android.os.Parcelable,int)
kotlin.collections.ArraysUtilJVM: java.util.List asList(java.lang.Object[])
com.google.common.collect.CollectPreconditions: int checkNonnegative(int,java.lang.String)
io.flutter.plugins.googlemaps.GoogleMapController: void animateCamera(com.google.android.gms.maps.CameraUpdate)
kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt$createCoroutineUnintercepted$$inlined$createCoroutineFromSuspendFunction$IntrinsicsKt__IntrinsicsJvmKt$3: IntrinsicsKt__IntrinsicsJvmKt$createCoroutineUnintercepted$$inlined$createCoroutineFromSuspendFunction$IntrinsicsKt__IntrinsicsJvmKt$3(kotlin.coroutines.Continuation,kotlin.jvm.functions.Function2,java.lang.Object)
androidx.fragment.app.Fragment: androidx.fragment.app.Fragment getTargetFragment()
androidx.fragment.app.Fragment: void performLowMemory()
com.google.common.collect.ImmutableCollection$ArrayBasedBuilder: ImmutableCollection$ArrayBasedBuilder(int)
io.sentry.NoOpHub: void setTag(java.lang.String,java.lang.String)
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void attachToGLContext(int)
kotlinx.coroutines.scheduling.CoroutineScheduler: int createNewWorker()
com.google.gson.JsonObject: void addProperty(java.lang.String,java.lang.String)
com.google.common.reflect.TypeToken$TypeFilter$2: TypeToken$TypeFilter$2(java.lang.String,int)
io.sentry.protocol.SentryStackFrame: void setColno(java.lang.Integer)
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean tryReleaseCpu(kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState)
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory: boolean excludeField(java.lang.reflect.Field,boolean,com.google.gson.internal.Excluder)
com.google.android.gms.common.Feature: int hashCode()
io.sentry.transport.ProxyAuthenticator: ProxyAuthenticator(java.lang.String,java.lang.String)
kotlin.collections.ArraysKt___ArraysKt: java.lang.Object[] sortedArrayWith(java.lang.Object[],java.util.Comparator)
androidx.fragment.app.FragmentActivity$HostCallbacks: boolean onHasWindowAnimations()
com.google.android.gms.maps.model.PolylineOptions: java.util.List getPattern()
com.google.android.gms.common.GooglePlayServicesUtilLight: int isGooglePlayServicesAvailable(android.content.Context,int)
kotlinx.coroutines.channels.Closed: void completeResumeSend()
com.google.common.util.concurrent.AbstractFuture$AtomicHelper: AbstractFuture$AtomicHelper()
androidx.fragment.app.BackStackRecord: void bumpBackStackNesting(int)
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean didChangeLabel()
io.sentry.IHub: void setTag(java.lang.String,java.lang.String)
io.flutter.plugins.googlemaps.PolylineController: void setWidth(float)
io.flutter.view.AccessibilityBridge: void willRemoveSemanticsNode(io.flutter.view.AccessibilityBridge$SemanticsNode)
com.google.gson.stream.JsonReader: long nextLong()
io.flutter.plugins.sharedpreferences.MethodCallHandlerImpl: void commitAsync(android.content.SharedPreferences$Editor,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType: io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType[] values()
io.flutter.plugin.editing.InputConnectionAdaptor: boolean finishComposingText()
io.sentry.config.PropertiesProviderFactory: io.sentry.config.PropertiesProvider create()
kotlinx.coroutines.channels.AbstractChannel$Itr: AbstractChannel$Itr(kotlinx.coroutines.channels.AbstractChannel)
io.flutter.plugins.googlemaps.CircleBuilder: void setZIndex(float)
com.google.android.gms.common.api.internal.BasePendingResult$CallbackHandler: void zaa(com.google.android.gms.common.api.ResultCallback,com.google.android.gms.common.api.Result)
com.google.android.gms.common.api.internal.GoogleApiManager: void zay(com.google.android.gms.common.internal.MethodInvocation,int,long,int)
io.flutter.embedding.android.DrawableSplashScreen$DrawableSplashScreenView: DrawableSplashScreen$DrawableSplashScreenView(android.content.Context)
com.google.gson.LongSerializationPolicy: com.google.gson.LongSerializationPolicy[] values()
com.google.android.gms.common.internal.TelemetryData: void zac(com.google.android.gms.common.internal.MethodInvocation)
com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper: AbstractFuture$UnsafeAtomicHelper()
kotlinx.coroutines.internal.LockFreeLinkedListKt: java.lang.Object getCONDITION_FALSE()
com.google.common.base.Throwables: java.lang.reflect.Method getJlaMethod(java.lang.String,java.lang.Class[])
io.sentry.android.core.SystemEventsBreadcrumbsIntegration$SystemEventsBroadcastReceiver: void onReceive(android.content.Context,android.content.Intent)
io.sentry.Session: java.lang.String getRelease()
com.google.gson.internal.bind.TypeAdapters$34: TypeAdapters$34(java.lang.Class,java.lang.Class,com.google.gson.TypeAdapter)
com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper: void putNext(com.google.common.util.concurrent.AbstractFuture$Waiter,com.google.common.util.concurrent.AbstractFuture$Waiter)
com.tekartik.sqflite.SqflitePlugin: void handleException(java.lang.Exception,com.tekartik.sqflite.operation.Operation,com.tekartik.sqflite.Database)
com.google.android.gms.common.api.internal.zzc: zzc(com.google.android.gms.common.api.internal.zzd,com.google.android.gms.common.api.internal.LifecycleCallback,java.lang.String)
com.google.gson.internal.bind.TypeAdapters$14: java.lang.Object read(com.google.gson.stream.JsonReader)
com.google.android.gms.internal.maps.zzc: void zzf(android.os.Parcel,android.os.IInterface)
io.flutter.plugin.platform.PlatformViewsController: java.util.List parsePointerCoordsList(java.lang.Object,float)
com.google.android.gms.common.internal.zzo: void zzd(android.content.ServiceConnection,android.content.ServiceConnection,java.lang.String)
com.tekartik.sqflite.SqflitePlugin: void onOptionsCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.sentry.adapters.OrientationSerializerAdapter: OrientationSerializerAdapter(io.sentry.SentryOptions)
io.flutter.embedding.engine.dart.DartExecutor: void onDetachedFromJNI()
com.google.android.gms.common.api.internal.LifecycleCallback: com.google.android.gms.common.api.internal.LifecycleFragment getFragment(com.google.android.gms.common.api.internal.LifecycleActivity)
com.google.android.gms.maps.internal.zzl: void onResume()
com.google.common.collect.MapMakerInternalMap$SafeToArraySet: MapMakerInternalMap$SafeToArraySet()
io.sentry.android.core.ContextUtils: ContextUtils()
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter: java.lang.Object read(com.google.gson.stream.JsonReader)
com.google.gson.internal.bind.JsonTreeWriter: com.google.gson.stream.JsonWriter value(double)
kotlin.jvm.internal.Intrinsics: java.lang.String createParameterIsNullExceptionMessage(java.lang.String)
androidx.fragment.app.FragmentManagerImpl: void dispatchActivityCreated()
com.google.gson.stream.JsonReader: double nextDouble()
io.sentry.IHub: io.sentry.protocol.SentryId captureMessage(java.lang.String)
kotlin.collections.CollectionsKt___CollectionsKt: java.lang.Object first(java.util.List)
io.sentry.Span: io.sentry.SpanId getSpanId()
com.google.common.hash.LittleEndianByteArray$UnsafeByteArray: LittleEndianByteArray$UnsafeByteArray(java.lang.String,int)
kotlin.collections.EmptyList: java.lang.Void get(int)
kotlinx.coroutines.channels.AbstractChannel$RemoveReceiveOnCancel: java.lang.String toString()
com.google.android.gms.tasks.zzt: zzt()
io.sentry.protocol.DebugMeta: DebugMeta()
com.google.android.gms.common.internal.service.zap: java.lang.String getServiceDescriptor()
androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.Lifecycle$State getCurrentState()
io.flutter.plugins.googlemaps.MarkerController: void setDraggable(boolean)
io.flutter.plugins.googlemaps.TileProviderController$Worker: com.google.android.gms.maps.model.Tile getTile()
io.sentry.android.core.LifecycleWatcher: java.util.concurrent.atomic.AtomicBoolean access$200(io.sentry.android.core.LifecycleWatcher)
io.sentry.ITransaction: java.util.List getSpans()
com.google.android.gms.common.internal.Preconditions: void checkHandlerThread(android.os.Handler)
io.flutter.view.AccessibilityBridge: io.flutter.view.AccessibilityBridge$SemanticsNode getOrCreateSemanticsNode(int)
kotlinx.coroutines.internal.DispatchedContinuation: boolean postponeCancellation(java.lang.Throwable)
io.sentry.android.core.ActivityLifecycleIntegration: java.util.WeakHashMap getActivitiesWithOngoingTransactions()
io.sentry.NoOpHub: java.lang.Object clone()
com.google.android.gms.maps.MapView: MapView(android.content.Context,com.google.android.gms.maps.GoogleMapOptions)
androidx.fragment.app.BackStackRecord: void executePopOps(boolean)
io.flutter.plugins.googlemaps.Convert: java.util.Map tileOverlayArgumentsToJson(java.lang.String,int,int,int)
com.google.gson.JsonDeserializer: java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext)
com.google.android.gms.common.ConnectionResult: boolean isSuccess()
com.google.android.gms.internal.base.zaq: zaq(android.os.Looper)
androidx.loader.app.LoaderManagerImpl: LoaderManagerImpl(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.ViewModelStore)
com.tekartik.sqflite.SqflitePlugin$BgResult: SqflitePlugin$BgResult(com.tekartik.sqflite.SqflitePlugin,io.flutter.plugin.common.MethodChannel$Result,com.tekartik.sqflite.SqflitePlugin$1)
com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet construct(int,java.lang.Object[])
androidx.fragment.app.FragmentActivity$HostCallbacks: androidx.lifecycle.Lifecycle getLifecycle()
com.google.android.gms.maps.model.Dash: Dash(float)
io.sentry.HubAdapter: void removeTag(java.lang.String)
androidx.fragment.app.FragmentActivity: boolean onPrepareOptionsPanel(android.view.View,android.view.Menu)
io.sentry.IHub: boolean isEnabled()
com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$Listener clearListeners(com.google.common.util.concurrent.AbstractFuture$Listener)
io.sentry.transport.HttpConnection: java.net.Proxy resolveProxy(io.sentry.SentryOptions$Proxy)
com.google.gson.internal.Excluder: boolean isAnonymousOrLocal(java.lang.Class)
kotlin.text.StringsKt__StringsKt: java.lang.String substringAfter(java.lang.String,java.lang.String,java.lang.String)
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeature: FlutterRenderer$DisplayFeature(android.graphics.Rect,io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType,io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState)
com.google.android.gms.maps.GoogleMap: void animateCamera(com.google.android.gms.maps.CameraUpdate)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType: io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType valueOf(java.lang.String)
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: int access$200(long)
com.google.gson.TypeAdapter$1: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
kotlin.jvm.internal.CollectionToArray: java.lang.Object[] toArray(java.util.Collection)
kotlinx.coroutines.NodeList: NodeList()
io.flutter.FlutterInjector$Builder$NamedThreadFactory: FlutterInjector$Builder$NamedThreadFactory(io.flutter.FlutterInjector$Builder)
io.flutter.plugin.editing.TextInputPlugin: void destroy()
com.google.android.gms.maps.model.zzf: java.lang.Object createFromParcel(android.os.Parcel)
io.flutter.view.AccessibilityBridge: void onTouchExplorationExit()
io.sentry.android.core.AppComponentsBreadcrumbsIntegration: void onTrimMemory(int)
io.flutter.view.AccessibilityViewEmbedder: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int)
io.sentry.android.core.SentryAndroidOptions: void setAnrReportInDebug(boolean)
com.tekartik.sqflite.SqflitePlugin: void onDeleteDatabaseCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$1$1: PlatformViewsChannel$1$1(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$1,io.flutter.plugin.common.MethodChannel$Result)
io.sentry.UnknownPropertiesTypeAdapterFactory: UnknownPropertiesTypeAdapterFactory()
com.google.common.reflect.Types$JavaVersion$3: Types$JavaVersion$3(java.lang.String,int)
io.sentry.adapters.SpanStatusSerializerAdapter: com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,com.google.gson.JsonSerializationContext)
com.google.gson.JsonArray: int getAsInt()
kotlin.text.DelimitedRangesSequence$iterator$1: java.lang.Object next()
io.sentry.SentryOptions: void setSendDefaultPii(boolean)
com.google.common.util.concurrent.AbstractFuture: java.lang.Object access$400(com.google.common.util.concurrent.AbstractFuture)
kotlinx.coroutines.JobSupport$Finishing: void setRootCause(java.lang.Throwable)
kotlinx.coroutines.internal.ExceptionsConstuctorKt$createConstructor$$inlined$safeCtor$1: java.lang.Throwable invoke(java.lang.Throwable)
io.sentry.CircularFifoQueue: boolean access$100(io.sentry.CircularFifoQueue)
io.sentry.IHub: void endSession()
androidx.fragment.app.FragmentTransaction: void addOp(androidx.fragment.app.FragmentTransaction$Op)
io.sentry.ISerializer: java.lang.String serialize(java.util.Map)
androidx.core.view.LayoutInflaterCompat: void forceSetFactory2(android.view.LayoutInflater,android.view.LayoutInflater$Factory2)
com.google.android.gms.dynamite.zze: int zzb(android.content.Context,java.lang.String,boolean)
com.google.android.gms.internal.maps.zzae: void zzh()
io.flutter.embedding.engine.FlutterJNI: void nativeSetAccessibilityFeatures(long,int)
androidx.core.app.NotificationCompat$Style: void addCompatExtras(android.os.Bundle)
androidx.window.embedding.SplitInfo: SplitInfo(androidx.window.embedding.ActivityStack,androidx.window.embedding.ActivityStack,float)
androidx.window.layout.SidecarWindowBackend: boolean isActivityRegistered(android.app.Activity)
io.sentry.GsonSerializer: com.google.gson.Gson provideGson()
com.google.android.gms.common.internal.zau: java.lang.Object[] newArray(int)
com.google.gson.JsonPrimitive: int hashCode()
com.google.gson.internal.LinkedTreeMap: LinkedTreeMap()
com.google.common.collect.MapMakerInternalMap$WriteThroughEntry: boolean equals(java.lang.Object)
kotlinx.coroutines.internal.ThreadContextKt: void restoreThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)
com.google.gson.internal.UnsafeAllocator: com.google.gson.internal.UnsafeAllocator create()
io.flutter.embedding.android.FlutterSplashView: io.flutter.embedding.android.SplashScreen access$100(io.flutter.embedding.android.FlutterSplashView)
androidx.fragment.app.FragmentTransitionImpl: boolean containedBeforeIndex(java.util.List,android.view.View,int)
com.google.android.gms.maps.model.Circle: void setRadius(double)
io.flutter.embedding.engine.FlutterJNI: boolean isCodePointEmojiModifier(int)
io.sentry.adapters.ContextsDeserializerAdapter: java.lang.Object parseObject(com.google.gson.JsonDeserializationContext,com.google.gson.JsonObject,java.lang.String,java.lang.Class)
com.google.gson.internal.LinkedTreeMap$EntrySet: int size()
androidx.loader.app.LoaderManagerImpl$LoaderViewModel: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])
io.flutter.plugins.googlemaps.GoogleMapBuilder: GoogleMapBuilder()
io.sentry.protocol.SentryPackage: java.lang.String getName()
com.google.android.gms.dynamic.zaf: zaf(com.google.android.gms.dynamic.DeferredLifecycleHelper)
com.google.android.gms.common.GoogleApiAvailabilityLight: android.app.PendingIntent getErrorResolutionPendingIntent(android.content.Context,int,int,java.lang.String)
com.google.android.gms.common.api.internal.zap: void zag(com.google.android.gms.common.api.internal.zap)
io.sentry.BuildConfig: BuildConfig()
com.google.gson.internal.JavaVersion: int extractBeginningInt(java.lang.String)
com.google.android.gms.common.api.Status: int hashCode()
androidx.fragment.app.FragmentManagerImpl: boolean isMenuAvailable(androidx.fragment.app.Fragment)
com.google.gson.internal.LinkedHashTreeMap$Node: LinkedHashTreeMap$Node(com.google.gson.internal.LinkedHashTreeMap$Node,java.lang.Object,int,com.google.gson.internal.LinkedHashTreeMap$Node,com.google.gson.internal.LinkedHashTreeMap$Node)
com.google.android.gms.common.internal.BaseGmsClient: void triggerConnectionSuspended(int)
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: void invokeSuspend$lambda-0(kotlinx.coroutines.channels.Channel,androidx.window.layout.WindowLayoutInfo)
io.flutter.embedding.android.DrawableSplashScreen$1: void onAnimationEnd(android.animation.Animator)
androidx.window.layout.SidecarCompat: void register(android.os.IBinder,android.app.Activity)
io.flutter.plugin.editing.ListenableEditingState: ListenableEditingState(io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState,android.view.View)
kotlinx.coroutines.CancellableContinuationImpl: boolean resetStateReusable()
io.sentry.SentryEnvelopeHeaderAdapter: io.sentry.SentryEnvelopeHeader read(com.google.gson.stream.JsonReader)
com.google.android.gms.maps.internal.zzl: zzl(android.os.IBinder)
io.flutter.plugin.platform.PlatformViewsController$1: long createVirtualDisplayForPlatformView(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest)
com.google.android.gms.maps.model.zzi: java.lang.Object[] newArray(int)
kotlinx.coroutines.CoroutineId$Key: CoroutineId$Key()
kotlinx.coroutines.android.HandlerDispatcher: HandlerDispatcher()
io.flutter.embedding.engine.FlutterJNI: void nativeSurfaceDestroyed(long)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: void add(io.flutter.embedding.engine.plugins.FlutterPlugin)
io.flutter.embedding.android.DrawableSplashScreen: DrawableSplashScreen(android.graphics.drawable.Drawable)
io.flutter.embedding.engine.dart.DartMessenger: void setMessageHandler(java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler,io.flutter.plugin.common.BinaryMessenger$TaskQueue)
com.google.gson.internal.bind.TypeAdapters$22: java.net.URI read(com.google.gson.stream.JsonReader)
io.flutter.embedding.engine.FlutterJNI: void onVsync(long,long,long)
io.flutter.plugin.common.FlutterException: FlutterException(java.lang.String,java.lang.String,java.lang.Object)
io.flutter.plugin.common.BinaryMessenger: void setMessageHandler(java.lang.String,io.flutter.plugin.common.BinaryMessenger$BinaryMessageHandler,io.flutter.plugin.common.BinaryMessenger$TaskQueue)
io.flutter.plugins.googlemaps.GoogleMapController: void setIndoorEnabled(boolean)
com.google.gson.internal.bind.TypeAdapters$32: com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken)
com.google.gson.internal.bind.JsonTreeReader: boolean hasNext()
com.google.android.gms.maps.model.PolylineOptions: void writeToParcel(android.os.Parcel,int)
io.sentry.IHub: void bindClient(io.sentry.ISentryClient)
androidx.window.layout.HardwareFoldingFeature$Type: HardwareFoldingFeature$Type(java.lang.String)
com.google.gson.internal.bind.TypeAdapters$27: java.util.Calendar read(com.google.gson.stream.JsonReader)
io.flutter.view.AccessibilityBridge: boolean doesLayoutInDisplayCutoutModeRequireLeftInset()
io.flutter.plugins.googlemaps.CircleController: void setCenter(com.google.android.gms.maps.model.LatLng)
io.sentry.HubAdapter: void captureUserFeedback(io.sentry.UserFeedback)
androidx.collection.MapCollections$ValuesCollection: boolean containsAll(java.util.Collection)
io.sentry.protocol.App: void setAppIdentifier(java.lang.String)
androidx.window.layout.HardwareFoldingFeature$Companion: HardwareFoldingFeature$Companion()
androidx.fragment.app.FragmentTransaction: androidx.fragment.app.FragmentTransaction remove(androidx.fragment.app.Fragment)
kotlinx.coroutines.UndispatchedCoroutine: void saveThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)
kotlinx.coroutines.internal.LockFreeTaskQueueCore: kotlinx.coroutines.internal.LockFreeTaskQueueCore allocateNextCopy(long)
kotlinx.coroutines.JobSupport: java.util.concurrent.CancellationException toCancellationException(java.lang.Throwable,java.lang.String)
com.google.android.gms.common.internal.Preconditions: void checkMainThread(java.lang.String)
com.google.android.gms.common.GooglePlayServicesManifestException: GooglePlayServicesManifestException(int,java.lang.String)
io.sentry.SpanContext: SpanContext(java.lang.String)
io.flutter.plugin.platform.PlatformViewsController: android.view.View getPlatformViewById(java.lang.Integer)
io.flutter.plugins.sharedpreferences.MethodCallHandlerImpl: android.os.Handler access$000(io.flutter.plugins.sharedpreferences.MethodCallHandlerImpl)
com.google.gson.internal.LinkedTreeMap$KeySet: java.util.Iterator iterator()
kotlinx.coroutines.EventLoopImplBase$DelayedTask: java.lang.String toString()
androidx.fragment.app.FragmentState: FragmentState(androidx.fragment.app.Fragment)
kotlinx.coroutines.CommonPool: java.util.concurrent.ExecutorService createPlainPool()
com.google.android.gms.common.internal.safeparcel.AbstractSafeParcelable: int describeContents()
io.flutter.embedding.android.FlutterSplashView$2: void onFlutterUiNoLongerDisplayed()
androidx.fragment.app.Fragment: void onConfigurationChanged(android.content.res.Configuration)
androidx.window.layout.SidecarCompat: void onWindowLayoutChangeListenerAdded(android.app.Activity)
io.flutter.plugins.urllauncher.UrlLauncher$LaunchStatus: io.flutter.plugins.urllauncher.UrlLauncher$LaunchStatus valueOf(java.lang.String)
com.google.android.gms.maps.GoogleMap: GoogleMap(com.google.android.gms.maps.internal.IGoogleMapDelegate)
com.tekartik.sqflite.SqlCommand: com.tekartik.sqflite.SqlCommand sanitizeForQuery()
io.flutter.embedding.android.FlutterActivity: void onPostResume()
io.sentry.SentryOptions: void setShutdownTimeout(long)
io.flutter.plugins.googlemaps.MarkersController: void isInfoWindowShown(java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.plugin.localization.LocalizationPlugin: LocalizationPlugin(android.content.Context,io.flutter.embedding.engine.systemchannels.LocalizationChannel)
androidx.lifecycle.ReportFragment: void setProcessListener(androidx.lifecycle.ReportFragment$ActivityInitializationListener)
io.flutter.embedding.android.FlutterImageView: void onSizeChanged(int,int,int,int)
io.sentry.android.core.ActivityLifecycleIntegration: void onActivityCreated(android.app.Activity,android.os.Bundle)
com.google.common.collect.MapMakerInternalMap$Strength: com.google.common.collect.MapMakerInternalMap$Strength[] values()
androidx.fragment.app.FragmentManagerImpl: void ensureInflatedFragmentView(androidx.fragment.app.Fragment)
com.tekartik.sqflite.operation.MethodCallOperation: com.tekartik.sqflite.operation.OperationResult getOperationResult()
com.tekartik.sqflite.operation.MethodCallOperation$Result: MethodCallOperation$Result(com.tekartik.sqflite.operation.MethodCallOperation,io.flutter.plugin.common.MethodChannel$Result)
kotlinx.coroutines.internal.ThreadContextKt$countAll$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)
com.google.android.gms.maps.model.BitmapDescriptorFactory: com.google.android.gms.maps.model.BitmapDescriptor fromBitmap(android.graphics.Bitmap)
com.google.common.base.Ascii: java.lang.String toLowerCase(java.lang.String)
io.sentry.adapters.SentryIdSerializerAdapter: com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,com.google.gson.JsonSerializationContext)
com.google.gson.DefaultDateTypeAdapter: java.lang.Object read(com.google.gson.stream.JsonReader)
io.sentry.protocol.Device: void setCharging(java.lang.Boolean)
kotlin.coroutines.ContinuationKt: void startCoroutine(kotlin.jvm.functions.Function2,java.lang.Object,kotlin.coroutines.Continuation)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: void remove()
kotlinx.coroutines.flow.SafeFlow: java.lang.Object collectSafely(kotlinx.coroutines.flow.FlowCollector,kotlin.coroutines.Continuation)
androidx.window.layout.WindowBackend: void registerLayoutChangeCallback(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: void onEnd(android.view.WindowInsetsAnimation)
com.google.common.util.concurrent.CycleDetectingLockFactory: java.util.logging.Logger access$100()
com.google.gson.JsonIOException: JsonIOException(java.lang.String,java.lang.Throwable)
io.sentry.IHub: void captureUserFeedback(io.sentry.UserFeedback)
androidx.fragment.app.Fragment: boolean onOptionsItemSelected(android.view.MenuItem)
androidx.fragment.app.FragmentTransition: java.lang.String findKeyForValue(androidx.collection.ArrayMap,java.lang.String)
com.google.common.collect.Iterators: boolean addAll(java.util.Collection,java.util.Iterator)
com.google.android.gms.maps.internal.zzg: void setMaxZoomPreference(float)
io.sentry.NoOpTransaction: io.sentry.Span getLatestActiveSpan()
kotlin.jvm.internal.TypeIntrinsics: java.lang.Throwable sanitizeStackTrace(java.lang.Throwable)
com.google.android.gms.maps.CameraUpdateFactory: com.google.android.gms.maps.CameraUpdate zoomBy(float)
com.google.android.gms.maps.model.Polygon: boolean equals(java.lang.Object)
io.flutter.plugins.googlemaps.Convert: java.lang.Object cameraPositionToJson(com.google.android.gms.maps.model.CameraPosition)
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry$1: void onFrameAvailable(android.graphics.SurfaceTexture)
androidx.versionedparcelable.VersionedParcel: byte[] readByteArray(byte[],int)
com.google.gson.GsonBuilder: com.google.gson.GsonBuilder setPrettyPrinting()
io.sentry.EnvelopeSender: void processEnvelopeFile(java.lang.String,java.lang.Object)
kotlin.coroutines.AbstractCoroutineContextKey: AbstractCoroutineContextKey(kotlin.coroutines.CoroutineContext$Key,kotlin.jvm.functions.Function1)
io.sentry.ISentryClient: io.sentry.protocol.SentryId captureMessage(java.lang.String,io.sentry.SentryLevel,io.sentry.Scope)
androidx.collection.MapCollections$ValuesCollection: java.lang.Object[] toArray()
kotlinx.coroutines.internal.ThreadSafeHeap: void addImpl(kotlinx.coroutines.internal.ThreadSafeHeapNode)
com.google.android.gms.internal.maps.zzae: void zzl(boolean)
io.sentry.protocol.Gpu: java.lang.String getVersion()
androidx.fragment.app.FragmentTransitionImpl$1: void run()
io.sentry.protocol.Request: void setEnvs(java.util.Map)
io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat: io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat[] values()
kotlin.collections.EmptyList: boolean contains(java.lang.Void)
io.sentry.ISpan: void setTag(java.lang.String,java.lang.String)
kotlin.coroutines.jvm.internal.DebugProbesKt: void probeCoroutineSuspended(kotlin.coroutines.Continuation)
kotlinx.coroutines.internal.ExceptionsConstuctorKt$tryCopyException$5$1: ExceptionsConstuctorKt$tryCopyException$5$1()
io.sentry.SentryClient: SentryClient(io.sentry.SentryOptions)
io.sentry.protocol.User: void setEmail(java.lang.String)
io.flutter.plugins.googlemaps.PolylineController: void setPattern(java.util.List)
io.flutter.plugins.googlemaps.Convert: java.lang.Object latLngToJson(com.google.android.gms.maps.model.LatLng)
io.sentry.NoOpTransaction: io.sentry.ISpan startChild(java.lang.String,java.lang.String)
com.google.android.gms.common.util.DefaultClock: com.google.android.gms.common.util.Clock getInstance()
kotlin.sequences.TransformingSequence: kotlin.jvm.functions.Function1 access$getTransformer$p(kotlin.sequences.TransformingSequence)
io.sentry.transport.QueuedThreadPoolExecutor$CancelledFuture: boolean isDone()
com.google.gson.internal.bind.JsonTreeWriter: com.google.gson.JsonElement get()
io.sentry.transport.ProxyAuthenticator: java.net.PasswordAuthentication getPasswordAuthentication()
kotlin.sequences.TransformingSequence: java.util.Iterator iterator()
io.sentry.Hub: java.lang.Object clone()
kotlinx.coroutines.internal.LockFreeTaskQueueCore: LockFreeTaskQueueCore(int,boolean)
com.google.common.collect.ImmutableCollection: boolean remove(java.lang.Object)
com.tekartik.sqflite.SqflitePlugin: com.tekartik.sqflite.Database getDatabase(int)
io.flutter.embedding.engine.systemchannels.PlatformChannel: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle access$500(io.flutter.embedding.engine.systemchannels.PlatformChannel,org.json.JSONObject)
com.tekartik.sqflite.SqflitePlugin$7: SqflitePlugin$7(com.tekartik.sqflite.SqflitePlugin,com.tekartik.sqflite.Database,com.tekartik.sqflite.SqflitePlugin$BgResult)
com.google.android.gms.common.GooglePlayServicesUtil: android.content.res.Resources getRemoteResource(android.content.Context)
io.flutter.plugins.googlemaps.Convert: com.google.android.gms.maps.model.LatLngBounds toLatLngBounds(java.lang.Object)
io.sentry.NoOpSpan: void setDescription(java.lang.String)
io.sentry.config.AbstractPropertiesProvider: AbstractPropertiesProvider(java.util.Properties)
kotlinx.coroutines.scheduling.CoroutineScheduler: boolean tryCreateWorker(long)
com.google.android.gms.maps.GoogleMapOptions: com.google.android.gms.maps.GoogleMapOptions liteMode(boolean)
androidx.core.graphics.drawable.IconCompat: int getType(android.graphics.drawable.Icon)
com.google.common.collect.RegularImmutableSet: int copyIntoArray(java.lang.Object[],int)
io.sentry.IHub: io.sentry.protocol.SentryId captureEvent(io.sentry.SentryEvent,java.lang.Object)
com.google.android.gms.maps.internal.zzca: java.lang.Object zzd(java.lang.Class)
kotlinx.coroutines.InvokeOnCancel: java.lang.String toString()
com.google.common.collect.MapMakerInternalMap$Segment: void maybeDrainReferenceQueues()
androidx.fragment.app.Fragment: void onRequestPermissionsResult(int,java.lang.String[],int[])
com.google.gson.internal.LinkedHashTreeMap$AvlIterator: void reset(com.google.gson.internal.LinkedHashTreeMap$Node)
com.google.common.hash.LittleEndianByteArray$UnsafeByteArray: sun.misc.Unsafe access$200()
com.google.gson.internal.bind.JsonTreeReader: long nextLong()
com.google.android.gms.common.internal.zac: java.lang.String zag(android.content.Context,int)
com.google.android.gms.auth.api.signin.zab: zab()
kotlin.text.StringsKt__StringsKt$rangesDelimitedBy$2: java.lang.Object invoke(java.lang.Object,java.lang.Object)
com.google.android.gms.common.api.internal.zan: void zaa()
io.flutter.embedding.android.FlutterSurfaceView: boolean gatherTransparentRegion(android.graphics.Region)
androidx.collection.MapCollections$MapIterator: java.lang.Object getKey()
io.flutter.embedding.engine.systemchannels.MouseCursorChannel: MouseCursorChannel(io.flutter.embedding.engine.dart.DartExecutor)
io.flutter.embedding.engine.renderer.FlutterRenderer: void addIsDisplayingFlutterUiListener(io.flutter.embedding.engine.renderer.FlutterUiDisplayListener)
com.google.gson.Gson: com.google.gson.TypeAdapter getAdapter(com.google.gson.reflect.TypeToken)
io.sentry.hints.SubmissionResult: void setResult(boolean)
com.google.gson.JsonArray: int hashCode()
io.sentry.Hub: io.sentry.ISpan getSpan()
io.sentry.transport.HttpConnection: java.net.Proxy getProxy()
kotlin.text.StringsKt__StringsKt: boolean contains(java.lang.CharSequence,java.lang.CharSequence,boolean)
io.flutter.Log: void v(java.lang.String,java.lang.String)
com.tekartik.sqflite.SqflitePlugin$BgResult: void notImplemented()
com.google.android.gms.common.internal.zzai: zzai()
androidx.core.app.NotificationCompatBuilder: android.app.Notification build()
io.sentry.SentryOptions: void setEnableDeduplication(java.lang.Boolean)
kotlinx.coroutines.EventLoopImplBase$DelayedTask: int getIndex()
androidx.fragment.app.FragmentTransitionCompat21: void replaceTargets(java.lang.Object,java.util.ArrayList,java.util.ArrayList)
com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment: com.google.common.collect.MapMakerInternalMap$Segment self()
kotlinx.coroutines.android.HandlerContext: HandlerContext(android.os.Handler,java.lang.String,boolean)
io.sentry.Span: void finish()
com.google.android.gms.maps.model.Gap: java.lang.String toString()
androidx.fragment.app.FragmentManagerViewModel: FragmentManagerViewModel(boolean)
io.sentry.Span: java.lang.String getTag(java.lang.String)
androidx.lifecycle.ClassesInfoCache: boolean hasLifecycleMethods(java.lang.Class)
androidx.fragment.app.FragmentManagerImpl: boolean dispatchPrepareOptionsMenu(android.view.Menu)
androidx.fragment.app.FragmentManagerImpl$2: void run()
com.google.android.gms.maps.model.PolylineOptions: com.google.android.gms.maps.model.PolylineOptions color(int)
kotlinx.coroutines.JobSupport: void addSuppressedExceptions(java.lang.Throwable,java.util.List)
com.google.common.reflect.TypeToken$TypeFilter: com.google.common.reflect.TypeToken$TypeFilter[] values()
io.sentry.SentryBaseEvent: SentryBaseEvent()
com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter: void write(com.google.gson.stream.JsonWriter,java.lang.Enum)
androidx.window.embedding.SplitRule: SplitRule(int,int,float,int)
io.sentry.protocol.SdkVersion: java.lang.String getVersion()
io.flutter.plugins.pathprovider.PathProviderPlugin$PathProviderBackgroundThread: void getStorageDirectory(io.flutter.plugin.common.MethodChannel$Result)
com.google.android.gms.common.api.internal.zzd: void onSaveInstanceState(android.os.Bundle)
io.sentry.SentryTracer: io.sentry.protocol.SentryId getEventId()
com.google.common.io.Files$FilePredicate$1: java.lang.String toString()
com.google.android.gms.dynamite.DynamiteModule$LoadingException: DynamiteModule$LoadingException(java.lang.String,com.google.android.gms.dynamite.zzp)
io.flutter.plugins.sharedpreferences.MethodCallHandlerImpl$1: MethodCallHandlerImpl$1(io.flutter.plugins.sharedpreferences.MethodCallHandlerImpl,android.content.SharedPreferences$Editor,io.flutter.plugin.common.MethodChannel$Result)
io.sentry.protocol.Device: void setOnline(java.lang.Boolean)
io.sentry.CircularFifoQueue: boolean access$102(io.sentry.CircularFifoQueue,boolean)
io.sentry.IScopeObserver: void removeTag(java.lang.String)
androidx.core.app.NotificationCompatBuilder: java.util.List getPeople(java.util.List)
io.sentry.ISentryClient: io.sentry.protocol.SentryId captureEvent(io.sentry.SentryEvent,io.sentry.Scope,java.lang.Object)
com.google.gson.Gson: com.google.gson.TypeAdapter getAdapter(java.lang.Class)
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$1: void setDirection(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
com.google.gson.internal.JavaVersion: int parseDotted(java.lang.String)
androidx.core.app.CoreComponentFactory: android.app.Application instantiateApplication(java.lang.ClassLoader,java.lang.String)
kotlinx.coroutines.android.HandlerContext: void cancelOnRejection(kotlin.coroutines.CoroutineContext,java.lang.Runnable)
com.google.android.gms.common.internal.safeparcel.SafeParcelWriter: void writeByteArray(android.os.Parcel,int,byte[],boolean)
com.google.android.gms.maps.internal.zzca: android.content.Context zzb(java.lang.Exception,android.content.Context)
kotlin.text.StringsKt__IndentKt: kotlin.jvm.functions.Function1 getIndentFunction$StringsKt__IndentKt(java.lang.String)
com.google.android.gms.common.api.internal.zag: zag(int,com.google.android.gms.common.api.internal.TaskApiCall,com.google.android.gms.tasks.TaskCompletionSource,com.google.android.gms.common.api.internal.StatusExceptionMapper)
io.sentry.NoOpLogger: void log(io.sentry.SentryLevel,java.lang.Throwable,java.lang.String,java.lang.Object[])
com.google.android.gms.common.internal.safeparcel.SafeParcelWriter: void writeParcelable(android.os.Parcel,int,android.os.Parcelable,int,boolean)
com.google.gson.JsonPrimitive: boolean isPrimitiveOrString(java.lang.Object)
com.google.android.gms.maps.GoogleMapOptions: com.google.android.gms.maps.GoogleMapOptions camera(com.google.android.gms.maps.model.CameraPosition)
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: void onAttachedToActivity(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding)
io.sentry.Scope: java.util.Map getExtras()
io.flutter.plugin.platform.PlatformPlugin$1: void setClipboardData(java.lang.String)
com.google.android.gms.dynamite.zzf: zzf()
com.google.android.gms.auth.api.signin.GoogleSignInAccount: void writeToParcel(android.os.Parcel,int)
androidx.window.core.Bounds: android.graphics.Rect toRect()
kotlin.jvm.internal.ClassReference: ClassReference(java.lang.Class)
kotlin.text.StringsKt__StringsKt: java.lang.String substringAfter$default(java.lang.String,char,java.lang.String,int,java.lang.Object)
androidx.collection.MapCollections$KeySet: boolean equals(java.lang.Object)
kotlinx.coroutines.internal.ExceptionsConstuctorKt$createConstructor$$inlined$safeCtor$3: java.lang.Throwable invoke(java.lang.Throwable)
com.google.android.gms.signin.internal.zak: zak(int,com.google.android.gms.common.ConnectionResult,com.google.android.gms.common.internal.zav)
io.sentry.android.core.util.MainThreadChecker: boolean isMainThread(long)
io.flutter.embedding.android.FlutterSurfaceView: void disconnectSurfaceFromRenderer()
com.google.android.gms.maps.zzah: void zzb()
androidx.window.embedding.SplitPlaceholderRule: int hashCode()
com.google.gson.internal.bind.TypeAdapters$7: TypeAdapters$7()
io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry: ShimPluginRegistry(io.flutter.embedding.engine.FlutterEngine)
io.flutter.embedding.android.FlutterImageView: void closeCurrentImage()
com.google.android.gms.common.internal.zzr: android.os.Handler zzf(com.google.android.gms.common.internal.zzr)
io.sentry.protocol.User: void setId(java.lang.String)
io.sentry.SentryExecutorService: SentryExecutorService(java.util.concurrent.ExecutorService)
io.sentry.protocol.Device: void setBatteryTemperature(java.lang.Float)
com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry: java.lang.Object getValue()
com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl: int hashCode()
com.google.gson.internal.LinkedTreeMap: java.util.Set entrySet()
io.sentry.UncaughtExceptionHandlerIntegration: java.lang.Throwable getUnhandledThrowable(java.lang.Thread,java.lang.Throwable)
com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper: void setValue(com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry,java.lang.Object)
io.flutter.embedding.engine.systemchannels.TextInputChannel: java.util.HashMap createEditingStateJSON(java.lang.String,int,int,int,int)
io.flutter.plugins.pathprovider.PathProviderPlugin$PathProviderBackgroundThread: void getApplicationSupportDirectory(io.flutter.plugin.common.MethodChannel$Result)
com.google.gson.internal.ConstructorConstructor$9: ConstructorConstructor$9(com.google.gson.internal.ConstructorConstructor)
io.flutter.embedding.android.FlutterView: boolean onGenericMotionEvent(android.view.MotionEvent)
io.flutter.view.AccessibilityBridge$1: void announce(java.lang.String)
io.sentry.android.ndk.NativeModuleListLoader: void clearModuleList()
kotlin.collections.EmptySet: boolean containsAll(java.util.Collection)
io.sentry.util.Pair: java.lang.Object getFirst()
kotlinx.coroutines.JobSupport: void setParentHandle$kotlinx_coroutines_core(kotlinx.coroutines.ChildHandle)
io.sentry.SynchronizedQueue: java.util.Collection decorated()
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation: PlatformChannel$DeviceOrientation(java.lang.String,int,java.lang.String)
io.flutter.plugin.common.JSONMethodCodec: java.nio.ByteBuffer encodeSuccessEnvelope(java.lang.Object)
com.google.gson.internal.ConstructorConstructor$11: ConstructorConstructor$11(com.google.gson.internal.ConstructorConstructor)
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType: io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType[] values()
com.google.android.gms.common.internal.AccountAccessor: android.accounts.Account getAccountBinderSafe(com.google.android.gms.common.internal.IAccountAccessor)
io.flutter.embedding.android.FlutterTextureView: void attachToRenderer(io.flutter.embedding.engine.renderer.FlutterRenderer)
androidx.window.embedding.SplitRuleParser: SplitRuleParser()
androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.Lifecycle$State getStateAfter(androidx.lifecycle.Lifecycle$Event)
androidx.collection.SparseArrayCompat: java.lang.Object get(int,java.lang.Object)
kotlinx.coroutines.JobSupportKt: kotlinx.coroutines.internal.Symbol access$getCOMPLETING_ALREADY$p()
androidx.fragment.app.Fragment$2: Fragment$2(androidx.fragment.app.Fragment)
kotlin.collections.EmptyMap: EmptyMap()
io.flutter.plugin.platform.PlatformViewsController: io.flutter.embedding.engine.systemchannels.PlatformViewsChannel access$1400(io.flutter.plugin.platform.PlatformViewsController)
com.google.common.hash.AbstractHasher: AbstractHasher()
com.tekartik.sqflite.SqflitePlugin: java.lang.String toString(java.lang.Object)
com.google.common.util.concurrent.AbstractFuture: java.lang.String userObjectToString(java.lang.Object)
com.google.gson.internal.LinkedTreeMap: void replaceInParent(com.google.gson.internal.LinkedTreeMap$Node,com.google.gson.internal.LinkedTreeMap$Node)
io.sentry.adapters.CollectionAdapter: com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,com.google.gson.JsonSerializationContext)
com.google.android.gms.maps.model.MarkerOptions: com.google.android.gms.maps.model.MarkerOptions snippet(java.lang.String)
com.google.android.gms.internal.maps.zzy: void zzx(float)
com.google.android.gms.internal.maps.zzy: int zzi()
androidx.fragment.app.BackStackRecord: BackStackRecord(androidx.fragment.app.FragmentManagerImpl)
io.flutter.embedding.engine.FlutterEngine$1: void onPreEngineRestart()
io.sentry.protocol.SentrySpan: java.util.Map getTags()
io.sentry.Scope: void clear()
com.tekartik.sqflite.SqflitePlugin: boolean query(com.tekartik.sqflite.Database,com.tekartik.sqflite.operation.Operation)
com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry: void setValue(java.lang.Object)
kotlinx.coroutines.CompletedWithCancellation: java.lang.String toString()
androidx.fragment.app.FragmentManagerViewModel: boolean addRetainedFragment(androidx.fragment.app.Fragment)
kotlinx.coroutines.internal.SystemPropsKt__SystemProps_commonKt: int systemProp(java.lang.String,int,int,int)
io.sentry.RequestDetails: java.util.Map getHeaders()
com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$Node removeInternalByKey(java.lang.Object)
com.google.android.gms.common.util.CrashUtils: boolean addDynamiteErrorToDropBox(android.content.Context,java.lang.Throwable)
com.google.gson.stream.JsonReader: void skipQuotedValue(char)
com.google.gson.stream.JsonWriter: void writeDeferredName()
io.sentry.config.PropertiesProvider: java.lang.String getProperty(java.lang.String)
kotlin.internal.PlatformImplementations$ReflectThrowable: PlatformImplementations$ReflectThrowable()
io.flutter.plugin.editing.InputConnectionAdaptor: boolean performContextMenuAction(int)
io.flutter.view.VsyncWaiter$DisplayListener: void onDisplayRemoved(int)
com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper: com.google.common.collect.MapMakerInternalMap$Segment newSegment(com.google.common.collect.MapMakerInternalMap,int,int)
com.google.android.gms.maps.model.CameraPosition$Builder: com.google.android.gms.maps.model.CameraPosition$Builder tilt(float)
com.google.android.gms.common.Feature: void writeToParcel(android.os.Parcel,int)
io.sentry.android.core.SentryInitProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])
com.google.android.gms.maps.model.ButtCap: ButtCap()
io.flutter.embedding.android.FlutterSplashView$SavedState: android.os.Bundle access$702(io.flutter.embedding.android.FlutterSplashView$SavedState,android.os.Bundle)
com.google.gson.internal.bind.TypeAdapters$12: void write(com.google.gson.stream.JsonWriter,java.lang.Number)
io.flutter.plugin.editing.ListenableEditingState: java.lang.String toString()
com.google.android.gms.common.internal.BaseGmsClient: void disconnect(java.lang.String)
androidx.activity.ComponentActivity: java.lang.Object onRetainCustomNonConfigurationInstance()
com.google.android.gms.maps.zzx: void zzb()
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.NavigationChannel getNavigationChannel()
com.google.android.gms.common.GoogleApiAvailability: android.app.PendingIntent getErrorResolutionPendingIntent(android.content.Context,int,int)
com.google.common.base.MoreObjects$ToStringHelper: com.google.common.base.MoreObjects$ToStringHelper addHolder(java.lang.String,java.lang.Object)
com.google.android.gms.common.internal.BaseGmsClient: boolean isConnecting()
io.sentry.SentryOptions: java.lang.String getOutboxPath()
io.flutter.embedding.android.FlutterSurfaceView: FlutterSurfaceView(android.content.Context,boolean)
com.google.android.gms.maps.zzb: void zzc(com.google.android.gms.internal.maps.zzx)
com.google.common.collect.RegularImmutableList: int internalArrayStart()
io.sentry.SentryOptions: boolean isEnableNdk()
com.google.common.reflect.Types$JavaVersion$1: Types$JavaVersion$1(java.lang.String,int)
io.flutter.embedding.engine.systemchannels.RestorationChannel$1: RestorationChannel$1(io.flutter.embedding.engine.systemchannels.RestorationChannel,byte[])
androidx.fragment.app.Fragment: void onMultiWindowModeChanged(boolean)
com.google.android.gms.maps.model.LatLng: boolean equals(java.lang.Object)
com.google.android.gms.internal.maps.zzv: int zzg()
com.google.android.gms.maps.model.Polyline: Polyline(com.google.android.gms.internal.maps.zzad)
io.sentry.SentryBaseEvent: void removeTag(java.lang.String)
com.google.gson.internal.bind.TypeAdapters$23: void write(com.google.gson.stream.JsonWriter,java.net.InetAddress)
com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper: com.google.common.collect.MapMakerInternalMap$Segment newSegment(com.google.common.collect.MapMakerInternalMap,int,int)
androidx.collection.MapCollections$ValuesCollection: boolean isEmpty()
androidx.window.embedding.ExtensionEmbeddingBackend: void unregisterSplitListenerForActivity(androidx.core.util.Consumer)
io.flutter.plugins.googlemaps.TileProviderController$Worker: void notImplemented()
io.sentry.transport.AsyncHttpTransport$EnvelopeSender: java.lang.Object access$400(io.sentry.transport.AsyncHttpTransport$EnvelopeSender)
io.flutter.view.AccessibilityBridge$StringAttributeType: io.flutter.view.AccessibilityBridge$StringAttributeType valueOf(java.lang.String)
kotlinx.coroutines.EventLoopImplBase: boolean shouldUnpark(kotlinx.coroutines.EventLoopImplBase$DelayedTask)
com.google.android.gms.common.internal.zav: boolean equals(java.lang.Object)
com.google.common.collect.MapMakerInternalMap$KeySet: MapMakerInternalMap$KeySet(com.google.common.collect.MapMakerInternalMap)
androidx.window.embedding.SplitRuleParser: java.util.Set parseSplitRules$window_release(android.content.Context,int)
com.google.gson.internal.$Gson$Types$GenericArrayTypeImpl: boolean equals(java.lang.Object)
io.flutter.plugin.platform.PlatformViewsController: void validateVirtualDisplayDimensions(int,int)
io.sentry.Hub: io.sentry.SpanContext getSpanContext(java.lang.Throwable)
com.google.android.gms.maps.model.zzj: java.lang.Object[] newArray(int)
com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment: com.google.common.collect.MapMakerInternalMap$Segment self()
io.sentry.protocol.Mechanism: Mechanism()
io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsEmojiModifier(int)
io.sentry.protocol.Device: java.lang.String getId()
com.google.gson.stream.JsonWriter: void setSerializeNulls(boolean)
androidx.fragment.app.FragmentActivity: void onMultiWindowModeChanged(boolean)
com.google.gson.GsonBuilder: com.google.gson.GsonBuilder serializeNulls()
com.google.android.gms.common.SupportErrorDialogFragment: SupportErrorDialogFragment()
kotlin.ranges.RangesKt___RangesKt: kotlin.ranges.IntProgression downTo(int,int)
io.flutter.plugins.googlemaps.GoogleMapBuilder: void setInitialMarkers(java.lang.Object)
com.google.common.collect.MapMakerInternalMap$Values: void clear()
com.google.gson.internal.UnsafeAllocator: UnsafeAllocator()
kotlinx.coroutines.CoroutineId: java.lang.String updateThreadContext(kotlin.coroutines.CoroutineContext)
androidx.window.layout.SidecarAdapter$Companion: SidecarAdapter$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
com.google.android.gms.maps.zzah: void zza(com.google.android.gms.maps.OnMapReadyCallback)
com.google.android.gms.maps.model.Marker: java.lang.String getId()
android.support.v4.app.RemoteActionCompatParcelizer: androidx.core.app.RemoteActionCompat read(androidx.versionedparcelable.VersionedParcel)
com.google.common.hash.Hashing$ChecksumType: Hashing$ChecksumType(java.lang.String,int,java.lang.String,com.google.common.hash.Hashing$1)
io.sentry.android.core.DefaultAndroidEventProcessor: android.app.ActivityManager$MemoryInfo getMemInfo()
com.google.android.gms.common.api.internal.LifecycleCallback: com.google.android.gms.common.api.internal.LifecycleFragment getFragment(android.app.Activity)
com.google.common.util.concurrent.AbstractFuture$TrustedFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)
kotlinx.coroutines.UndispatchedMarker: java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2)
com.google.common.collect.ImmutableSet: java.util.Iterator iterator()
androidx.lifecycle.ProcessLifecycleOwner$3: ProcessLifecycleOwner$3(androidx.lifecycle.ProcessLifecycleOwner)
kotlin.coroutines.CombinedContext: java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2)
io.flutter.plugins.googlemaps.PolygonController: void setVisible(boolean)
io.sentry.SendCachedEnvelopeFireAndForgetIntegration$SendFireAndForget: void send()
kotlin.jvm.internal.Reflection: java.lang.String renderLambdaToString(kotlin.jvm.internal.FunctionBase)
com.google.common.collect.MapMakerInternalMap$Values: boolean isEmpty()
io.flutter.plugin.platform.PlatformViewsController: io.flutter.embedding.engine.FlutterOverlaySurface createOverlaySurface()
io.flutter.plugin.common.StandardMessageCodec$ExposedByteArrayOutputStream: StandardMessageCodec$ExposedByteArrayOutputStream()
io.sentry.protocol.SentryId: java.util.UUID fromStringSentryId(java.lang.String)
io.flutter.plugins.googlemaps.GoogleMapController: void setTiltGesturesEnabled(boolean)
com.google.android.gms.auth.api.signin.zab: java.lang.Object createFromParcel(android.os.Parcel)
io.sentry.SentryOptions: java.lang.Double getTracesSampleRate()
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction: AccessibilityBridge$CustomAccessibilityAction()
androidx.window.embedding.SplitController: SplitController()
com.google.android.gms.common.api.internal.NonGmsServiceBrokerClient: java.lang.String getLastDisconnectMessage()
com.google.android.gms.tasks.zzw: java.lang.Exception getException()
kotlinx.coroutines.InvokeOnCancel: void invoke(java.lang.Throwable)
androidx.fragment.app.BackStackState$1: BackStackState$1()
io.sentry.android.ndk.SentryNdkUtil: SentryNdkUtil()
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: void detachFromBroadcastReceiver()
io.flutter.embedding.engine.FlutterJNI: void nativeDispatchPlatformMessage(long,java.lang.String,java.nio.ByteBuffer,int,int)
io.sentry.NoOpSerializer: void serialize(io.sentry.SentryEnvelope,java.io.OutputStream)
com.google.gson.internal.LinkedTreeMap: java.lang.Object remove(java.lang.Object)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: void onBackPressed()
io.sentry.Session: java.lang.String getDistinctId()
io.flutter.plugins.googlemaps.PolylineBuilder: void setJointType(int)
com.google.gson.annotations.SerializedName: java.lang.String[] alternate()
kotlin.jvm.internal.FunctionReference: boolean isOperator()
io.sentry.protocol.Mechanism: void setSynthetic(java.lang.Boolean)
com.google.gson.DefaultDateTypeAdapter: DefaultDateTypeAdapter(java.lang.Class)
com.google.common.reflect.TypeToken$TypeFilter: TypeToken$TypeFilter(java.lang.String,int)
kotlinx.coroutines.CompletedExceptionally: CompletedExceptionally(java.lang.Throwable,boolean)
io.sentry.IHub: void addBreadcrumb(java.lang.String,java.lang.String)
com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper: void putThread(com.google.common.util.concurrent.AbstractFuture$Waiter,java.lang.Thread)
io.sentry.Scope: void addAttachment(io.sentry.Attachment)
kotlinx.coroutines.internal.DispatchedContinuation: boolean isReusable()
com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory: com.google.gson.TypeAdapter getTypeAdapter(com.google.gson.internal.ConstructorConstructor,com.google.gson.Gson,com.google.gson.reflect.TypeToken,com.google.gson.annotations.JsonAdapter)
io.flutter.plugins.connectivity.ConnectivityMethodChannelHandler: ConnectivityMethodChannelHandler(io.flutter.plugins.connectivity.Connectivity)
io.flutter.embedding.engine.systemchannels.PlatformChannel: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle decodeSystemChromeStyle(org.json.JSONObject)
io.sentry.protocol.App: void acceptUnknownProperties(java.util.Map)
androidx.fragment.app.FragmentManagerImpl$StartEnterTransitionListener: void onStartEnterTransition()
androidx.window.embedding.EmbeddingAdapter: java.util.function.Predicate translateActivityIntentPredicates(java.util.Set)
com.google.gson.internal.bind.TypeAdapters$13: TypeAdapters$13()
com.google.android.gms.common.ConnectionResult: int getErrorCode()
io.sentry.HubAdapter: java.lang.Object clone()
androidx.collection.ArrayMap: boolean retainAll(java.util.Collection)
kotlin.text.StringsKt__StringsKt: int indexOf$default(java.lang.CharSequence,java.lang.String,int,boolean,int,java.lang.Object)
io.sentry.android.core.EnvelopeFileObserverIntegration$OutboxEnvelopeFileObserverIntegration: EnvelopeFileObserverIntegration$OutboxEnvelopeFileObserverIntegration(io.sentry.android.core.EnvelopeFileObserverIntegration$1)
io.sentry.android.core.ActivityLifecycleIntegration: void close()
kotlin.collections.CollectionsKt__CollectionsKt: void throwIndexOverflow()
io.flutter.embedding.android.FlutterView: FlutterView(android.content.Context,android.util.AttributeSet,io.flutter.embedding.android.FlutterTextureView)
com.google.gson.internal.bind.TypeAdapters$4: void write(com.google.gson.stream.JsonWriter,java.lang.Boolean)
com.google.gson.internal.JavaVersion: int getMajorJavaVersion()
android.support.v4.app.RemoteActionCompatParcelizer: void write(androidx.core.app.RemoteActionCompat,androidx.versionedparcelable.VersionedParcel)
com.google.common.hash.LittleEndianByteArray$UnsafeByteArray$3: sun.misc.Unsafe run()
io.sentry.transport.ReusableCountLatch: void decrement()
androidx.fragment.app.FragmentManagerImpl: void addFragment(androidx.fragment.app.Fragment,boolean)
com.google.android.gms.maps.zzaf: void zzb(com.google.android.gms.maps.internal.IGoogleMapDelegate)
io.flutter.plugins.googlemaps.MarkersController: void changeMarkers(java.util.List)
io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding: io.flutter.plugin.common.BinaryMessenger getBinaryMessenger()
io.flutter.embedding.android.FlutterSplashView: void access$200(io.flutter.embedding.android.FlutterSplashView)
com.google.gson.internal.bind.JsonTreeReader$1: void close()
com.google.gson.internal.LinkedTreeMap$EntrySet: java.util.Iterator iterator()
com.google.android.gms.internal.maps.zzv: com.google.android.gms.maps.model.LatLng zzi()
io.flutter.plugin.platform.PlatformPlugin: void setClipboardData(java.lang.String)
com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$Node findByObject(java.lang.Object)
io.sentry.SentryExecutorService: void close(long)
com.google.android.gms.common.internal.zac: java.lang.String zaa(android.content.Context)
io.flutter.plugins.googlemaps.GoogleMapController: void onInfoWindowClick(com.google.android.gms.maps.model.Marker)
com.google.gson.stream.JsonReader: void push(int)
com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory: com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken)
io.sentry.android.core.DefaultAndroidEventProcessor: java.util.List getDebugImages()
kotlinx.coroutines.CoroutineStart: CoroutineStart(java.lang.String,int)
io.sentry.SynchronizedCollection: int size()
com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper: com.google.common.collect.MapMakerInternalMap$Strength valueStrength()
io.sentry.SentryTracer: io.sentry.Span getRoot()
io.flutter.embedding.android.FlutterSurfaceView: void changeSurfaceSize(int,int)
io.flutter.embedding.android.FlutterView$2: void onFlutterUiDisplayed()
androidx.fragment.app.FragmentManagerImpl$3: void onAnimationEnd(android.view.animation.Animation)
io.sentry.Sentry: Sentry()
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: void pushClipRect(int,int,int,int)
io.sentry.protocol.Device: java.lang.Long getMemorySize()
io.sentry.protocol.User: User(io.sentry.protocol.User)
androidx.collection.MapCollections$KeySet: boolean remove(java.lang.Object)
io.sentry.android.core.ActivityLifecycleIntegration: void onActivityStarted(android.app.Activity)
io.flutter.plugin.editing.ListenableEditingState: void addEditingStateListener(io.flutter.plugin.editing.ListenableEditingState$EditingStateWatcher)
kotlinx.coroutines.internal.ExceptionsConstuctorKt$tryCopyException$4$1: java.lang.Void invoke(java.lang.Throwable)
kotlinx.coroutines.intrinsics.CancellableKt: void startCoroutineCancellable$default(kotlin.jvm.functions.Function2,java.lang.Object,kotlin.coroutines.Continuation,kotlin.jvm.functions.Function1,int,java.lang.Object)
com.google.android.gms.dynamite.DynamiteModule: com.google.android.gms.dynamite.DynamiteModule load(android.content.Context,com.google.android.gms.dynamite.DynamiteModule$VersionPolicy,java.lang.String)
androidx.fragment.app.FragmentFactory: boolean isFragmentClass(java.lang.ClassLoader,java.lang.String)
androidx.lifecycle.ProcessLifecycleOwnerInitializer: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)
io.flutter.embedding.engine.systemchannels.PlatformChannel: java.util.List access$300(io.flutter.embedding.engine.systemchannels.PlatformChannel,org.json.JSONArray)
androidx.window.embedding.ActivityFilter: java.lang.String getIntentAction()
com.google.gson.FieldNamingPolicy$6: java.lang.String translateName(java.lang.reflect.Field)
com.google.android.gms.common.api.internal.BackgroundDetector: void addListener(com.google.android.gms.common.api.internal.BackgroundDetector$BackgroundStateChangeListener)
com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter jsonValue(java.lang.String)
io.flutter.view.AccessibilityBridge$Action: AccessibilityBridge$Action(java.lang.String,int,int)
com.google.gson.reflect.TypeToken: java.lang.Class getRawType()
io.flutter.view.AccessibilityBridge$SemanticsNode: void updateWith(java.nio.ByteBuffer,java.lang.String[],java.nio.ByteBuffer[])
com.google.android.gms.common.internal.GmsClient: java.util.Set zaa(java.util.Set)
androidx.fragment.app.FragmentState$1: androidx.fragment.app.FragmentState[] newArray(int)
com.google.android.gms.dynamite.DynamiteModule$LoadingException: DynamiteModule$LoadingException(java.lang.String,java.lang.Throwable,com.google.android.gms.dynamite.zzp)
io.flutter.FlutterInjector$Builder$NamedThreadFactory: java.lang.Thread newThread(java.lang.Runnable)
io.sentry.config.EnvironmentVariablePropertiesProvider: java.lang.String getProperty(java.lang.String)
androidx.fragment.app.FragmentActivity: void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int)
com.google.android.gms.maps.model.TileOverlayOptions: TileOverlayOptions(android.os.IBinder,boolean,float,boolean,float)
com.google.gson.internal.bind.TypeAdapters$8: java.lang.Object read(com.google.gson.stream.JsonReader)
io.flutter.embedding.engine.systemchannels.NavigationChannel: void popRoute()
io.flutter.plugin.platform.VirtualDisplayController: void onInputConnectionUnlocked()
com.google.common.hash.LittleEndianByteArray$UnsafeByteArray$3: java.lang.Object run()
io.flutter.plugin.platform.PlatformViewsController: void access$1300(io.flutter.plugin.platform.PlatformViewsController,io.flutter.plugin.platform.VirtualDisplayController)
io.flutter.plugins.googlemaps.CircleController: void setStrokeWidth(float)
com.google.android.gms.internal.maps.zza: android.os.Parcel zzH(int,android.os.Parcel)
io.sentry.protocol.SentryThread: java.lang.String getState()
com.google.gson.internal.LinkedHashTreeMap$AvlIterator: LinkedHashTreeMap$AvlIterator()
kotlinx.coroutines.Job$Key: Job$Key()
kotlinx.coroutines.scheduling.DefaultScheduler: void close()
androidx.window.embedding.SplitController: void clearRegisteredRules()
io.sentry.transport.AsyncHttpTransport: io.sentry.SentryOptions access$100(io.sentry.transport.AsyncHttpTransport)
kotlinx.coroutines.internal.DispatchedContinuation: java.lang.Object takeState$kotlinx_coroutines_core()
com.google.android.gms.common.internal.zai: void onConnectionFailed(com.google.android.gms.common.ConnectionResult)
kotlinx.coroutines.Job$DefaultImpls: kotlin.coroutines.CoroutineContext minusKey(kotlinx.coroutines.Job,kotlin.coroutines.CoroutineContext$Key)
com.google.android.gms.common.api.internal.NonGmsServiceBrokerClient: void onServiceConnected(android.content.ComponentName,android.os.IBinder)
com.google.android.gms.common.api.internal.NonGmsServiceBrokerClient: com.google.android.gms.common.Feature[] getAvailableFeatures()
com.google.gson.internal.bind.TreeTypeAdapter: com.google.gson.TypeAdapterFactory newFactory(com.google.gson.reflect.TypeToken,java.lang.Object)
com.google.android.gms.common.api.internal.zaaf: com.google.android.gms.tasks.TaskCompletionSource zab()
com.google.android.gms.maps.model.SquareCap: SquareCap()
io.sentry.android.core.AndroidOptionsInitializer: java.lang.Class loadNdkIfAvailable(io.sentry.SentryOptions,io.sentry.android.core.IBuildInfoProvider,io.sentry.android.core.ILoadClass)
com.google.android.gms.common.internal.ApiExceptionUtil: com.google.android.gms.common.api.ApiException fromStatus(com.google.android.gms.common.api.Status)
androidx.collection.ArraySet$1: void colPut(java.lang.Object,java.lang.Object)
androidx.window.layout.HardwareFoldingFeature: boolean equals(java.lang.Object)
io.sentry.protocol.SdkInfo: void setVersionPatchlevel(java.lang.Integer)
kotlin.text.StringsKt__IndentKt$getIndentFunction$1: java.lang.Object invoke(java.lang.Object)
io.sentry.OutboxSender: void processEnvelope(io.sentry.SentryEnvelope,java.lang.Object)
io.sentry.protocol.SentryException: void setThreadId(java.lang.Long)
com.google.android.gms.maps.model.MarkerOptions: com.google.android.gms.maps.model.MarkerOptions rotation(float)
kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext: AbstractChannel$ReceiveHasNext(kotlinx.coroutines.channels.AbstractChannel$Itr,kotlinx.coroutines.CancellableContinuation)
com.google.android.gms.common.internal.RootTelemetryConfiguration: int getMaxMethodInvocationsInBatch()
com.google.gson.internal.LinkedHashTreeMap$AvlBuilder: void reset(int)
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$5: java.lang.Object invoke(java.lang.Object)
com.tekartik.sqflite.SqflitePlugin: void onGetDatabasesPathCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$7: void invoke(long)
com.google.gson.internal.LinkedHashTreeMap: LinkedHashTreeMap(java.util.Comparator)
androidx.fragment.app.FragmentManagerImpl: void dispatchLowMemory()
androidx.window.layout.WindowMetricsCalculatorCompat: android.graphics.Rect computeWindowBoundsN$window_release(android.app.Activity)
androidx.fragment.app.FragmentTransition: androidx.fragment.app.FragmentTransitionImpl chooseImpl(androidx.fragment.app.Fragment,androidx.fragment.app.Fragment)
io.sentry.transport.ReusableCountLatch$Sync: ReusableCountLatch$Sync(int)
io.flutter.embedding.android.FlutterTextureView: io.flutter.embedding.engine.renderer.FlutterRenderer getAttachedRenderer()
io.flutter.embedding.android.FlutterSplashView: java.lang.String access$500(io.flutter.embedding.android.FlutterSplashView)
kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.Throwable createFinalException(java.lang.Throwable,java.lang.Throwable,java.util.ArrayDeque)
com.google.android.gms.internal.maps.zzw: com.google.android.gms.internal.maps.zzx zzb(android.os.IBinder)
com.google.android.gms.internal.base.zab: android.os.IBinder asBinder()
io.sentry.SentryEnvelopeItem$CachedItem: SentryEnvelopeItem$CachedItem(java.util.concurrent.Callable)
io.sentry.android.core.LifecycleWatcher: LifecycleWatcher(io.sentry.IHub,long,boolean,boolean,io.sentry.transport.ICurrentDateProvider)
io.sentry.Span: Span(io.sentry.TransactionContext,io.sentry.SentryTracer,io.sentry.IHub)
io.flutter.embedding.android.DrawableSplashScreen$1: void onAnimationCancel(android.animation.Animator)
io.sentry.protocol.Contexts: io.sentry.protocol.OperatingSystem getOperatingSystem()
com.google.common.collect.CollectPreconditions: void checkRemove(boolean)
com.google.gson.stream.JsonReader$1: JsonReader$1()
com.google.common.collect.MapMakerInternalMap$Strength: com.google.common.collect.MapMakerInternalMap$Strength valueOf(java.lang.String)
com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher: long fmix64(long)
io.flutter.plugins.googlemaps.GoogleMapController: void setMapType(int)
com.google.gson.internal.Excluder: boolean isValidVersion(com.google.gson.annotations.Since,com.google.gson.annotations.Until)
kotlin.collections.CollectionsKt__CollectionsKt: java.util.List emptyList()
com.google.android.gms.common.api.internal.zzb: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])
com.google.gson.internal.bind.TypeAdapters$23: java.lang.Object read(com.google.gson.stream.JsonReader)
io.sentry.Breadcrumb: void setCategory(java.lang.String)
kotlinx.coroutines.channels.ChannelResult$Companion: java.lang.Object closed-JP2dKIU(java.lang.Throwable)
com.google.android.gms.dynamite.zzb: java.lang.ClassLoader zzb()
io.sentry.protocol.Device$DeviceOrientation: io.sentry.protocol.Device$DeviceOrientation[] values()
com.google.common.util.concurrent.ThreadFactoryBuilder: ThreadFactoryBuilder()
kotlinx.coroutines.CancellableContinuationImpl: java.lang.Throwable getExceptionalResult$kotlinx_coroutines_core(java.lang.Object)
com.google.common.util.concurrent.AbstractFuture: java.lang.Object getUninterruptibly(java.util.concurrent.Future)
io.flutter.plugin.editing.TextEditingDelta: TextEditingDelta(java.lang.CharSequence,int,int,int,int)
androidx.lifecycle.ProcessLifecycleOwner$2: void onStart()
com.google.android.gms.dynamic.DeferredLifecycleHelper: void zad(com.google.android.gms.dynamic.DeferredLifecycleHelper,android.os.Bundle)
io.sentry.android.core.AnrIntegration: io.sentry.android.core.ANRWatchDog getANRWatchDog()
com.google.gson.internal.bind.TypeAdapters$35$1: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
com.google.common.collect.ImmutableList: int indexOf(java.lang.Object)
androidx.lifecycle.Lifecycling: androidx.lifecycle.GeneratedAdapter createGeneratedAdapter(java.lang.reflect.Constructor,java.lang.Object)
io.flutter.plugins.googlemaps.GoogleMapController: void dispose()
io.flutter.plugin.editing.TextInputPlugin: boolean canShowTextInput()
androidx.core.graphics.drawable.IconCompat: void onPreParceling(boolean)
com.google.common.util.concurrent.SettableFuture: boolean set(java.lang.Object)
androidx.fragment.app.FragmentActivity$HostCallbacks: java.lang.Object onGetHost()
com.google.android.gms.tasks.zzj: java.lang.Object zzb(com.google.android.gms.tasks.zzj)
androidx.fragment.app.FragmentManagerImpl: boolean isStateSaved()
com.google.gson.internal.reflect.ReflectionAccessor: com.google.gson.internal.reflect.ReflectionAccessor getInstance()
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$11: void invoke(boolean)
kotlinx.coroutines.JobNode: void setJob(kotlinx.coroutines.JobSupport)
com.google.common.hash.HashCode$LongHashCode: int bits()
io.flutter.view.AccessibilityBridge: io.flutter.view.AccessibilityBridge$SemanticsNode getRootSemanticsNode()
io.sentry.ITransaction: io.sentry.protocol.Contexts getContexts()
kotlinx.coroutines.Dispatchers: kotlinx.coroutines.MainCoroutineDispatcher getMain()
io.sentry.transport.QueuedThreadPoolExecutor$CancelledFuture: boolean isCancelled()
io.sentry.SentryOptions: java.lang.String getDistinctId()
io.sentry.SentryBaseEvent: java.lang.Object getExtra(java.lang.String)
io.flutter.embedding.engine.systemchannels.MouseCursorChannel: io.flutter.embedding.engine.systemchannels.MouseCursorChannel$MouseCursorMethodHandler access$000(io.flutter.embedding.engine.systemchannels.MouseCursorChannel)
com.google.android.gms.maps.model.PolygonOptions: com.google.android.gms.maps.model.PolygonOptions addHole(java.lang.Iterable)
com.google.android.gms.common.api.internal.LifecycleActivity: boolean zzd()
kotlinx.coroutines.DefaultExecutor: java.lang.Thread createThreadSync()
com.google.common.hash.HashCode$LongHashCode: HashCode$LongHashCode(long)
androidx.collection.MapCollections$KeySet: boolean containsAll(java.util.Collection)
com.tekartik.sqflite.operation.BaseOperation: BaseOperation()
com.google.android.gms.maps.GoogleMap: void setMinZoomPreference(float)
io.sentry.flutter.SentryFlutterPlugin: void captureEnvelope(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
androidx.window.layout.WindowMetricsCalculator$Companion: void reset()
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel: java.lang.String detailedExceptionString(java.lang.Exception)
io.sentry.NoOpTransaction: io.sentry.protocol.SentryId getEventId()
io.flutter.plugins.googlemaps.CirclesController: void changeCircles(java.util.List)
com.google.gson.internal.Excluder: boolean isValidSince(com.google.gson.annotations.Since)
io.sentry.SentryEvent: void setLevel(io.sentry.SentryLevel)
io.flutter.embedding.engine.FlutterEngine: boolean isAttachedToJni()
com.google.gson.GsonBuilder: GsonBuilder(com.google.gson.Gson)
kotlinx.coroutines.CompletedExceptionally: boolean getHandled()
kotlinx.coroutines.channels.AbstractChannel$Itr: boolean hasNextResult(java.lang.Object)
com.google.gson.internal.Streams$AppendableWriter: void flush()
io.flutter.embedding.android.FlutterTextureView$1: void onSurfaceTextureUpdated(android.graphics.SurfaceTexture)
kotlin.coroutines.jvm.internal.SuspendLambda: java.lang.String toString()
io.flutter.embedding.android.FlutterActivity: void onBackPressed()
io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener: VirtualDisplayController$OneTimeOnDrawListener(android.view.View,java.lang.Runnable)
com.google.gson.internal.bind.JsonTreeReader: void skipValue()
kotlin.text.StringsKt__IndentKt$getIndentFunction$1: StringsKt__IndentKt$getIndentFunction$1()
androidx.window.embedding.EmbeddingAdapter: java.util.function.Predicate translateIntentPredicates(java.util.Set)
io.sentry.protocol.DebugImage: void setDebugId(java.lang.String)
com.google.common.util.concurrent.AbstractFuture$SynchronizedHelper: boolean casListeners(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Listener,com.google.common.util.concurrent.AbstractFuture$Listener)
io.sentry.protocol.OperatingSystem: void setVersion(java.lang.String)
com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper: com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper instance()
com.google.common.hash.LittleEndianByteArray$UnsafeByteArray: int access$100()
io.sentry.ITransportFactory: io.sentry.transport.ITransport create(io.sentry.SentryOptions,io.sentry.RequestDetails)
com.google.android.gms.internal.maps.zzy: void zzq(int)
kotlinx.coroutines.flow.internal.SafeCollector: kotlin.coroutines.jvm.internal.CoroutineStackFrame getCallerFrame()
com.google.android.gms.maps.GoogleMap: void setOnPolylineClickListener(com.google.android.gms.maps.GoogleMap$OnPolylineClickListener)
io.flutter.embedding.android.KeyboardManager$PerEventCallbackBuilder: io.flutter.embedding.android.KeyboardManager$Responder$OnKeyEventHandledCallback buildCallback()
androidx.core.graphics.drawable.IconCompat: java.lang.String getResPackage(android.graphics.drawable.Icon)
io.flutter.plugin.platform.VirtualDisplayController$1: VirtualDisplayController$1(io.flutter.plugin.platform.VirtualDisplayController,android.view.View,java.lang.Runnable)
com.google.android.gms.common.internal.safeparcel.SafeParcelReader: float readFloat(android.os.Parcel,int)
kotlin.Result$Failure: int hashCode()
io.flutter.embedding.engine.FlutterJNI: void deferredComponentInstallFailure(int,java.lang.String,boolean)
io.flutter.embedding.engine.FlutterJNI: boolean getIsSoftwareRenderingEnabled()
io.sentry.protocol.Device: java.util.TimeZone getTimezone()
io.sentry.android.core.util.RootChecker: boolean checkRootPackages()
com.google.android.gms.internal.base.zab: zab(java.lang.String)
androidx.core.graphics.drawable.IconCompatParcelizer: void write(androidx.core.graphics.drawable.IconCompat,androidx.versionedparcelable.VersionedParcel)
io.flutter.plugin.platform.PlatformViewRegistryImpl: boolean registerViewFactory(java.lang.String,io.flutter.plugin.platform.PlatformViewFactory)
com.google.common.util.concurrent.AbstractFuture: void executeListener(java.lang.Runnable,java.util.concurrent.Executor)
io.sentry.Stack$StackItem: io.sentry.ISentryClient getClient()
com.google.android.gms.internal.maps.zzv: void zzA(float)
io.flutter.plugin.editing.TextInputPlugin: void notifyViewExited()
kotlinx.coroutines.channels.AbstractChannel$Itr: java.lang.Object hasNext(kotlin.coroutines.Continuation)
com.google.gson.internal.ConstructorConstructor: com.google.gson.internal.ObjectConstructor get(com.google.gson.reflect.TypeToken)
com.google.android.gms.tasks.RuntimeExecutionException: RuntimeExecutionException(java.lang.Throwable)
io.sentry.ISentryClient: io.sentry.protocol.SentryId captureTransaction(io.sentry.protocol.SentryTransaction)
com.google.android.gms.common.GooglePlayServicesUtilLight: android.content.Context getRemoteContext(android.content.Context)
io.flutter.embedding.engine.renderer.FlutterRenderer: void surfaceChanged(int,int)
com.google.android.gms.common.internal.GetServiceRequest: GetServiceRequest(int,java.lang.String)
com.google.gson.internal.bind.util.ISO8601Utils: int indexOfNonDigit(java.lang.String,int)
com.google.common.base.Predicates$ObjectPredicate$2: java.lang.String toString()
com.google.android.gms.common.api.internal.zact: void zae(com.google.android.gms.common.api.internal.zacs)
io.sentry.Hub: void startSession()
com.google.android.gms.common.api.internal.zaad: void zah(boolean,com.google.android.gms.common.api.Status)
io.flutter.embedding.android.FlutterView$2: void onFlutterUiNoLongerDisplayed()
androidx.core.graphics.drawable.IconCompat: java.lang.String typeToString(int)
io.sentry.SentryOptions$BeforeSendCallback: io.sentry.SentryEvent execute(io.sentry.SentryEvent,java.lang.Object)
kotlin.UninitializedPropertyAccessException: UninitializedPropertyAccessException(java.lang.String)
com.google.gson.reflect.TypeToken: com.google.gson.reflect.TypeToken getArray(java.lang.reflect.Type)
kotlinx.coroutines.Unconfined: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)
androidx.arch.core.executor.DefaultTaskExecutor: void executeOnDiskIO(java.lang.Runnable)
androidx.fragment.app.FragmentActivity$HostCallbacks: boolean onHasView()
com.google.android.gms.maps.internal.zzbt: zzbt()
com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter: java.util.Collection read(com.google.gson.stream.JsonReader)
kotlinx.coroutines.internal.OnUndeliveredElementKt: kotlinx.coroutines.internal.UndeliveredElementException callUndeliveredElementCatchingException(kotlin.jvm.functions.Function1,java.lang.Object,kotlinx.coroutines.internal.UndeliveredElementException)
kotlinx.coroutines.channels.ConflatedChannel: boolean enqueueReceiveInternal(kotlinx.coroutines.channels.Receive)
com.google.common.reflect.TypeToken$TypeFilter$2: boolean apply(java.lang.Object)
io.sentry.transport.CurrentDateProvider: io.sentry.transport.ICurrentDateProvider getInstance()
androidx.collection.ArraySet$1: int colIndexOfValue(java.lang.Object)
io.sentry.android.ndk.NdkScopeObserver: NdkScopeObserver(io.sentry.SentryOptions,io.sentry.android.ndk.INativeScope)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: void remove(java.lang.Class)
kotlin.collections.EmptySet: boolean addAll(java.util.Collection)
kotlinx.coroutines.internal.MissingMainCoroutineDispatcher: boolean isDispatchNeeded(kotlin.coroutines.CoroutineContext)
io.sentry.NoOpTransaction: void finish()
com.google.android.gms.tasks.Task: Task()
com.google.android.gms.common.internal.BaseGmsClient: void zzk(com.google.android.gms.common.internal.BaseGmsClient,int)
com.google.gson.JsonArray: void add(com.google.gson.JsonElement)
io.sentry.config.PropertiesProviderFactory: PropertiesProviderFactory()
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: java.lang.Object invokeSuspend(java.lang.Object)
io.flutter.plugins.urllauncher.UrlLauncher: boolean canLaunch(java.lang.String)
io.sentry.Scope: java.util.List getFingerprint()
com.google.android.gms.common.api.internal.BasePendingResult: boolean isReady()
io.sentry.protocol.DebugMeta: void setImages(java.util.List)
androidx.fragment.app.FragmentManagerImpl: void dispatchOnFragmentPreCreated(androidx.fragment.app.Fragment,android.os.Bundle,boolean)
io.flutter.plugins.pathprovider.PathProviderPlugin: java.lang.String getPathProviderTemporaryDirectory()
com.google.android.gms.common.api.internal.zabn: zabn(com.google.android.gms.common.api.internal.zabq,int)
io.sentry.protocol.DebugImage: void setDebugFile(java.lang.String)
com.google.android.gms.maps.GoogleMap: void snapshot(com.google.android.gms.maps.GoogleMap$SnapshotReadyCallback)
androidx.core.graphics.drawable.IconCompat: int getResId(android.graphics.drawable.Icon)
io.flutter.plugins.googlemaps.MarkerController: boolean consumeTapEvents()
io.flutter.embedding.android.FlutterView: java.util.Set access$200(io.flutter.embedding.android.FlutterView)
kotlinx.coroutines.JobSupport: java.lang.Object cancelMakeCompleting(java.lang.Object)
io.flutter.plugins.googlemaps.PolygonsController: void addPolygon(java.lang.Object)
io.sentry.android.core.AppLifecycleIntegration: void register(io.sentry.IHub,io.sentry.SentryOptions)
io.sentry.android.core.ContextUtils: java.lang.String getVersionCodeDep(android.content.pm.PackageInfo)
io.flutter.embedding.android.FlutterSplashView: boolean isSplashScreenNeededNow()
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean hadFlag(io.flutter.view.AccessibilityBridge$Flag)
com.google.gson.Gson: java.lang.String toString()
androidx.collection.MapCollections$ValuesCollection: boolean retainAll(java.util.Collection)
androidx.lifecycle.LifecycleRegistry$ObserverWithState: LifecycleRegistry$ObserverWithState(androidx.lifecycle.LifecycleObserver,androidx.lifecycle.Lifecycle$State)
io.flutter.embedding.android.FlutterActivity: void onNewIntent(android.content.Intent)
androidx.versionedparcelable.VersionedParcel: androidx.versionedparcelable.VersionedParcelable readVersionedParcelable(androidx.versionedparcelable.VersionedParcelable,int)
kotlinx.coroutines.UndispatchedMarker: UndispatchedMarker()
com.google.common.hash.Murmur3_128HashFunction: java.lang.String toString()
io.sentry.adapters.TimeZoneDeserializerAdapter: TimeZoneDeserializerAdapter(io.sentry.SentryOptions)
io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry$ShimRegistrarAggregate: void onReattachedToActivityForConfigChanges(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding)
androidx.core.content.ContextCompat$Api28Impl: java.util.concurrent.Executor getMainExecutor(android.content.Context)
io.sentry.SentryEvent: void setFingerprints(java.util.List)
kotlin.text.StringsKt__StringsKt: kotlin.ranges.IntRange getIndices(java.lang.CharSequence)
com.google.android.gms.common.api.internal.ApiKey: int hashCode()
kotlinx.coroutines.CommonPool: java.util.concurrent.Executor getOrCreatePoolSync()
androidx.core.os.LocaleListCompat: LocaleListCompat(androidx.core.os.LocaleListInterface)
androidx.fragment.app.BackStackRecord: int commit()
androidx.versionedparcelable.ParcelImpl$1: androidx.versionedparcelable.ParcelImpl[] newArray(int)
io.flutter.embedding.android.AndroidTouchProcessor: boolean onGenericMotionEvent(android.view.MotionEvent)
androidx.fragment.app.FragmentManager: androidx.fragment.app.FragmentFactory getFragmentFactory()
kotlinx.coroutines.android.AndroidExceptionPreHandler: java.lang.reflect.Method preHandler()
io.sentry.transport.TransportResult: TransportResult()
androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl: void onSplitInfoChanged(java.util.List)
io.sentry.SentryOptions: boolean isEnableSessionTracking()
androidx.collection.ArraySet: int size()
com.google.common.collect.ImmutableList: int copyIntoArray(java.lang.Object[],int)
kotlinx.coroutines.NodeList: kotlinx.coroutines.NodeList getList()
kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext: kotlin.jvm.functions.Function1 resumeOnCancellationFun(java.lang.Object)
com.google.common.collect.MapMakerInternalMap$EntrySet: boolean remove(java.lang.Object)
com.javih.add2calendar.Add2CalendarPlugin: Add2CalendarPlugin(io.flutter.plugin.common.PluginRegistry$Registrar)
com.google.gson.internal.bind.ArrayTypeAdapter$1: ArrayTypeAdapter$1()
io.sentry.protocol.Device: void setFreeStorage(java.lang.Long)
io.sentry.SentryEnvelopeItemHeader: SentryEnvelopeItemHeader(io.sentry.SentryItemType,java.util.concurrent.Callable,java.lang.String,java.lang.String)
com.google.common.hash.HashCode$BytesHashCode: int bits()
io.sentry.android.core.ActivityLifecycleIntegration: void onActivityResumed(android.app.Activity)
androidx.window.embedding.ExtensionEmbeddingBackend: java.util.concurrent.locks.ReentrantLock access$getGlobalLock$cp()
io.sentry.protocol.SentryStackFrame: java.lang.String getInstructionAddr()
com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper: void putNext(com.google.common.util.concurrent.AbstractFuture$Waiter,com.google.common.util.concurrent.AbstractFuture$Waiter)
androidx.lifecycle.LifecycleRegistry: void addObserver(androidx.lifecycle.LifecycleObserver)
com.google.android.gms.tasks.zzw: zzw()
androidx.fragment.app.Fragment: void onActivityResult(int,int,android.content.Intent)
com.google.common.util.concurrent.AbstractFuture$Failure$1: AbstractFuture$Failure$1(java.lang.String)
kotlinx.coroutines.EventLoopImplBase$DelayedTask: void setHeap(kotlinx.coroutines.internal.ThreadSafeHeap)
com.google.android.gms.maps.MapView: void getMapAsync(com.google.android.gms.maps.OnMapReadyCallback)
com.google.android.gms.maps.internal.zzs: boolean zza(int,android.os.Parcel,android.os.Parcel,int)
io.flutter.embedding.android.FlutterImageView$SurfaceKind: FlutterImageView$SurfaceKind(java.lang.String,int)
com.google.android.gms.maps.model.zza: java.lang.Object[] newArray(int)
androidx.core.app.NotificationCompat$Builder: void setFlag(int,boolean)
androidx.fragment.app.FragmentManagerImpl: boolean dispatchOptionsItemSelected(android.view.MenuItem)
androidx.window.layout.HardwareFoldingFeature$Type$Companion: androidx.window.layout.HardwareFoldingFeature$Type getFOLD()
kotlinx.coroutines.android.AndroidDispatcherFactory: kotlinx.coroutines.MainCoroutineDispatcher createDispatcher(java.util.List)
io.sentry.SessionAdapter: java.util.Date converTimeStamp(java.lang.String,java.lang.String)
androidx.window.embedding.EmbeddingTranslatingCallback: void accept(java.lang.Object)
com.google.android.gms.internal.maps.zzg: com.google.android.gms.dynamic.IObjectWrapper zzg(android.graphics.Bitmap)
com.google.gson.internal.LinkedTreeMap: boolean equal(java.lang.Object,java.lang.Object)
kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object tryResumeWithException(java.lang.Throwable)
androidx.loader.app.LoaderManagerImpl$LoaderInfo: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])
io.flutter.embedding.engine.loader.FlutterLoader: java.lang.String getLookupKeyForAsset(java.lang.String)
kotlinx.coroutines.CancellableContinuationImpl: void multipleHandlersError(kotlin.jvm.functions.Function1,java.lang.Object)
io.sentry.SentryTracer: void setThrowable(java.lang.Throwable)
com.google.common.collect.MapMakerInternalMap$Segment: java.util.concurrent.atomic.AtomicReferenceArray newEntryArray(int)
io.flutter.embedding.android.FlutterImageView: void closeImageReader()
io.flutter.embedding.engine.dart.DartExecutor$1: DartExecutor$1(io.flutter.embedding.engine.dart.DartExecutor)
io.sentry.HubAdapter: void addBreadcrumb(io.sentry.Breadcrumb,java.lang.Object)
com.google.android.gms.common.api.internal.zah: void zac(com.google.android.gms.common.api.internal.zabq)
kotlinx.coroutines.scheduling.WorkQueue: kotlinx.coroutines.scheduling.Task pollBuffer()
com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry: java.lang.Object getValue()
kotlinx.coroutines.CoroutinesInternalError: CoroutinesInternalError(java.lang.String,java.lang.Throwable)
androidx.fragment.app.FragmentActivity: boolean onPreparePanel(int,android.view.View,android.view.Menu)
com.google.common.base.Preconditions: void checkArgument(boolean)
com.google.common.collect.ImmutableList$SubList: int size()
com.google.gson.internal.LinkedTreeMap$1: LinkedTreeMap$1()
com.google.gson.internal.bind.CollectionTypeAdapterFactory: com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken)
com.google.android.gms.common.internal.zav: void writeToParcel(android.os.Parcel,int)
kotlinx.coroutines.CompletedExceptionally: boolean makeHandled()
kotlinx.coroutines.CoroutineDispatcher$Key: CoroutineDispatcher$Key(kotlin.jvm.internal.DefaultConstructorMarker)
com.google.common.collect.SingletonImmutableSet: com.google.common.collect.UnmodifiableIterator iterator()
com.google.android.gms.common.wrappers.PackageManagerWrapper: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)
androidx.collection.MapCollections$EntrySet: boolean remove(java.lang.Object)
com.google.android.gms.maps.model.CameraPosition$Builder: com.google.android.gms.maps.model.CameraPosition build()
com.google.android.gms.dynamite.DynamiteModule: int zza(android.content.Context,java.lang.String,boolean)
com.google.android.gms.tasks.zzw: boolean zze(java.lang.Object)
io.sentry.android.ndk.SentryNdk: void close()
com.google.gson.internal.bind.TypeAdapters$16: TypeAdapters$16()
com.google.android.gms.maps.internal.zzby: void setCompassEnabled(boolean)
io.flutter.plugin.platform.PlatformViewsController: void attachToView(io.flutter.embedding.android.FlutterView)
io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness: PlatformChannel$Brightness(java.lang.String,int,java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void onFirstFrame()
androidx.core.view.WindowInsetsControllerCompat$Impl20: void unsetSystemUiFlag(int)
androidx.fragment.app.Fragment: void performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)
io.sentry.NoOpSentryClient: NoOpSentryClient()
kotlinx.coroutines.internal.LockFreeTaskQueueCore: boolean close()
com.google.android.gms.common.internal.BaseGmsClient: BaseGmsClient(android.content.Context,android.os.Looper,com.google.android.gms.common.internal.GmsClientSupervisor,com.google.android.gms.common.GoogleApiAvailabilityLight,int,com.google.android.gms.common.internal.BaseGmsClient$BaseConnectionCallbacks,com.google.android.gms.common.internal.BaseGmsClient$BaseOnConnectionFailedListener,java.lang.String)
androidx.lifecycle.Lifecycle$State: boolean isAtLeast(androidx.lifecycle.Lifecycle$State)
com.google.gson.stream.JsonReader: boolean isLiteral(char)
io.flutter.embedding.engine.FlutterJNI: void detachFromNativeAndReleaseResources()
io.flutter.Log: void w(java.lang.String,java.lang.String,java.lang.Throwable)
io.flutter.plugin.platform.VirtualDisplayController: void onInputConnectionLocked()
com.google.gson.internal.bind.TypeAdapters$26$1: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
kotlin.collections.EmptySet: boolean isEmpty()
com.google.gson.Gson: java.lang.String toJson(java.lang.Object)
androidx.fragment.app.FragmentTransitionCompat21$3: void onTransitionPause(android.transition.Transition)
androidx.fragment.app.FragmentTransition: androidx.fragment.app.FragmentTransitionImpl resolveSupportImpl()
io.sentry.android.core.DefaultAndroidEventProcessor: java.lang.Boolean isEmulator()
com.google.android.gms.internal.common.zza: android.os.IBinder asBinder()
androidx.window.embedding.SplitRuleParser: android.content.ComponentName buildClassName(java.lang.String,java.lang.CharSequence)
androidx.collection.SimpleArrayMap: void allocArrays(int)
io.flutter.embedding.android.FlutterTextureView$1: FlutterTextureView$1(io.flutter.embedding.android.FlutterTextureView)
androidx.fragment.app.FragmentController: boolean dispatchContextItemSelected(android.view.MenuItem)
kotlin.collections.CollectionsKt___CollectionsKt: java.lang.String joinToString$default(java.lang.Iterable,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,kotlin.jvm.functions.Function1,int,java.lang.Object)
io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode: io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode valueOf(java.lang.String)
io.flutter.plugins.googlemaps.PolylineController: void setGeodesic(boolean)
kotlin.Pair: boolean equals(java.lang.Object)
androidx.collection.SparseArrayCompat: SparseArrayCompat(int)
com.google.common.reflect.TypeToken$TypeFilter: boolean apply(java.lang.Object)
io.sentry.protocol.Mechanism: java.lang.String getDescription()
io.sentry.SynchronizedQueue: java.lang.Object element()
androidx.window.layout.SidecarCompat$TranslatingCallback: SidecarCompat$TranslatingCallback(androidx.window.layout.SidecarCompat)
io.sentry.SentryOptions: void setTracesSampleRate(java.lang.Double)
kotlin.jvm.internal.ClassReference: java.lang.String getSimpleName()
com.google.common.collect.MapMakerInternalMap$WriteThroughEntry: MapMakerInternalMap$WriteThroughEntry(com.google.common.collect.MapMakerInternalMap,java.lang.Object,java.lang.Object)
com.google.common.collect.ImmutableList$Itr: ImmutableList$Itr(com.google.common.collect.ImmutableList,int)
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$12: void invoke(int)
io.sentry.HubAdapter: io.sentry.protocol.SentryId captureTransaction(io.sentry.protocol.SentryTransaction,java.lang.Object)
io.sentry.CircularFifoQueue: int decrement(int)
io.flutter.embedding.engine.FlutterJNI: void loadDartDeferredLibrary(int,java.lang.String[])
com.google.gson.GsonBuilder: com.google.gson.GsonBuilder registerTypeHierarchyAdapter(java.lang.Class,java.lang.Object)
io.sentry.Sentry: io.sentry.ITransaction startTransaction(java.lang.String,java.lang.String,java.lang.String)
io.flutter.plugin.common.StandardMethodCodec: io.flutter.plugin.common.MethodCall decodeMethodCall(java.nio.ByteBuffer)
io.flutter.embedding.engine.systemchannels.TextInputChannel: void requestExistingInputState()
kotlinx.coroutines.CoroutineDispatcher$Key$1: CoroutineDispatcher$Key$1()
androidx.window.embedding.ActivityRule: int hashCode()
androidx.collection.ArrayMap: void putAll(java.util.Map)
com.google.android.gms.maps.model.CircleOptions: boolean isVisible()
com.google.android.gms.maps.internal.zze: void zzk(com.google.android.gms.dynamic.IObjectWrapper,int)
io.flutter.embedding.android.FlutterImageView: void onDraw(android.graphics.Canvas)
com.google.android.gms.internal.maps.zzj: zzj(android.os.IBinder)
com.google.common.reflect.TypeToken$TypeFilter: com.google.common.reflect.TypeToken$TypeFilter valueOf(java.lang.String)
com.google.gson.internal.bind.TypeAdapters$35: com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken)
kotlinx.coroutines.JobSupport: kotlinx.coroutines.ChildHandleNode nextChild(kotlinx.coroutines.internal.LockFreeLinkedListNode)
androidx.fragment.app.BackStackState: androidx.fragment.app.BackStackRecord instantiate(androidx.fragment.app.FragmentManagerImpl)
androidx.activity.ComponentActivity$2: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)
androidx.fragment.app.Fragment: void setStateAfterAnimating(int)
kotlinx.coroutines.intrinsics.CancellableKt: void startCoroutineCancellable(kotlin.jvm.functions.Function1,kotlin.coroutines.Continuation)
io.sentry.android.core.NoOpDebugImagesLoader: io.sentry.android.core.NoOpDebugImagesLoader getInstance()
io.sentry.android.core.AndroidOptionsInitializer: boolean isNdkAvailable(io.sentry.android.core.IBuildInfoProvider)
com.google.common.collect.MapMakerInternalMap$KeySet: boolean contains(java.lang.Object)
kotlinx.coroutines.internal.ThreadContextKt$updateState$1: kotlinx.coroutines.internal.ThreadState invoke(kotlinx.coroutines.internal.ThreadState,kotlin.coroutines.CoroutineContext$Element)
com.google.gson.internal.bind.TypeAdapters$15: TypeAdapters$15()
androidx.fragment.app.Fragment: void initState()
com.google.android.gms.common.api.internal.zaq: java.lang.Object initialValue()
androidx.fragment.app.FragmentManagerImpl: boolean isPrimaryNavigation(androidx.fragment.app.Fragment)
io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener$1: VirtualDisplayController$OneTimeOnDrawListener$1(io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener)
io.flutter.plugin.platform.PlatformPlugin: void access$400(io.flutter.plugin.platform.PlatformPlugin,io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode)
com.google.gson.internal.bind.TypeAdapters$25: void write(com.google.gson.stream.JsonWriter,java.util.Currency)
io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler: SingleViewPresentation$WindowManagerHandler(android.view.WindowManager,io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup)
io.sentry.protocol.User: void acceptUnknownProperties(java.util.Map)
kotlinx.coroutines.scheduling.LimitingDispatcher: LimitingDispatcher(kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher,int,java.lang.String,int)
com.google.gson.internal.LinkedTreeMap$LinkedTreeMapIterator: LinkedTreeMap$LinkedTreeMapIterator(com.google.gson.internal.LinkedTreeMap)
io.sentry.hints.Retryable: void setRetry(boolean)
io.sentry.android.core.NoOpDebugImagesLoader: void clearDebugImages()
com.google.gson.internal.$Gson$Types: int hashCodeOrZero(java.lang.Object)
com.google.android.gms.common.Feature: Feature(java.lang.String,int,long)
io.sentry.protocol.SentryRuntime: java.lang.String getName()
io.sentry.android.core.IDebugImagesLoader: void clearDebugImages()
com.google.common.collect.MapMakerInternalMap$KeyIterator: java.lang.Object next()
androidx.lifecycle.LiveData$1: LiveData$1(androidx.lifecycle.LiveData)
androidx.fragment.app.Fragment: boolean isPostponed()
io.flutter.view.AccessibilityBridge$AccessibilityFeature: io.flutter.view.AccessibilityBridge$AccessibilityFeature[] values()
kotlin.jvm.internal.TypeIntrinsics: void throwCce(java.lang.Object,java.lang.String)
com.google.android.gms.maps.model.MarkerOptions: MarkerOptions(com.google.android.gms.maps.model.LatLng,java.lang.String,java.lang.String,android.os.IBinder,float,float,boolean,boolean,boolean,float,float,float,float,float)
io.flutter.view.AccessibilityViewEmbedder: void setFlutterNodesTranslateBounds(android.view.accessibility.AccessibilityNodeInfo,android.graphics.Rect,android.view.accessibility.AccessibilityNodeInfo)
com.google.gson.JsonElement: java.lang.String toString()
com.google.android.gms.dynamite.DynamiteModule: com.google.android.gms.dynamite.DynamiteModule zzc(android.content.Context,java.lang.String)
io.flutter.view.AccessibilityViewEmbedder$ViewAndId: AccessibilityViewEmbedder$ViewAndId(android.view.View,int,io.flutter.view.AccessibilityViewEmbedder$1)
io.flutter.plugins.googlemaps.GoogleMapController: void onPolygonClick(com.google.android.gms.maps.model.Polygon)
com.google.gson.internal.UnsafeAllocator$3: java.lang.Object newInstance(java.lang.Class)
io.flutter.plugins.pathprovider.PathProviderPlugin$PathProviderBackgroundThread: PathProviderPlugin$PathProviderBackgroundThread(io.flutter.plugins.pathprovider.PathProviderPlugin,io.flutter.plugins.pathprovider.PathProviderPlugin$1)
androidx.fragment.app.FragmentManagerImpl: void dispatchParentPrimaryNavigationFragmentChanged(androidx.fragment.app.Fragment)
com.google.android.gms.common.internal.zzv: android.accounts.Account zzb()
com.google.common.reflect.Types$JavaVersion$1: java.lang.reflect.GenericArrayType newArrayType(java.lang.reflect.Type)
io.sentry.SentryBaseEvent: java.util.Map getTags()
io.flutter.embedding.engine.systemchannels.KeyEventChannel$FlutterKeyEvent: KeyEventChannel$FlutterKeyEvent(android.view.KeyEvent,java.lang.Character)
com.google.gson.internal.bind.JsonTreeReader: void endObject()
io.flutter.view.AccessibilityBridge$SemanticsNode: io.flutter.view.AccessibilityBridge$SemanticsNode access$4300(io.flutter.view.AccessibilityBridge$SemanticsNode,float[])
kotlinx.coroutines.Empty: kotlinx.coroutines.NodeList getList()
androidx.window.layout.WindowMetricsCalculator$Companion$decorator$1: WindowMetricsCalculator$Companion$decorator$1()
kotlin.ranges.IntProgression: int getStep()
kotlin.text.StringsKt__StringsKt: int lastIndexOf$default(java.lang.CharSequence,char,int,boolean,int,java.lang.Object)
androidx.arch.core.internal.SafeIterableMap$Entry: SafeIterableMap$Entry(java.lang.Object,java.lang.Object)
io.flutter.plugins.googlemaps.GoogleMapController: void setZoomGesturesEnabled(boolean)
io.flutter.embedding.engine.FlutterEngine: void destroy()
com.google.gson.GsonBuilder: com.google.gson.GsonBuilder setDateFormat(int)
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: WindowInfoTrackerCallbackAdapter(androidx.window.layout.WindowInfoTracker)
io.flutter.FlutterInjector$Builder: io.flutter.FlutterInjector build()
com.google.common.collect.ImmutableCollection: boolean add(java.lang.Object)
androidx.fragment.app.FragmentManagerImpl: boolean isStateAtLeast(int)
io.sentry.transport.NoOpEnvelopeCache: io.sentry.transport.NoOpEnvelopeCache getInstance()
androidx.lifecycle.ProcessLifecycleOwner$3$1: void onActivityPostResumed(android.app.Activity)
com.google.gson.JsonPrimitive: java.lang.Boolean getAsBooleanWrapper()
kotlinx.coroutines.flow.internal.NoOpContinuation: NoOpContinuation()
io.sentry.Hub: void setUser(io.sentry.protocol.User)
io.sentry.protocol.Request: java.lang.String getMethod()
io.sentry.NoOpTransaction: io.sentry.protocol.Request getRequest()
com.google.android.gms.common.api.internal.zabq: void onConnectionFailed(com.google.android.gms.common.ConnectionResult)
io.flutter.embedding.android.FlutterActivity: void cleanUpFlutterEngine(io.flutter.embedding.engine.FlutterEngine)
com.google.common.util.concurrent.ThreadFactoryBuilder: com.google.common.util.concurrent.ThreadFactoryBuilder setPriority(int)
androidx.collection.SparseArrayCompat: int indexOfKey(int)
io.flutter.plugins.connectivity.Connectivity: java.lang.String getWifiName()
io.sentry.SentryEvent: void setMessage(io.sentry.protocol.Message)
io.sentry.android.core.util.RootChecker: boolean checkSUExist()
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration$Autofill: TextInputChannel$Configuration$Autofill(java.lang.String,java.lang.String[],java.lang.String,io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState)
com.google.android.gms.common.internal.ClientSettings: void zae(java.lang.Integer)
com.google.gson.internal.LinkedHashTreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)
androidx.core.view.WindowInsetsControllerCompat$Impl30: void setAppearanceLightNavigationBars(boolean)
kotlinx.coroutines.Active: java.lang.String toString()
io.sentry.Span: Span(io.sentry.protocol.SentryId,io.sentry.SpanId,io.sentry.SentryTracer,java.lang.String,io.sentry.IHub)
kotlinx.coroutines.CancellableContinuationImpl: void invokeOnCancellation(kotlin.jvm.functions.Function1)
kotlinx.coroutines.CommonPool: java.util.concurrent.ExecutorService createPool()
com.google.gson.reflect.TypeToken: boolean equals(java.lang.Object)
io.sentry.SentryOptions: void setDiagnosticLevel(io.sentry.SentryLevel)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPaused(android.app.Activity)
com.google.gson.internal.bind.TypeAdapters$2: java.lang.Object read(com.google.gson.stream.JsonReader)
com.google.android.gms.maps.model.zzj: zzj()
androidx.versionedparcelable.VersionedParcelParcel: void writeParcelable(android.os.Parcelable)
com.google.android.gms.common.internal.zzo: android.os.IBinder zzc()
io.sentry.Attachment: Attachment(byte[],java.lang.String,java.lang.String,boolean)
com.google.gson.JsonElement: short getAsShort()
io.sentry.SendCachedEnvelopeFireAndForgetIntegration$SendFireAndForgetFactory: io.sentry.SendCachedEnvelopeFireAndForgetIntegration$SendFireAndForget processDir(io.sentry.DirectoryProcessor,java.lang.String,io.sentry.ILogger)
io.flutter.plugin.platform.PlatformPlugin: io.flutter.embedding.engine.systemchannels.PlatformChannel access$1200(io.flutter.plugin.platform.PlatformPlugin)
androidx.fragment.app.BackStackRecord: boolean generateOps(java.util.ArrayList,java.util.ArrayList)
com.google.gson.internal.bind.TypeAdapters$11: void write(com.google.gson.stream.JsonWriter,java.lang.Number)
io.flutter.plugins.urllauncher.UrlLauncherPlugin: void onReattachedToActivityForConfigChanges(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding)
com.tekartik.sqflite.SqlCommand: SqlCommand(java.lang.String,java.util.List)
io.flutter.plugins.pathprovider.PathProviderPlugin$PathProviderPlatformThread: void getStorageDirectory(io.flutter.plugin.common.MethodChannel$Result)
io.sentry.IHub: void setFingerprint(java.util.List)
com.google.common.base.Joiner$1: Joiner$1(com.google.common.base.Joiner,com.google.common.base.Joiner,java.lang.String)
kotlin.ranges.IntProgression: boolean equals(java.lang.Object)
kotlinx.coroutines.InvokeOnCancelling: void invoke(java.lang.Throwable)
com.google.common.collect.RegularImmutableSet: com.google.common.collect.UnmodifiableIterator iterator()
com.google.android.gms.internal.maps.zzae: boolean zzn(com.google.android.gms.internal.maps.zzag)
androidx.window.layout.SidecarCompat$registerConfigurationChangeListener$configChangeObserver$1: void onLowMemory()
androidx.window.embedding.SplitPlaceholderRule: SplitPlaceholderRule(java.util.Set,android.content.Intent,int,int,float,int)
com.google.gson.Gson: void toJson(java.lang.Object,java.lang.reflect.Type,java.lang.Appendable)
io.sentry.IScopeObserver: void addBreadcrumb(io.sentry.Breadcrumb)
com.google.gson.stream.JsonWriter: void setIndent(java.lang.String)
com.google.android.gms.common.internal.zzag: int zza(android.content.Context)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPostStarted(android.app.Activity)
io.flutter.plugins.googlemaps.TileOverlaysController: void addTileOverlay(java.util.Map)
io.sentry.protocol.Device: java.lang.String getModel()
androidx.fragment.app.BackStackRecord: void dump(java.lang.String,java.io.PrintWriter)
io.flutter.plugin.common.BasicMessageChannel$IncomingReplyHandler: void reply(java.nio.ByteBuffer)
com.google.common.base.Predicates$ObjectPredicate$2: boolean apply(java.lang.Object)
kotlinx.coroutines.CoroutineName$Key: CoroutineName$Key(kotlin.jvm.internal.DefaultConstructorMarker)
kotlinx.coroutines.CancellableContinuationImpl: java.lang.String toString()
io.sentry.SentryOptions: void setMaxSpans(int)
io.sentry.Hub: void flush(long)
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory: java.util.List getFieldNames(java.lang.reflect.Field)
io.flutter.plugins.googlemaps.GoogleMapController: void onPolylineClick(com.google.android.gms.maps.model.Polyline)
androidx.window.layout.FoldingFeature$State: java.lang.String toString()
io.sentry.SentryOptions: void setTransportFactory(io.sentry.ITransportFactory)
kotlinx.coroutines.internal.ExceptionsConstuctorKt$tryCopyException$4$1: ExceptionsConstuctorKt$tryCopyException$4$1()
com.google.android.gms.maps.model.zzw: zzw()
kotlinx.coroutines.internal.ContextScope: java.lang.String toString()
com.google.gson.annotations.Expose: boolean deserialize()
io.sentry.SentryBaseEvent: void setTag(java.lang.String,java.lang.String)
kotlinx.coroutines.CancelHandlerBase: CancelHandlerBase()
androidx.fragment.app.FragmentViewLifecycleOwner: void initialize()
com.google.android.gms.common.api.internal.LifecycleCallback: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])
io.flutter.view.AccessibilityViewEmbedder: AccessibilityViewEmbedder(android.view.View,int)
com.google.common.collect.MapMakerInternalMap$AbstractWeakKeyEntry: java.lang.Object getKey()
io.flutter.embedding.engine.dart.DartExecutor$DefaultBinaryMessenger: void send(java.lang.String,java.nio.ByteBuffer)
androidx.window.core.Version$bigInteger$2: java.math.BigInteger invoke()
io.sentry.NoOpHub: io.sentry.IHub clone()
kotlinx.coroutines.JobSupport: void cancel(java.util.concurrent.CancellationException)
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$4: void invoke(java.lang.String)
io.sentry.SentryEnvelopeItem: io.sentry.SentryEnvelopeItem fromSession(io.sentry.ISerializer,io.sentry.Session)
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$1: void resize(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay[] values()
io.flutter.plugin.platform.PlatformViewsController$1: void clearFocus(int)
com.google.common.reflect.Types$JavaVersion$1: java.lang.reflect.Type usedInGenericType(java.lang.reflect.Type)
io.sentry.cache.EnvelopeCache: void store(io.sentry.SentryEnvelope,java.lang.Object)
io.sentry.transport.NoOpEnvelopeCache: java.util.Iterator iterator()
com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter value(java.lang.String)
io.sentry.transport.ReusableCountLatch: ReusableCountLatch(int)
androidx.fragment.app.Fragment: androidx.fragment.app.Fragment$AnimationInfo ensureAnimationInfo()
com.google.android.gms.maps.model.Marker: void setIcon(com.google.android.gms.maps.model.BitmapDescriptor)
com.google.common.collect.MapMakerInternalMap$KeySet: boolean remove(java.lang.Object)
androidx.core.os.ExecutorCompat: java.util.concurrent.Executor create(android.os.Handler)
kotlinx.coroutines.CancellableContinuationImpl: void releaseClaimedReusableContinuation()
com.google.android.gms.common.internal.BaseGmsClient: com.google.android.gms.common.internal.ConnectionTelemetryConfiguration getTelemetryConfiguration()
io.flutter.embedding.engine.FlutterOverlaySurface: int getId()
com.google.android.gms.internal.maps.zzy: void zzz(boolean)
kotlin.random.jdk8.PlatformThreadLocalRandom: PlatformThreadLocalRandom()
com.google.common.collect.MapMakerInternalMap: java.lang.Object get(java.lang.Object)
io.sentry.NoOpSpan: io.sentry.SpanStatus getStatus()
kotlinx.coroutines.channels.ChannelResult$Companion: ChannelResult$Companion()
io.sentry.protocol.Device: void setBatteryLevel(java.lang.Float)
io.sentry.protocol.User: void setOthers(java.util.Map)
io.flutter.plugins.googlemaps.GoogleMapBuilder: void setInitialCircles(java.lang.Object)
com.google.gson.JsonArray: com.google.gson.JsonElement deepCopy()
io.sentry.SentryBaseEvent: void setThrowable(java.lang.Throwable)
io.flutter.embedding.android.FlutterActivity: io.flutter.embedding.engine.FlutterShellArgs getFlutterShellArgs()
io.sentry.protocol.Request: void setCookies(java.lang.String)
com.google.android.gms.common.api.internal.GoogleApiManager: void zaB(com.google.android.gms.common.api.GoogleApi)
com.google.android.gms.dynamic.DeferredLifecycleHelper: DeferredLifecycleHelper()
io.sentry.SentryClient: io.sentry.SentryEvent executeBeforeSend(io.sentry.SentryEvent,java.lang.Object)
io.sentry.Sentry: void flush(long)
androidx.fragment.app.FragmentController: void dispatchResume()
com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher: void bmix64(long,long)
io.flutter.embedding.engine.dart.PlatformTaskQueue: PlatformTaskQueue()
kotlinx.coroutines.channels.ChannelResult$Companion: java.lang.Object success-JP2dKIU(java.lang.Object)
io.sentry.transport.QueuedThreadPoolExecutor$CancelledFuture: boolean cancel(boolean)
androidx.fragment.app.FragmentTransitionCompat21: boolean hasSimpleTarget(android.transition.Transition)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: android.view.WindowInsets onProgress(android.view.WindowInsets,java.util.List)
io.sentry.Attachment: java.lang.String getPathname()
kotlin.ranges.RangesKt___RangesKt: int coerceAtMost(int,int)
com.google.android.gms.maps.model.PolylineOptions: int getJointType()
androidx.lifecycle.Lifecycling: boolean isLifecycleParent(java.lang.Class)
kotlinx.coroutines.StandaloneCoroutine: boolean handleJobException(java.lang.Throwable)
io.sentry.IHub: io.sentry.ITransaction startTransaction(io.sentry.TransactionContext,io.sentry.CustomSamplingContext,boolean)
com.google.android.gms.common.zzg: zzg(byte[])
androidx.core.os.LocaleListPlatformWrapper: boolean equals(java.lang.Object)
com.google.android.gms.common.GoogleApiAvailability: android.app.Dialog getErrorDialog(android.app.Activity,int,int,android.content.DialogInterface$OnCancelListener)
com.google.android.gms.signin.internal.zag: void writeToParcel(android.os.Parcel,int)
io.flutter.plugins.googlemaps.PolygonsController: void setGoogleMap(com.google.android.gms.maps.GoogleMap)
io.sentry.android.core.EnvelopeFileObserverIntegration: void close()
io.sentry.SentryEnvelopeItem: SentryEnvelopeItem(io.sentry.SentryEnvelopeItemHeader,byte[])
io.sentry.SynchronizedCollection: boolean removeAll(java.util.Collection)
kotlinx.coroutines.channels.Closed: kotlinx.coroutines.channels.Closed getPollResult()
androidx.collection.MapCollections$ValuesCollection: java.lang.Object[] toArray(java.lang.Object[])
kotlinx.coroutines.JobSupport: void cancelInternal(java.lang.Throwable)
io.flutter.plugin.editing.InputConnectionAdaptor: android.view.inputmethod.CursorAnchorInfo getCursorAnchorInfo()
io.sentry.config.PropertiesLoader: java.util.Properties load()
io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder: SettingsChannel$MessageBuilder(io.flutter.plugin.common.BasicMessageChannel)
io.sentry.SentryEvent: java.util.List getExceptions()
io.sentry.flutter.SentryFlutterPlugin: void loadImageList(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext: void resumeReceiveClosed(kotlinx.coroutines.channels.Closed)
io.sentry.Session: void end(java.util.Date)
kotlinx.coroutines.internal.DispatchedContinuation: java.lang.String toString()
androidx.fragment.app.FragmentManagerImpl$1: FragmentManagerImpl$1(androidx.fragment.app.FragmentManagerImpl,boolean)
com.google.android.gms.common.api.internal.zap: void onStop()
io.flutter.plugin.editing.FlutterTextUtils: boolean isVariationSelector(int)
com.google.common.collect.ObjectArrays: java.lang.Object checkElementNotNull(java.lang.Object,int)
io.sentry.transport.QueuedThreadPoolExecutor: boolean isSchedulingAllowed()
kotlinx.coroutines.internal.ContextScope: kotlin.coroutines.CoroutineContext getCoroutineContext()
io.sentry.Scope: io.sentry.protocol.Request getRequest()
kotlin.jvm.internal.ClassReference$Companion: ClassReference$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration: io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration fromJson(org.json.JSONObject)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: void attachToActivity(io.flutter.embedding.android.ExclusiveAppComponent,androidx.lifecycle.Lifecycle)
io.flutter.view.AccessibilityBridge$LocaleStringAttribute: AccessibilityBridge$LocaleStringAttribute()
kotlinx.coroutines.flow.internal.DownstreamExceptionElement: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Key)
com.tekartik.sqflite.SqflitePlugin: java.lang.Object access$600()
com.google.android.gms.maps.model.Marker: void setRotation(float)
com.google.common.collect.MapMakerInternalMap$KeyIterator: MapMakerInternalMap$KeyIterator(com.google.common.collect.MapMakerInternalMap)
androidx.versionedparcelable.VersionedParcel: void writeByteArray(byte[],int)
androidx.window.embedding.ExtensionEmbeddingBackend: void setSplitRules(java.util.Set)
com.google.android.gms.common.api.internal.LifecycleCallback: void onCreate(android.os.Bundle)
androidx.core.app.NotificationCompat$BubbleMetadata: android.app.Notification$BubbleMetadata toPlatform(androidx.core.app.NotificationCompat$BubbleMetadata)
kotlinx.coroutines.CancellableContinuationImpl: void dispatchResume(int)
com.google.android.gms.auth.api.signin.internal.Storage: java.lang.String zae(java.lang.String,java.lang.String)
io.flutter.plugin.platform.PlatformViewsController: void detachTextInputPlugin()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPreStopped(android.app.Activity)
io.sentry.protocol.SentryThread: void setCrashed(java.lang.Boolean)
io.sentry.hints.Flushable: boolean waitFlush()
kotlinx.coroutines.internal.OpDescriptor: java.lang.String toString()
io.flutter.embedding.engine.systemchannels.RestorationChannel: byte[] access$000(io.flutter.embedding.engine.systemchannels.RestorationChannel)
com.google.common.reflect.Types: java.lang.String toString(java.lang.reflect.Type)
io.flutter.embedding.android.FlutterView$2: FlutterView$2(io.flutter.embedding.android.FlutterView)
io.sentry.NoOpSpan: io.sentry.SentryTraceHeader toSentryTrace()
io.sentry.transport.HttpConnection: java.net.HttpURLConnection open()
kotlin.coroutines.AbstractCoroutineContextElement: kotlin.coroutines.CoroutineContext$Key getKey()
com.google.common.collect.MapMakerInternalMap: boolean containsValue(java.lang.Object)
androidx.versionedparcelable.CustomVersionedParcelable: CustomVersionedParcelable()
androidx.fragment.app.FragmentTransition$3: FragmentTransition$3(androidx.fragment.app.Fragment,androidx.fragment.app.Fragment,boolean,androidx.collection.ArrayMap,android.view.View,androidx.fragment.app.FragmentTransitionImpl,android.graphics.Rect)
com.google.gson.internal.Excluder: java.lang.Object clone()
io.sentry.android.ndk.NativeScope: void nativeRemoveExtra(java.lang.String)
kotlinx.coroutines.android.HandlerContext: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)
io.sentry.Sentry: io.sentry.ITransaction startTransaction(java.lang.String,java.lang.String,java.lang.String,boolean)
io.sentry.SentryThreadFactory: java.util.List getCurrentThread()
kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.Throwable unwrapImpl(java.lang.Throwable)
kotlinx.coroutines.internal.ExceptionsConstuctorKt$createConstructor$$inlined$safeCtor$1: java.lang.Object invoke(java.lang.Object)
io.flutter.plugins.googlemaps.GoogleMapBuilder: void setScrollGesturesEnabled(boolean)
androidx.loader.app.LoaderManager: androidx.loader.app.LoaderManager getInstance(androidx.lifecycle.LifecycleOwner)
androidx.core.os.LocaleListCompatWrapper: boolean equals(java.lang.Object)
io.flutter.plugin.common.StandardMethodCodec: java.lang.String getStackTrace(java.lang.Throwable)
kotlinx.coroutines.CoroutineDispatcher: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key)
io.flutter.plugin.common.BasicMessageChannel$IncomingReplyHandler: BasicMessageChannel$IncomingReplyHandler(io.flutter.plugin.common.BasicMessageChannel,io.flutter.plugin.common.BasicMessageChannel$Reply,io.flutter.plugin.common.BasicMessageChannel$1)
com.google.android.gms.common.internal.zat: zat(int,android.accounts.Account,int,com.google.android.gms.auth.api.signin.GoogleSignInAccount)
io.flutter.plugins.urllauncher.MethodCallHandlerImpl: void onLaunch(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result,java.lang.String)
io.sentry.transport.ProxyAuthenticator: java.lang.String getUser()
com.google.android.gms.common.api.zza: zza()
com.google.common.util.concurrent.ThreadFactoryBuilder$1: java.lang.Thread newThread(java.lang.Runnable)
com.google.common.base.Objects: boolean equal(java.lang.Object,java.lang.Object)
io.sentry.SentryOptions: java.lang.String getRelease()
io.flutter.view.AccessibilityViewEmbedder: boolean requestSendAccessibilityEvent(android.view.View,android.view.View,android.view.accessibility.AccessibilityEvent)
androidx.core.os.LocaleListCompat: java.lang.String toString()
com.google.android.gms.internal.maps.zzg: com.google.android.gms.dynamic.IObjectWrapper zze(float)
kotlinx.coroutines.AbstractCoroutine: void onCompletionInternal(java.lang.Object)
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: void addExistingListenersToActivityPluginBinding()
io.flutter.plugins.googlemaps.MarkerController: void hideInfoWindow()
kotlinx.coroutines.JobSupport: java.lang.String nameString$kotlinx_coroutines_core()
androidx.window.layout.WindowInfoTracker$Companion: WindowInfoTracker$Companion()
com.google.android.gms.maps.model.zzh: java.lang.Object[] newArray(int)
kotlinx.coroutines.IncompleteStateBox: IncompleteStateBox(kotlinx.coroutines.Incomplete)
androidx.core.view.ViewCompat$UnhandledKeyEventManager: android.view.View dispatchInOrder(android.view.View,android.view.KeyEvent)
kotlinx.coroutines.channels.ConflatedChannel: ConflatedChannel(kotlin.jvm.functions.Function1)
io.flutter.plugin.editing.TextInputPlugin$2: void inspect(double,double)
io.sentry.CircularFifoQueue: CircularFifoQueue(java.util.Collection)
kotlin.collections.CollectionsKt___CollectionsKt: java.util.Collection toCollection(java.lang.Iterable,java.util.Collection)
androidx.fragment.app.FragmentViewLifecycleOwner: boolean isInitialized()
androidx.versionedparcelable.ParcelImpl$1: androidx.versionedparcelable.ParcelImpl createFromParcel(android.os.Parcel)
kotlinx.coroutines.scheduling.CoroutineScheduler: CoroutineScheduler(int,int,long,java.lang.String)
io.sentry.CircularFifoQueue: int access$202(io.sentry.CircularFifoQueue,int)
io.sentry.CustomSamplingContext: java.util.Map getData()
com.google.android.gms.maps.model.LatLng: void writeToParcel(android.os.Parcel,int)
com.tekartik.sqflite.SqflitePlugin: boolean insert(com.tekartik.sqflite.Database,com.tekartik.sqflite.operation.Operation)
io.flutter.plugins.googlemaps.TileOverlayController: void setFadeIn(boolean)
io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener: void schedule(android.view.View,java.lang.Runnable)
androidx.window.layout.SidecarCompat$registerConfigurationChangeListener$configChangeObserver$1: void onConfigurationChanged(android.content.res.Configuration)
com.google.android.gms.maps.model.TileOverlayOptions: TileOverlayOptions()
androidx.window.embedding.ActivityStack: int hashCode()
androidx.collection.MapCollections$EntrySet: int size()
com.google.gson.GsonBuilder: com.google.gson.GsonBuilder setExclusionStrategies(com.google.gson.ExclusionStrategy[])
com.google.gson.FieldNamingPolicy$4: FieldNamingPolicy$4(java.lang.String,int)
io.sentry.protocol.SentryStackFrame: java.lang.String getSymbolAddr()
io.flutter.embedding.engine.systemchannels.RestorationChannel$2: RestorationChannel$2(io.flutter.embedding.engine.systemchannels.RestorationChannel)
io.sentry.EnvelopeSender: void processDirectory(java.io.File)
kotlinx.coroutines.CoroutineExceptionHandlerKt: void handleCoroutineException(kotlin.coroutines.CoroutineContext,java.lang.Throwable)
com.google.gson.internal.bind.TypeAdapters$9: java.util.concurrent.atomic.AtomicBoolean read(com.google.gson.stream.JsonReader)
com.google.android.gms.maps.model.PolygonOptions: int getFillColor()
kotlin.jvm.internal.Intrinsics: boolean areEqual(java.lang.Object,java.lang.Object)
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.SettingsChannel getSettingsChannel()
com.google.android.gms.common.zzc: java.lang.Object createFromParcel(android.os.Parcel)
io.sentry.RequestDetailsResolver: io.sentry.RequestDetails resolve()
io.sentry.android.core.PhoneStateBreadcrumbsIntegration$PhoneStateChangeListener: void onCallStateChanged(int,java.lang.String)
io.sentry.Scope: void addBreadcrumb(io.sentry.Breadcrumb,java.lang.Object)
io.sentry.protocol.DebugMeta: io.sentry.protocol.SdkInfo getSdkInfo()
androidx.lifecycle.ProcessLifecycleOwner$3$1: ProcessLifecycleOwner$3$1(androidx.lifecycle.ProcessLifecycleOwner$3)
io.sentry.CircularFifoQueue$1: CircularFifoQueue$1(io.sentry.CircularFifoQueue)
io.sentry.GsonSerializer: java.lang.Object deserialize(java.io.Reader,java.lang.Class)
io.flutter.embedding.android.DrawableSplashScreen: void transitionToFlutter(java.lang.Runnable)
io.sentry.protocol.Device: java.lang.String getManufacturer()
com.google.gson.internal.$Gson$Types: java.lang.reflect.Type getGenericSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class)
kotlinx.coroutines.channels.AbstractChannel$Itr: void setResult(java.lang.Object)
androidx.collection.MapCollections$KeySet: boolean isEmpty()
io.sentry.adapters.OrientationDeserializerAdapter: io.sentry.protocol.Device$DeviceOrientation deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext)
com.google.android.gms.maps.model.TileOverlay: float getZIndex()
com.google.android.gms.common.internal.BaseGmsClient: void zzh(com.google.android.gms.common.internal.BaseGmsClient,com.google.android.gms.common.internal.IGmsServiceBroker)
kotlinx.coroutines.CompletionHandlerBase: CompletionHandlerBase()
com.google.android.gms.maps.model.zzv: zzv()
io.flutter.view.AccessibilityBridge: io.flutter.view.AccessibilityBridge$OnAccessibilityChangeListener access$800(io.flutter.view.AccessibilityBridge)
io.flutter.embedding.engine.systemchannels.LocalizationChannel: io.flutter.embedding.engine.systemchannels.LocalizationChannel$LocalizationMessageHandler access$000(io.flutter.embedding.engine.systemchannels.LocalizationChannel)
io.flutter.plugin.editing.InputConnectionAdaptor: boolean commitText(java.lang.CharSequence,int)
androidx.core.view.ViewCompat: java.lang.CharSequence getAccessibilityPaneTitle(android.view.View)
androidx.fragment.app.FragmentController: void dispatchLowMemory()
kotlinx.coroutines.MainCoroutineDispatcher: java.lang.String toString()
com.google.common.hash.HashCode$IntHashCode: long asLong()
kotlinx.coroutines.BlockingEventLoop: BlockingEventLoop(java.lang.Thread)
io.flutter.embedding.engine.loader.FlutterLoader$Settings: FlutterLoader$Settings()
io.sentry.SentryEvent: SentryEvent(java.lang.Throwable)
androidx.window.embedding.SplitRule: int getLayoutDirection()
com.google.gson.JsonArray: com.google.gson.JsonElement set(int,com.google.gson.JsonElement)
com.google.common.util.concurrent.internal.InternalFutureFailureAccess: InternalFutureFailureAccess()
io.flutter.plugins.googlemaps.TileProviderController: TileProviderController(io.flutter.plugin.common.MethodChannel,java.lang.String)
io.sentry.transport.NoOpTransport: void send(io.sentry.SentryEnvelope,java.lang.Object)
io.flutter.plugin.editing.InputConnectionAdaptor: boolean requestCursorUpdates(int)
androidx.lifecycle.LifecycleRegistry: LifecycleRegistry(androidx.lifecycle.LifecycleOwner)
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureState[] values()
com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper: com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry newEntry(com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry)
com.google.gson.TypeAdapter$1: TypeAdapter$1(com.google.gson.TypeAdapter)
androidx.fragment.app.DialogFragment: void show(androidx.fragment.app.FragmentManager,java.lang.String)
androidx.fragment.app.FragmentManagerImpl$3$1: FragmentManagerImpl$3$1(androidx.fragment.app.FragmentManagerImpl$3)
com.google.gson.DefaultDateTypeAdapter: java.lang.String toString()
kotlinx.coroutines.CoroutineExceptionHandlerImplKt: void handleCoroutineExceptionImpl(kotlin.coroutines.CoroutineContext,java.lang.Throwable)
io.sentry.SentryEvent: void setModules(java.util.Map)
androidx.fragment.app.Fragment$1: void run()
kotlin.collections.EmptyList: java.lang.Object remove(int)
kotlinx.coroutines.Job$DefaultImpls: kotlin.coroutines.CoroutineContext plus(kotlinx.coroutines.Job,kotlin.coroutines.CoroutineContext)
com.google.android.gms.common.internal.BaseGmsClient: boolean getUseDynamicLookup()
com.google.common.collect.SingletonImmutableSet: SingletonImmutableSet(java.lang.Object)
com.google.android.gms.common.internal.ConnectionTelemetryConfiguration: com.google.android.gms.common.internal.RootTelemetryConfiguration zza()
io.sentry.android.core.EnvelopeFileObserverIntegration$OutboxEnvelopeFileObserverIntegration: java.lang.String getPath(io.sentry.SentryOptions)
io.sentry.protocol.SentryPackage: void acceptUnknownProperties(java.util.Map)
io.sentry.protocol.SentryException: void setValue(java.lang.String)
io.flutter.plugins.googlemaps.PolylinesController: void addPolyline(java.lang.Object)
androidx.core.util.LogWriter: void flushBuilder()
io.sentry.Hub: void withScope(io.sentry.ScopeCallback)
androidx.fragment.app.FragmentManagerImpl: void dispatchOnFragmentActivityCreated(androidx.fragment.app.Fragment,android.os.Bundle,boolean)
io.flutter.embedding.engine.FlutterShellArgs: FlutterShellArgs(java.util.List)
com.tekartik.sqflite.SqflitePlugin: void onAttachedToEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
com.google.android.gms.common.api.internal.zad: void zae(java.lang.Exception)
io.sentry.SentryOptions: void setDebug(java.lang.Boolean)
kotlinx.coroutines.ExecutorCoroutineDispatcher$Key$1: kotlinx.coroutines.ExecutorCoroutineDispatcher invoke(kotlin.coroutines.CoroutineContext$Element)
io.sentry.GsonSerializer: GsonSerializer(io.sentry.SentryOptions)
io.flutter.plugins.googlemaps.GoogleMapController: void setMyLocationEnabled(boolean)
io.flutter.embedding.android.FlutterActivity: java.lang.String getInitialRoute()
androidx.savedstate.Recreator: void reflectiveNew(java.lang.String)
kotlinx.coroutines.scheduling.CoroutineScheduler$Companion: CoroutineScheduler$Companion()
com.google.android.gms.common.api.internal.zacv: zacv(com.google.android.gms.common.api.internal.TaskApiCall$Builder,com.google.android.gms.common.Feature[],boolean,int)
androidx.fragment.app.Fragment: void startActivityForResult(android.content.Intent,int)
io.sentry.android.core.ANRWatchDog: ANRWatchDog(long,boolean,io.sentry.android.core.ANRWatchDog$ANRListener,io.sentry.ILogger,android.content.Context)
io.sentry.SessionAdapter: SessionAdapter(io.sentry.SentryOptions)
androidx.fragment.app.Fragment$4: Fragment$4(androidx.fragment.app.Fragment)
androidx.window.embedding.SplitController$Companion: androidx.window.embedding.SplitController getInstance()
androidx.lifecycle.ProcessLifecycleOwnerInitializer: boolean onCreate()
io.sentry.Hub: void configureScope(io.sentry.ScopeCallback)
com.google.android.gms.maps.MapView: void onStart()
androidx.fragment.app.BackStackRecord: int commitAllowingStateLoss()
androidx.window.embedding.SplitRule: boolean equals(java.lang.Object)
io.sentry.Sentry: io.sentry.protocol.SentryId captureMessage(java.lang.String)
com.google.gson.TypeAdapter: com.google.gson.JsonElement toJsonTree(java.lang.Object)
io.sentry.IScopeObserver: void removeExtra(java.lang.String)
io.flutter.plugin.platform.PlatformPlugin: void destroy()
kotlinx.coroutines.channels.AbstractSendChannel: java.lang.Object trySend-JP2dKIU(java.lang.Object)
com.google.android.gms.common.internal.zzr: com.google.android.gms.common.stats.ConnectionTracker zzg(com.google.android.gms.common.internal.zzr)
io.sentry.android.core.DefaultAndroidEventProcessor: java.util.Map getSideLoadedInfo()
io.flutter.embedding.engine.loader.FlutterLoader$InitResult: FlutterLoader$InitResult(java.lang.String,java.lang.String,java.lang.String,io.flutter.embedding.engine.loader.FlutterLoader$1)
androidx.core.view.KeyEventDispatcher: boolean dispatchKeyEvent(androidx.core.view.KeyEventDispatcher$Component,android.view.View,android.view.Window$Callback,android.view.KeyEvent)
io.sentry.Session: io.sentry.Session$State getStatus()
com.google.gson.internal.bind.JsonTreeWriter$1: JsonTreeWriter$1()
com.google.android.gms.maps.model.CircleOptions: com.google.android.gms.maps.model.CircleOptions zIndex(float)
com.google.gson.Gson$FutureTypeAdapter: java.lang.Object read(com.google.gson.stream.JsonReader)
kotlinx.coroutines.Job$DefaultImpls: kotlinx.coroutines.DisposableHandle invokeOnCompletion$default(kotlinx.coroutines.Job,boolean,boolean,kotlin.jvm.functions.Function1,int,java.lang.Object)
kotlinx.coroutines.internal.LockFreeTaskQueueCore: int getSize()
kotlinx.coroutines.Active: Active()
com.google.common.base.Equivalence$Equals: int doHash(java.lang.Object)
com.google.common.util.concurrent.AbstractFuture: void removeWaiter(com.google.common.util.concurrent.AbstractFuture$Waiter)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType: io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType valueOf(java.lang.String)
androidx.window.layout.WindowInfoTrackerImpl$Companion: WindowInfoTrackerImpl$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
androidx.arch.core.executor.ArchTaskExecutor$2: void execute(java.lang.Runnable)
com.google.android.gms.dynamite.DynamiteModule: DynamiteModule(android.content.Context)
io.sentry.ISerializer: java.lang.Object deserialize(java.io.Reader,java.lang.Class)
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: int nextInt(int)
io.sentry.Hub: Hub(io.sentry.SentryOptions)
com.google.gson.internal.$Gson$Types: $Gson$Types()
com.google.android.gms.dynamite.zzq: zzq(android.os.IBinder)
com.google.gson.internal.LinkedHashTreeMap$Node: java.lang.Object getKey()
com.google.android.gms.common.api.internal.NonGmsServiceBrokerClient: boolean requiresSignIn()
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding: android.app.Activity getActivity()
io.flutter.plugins.googlemaps.CirclesController: void addCircles(java.util.List)
kotlinx.coroutines.JobImpl: boolean getHandlesException$kotlinx_coroutines_core()
com.google.android.gms.common.zzc: java.lang.Object[] newArray(int)
kotlin.collections.ArraysKt___ArraysJvmKt: void fill$default(java.lang.Object[],java.lang.Object,int,int,int,java.lang.Object)
com.tekartik.sqflite.SqflitePlugin$BgResult$1: SqflitePlugin$BgResult$1(com.tekartik.sqflite.SqflitePlugin$BgResult,java.lang.Object)
io.sentry.android.ndk.NativeScope: void nativeSetUser(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
kotlinx.coroutines.DefaultExecutor: DefaultExecutor()
io.sentry.config.EnvironmentVariablePropertiesProvider: java.lang.String propertyToEnvironmentVariableName(java.lang.String)
io.flutter.view.AccessibilityBridge: int access$7000()
com.google.android.gms.common.api.internal.zabq: boolean zay()
androidx.core.app.NotificationCompat$Action: androidx.core.graphics.drawable.IconCompat getIconCompat()
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: java.lang.Object invoke(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.Continuation)
com.google.android.gms.tasks.zzw: void zzh()
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory newFactory(java.lang.Class,com.google.gson.TypeAdapter)
com.google.gson.internal.bind.JsonTreeWriter: void put(com.google.gson.JsonElement)
androidx.window.embedding.ActivityStack: ActivityStack(java.util.List,boolean)
kotlin.ranges.IntProgression: java.util.Iterator iterator()
io.sentry.SentryOptions: void setExecutorService(io.sentry.ISentryExecutorService)
androidx.window.core.Bounds: int getLeft()
kotlin.text.StringsKt__IndentKt$getIndentFunction$1: java.lang.String invoke(java.lang.String)
androidx.fragment.app.FragmentManagerViewModel: androidx.fragment.app.FragmentManagerViewModel getChildNonConfig(androidx.fragment.app.Fragment)
io.sentry.SentryOptions: int getConnectionTimeoutMillis()
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean nullableHasAncestor(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.util.Predicate)
com.google.gson.internal.bind.TypeAdapters$15: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
com.google.gson.internal.bind.TypeAdapters$6: java.lang.Object read(com.google.gson.stream.JsonReader)
io.sentry.Sentry: void init(io.sentry.SentryOptions)
io.flutter.plugin.editing.TextInputPlugin: boolean needsAutofill()
com.google.android.gms.maps.model.Marker: void setVisible(boolean)
com.google.gson.internal.bind.JsonTreeReader: java.lang.Object peekStack()
io.flutter.embedding.engine.systemchannels.RestorationChannel$1: void success(java.lang.Object)
io.sentry.NoOpSentryExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)
io.sentry.CircularFifoQueue: java.lang.Object peek()
io.flutter.embedding.engine.dart.DartMessenger: DartMessenger(io.flutter.embedding.engine.FlutterJNI)
androidx.window.embedding.EmbeddingAdapter: boolean translateParentMetricsPredicate$lambda-4(androidx.window.embedding.SplitRule,android.view.WindowMetrics)
com.google.gson.GsonBuilder: com.google.gson.GsonBuilder addSerializationExclusionStrategy(com.google.gson.ExclusionStrategy)
io.flutter.plugins.urllauncher.WebViewActivity$FlutterWebChromeClient: WebViewActivity$FlutterWebChromeClient(io.flutter.plugins.urllauncher.WebViewActivity,io.flutter.plugins.urllauncher.WebViewActivity$1)
androidx.versionedparcelable.VersionedParcel: void writeString(java.lang.String,int)
io.flutter.plugins.googlemaps.Convert: com.google.android.gms.maps.CameraUpdate toCameraUpdate(java.lang.Object,float)
com.google.gson.GsonBuilder: com.google.gson.GsonBuilder setVersion(double)
kotlin.text.StringsKt__StringsKt: java.lang.String substringAfterLast$default(java.lang.String,char,java.lang.String,int,java.lang.Object)
com.google.android.gms.maps.model.TileOverlayOptions: com.google.android.gms.maps.model.TileOverlayOptions fadeIn(boolean)
com.google.gson.Gson$4: Gson$4(com.google.gson.TypeAdapter)
androidx.fragment.app.FragmentManagerImpl: android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet)
androidx.collection.ArrayMap$1: void colRemoveAt(int)
kotlinx.coroutines.JobSupport$addLastAtomic$$inlined$addLastIf$1: JobSupport$addLastAtomic$$inlined$addLastIf$1(kotlinx.coroutines.internal.LockFreeLinkedListNode,kotlinx.coroutines.JobSupport,java.lang.Object)
kotlinx.coroutines.EventLoop: void decrementUseCount(boolean)
kotlinx.coroutines.channels.AbstractSendChannel$SendBuffered: kotlinx.coroutines.internal.Symbol tryResumeSend(kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp)
io.flutter.plugins.googlemaps.PolygonBuilder: void setConsumeTapEvents(boolean)
io.flutter.plugin.common.MethodChannel: MethodChannel(io.flutter.plugin.common.BinaryMessenger,java.lang.String,io.flutter.plugin.common.MethodCodec,io.flutter.plugin.common.BinaryMessenger$TaskQueue)
androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager: ViewCompat$AccessibilityPaneVisibilityManager()
io.flutter.embedding.engine.systemchannels.PlatformChannel: void systemChromeChanged(boolean)
com.google.android.gms.common.zac: void handleMessage(android.os.Message)
io.flutter.plugins.googlemaps.CirclesController: void addCircle(java.lang.String,com.google.android.gms.maps.model.CircleOptions,boolean)
io.flutter.embedding.engine.dart.DartExecutor$DefaultBinaryMessenger: DartExecutor$DefaultBinaryMessenger(io.flutter.embedding.engine.dart.DartMessenger)
com.google.gson.internal.bind.JsonTreeReader: java.lang.String nextString()
io.sentry.transport.AsyncHttpTransport$EnvelopeSender: AsyncHttpTransport$EnvelopeSender(io.sentry.transport.AsyncHttpTransport,io.sentry.SentryEnvelope,java.lang.Object,io.sentry.cache.IEnvelopeCache)
com.google.android.gms.common.internal.BaseGmsClient$LegacyClientCallbackAdapter: BaseGmsClient$LegacyClientCallbackAdapter(com.google.android.gms.common.internal.BaseGmsClient)
androidx.fragment.app.FragmentHostCallback: boolean onHasView()
io.flutter.embedding.engine.FlutterOverlaySurface: android.view.Surface getSurface()
com.google.android.gms.maps.model.MarkerOptions: float getInfoWindowAnchorV()
io.flutter.plugin.platform.PlatformViewsController$1: void resizePlatformView(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewResizeRequest,java.lang.Runnable)
kotlin.random.Random: Random()
kotlinx.coroutines.CompletedWithCancellation: CompletedWithCancellation(java.lang.Object,kotlin.jvm.functions.Function1)
io.sentry.SentryClient: void captureUserFeedback(io.sentry.UserFeedback)
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$10: void invoke(boolean)
androidx.window.layout.ActivityCompatHelperApi30: android.graphics.Rect currentWindowBounds(android.app.Activity)
androidx.fragment.app.FragmentManagerImpl$3$1: void run()
androidx.fragment.app.Fragment: boolean performOptionsItemSelected(android.view.MenuItem)
io.sentry.SentryTracer: void setTag(java.lang.String,java.lang.String)
com.google.gson.GsonBuilder: com.google.gson.GsonBuilder addDeserializationExclusionStrategy(com.google.gson.ExclusionStrategy)
com.google.common.reflect.TypeToken: int hashCode()
io.sentry.cache.CacheStrategy: boolean isValidEnvelope(io.sentry.SentryEnvelope)
io.flutter.FlutterInjector: FlutterInjector(io.flutter.embedding.engine.loader.FlutterLoader,io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager,io.flutter.embedding.engine.FlutterJNI$Factory,java.util.concurrent.ExecutorService,io.flutter.FlutterInjector$1)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType: io.flutter.embedding.engine.systemchannels.PlatformChannel$SoundType fromValue(java.lang.String)
com.google.common.hash.LittleEndianByteArray$UnsafeByteArray$1: void putLongLittleEndian(byte[],int,long)
io.flutter.embedding.engine.FlutterJNI: android.graphics.Bitmap nativeGetBitmap(long)
com.google.common.collect.ImmutableList$Builder: ImmutableList$Builder(int)
androidx.fragment.app.FragmentState: java.lang.String toString()
io.sentry.android.core.TempSensorBreadcrumbsIntegration: void onSensorChanged(android.hardware.SensorEvent)
com.google.android.gms.common.api.internal.zaad: zaad()
io.sentry.ISpan: java.lang.String getDescription()
io.flutter.view.AccessibilityBridge$SemanticsNode: io.flutter.view.AccessibilityBridge$SemanticsNode access$2600(io.flutter.view.AccessibilityBridge$SemanticsNode)
com.google.gson.internal.LinkedTreeMap: void clear()
androidx.lifecycle.LifecycleRegistry: boolean isSynced()
io.sentry.protocol.Gpu: java.lang.String getVendorName()
io.flutter.embedding.engine.systemchannels.NavigationChannel: NavigationChannel(io.flutter.embedding.engine.dart.DartExecutor)
com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList asImmutableList(java.lang.Object[])
androidx.collection.ArraySet: boolean contains(java.lang.Object)
com.tekartik.sqflite.SqflitePlugin: boolean access$200(com.tekartik.sqflite.SqflitePlugin,com.tekartik.sqflite.Database,com.tekartik.sqflite.operation.Operation)
androidx.window.layout.SidecarCompat$FirstAttachAdapter: SidecarCompat$FirstAttachAdapter(androidx.window.layout.SidecarCompat,android.app.Activity)
kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: kotlinx.coroutines.scheduling.CoroutineScheduler createScheduler()
kotlinx.coroutines.JobSupportKt: kotlinx.coroutines.internal.Symbol access$getCOMPLETING_RETRY$p()
io.flutter.embedding.engine.systemchannels.LocalizationChannel: void setLocalizationMessageHandler(io.flutter.embedding.engine.systemchannels.LocalizationChannel$LocalizationMessageHandler)
com.google.android.gms.maps.internal.zzbz: android.os.Parcelable zza(android.os.Bundle,java.lang.String)
io.sentry.SpanContext: java.lang.String getDescription()
io.sentry.android.ndk.INativeScope: void setExtra(java.lang.String,java.lang.String)
kotlin.text.StringsKt__StringsKt: int indexOf$StringsKt__StringsKt(java.lang.CharSequence,java.lang.CharSequence,int,int,boolean,boolean)
io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness: io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness valueOf(java.lang.String)
com.google.android.gms.common.internal.RootTelemetryConfiguration: int getVersion()
io.sentry.config.PropertiesProvider: java.util.List getList(java.lang.String)
io.flutter.embedding.engine.systemchannels.AccessibilityChannel: void onAndroidAccessibilityEnabled()
io.flutter.embedding.engine.dart.DartExecutor: DartExecutor(io.flutter.embedding.engine.FlutterJNI,android.content.res.AssetManager)
com.google.gson.internal.bind.TreeTypeAdapter: com.google.gson.TypeAdapter delegate()
kotlin.collections.ArraysKt___ArraysJvmKt: void fill(java.lang.Object[],java.lang.Object,int,int)
io.flutter.embedding.android.DrawableSplashScreen: android.view.View createSplashView(android.content.Context,android.os.Bundle)
com.google.gson.DefaultDateTypeAdapter: void write(com.google.gson.stream.JsonWriter,java.util.Date)
com.google.android.gms.common.api.internal.zabv: zabv(com.google.android.gms.common.api.GoogleApi)
com.google.android.gms.common.internal.service.zap: zap(android.content.Context,android.os.Looper,com.google.android.gms.common.internal.ClientSettings,com.google.android.gms.common.internal.TelemetryLoggingOptions,com.google.android.gms.common.api.internal.ConnectionCallbacks,com.google.android.gms.common.api.internal.OnConnectionFailedListener)
com.google.android.gms.signin.internal.SignInClientImpl: java.lang.String getServiceDescriptor()
com.google.android.gms.maps.internal.zzg: com.google.android.gms.internal.maps.zzx addMarker(com.google.android.gms.maps.model.MarkerOptions)
androidx.fragment.app.Fragment: void onAttach(android.app.Activity)
com.google.gson.Gson$2: Gson$2(com.google.gson.Gson)
com.google.gson.stream.JsonReader: boolean skipTo(java.lang.String)
com.google.android.gms.common.internal.service.zam: void accept(java.lang.Object,java.lang.Object)
com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment: com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment self()
io.sentry.android.core.DefaultAndroidEventProcessor: void processNonCachedEvent(io.sentry.SentryBaseEvent)
io.flutter.embedding.android.KeyboardManager: boolean handleEvent(android.view.KeyEvent)
com.google.gson.stream.JsonToken: com.google.gson.stream.JsonToken valueOf(java.lang.String)
io.flutter.plugins.googlemaps.PolygonController: void setStrokeWidth(float)
com.tekartik.sqflite.SqflitePlugin: java.util.Map cursorRowToMap(android.database.Cursor)
io.sentry.cache.EnvelopeCache: java.io.File[] allEnvelopeFiles()
com.google.android.gms.common.api.internal.zabq: void zav()
androidx.collection.ArrayMap$1: void colPut(java.lang.Object,java.lang.Object)
com.google.android.gms.internal.maps.zzai: boolean zza(int,android.os.Parcel,android.os.Parcel,int)
androidx.core.app.NotificationCompat$Style: android.widget.RemoteViews makeBigContentView(androidx.core.app.NotificationBuilderWithBuilderAccessor)
com.tekartik.sqflite.operation.BatchOperation: java.lang.Object getArgument(java.lang.String)
com.google.common.base.Function: java.lang.Object apply(java.lang.Object)
io.sentry.android.core.ContextUtils: android.content.pm.PackageInfo getPackageInfo(android.content.Context,io.sentry.ILogger)
kotlinx.coroutines.channels.ChannelResult$Closed: boolean equals(java.lang.Object)
com.google.gson.Gson$5: Gson$5(com.google.gson.TypeAdapter)
com.google.android.gms.maps.internal.zzl: void onStop()
com.google.android.gms.common.api.internal.zaae: void onStop()
kotlinx.coroutines.scheduling.NonBlockingContext: void afterTask()
io.sentry.adapters.SentryLevelSerializerAdapter: SentryLevelSerializerAdapter(io.sentry.SentryOptions)
io.flutter.plugins.googlemaps.CirclesController: void changeCircle(java.lang.Object)
com.google.android.gms.maps.GoogleMap: void setMyLocationEnabled(boolean)
io.sentry.SentryOptions: boolean isEnableAutoSessionTracking()
io.sentry.android.core.util.MainThreadChecker: boolean isMainThread()
com.google.gson.internal.LinkedHashTreeMap$KeySet: LinkedHashTreeMap$KeySet(com.google.gson.internal.LinkedHashTreeMap)
androidx.window.core.Bounds: int getBottom()
io.flutter.embedding.android.FlutterView: boolean dispatchKeyEvent(android.view.KeyEvent)
io.sentry.Session: Session(io.sentry.Session$State,java.util.Date,java.util.Date,int,java.lang.String,java.util.UUID,java.lang.Boolean,java.lang.Long,java.lang.Double,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
androidx.window.core.Version: java.math.BigInteger getBigInteger()
kotlinx.coroutines.flow.internal.SafeCollector_commonKt$checkContext$result$1: SafeCollector_commonKt$checkContext$result$1(kotlinx.coroutines.flow.internal.SafeCollector)
com.google.common.collect.MapMakerInternalMap: com.google.common.collect.MapMakerInternalMap$Segment segmentFor(int)
com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter endObject()
com.google.android.gms.common.api.internal.BackgroundDetector: void onActivityStopped(android.app.Activity)
androidx.collection.SimpleArrayMap: int indexOf(java.lang.Object,int)
androidx.arch.core.internal.SafeIterableMap$Entry: java.lang.Object setValue(java.lang.Object)
com.google.android.gms.maps.model.MarkerOptions: float getAlpha()
com.google.android.gms.maps.model.TileOverlay: java.lang.String getId()
io.flutter.plugin.platform.PlatformViewsController: boolean access$000(int)
com.google.common.base.MoreObjects$ToStringHelper: com.google.common.base.MoreObjects$ToStringHelper$ValueHolder addHolder()
com.google.android.gms.common.GoogleApiAvailability: com.google.android.gms.common.api.internal.zabx zac(android.content.Context,com.google.android.gms.common.api.internal.zabw)
com.google.gson.internal.Primitives: Primitives()
io.flutter.embedding.engine.renderer.FlutterRenderer: void registerTexture(long,io.flutter.embedding.engine.renderer.SurfaceTextureWrapper)
io.sentry.Scope: java.util.Map getTags()
com.google.android.gms.dynamite.zzi: zzi()
com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry: java.lang.Object getValue()
io.flutter.embedding.engine.FlutterJNI: void ensureNotAttachedToNative()
io.sentry.android.core.ActivityLifecycleIntegration: void stopPreviousTransactions()
androidx.fragment.app.FragmentActivity: void onStop()
io.flutter.embedding.engine.systemchannels.TextInputChannel: void performPrivateCommand(int,java.lang.String,android.os.Bundle)
com.tekartik.sqflite.SqflitePlugin$7: void run()
io.flutter.embedding.android.FlutterView: boolean onHoverEvent(android.view.MotionEvent)
kotlinx.coroutines.flow.internal.SafeCollector$collectContextSize$1: java.lang.Integer invoke(int,kotlin.coroutines.CoroutineContext$Element)
kotlin.jvm.internal.CallableReference: kotlin.reflect.KType getReturnType()
kotlinx.coroutines.scheduling.CoroutineScheduler: void close()
com.google.android.gms.common.api.internal.zabp: void onSignOutComplete()
androidx.fragment.app.Fragment: void onInflate(android.app.Activity,android.util.AttributeSet,android.os.Bundle)
com.google.android.gms.common.api.Scope: boolean equals(java.lang.Object)
io.sentry.HubAdapter: io.sentry.HubAdapter getInstance()
com.google.gson.internal.ConstructorConstructor$6: ConstructorConstructor$6(com.google.gson.internal.ConstructorConstructor)
androidx.fragment.app.FragmentActivity$HostCallbacks: void onDump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])
kotlinx.coroutines.internal.LockFreeTaskQueueCore: kotlinx.coroutines.internal.LockFreeTaskQueueCore removeSlowPath(int,int)
io.sentry.protocol.Gpu: java.lang.String getName()
io.sentry.transport.RateLimiter$DataCategory: io.sentry.transport.RateLimiter$DataCategory valueOf(java.lang.String)
io.flutter.plugins.googlemaps.CirclesController: java.lang.String getCircleId(java.lang.Object)
io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup: SingleViewPresentation$FakeWindowViewGroup(android.content.Context)
kotlin.jvm.internal.ClassReference: int hashCode()
io.sentry.IHub: io.sentry.protocol.SentryId captureEnvelope(io.sentry.SentryEnvelope,java.lang.Object)
io.flutter.view.AccessibilityBridge$SemanticsNode: io.flutter.view.AccessibilityBridge$CustomAccessibilityAction access$3000(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.sentry.cache.CacheStrategy: void saveNewEnvelope(io.sentry.SentryEnvelope,java.io.File,long)
kotlinx.coroutines.channels.ArrayChannel: ArrayChannel(int,kotlinx.coroutines.channels.BufferOverflow,kotlin.jvm.functions.Function1)
androidx.core.os.LocaleListCompatWrapper: java.util.Locale get(int)
com.google.android.gms.common.internal.Objects: boolean equal(java.lang.Object,java.lang.Object)
com.google.gson.internal.bind.TypeAdapters$34: java.lang.String toString()
com.google.gson.internal.LinkedHashTreeMap: void doubleCapacity()
kotlinx.coroutines.JobSupport$Finishing: boolean isCancelling()
androidx.core.os.LocaleListCompat: androidx.core.os.LocaleListCompat create(java.util.Locale[])
com.google.common.collect.Platform: java.lang.Object[] newArray(java.lang.Object[],int)
androidx.versionedparcelable.VersionedParcel: java.lang.String readString(java.lang.String,int)
io.sentry.hints.SessionStartHint: SessionStartHint()
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: java.lang.Long getRecordSourceNodeId(android.view.accessibility.AccessibilityRecord)
com.google.android.gms.common.internal.zzo: boolean zzj()
kotlin.text.StringsKt__StringsKt: kotlin.sequences.Sequence rangesDelimitedBy$StringsKt__StringsKt(java.lang.CharSequence,java.lang.String[],int,boolean,int)
com.google.android.gms.common.internal.service.zai: void zae(com.google.android.gms.common.internal.TelemetryData)
io.sentry.protocol.Device: java.util.Map getUnknown()
com.google.gson.internal.LinkedTreeMap$KeySet: void clear()
androidx.fragment.app.FragmentManagerViewModel: void clearNonConfigState(androidx.fragment.app.Fragment)
io.flutter.plugin.common.StandardMessageCodec: StandardMessageCodec()
com.google.gson.internal.bind.SqlDateTypeAdapter: java.lang.Object read(com.google.gson.stream.JsonReader)
com.tekartik.sqflite.SqlCommand: java.lang.Object[] getSqlArguments(java.util.List)
io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration: java.lang.Integer inputActionFromTextInputAction(java.lang.String)
io.sentry.SentryEnvelopeItemHeaderAdapter: void write(com.google.gson.stream.JsonWriter,io.sentry.SentryEnvelopeItemHeader)
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView: void draw(android.graphics.Canvas)
io.flutter.embedding.android.FlutterActivity: void onTrimMemory(int)
com.google.android.gms.common.GoogleApiAvailability: void zae(android.content.Context,int,java.lang.String,android.app.PendingIntent)
io.sentry.protocol.SentryTransaction: boolean isFinished()
io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler: void removeViewImmediate(java.lang.Object[])
com.google.android.gms.common.internal.zzk: java.lang.Object[] newArray(int)
io.flutter.plugins.pathprovider.PathProviderPlugin: java.lang.String access$600(io.flutter.plugins.pathprovider.PathProviderPlugin)
io.sentry.android.core.BuildInfoProvider: java.lang.String getBuildTags()
com.google.android.gms.maps.model.Tile: void writeToParcel(android.os.Parcel,int)
kotlinx.coroutines.scheduling.LimitingDispatcher: void dispatch(java.lang.Runnable,boolean)
androidx.lifecycle.LiveData: void onInactive()
com.google.android.gms.common.internal.GmsClient: java.util.Set validateScopes(java.util.Set)
androidx.window.embedding.SplitPairFilter: java.lang.String toString()
io.sentry.IHub: void removeExtra(java.lang.String)
com.google.common.util.concurrent.AbstractFuture: void interruptTask()
kotlin.jvm.internal.ReflectionFactory: java.lang.String renderLambdaToString(kotlin.jvm.internal.Lambda)
com.google.android.gms.common.internal.safeparcel.SafeParcelReader: int readSize(android.os.Parcel,int)
androidx.arch.core.internal.SafeIterableMap$DescendingIterator: androidx.arch.core.internal.SafeIterableMap$Entry backward(androidx.arch.core.internal.SafeIterableMap$Entry)
com.google.android.gms.internal.maps.zzy: void zzs(java.util.List)
com.google.android.gms.maps.model.zzj: java.lang.Object createFromParcel(android.os.Parcel)
androidx.window.layout.SidecarAdapter$Companion: void setSidecarDisplayFeatures(androidx.window.sidecar.SidecarWindowLayoutInfo,java.util.List)
io.sentry.android.core.AndroidLogger: boolean isEnabled(io.sentry.SentryLevel)
io.flutter.embedding.android.FlutterTextureView: void disconnectSurfaceFromRenderer()
io.sentry.SentryEvent: void removeModule(java.lang.String)
io.sentry.SentryEnvelopeItemHeaderAdapter: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
io.flutter.plugins.googlemaps.MarkersController: void removeMarkers(java.util.List)
com.google.android.gms.maps.model.MarkerOptions: com.google.android.gms.maps.model.MarkerOptions zIndex(float)
com.google.gson.internal.UnsafeAllocator$4: java.lang.Object newInstance(java.lang.Class)
kotlin.ranges.IntProgression: IntProgression(int,int,int)
com.google.gson.internal.$Gson$Types$GenericArrayTypeImpl: int hashCode()
androidx.fragment.app.Fragment: void performAttach()
kotlinx.coroutines.internal.ThreadSafeHeap: void setSize(int)
com.google.android.gms.maps.GoogleMapOptions: java.lang.Float getMinZoomPreference()
io.flutter.plugin.common.StandardMethodCodec: java.nio.ByteBuffer encodeSuccessEnvelope(java.lang.Object)
com.google.android.gms.maps.model.Cap: void writeToParcel(android.os.Parcel,int)
kotlinx.coroutines.channels.BufferOverflow: kotlinx.coroutines.channels.BufferOverflow[] $values()
com.google.gson.internal.bind.TypeAdapters$17: void write(com.google.gson.stream.JsonWriter,java.math.BigDecimal)
androidx.collection.ArraySet: void ensureCapacity(int)
androidx.collection.SparseArrayCompat: java.lang.Object clone()
com.google.gson.Gson: java.lang.Object fromJson(com.google.gson.stream.JsonReader,java.lang.reflect.Type)
com.google.android.gms.common.api.internal.NonGmsServiceBrokerClient: void disconnect(java.lang.String)
androidx.fragment.app.Fragment: int getNextTransitionStyle()
io.sentry.Sentry: io.sentry.ITransaction startTransaction(io.sentry.TransactionContext,boolean)
com.google.android.gms.common.api.internal.zzb: void onDestroy()
com.google.android.gms.common.api.internal.zabs: zabs(com.google.android.gms.common.api.internal.ApiKey,com.google.android.gms.common.Feature,com.google.android.gms.common.api.internal.zabr)
io.flutter.plugin.common.BasicMessageChannel: void setMessageHandler(io.flutter.plugin.common.BasicMessageChannel$MessageHandler)
kotlinx.coroutines.JobCancellationException: boolean equals(java.lang.Object)
io.sentry.SentryClient$SortBreadcrumbsByDate: int compare(java.lang.Object,java.lang.Object)
io.sentry.protocol.Device: java.lang.Long getExternalFreeStorage()
io.flutter.embedding.android.DrawableSplashScreen: DrawableSplashScreen(android.graphics.drawable.Drawable,android.widget.ImageView$ScaleType,long)
io.flutter.embedding.engine.systemchannels.TextInputChannel: void updateEditingStateWithDeltas(int,java.util.ArrayList)
androidx.fragment.app.Fragment: androidx.fragment.app.FragmentActivity getActivity()
kotlinx.coroutines.channels.ConflatedChannel: java.lang.String getBufferDebugString()
com.google.android.gms.maps.GoogleMapOptions: java.lang.String getMapId()
io.flutter.plugin.editing.TextInputPlugin: void access$400(io.flutter.plugin.editing.TextInputPlugin)
io.sentry.HubAdapter: io.sentry.ITransaction startTransaction(io.sentry.TransactionContext,io.sentry.CustomSamplingContext,boolean)
io.flutter.plugins.pathprovider.PathProviderPlugin$PathProviderPlatformThread: PathProviderPlugin$PathProviderPlatformThread(io.flutter.plugins.pathprovider.PathProviderPlugin,io.flutter.plugins.pathprovider.PathProviderPlugin$1)
com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList construct(java.lang.Object[])
com.google.android.gms.common.api.Status: Status(int,int,java.lang.String,android.app.PendingIntent)
kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion: long updateTail(long,int)
androidx.window.layout.SidecarAdapter$Companion: void setSidecarDevicePosture(androidx.window.sidecar.SidecarDeviceState,int)
androidx.core.app.ActivityCompat: androidx.core.app.ActivityCompat$PermissionCompatDelegate getPermissionCompatDelegate()
kotlinx.coroutines.flow.internal.DownstreamExceptionElement: DownstreamExceptionElement(java.lang.Throwable)
androidx.collection.MapCollections$EntrySet: boolean containsAll(java.util.Collection)
androidx.fragment.app.FragmentTransition$FragmentContainerTransition: FragmentTransition$FragmentContainerTransition()
io.flutter.plugins.googlemaps.PolygonBuilder: void setHoles(java.util.List)
io.flutter.embedding.android.FlutterView: android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider()
io.sentry.transport.RateLimiter$DataCategory: RateLimiter$DataCategory(java.lang.String,int,java.lang.String)
com.google.common.hash.LittleEndianByteArray$JavaLittleEndianBytes$1: void putLongLittleEndian(byte[],int,long)
kotlinx.coroutines.android.HandlerContext: boolean equals(java.lang.Object)
com.google.android.gms.common.zzm: void zzd(android.content.Context)
com.google.android.gms.common.ErrorDialogFragment: com.google.android.gms.common.ErrorDialogFragment newInstance(android.app.Dialog,android.content.DialogInterface$OnCancelListener)
kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt: kotlin.coroutines.Continuation createCoroutineUnintercepted(kotlin.jvm.functions.Function1,kotlin.coroutines.Continuation)
com.google.android.gms.common.internal.service.zap: java.lang.String getStartServiceAction()
com.google.android.gms.internal.base.zac: zac()
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1$invokeSuspend$$inlined$collect$1: java.lang.Object emit(java.lang.Object,kotlin.coroutines.Continuation)
com.google.gson.GsonBuilder: com.google.gson.GsonBuilder enableComplexMapKeySerialization()
io.sentry.SentryStackTraceFactory: SentryStackTraceFactory(java.util.List,java.util.List)
kotlinx.coroutines.internal.LockFreeTaskQueueCore: kotlinx.coroutines.internal.LockFreeTaskQueueCore next()
io.sentry.SentryOptions: java.util.List getInAppIncludes()
io.flutter.embedding.engine.systemchannels.NavigationChannel: void setInitialRoute(java.lang.String)
io.sentry.adapters.ContextsSerializerAdapter: com.google.gson.JsonElement serialize(io.sentry.protocol.Contexts,java.lang.reflect.Type,com.google.gson.JsonSerializationContext)
androidx.core.app.NotificationCompat$Builder: androidx.core.app.NotificationCompat$Builder setStyle(androidx.core.app.NotificationCompat$Style)
io.sentry.ISentryClient: io.sentry.protocol.SentryId captureException(java.lang.Throwable,java.lang.Object)
com.google.android.gms.signin.internal.zab: zab()
androidx.lifecycle.ProcessLifecycleOwner: androidx.lifecycle.LifecycleOwner get()
com.google.common.collect.ImmutableList$Builder: ImmutableList$Builder()
io.flutter.embedding.engine.FlutterJNI: void nativeInvokePlatformMessageEmptyResponseCallback(long,int)
com.google.gson.Gson$2: void write(com.google.gson.stream.JsonWriter,java.lang.Number)
io.sentry.UnknownPropertiesTypeAdapterFactory$UnknownPropertiesTypeAdapter: UnknownPropertiesTypeAdapterFactory$UnknownPropertiesTypeAdapter(com.google.gson.TypeAdapter,java.util.Collection)
io.sentry.protocol.OperatingSystem: java.lang.Boolean isRooted()
com.google.android.gms.maps.model.LatLngBounds: int hashCode()
io.flutter.plugins.googlemaps.GoogleMapBuilder: void setMyLocationButtonEnabled(boolean)
com.google.android.gms.common.internal.BaseGmsClient: java.lang.String getStartServicePackage()
io.flutter.embedding.android.WindowInfoRepositoryCallbackAdapterWrapper: void removeWindowLayoutInfoListener(androidx.core.util.Consumer)
kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext: void completeResumeReceive(java.lang.Object)
io.flutter.view.AccessibilityBridge$Flag: io.flutter.view.AccessibilityBridge$Flag[] values()
androidx.collection.MapCollections$EntrySet: boolean equals(java.lang.Object)
androidx.core.graphics.drawable.IconCompat: void onPostParceling()
com.google.gson.internal.LinkedHashTreeMap$LinkedTreeMapIterator: LinkedHashTreeMap$LinkedTreeMapIterator(com.google.gson.internal.LinkedHashTreeMap)
com.google.android.gms.common.api.internal.ApiKey: boolean equals(java.lang.Object)
io.flutter.plugins.googlemaps.Convert: java.lang.String interpretCircleOptions(java.lang.Object,io.flutter.plugins.googlemaps.CircleOptionsSink)
kotlin.Result: boolean isSuccess-impl(java.lang.Object)
com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList subList(int,int)
io.sentry.SentryTracer: io.sentry.Span getLatestActiveSpan()
com.google.gson.JsonObject: com.google.gson.JsonPrimitive getAsJsonPrimitive(java.lang.String)
com.google.android.gms.internal.maps.zzv: void zzm()
io.sentry.Span: void finish(io.sentry.SpanStatus)
androidx.fragment.app.Fragment: void setHideReplaced(boolean)
com.google.common.util.concurrent.AbstractFuture$SafeAtomicHelper: AbstractFuture$SafeAtomicHelper(java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicReferenceFieldUpdater,java.util.concurrent.atomic.AtomicReferenceFieldUpdater)
kotlinx.coroutines.YieldContext$Key: YieldContext$Key(kotlin.jvm.internal.DefaultConstructorMarker)
com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher: long mixK2(long)
io.flutter.embedding.android.FlutterSplashView$3: void run()
io.flutter.plugins.googlemaps.GoogleMapsPlugin$2: GoogleMapsPlugin$2(io.flutter.plugins.googlemaps.GoogleMapsPlugin)
io.sentry.transport.StdoutTransport: void send(io.sentry.SentryEnvelope,java.lang.Object)
androidx.collection.ArrayMap: ArrayMap(int)
io.flutter.embedding.android.FlutterView: void removeOnFirstFrameRenderedListener(io.flutter.embedding.engine.renderer.FlutterUiDisplayListener)
io.flutter.plugins.googlemaps.GoogleMapController: boolean hasLocationPermission()
io.flutter.embedding.android.FlutterView$4: void onFlutterUiDisplayed()
kotlinx.coroutines.internal.StackTraceRecoveryKt: int frameIndex(java.lang.StackTraceElement[],java.lang.String)
io.flutter.plugin.common.MethodChannel$IncomingResultHandler: MethodChannel$IncomingResultHandler(io.flutter.plugin.common.MethodChannel,io.flutter.plugin.common.MethodChannel$Result)
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$6: SentryFlutterPlugin$initNativeSdk$2$6(io.sentry.android.core.SentryAndroidOptions)
androidx.fragment.app.FragmentManagerImpl$EndViewTransitionAnimation: boolean getTransformation(long,android.view.animation.Transformation,float)
com.google.common.io.Files$FilePredicate$1: Files$FilePredicate$1(java.lang.String,int)
io.sentry.NoOpHub: void removeExtra(java.lang.String)
kotlinx.coroutines.JobSupport: boolean tryMakeCancelling(kotlinx.coroutines.Incomplete,java.lang.Throwable)
com.google.common.collect.MapMakerInternalMap: java.lang.Object getLiveValue(com.google.common.collect.MapMakerInternalMap$InternalEntry)
io.flutter.plugin.platform.VirtualDisplayController$1: void onViewAttachedToWindow(android.view.View)
io.sentry.SpanContext: SpanContext(java.lang.String,java.lang.Boolean)
kotlinx.coroutines.channels.ArrayChannel: void ensureCapacity(int)
io.sentry.protocol.SentryStackFrame: void setInApp(java.lang.Boolean)
io.sentry.protocol.Browser: void setName(java.lang.String)
io.sentry.UserFeedback: java.lang.String getEmail()
io.sentry.UncaughtExceptionHandler$Adapter: java.lang.Thread$UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()
kotlin.collections.EmptyList: java.util.ListIterator listIterator(int)
androidx.fragment.app.FragmentManagerImpl: void doPendingDeferredStart()
com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment: void maybeClearReferenceQueues()
io.sentry.SentryTracer: io.sentry.SpanStatus getStatus()
com.google.gson.internal.LinkedHashTreeMap$AvlBuilder: com.google.gson.internal.LinkedHashTreeMap$Node root()
io.sentry.SentryOptions: java.util.List getEventProcessors()
io.flutter.plugins.googlemaps.PolygonsController: void changePolygons(java.util.List)
com.google.android.gms.common.ConnectionResult: ConnectionResult(int)
androidx.loader.app.LoaderManagerImpl$LoaderInfo: androidx.loader.content.Loader destroy(boolean)
com.google.android.gms.common.internal.zzo: void zzf(android.content.ServiceConnection,java.lang.String)
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField: void read(com.google.gson.stream.JsonReader,java.lang.Object)
com.google.gson.internal.bind.TypeAdapters$13: java.lang.Object read(com.google.gson.stream.JsonReader)
androidx.lifecycle.LiveData$ObserverWrapper: void detachObserver()
io.sentry.UncaughtExceptionHandler: void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)
com.google.android.gms.common.api.internal.NonGmsServiceBrokerClient: java.util.Set getScopesForConnectionlessNonSignIn()
androidx.activity.OnBackPressedCallback: void setEnabled(boolean)
com.google.common.collect.MapMakerInternalMap$Segment: void initTable(java.util.concurrent.atomic.AtomicReferenceArray)
io.sentry.MainEventProcessor: void setRelease(io.sentry.SentryBaseEvent)
com.google.android.gms.common.internal.zzl: java.lang.Object createFromParcel(android.os.Parcel)
com.google.gson.GsonBuilder: com.google.gson.GsonBuilder setFieldNamingStrategy(com.google.gson.FieldNamingStrategy)
androidx.collection.MapCollections: boolean equalsSetHelper(java.util.Set,java.lang.Object)
kotlinx.coroutines.flow.internal.SafeCollector_commonKt: kotlinx.coroutines.Job transitiveCoroutineParent(kotlinx.coroutines.Job,kotlinx.coroutines.Job)
androidx.arch.core.internal.SafeIterableMap: java.util.Map$Entry newest()
io.flutter.plugins.googlemaps.PolygonBuilder: void setStrokeColor(int)
io.sentry.Stack: void pop()
io.flutter.plugin.editing.InputConnectionAdaptor: boolean sendKeyEvent(android.view.KeyEvent)
com.google.android.gms.common.internal.service.zai: zai(android.os.IBinder)
com.google.android.gms.maps.model.Circle: void setZIndex(float)
androidx.fragment.app.FragmentTransitionCompat21: void scheduleHideFragmentView(java.lang.Object,android.view.View,java.util.ArrayList)
io.flutter.embedding.android.FlutterActivity: void onUserLeaveHint()
com.google.android.gms.common.api.GoogleApi: java.lang.String getContextAttributionTag()
com.google.gson.internal.bind.TypeAdapters$33: java.lang.String toString()
io.sentry.SentryBaseEvent: java.lang.Throwable getThrowableMechanism()
io.flutter.view.FlutterCallbackInformation: FlutterCallbackInformation(java.lang.String,java.lang.String,java.lang.String)
io.sentry.protocol.SentryStackFrame: void setVars(java.util.Map)
io.flutter.embedding.engine.FlutterJNI: void prefetchDefaultFontManager()
kotlinx.coroutines.CoroutineScopeKt: kotlinx.coroutines.CoroutineScope CoroutineScope(kotlin.coroutines.CoroutineContext)
androidx.collection.MapCollections: java.util.Collection getValues()
kotlin.collections.EmptyMap: int size()
io.sentry.transport.NoOpTransport: void close()
io.sentry.protocol.Device: java.lang.Long getFreeStorage()
io.sentry.hints.SessionEndHint: SessionEndHint()
kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion: int addFailReason(long)
io.sentry.android.core.DefaultAndroidEventProcessor: java.lang.Float getBatteryLevel(android.content.Intent)
kotlinx.coroutines.JobSupport: kotlin.coroutines.CoroutineContext$Key getKey()
io.flutter.plugins.googlemaps.MarkerController: void setInfoWindowText(java.lang.String,java.lang.String)
com.google.gson.internal.LazilyParsedNumber: boolean equals(java.lang.Object)
io.flutter.view.AccessibilityBridge: boolean performSetText(io.flutter.view.AccessibilityBridge$SemanticsNode,int,android.os.Bundle)
io.sentry.android.core.DefaultAndroidEventProcessor: long getBlockCountLong(android.os.StatFs)
io.sentry.config.PropertiesProvider: java.util.Map getMap(java.lang.String)
io.sentry.SentryOptions: void setEnableExternalConfiguration(boolean)
io.flutter.plugin.platform.PlatformViewsController$1: void disposeVirtualDisplayForPlatformView(int)
com.google.android.gms.maps.GoogleMap: boolean isTrafficEnabled()
com.google.android.gms.internal.maps.zzae: boolean zzp()
io.flutter.embedding.android.FlutterSurfaceView: void access$300(io.flutter.embedding.android.FlutterSurfaceView,int,int)
io.sentry.cache.EnvelopeCache: io.sentry.cache.IEnvelopeCache create(io.sentry.SentryOptions)
io.sentry.android.core.util.MainThreadChecker: boolean isMainThread(java.lang.Thread)
com.google.common.collect.MapMakerInternalMap$Segment: boolean replace(java.lang.Object,int,java.lang.Object,java.lang.Object)
io.flutter.view.AccessibilityBridge$SemanticsNode: float max(float,float,float,float)
io.flutter.Log: void w(java.lang.String,java.lang.String)
com.google.android.gms.common.stats.ConnectionTracker: boolean zze(android.content.Context,android.content.Intent,android.content.ServiceConnection,int,java.util.concurrent.Executor)
io.flutter.embedding.android.FlutterView$4: void onFlutterUiNoLongerDisplayed()
androidx.collection.ArrayMap: java.util.Collection values()
io.flutter.embedding.android.FlutterActivity: void onFlutterUiNoLongerDisplayed()
androidx.fragment.app.FragmentActivity$HostCallbacks: androidx.fragment.app.FragmentActivity onGetHost()
io.sentry.android.core.DefaultAndroidEventProcessor: void setDevice(io.sentry.SentryBaseEvent,boolean,boolean)
io.sentry.android.core.SystemEventsBreadcrumbsIntegration: void register(io.sentry.IHub,io.sentry.SentryOptions)
io.sentry.NoOpSerializer: io.sentry.SentryEnvelope deserializeEnvelope(java.io.InputStream)
com.google.gson.internal.UnsafeAllocator$4: UnsafeAllocator$4()
androidx.fragment.app.FragmentTransitionImpl: void scheduleNameReset(android.view.ViewGroup,java.util.ArrayList,java.util.Map)
kotlin.text.StringsKt__StringNumberConversionsKt: java.lang.Integer toIntOrNull(java.lang.String)
com.tekartik.sqflite.SqflitePlugin$BgResult$3: void run()
com.google.android.gms.auth.api.signin.internal.Storage: java.lang.String zaa(java.lang.String)
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)
kotlin.jvm.internal.PackageReference: boolean equals(java.lang.Object)
io.flutter.plugin.common.JSONMethodCodec: java.nio.ByteBuffer encodeMethodCall(io.flutter.plugin.common.MethodCall)
kotlinx.coroutines.JobSupport: boolean start()
io.flutter.embedding.android.FlutterActivity: boolean shouldRestoreAndSaveState()
io.flutter.embedding.engine.systemchannels.SettingsChannel: io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder startMessage()
io.flutter.plugin.editing.InputConnectionAdaptor: boolean handleKeyEvent(android.view.KeyEvent)
com.google.android.gms.common.api.internal.zabt: void run()
com.google.android.gms.internal.maps.zzv: void zzu(com.google.android.gms.maps.model.LatLng)
io.flutter.plugins.connectivity.Connectivity: Connectivity(android.net.ConnectivityManager,android.net.wifi.WifiManager)
kotlinx.coroutines.CoroutineName: int hashCode()
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding: void addActivityResultListener(io.flutter.plugin.common.PluginRegistry$ActivityResultListener)
com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry: com.google.common.collect.MapMakerInternalMap$WeakValueReference getValueReference()
kotlin.coroutines.jvm.internal.BaseContinuationImpl: kotlin.coroutines.Continuation getCompletion()
io.sentry.Sentry: io.sentry.ITransaction startTransaction(java.lang.String,java.lang.String)
com.google.common.base.Preconditions: int checkElementIndex(int,int,java.lang.String)
com.google.gson.internal.LinkedHashTreeMap$AvlBuilder: LinkedHashTreeMap$AvlBuilder()
io.sentry.transport.ITransport: void send(io.sentry.SentryEnvelope,java.lang.Object)
io.flutter.embedding.android.FlutterImageView: boolean acquireLatestImage()
com.google.android.gms.common.api.internal.zabq: com.google.android.gms.common.ConnectionResult zad()
com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$AtomicHelper access$200()
io.sentry.android.core.AndroidOptionsInitializer: void readDefaultOptionValues(io.sentry.android.core.SentryAndroidOptions,android.content.Context)
com.google.android.gms.maps.internal.zzak: boolean zza(int,android.os.Parcel,android.os.Parcel,int)
io.flutter.plugins.googlemaps.GoogleMapController: void onMarkerDragEnd(com.google.android.gms.maps.model.Marker)
com.google.android.gms.maps.internal.zzg: com.google.android.gms.internal.maps.zzad addPolyline(com.google.android.gms.maps.model.PolylineOptions)
kotlin.collections.EmptyMap: boolean containsValue(java.lang.Void)
com.tekartik.sqflite.SqflitePlugin: int access$1000()
com.google.common.hash.AbstractStreamingHasher: AbstractStreamingHasher(int,int)
kotlin.jvm.internal.CallableReference: java.util.List getTypeParameters()
com.google.gson.internal.$Gson$Types: void checkNotPrimitive(java.lang.reflect.Type)
kotlin.collections.ArraysKt___ArraysKt: java.util.List sortedWith(java.lang.Object[],java.util.Comparator)
io.sentry.DirectoryProcessor: void processDirectory(java.io.File)
kotlinx.coroutines.JobImpl: boolean getOnCancelComplete$kotlinx_coroutines_core()
io.flutter.plugins.googlemaps.CircleController: void setZIndex(float)
io.flutter.plugins.googlemaps.Convert: java.lang.String interpretPolygonOptions(java.lang.Object,io.flutter.plugins.googlemaps.PolygonOptionsSink)
io.sentry.NoOpTransaction: io.sentry.SentryTraceHeader toSentryTrace()
com.google.android.gms.common.internal.zzo: zzo(com.google.android.gms.common.internal.zzr,com.google.android.gms.common.internal.zzn)
io.sentry.android.core.DefaultAndroidEventProcessor: java.io.File[] getExternalFilesDirs()
io.sentry.Hub: Hub(io.sentry.SentryOptions,io.sentry.Stack)
com.google.android.gms.common.wrappers.Wrappers: com.google.android.gms.common.wrappers.PackageManagerWrapper packageManager(android.content.Context)
com.google.android.gms.maps.internal.zzg: com.google.android.gms.internal.maps.zzaa addPolygon(com.google.android.gms.maps.model.PolygonOptions)
com.google.android.gms.maps.model.PatternItem: void writeToParcel(android.os.Parcel,int)
com.google.common.reflect.TypeToken$4: TypeToken$4(com.google.common.reflect.TypeToken,com.google.common.collect.ImmutableSet$Builder)
com.google.common.base.Supplier: java.lang.Object get()
io.flutter.embedding.engine.dart.DartExecutor$1: void onMessage(java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply)
kotlin.sequences.TransformingSequence: kotlin.sequences.Sequence access$getSequence$p(kotlin.sequences.TransformingSequence)
io.sentry.SentryOptions: java.lang.String getServerName()
com.google.android.gms.maps.model.Polygon: void setStrokeColor(int)
io.flutter.plugin.editing.TextInputPlugin$1: void show()
io.sentry.ISentryClient: io.sentry.protocol.SentryId captureException(java.lang.Throwable,io.sentry.Scope,java.lang.Object)
com.google.gson.internal.$Gson$Types: java.lang.reflect.Type[] getMapKeyAndValueTypes(java.lang.reflect.Type,java.lang.Class)
com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry: MapMakerInternalMap$StrongKeyStrongValueEntry(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry)
com.google.gson.internal.LinkedTreeMap$EntrySet$1: java.lang.Object next()
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType[] values()
com.google.android.gms.common.internal.zad: zad(android.content.Intent,android.app.Activity,int)
com.google.android.gms.common.zzi: int hashCode()
androidx.fragment.app.FragmentManagerImpl: void dispatchDestroyView()
androidx.fragment.app.Fragment$3: void run()
io.flutter.plugins.pathprovider.PathProviderPlugin$PathProviderPlatformThread: PathProviderPlugin$PathProviderPlatformThread(io.flutter.plugins.pathprovider.PathProviderPlugin)
com.google.common.reflect.TypeToken$4: void visitParameterizedType(java.lang.reflect.ParameterizedType)
androidx.fragment.app.FragmentActivity: androidx.fragment.app.FragmentManager getSupportFragmentManager()
kotlin.text.StringsKt__StringsKt: java.lang.String substringBefore$default(java.lang.String,char,java.lang.String,int,java.lang.Object)
com.google.android.gms.common.api.internal.zas: zas(com.google.android.gms.common.api.internal.BasePendingResult,com.google.android.gms.common.api.internal.zar)
io.flutter.embedding.engine.systemchannels.LocalizationChannel: LocalizationChannel(io.flutter.embedding.engine.dart.DartExecutor)
kotlin.random.FallbackThreadLocalRandom$implStorage$1: java.util.Random initialValue()
androidx.lifecycle.LiveData$LifecycleBoundObserver: boolean shouldBeActive()
io.flutter.plugins.googlemaps.MarkerController: void setConsumeTapEvents(boolean)
io.flutter.embedding.android.KeyChannelResponder: java.lang.Character applyCombiningCharacterToBaseCharacter(int)
com.google.android.gms.signin.internal.zaf: zaf(android.os.IBinder)
kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.Throwable sanitizeStackTrace(java.lang.Throwable)
androidx.fragment.app.FragmentManagerImpl: void ensureExecReady(boolean)
io.sentry.adapters.SpanStatusSerializerAdapter: com.google.gson.JsonElement serialize(io.sentry.SpanStatus,java.lang.reflect.Type,com.google.gson.JsonSerializationContext)
com.google.android.gms.tasks.TaskCompletionSource: com.google.android.gms.tasks.Task getTask()
androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback: void onWindowLayoutChanged(android.os.IBinder,androidx.window.sidecar.SidecarWindowLayoutInfo)
com.google.common.util.concurrent.AbstractFuture$Failure$1: java.lang.Throwable fillInStackTrace()
androidx.collection.MapCollections$ArrayIterator: void remove()
kotlin.Pair: java.lang.Object component2()
androidx.collection.ArrayMap: java.util.Set keySet()
com.google.android.gms.common.internal.MethodInvocation: MethodInvocation(int,int,int,long,long,java.lang.String,java.lang.String,int,int)
com.google.gson.internal.bind.TypeAdapters$4: java.lang.Object read(com.google.gson.stream.JsonReader)
io.sentry.transport.TransportResult$SuccessTransportResult: TransportResult$SuccessTransportResult()
io.sentry.SynchronizedCollection: void clear()
io.flutter.plugins.urllauncher.WebViewActivity$FlutterWebChromeClient: WebViewActivity$FlutterWebChromeClient(io.flutter.plugins.urllauncher.WebViewActivity)
io.sentry.HubAdapter: void flush(long)
kotlinx.coroutines.JobSupportKt: kotlinx.coroutines.Empty access$getEMPTY_ACTIVE$p()
androidx.core.view.WindowInsetsControllerCompat$Impl30: WindowInsetsControllerCompat$Impl30(android.view.WindowInsetsController,androidx.core.view.WindowInsetsControllerCompat)
androidx.collection.ArrayMap$1: java.lang.Object colGetEntry(int,int)
io.flutter.plugins.googlemaps.MarkerBuilder: void setFlat(boolean)
io.flutter.embedding.engine.systemchannels.RestorationChannel: RestorationChannel(io.flutter.plugin.common.MethodChannel,boolean)
io.sentry.android.core.util.ConnectivityChecker: io.sentry.android.core.util.ConnectivityChecker$Status getConnectionStatus(android.content.Context,io.sentry.ILogger)
io.sentry.config.ClasspathPropertiesLoader: java.util.Properties load()
kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp: void complete(java.lang.Object,java.lang.Object)
io.flutter.plugin.platform.VirtualDisplayController$OneTimeOnDrawListener: void onDraw()
com.google.gson.JsonPrimitive: JsonPrimitive(java.lang.Object)
androidx.window.layout.SidecarCompat$DistinctSidecarElementCallback: void onDeviceStateChanged(androidx.window.sidecar.SidecarDeviceState)
com.google.android.gms.common.api.internal.BasePendingResult: com.google.android.gms.common.api.Result zaa()
androidx.fragment.app.FragmentController: void dispatchStop()
com.google.gson.internal.bind.TypeAdapters$20: void write(com.google.gson.stream.JsonWriter,java.lang.StringBuffer)
androidx.fragment.app.BackStackRecord: boolean interactsWith(java.util.ArrayList,int,int)
kotlin.jvm.internal.Intrinsics: void throwJavaNpe()
com.google.android.gms.common.GoogleApiAvailabilityLight: int isGooglePlayServicesAvailable(android.content.Context)
io.flutter.plugin.platform.SingleViewPresentation$PresentationState: io.flutter.plugin.platform.PlatformView access$200(io.flutter.plugin.platform.SingleViewPresentation$PresentationState)
io.sentry.SentryOptions: void setSessionTrackingIntervalMillis(long)
androidx.fragment.app.FragmentHostCallback: android.os.Handler getHandler()
com.tekartik.sqflite.Database$1: Database$1(com.tekartik.sqflite.Database)
com.google.android.gms.internal.common.zzc: void zzb(android.os.Parcel,boolean)
com.google.android.gms.common.internal.zal: zal(com.google.android.gms.common.GoogleApiAvailabilityLight)
io.flutter.embedding.android.FlutterSurfaceView: FlutterSurfaceView(android.content.Context,android.util.AttributeSet,boolean)
androidx.fragment.app.Fragment: void restoreChildFragmentState(android.os.Bundle)
com.google.gson.GsonBuilder: com.google.gson.Gson create()
com.tekartik.sqflite.LogLevel: java.lang.Integer getLogLevel(io.flutter.plugin.common.MethodCall)
com.google.common.util.concurrent.AbstractFuture: java.lang.Object access$500(com.google.common.util.concurrent.ListenableFuture)
io.flutter.plugins.googlemaps.GoogleMapController: int checkSelfPermission(java.lang.String)
androidx.core.app.NotificationCompatBuilder: void removeSoundAndVibration(android.app.Notification)
com.google.common.util.concurrent.AbstractFuture: java.lang.Object access$402(com.google.common.util.concurrent.AbstractFuture,java.lang.Object)
com.google.android.gms.common.zzi: byte[] zze(java.lang.String)
io.sentry.protocol.SentryException: void setMechanism(io.sentry.protocol.Mechanism)
io.sentry.android.core.EnvelopeFileObserverIntegration$OutboxEnvelopeFileObserverIntegration: EnvelopeFileObserverIntegration$OutboxEnvelopeFileObserverIntegration()
com.google.android.gms.signin.internal.zab: java.lang.Object createFromParcel(android.os.Parcel)
com.google.gson.internal.bind.TypeAdapters$26$1: TypeAdapters$26$1(com.google.gson.internal.bind.TypeAdapters$26,com.google.gson.TypeAdapter)
io.flutter.plugin.editing.TextInputPlugin: void clearTextInputClient()
kotlinx.coroutines.internal.ExceptionsConstuctorKt$createConstructor$$inlined$safeCtor$3: ExceptionsConstuctorKt$createConstructor$$inlined$safeCtor$3(java.lang.reflect.Constructor)
io.flutter.view.AccessibilityBridge: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int)
com.google.android.gms.maps.model.CircleOptions: int getFillColor()
io.flutter.plugin.platform.SingleViewPresentation$PresentationState: io.flutter.plugin.platform.PlatformView access$202(io.flutter.plugin.platform.SingleViewPresentation$PresentationState,io.flutter.plugin.platform.PlatformView)
io.sentry.ISerializer: io.sentry.SentryEnvelope deserializeEnvelope(java.io.InputStream)
kotlin.collections.EmptySet: boolean retainAll(java.util.Collection)
io.flutter.view.AccessibilityBridge: android.view.accessibility.AccessibilityEvent createTextChangedEvent(int,java.lang.String,java.lang.String)
com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper: boolean casListeners(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Listener,com.google.common.util.concurrent.AbstractFuture$Listener)
io.sentry.transport.HttpConnection: void $closeResource(java.lang.Throwable,java.lang.AutoCloseable)
com.google.gson.internal.bind.TypeAdapters$17: java.math.BigDecimal read(com.google.gson.stream.JsonReader)
io.flutter.view.AccessibilityBridge: int access$1176(io.flutter.view.AccessibilityBridge,int)
io.flutter.embedding.engine.systemchannels.MouseCursorChannel$1: void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription: PlatformChannel$AppSwitcherDescription(int,java.lang.String)
com.google.android.gms.common.GooglePlayServicesUtil: android.content.Context getRemoteContext(android.content.Context)
io.flutter.embedding.engine.systemchannels.DeferredComponentChannel: DeferredComponentChannel(io.flutter.embedding.engine.dart.DartExecutor)
com.google.android.gms.common.internal.service.zao: zao(android.content.Context,com.google.android.gms.common.internal.TelemetryLoggingOptions)
kotlinx.coroutines.internal.OnUndeliveredElementKt$bindCancellationFun$1: java.lang.Object invoke(java.lang.Object)
io.flutter.plugin.platform.PlatformViewsController$1: void synchronizeToNativeViewHierarchy(boolean)
kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState[] $values()
com.google.android.gms.common.GoogleApiAvailabilityLight: android.content.Intent getErrorResolutionIntent(android.content.Context,int,java.lang.String)
com.google.common.util.concurrent.AbstractFuture: void addListener(java.lang.Runnable,java.util.concurrent.Executor)
kotlinx.coroutines.CancellableContinuationImpl: boolean trySuspend()
io.flutter.embedding.android.FlutterActivity: boolean shouldAttachEngineToActivity()
io.sentry.protocol.SentryStackFrame: java.lang.String getAbsPath()
io.sentry.NoOpSentryExecutorService: NoOpSentryExecutorService()
io.flutter.plugin.platform.PlatformViewsController: void detach()
io.flutter.plugins.googlemaps.MarkerBuilder: void setZIndex(float)
io.sentry.protocol.SentryStackFrame: java.lang.Integer getColno()
io.sentry.EnvelopeReader: io.sentry.SentryEnvelopeHeader deserializeEnvelopeHeader(byte[],int,int)
com.google.common.util.concurrent.AbstractFuture$Failure: AbstractFuture$Failure(java.lang.Throwable)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPrePaused(android.app.Activity)
io.flutter.embedding.android.FlutterTextureView: void access$300(io.flutter.embedding.android.FlutterTextureView,int,int)
io.sentry.SentryTracer: io.sentry.SentryTraceHeader toSentryTrace()
kotlin.ranges.RangesKt___RangesKt: long coerceAtMost(long,long)
io.sentry.SentryEnvelopeItem: byte[] getData()
com.google.android.gms.common.internal.service.zap: android.os.IInterface createServiceInterface(android.os.IBinder)
com.google.gson.internal.bind.JsonTreeReader: void endArray()
com.google.android.gms.common.ErrorDialogFragment: void onCancel(android.content.DialogInterface)
com.google.android.gms.internal.common.zzc: void zze(android.os.Parcel,android.os.IInterface)
androidx.window.embedding.SplitPairFilter: java.lang.String getSecondaryActivityIntentAction()
com.google.android.gms.maps.internal.zzg: void setOnMapClickListener(com.google.android.gms.maps.internal.zzal)
androidx.window.embedding.ActivityRule: androidx.window.embedding.ActivityRule plus$window_release(androidx.window.embedding.ActivityFilter)
io.flutter.view.AccessibilityBridge$SemanticsNode: int access$5600(io.flutter.view.AccessibilityBridge$SemanticsNode)
com.google.gson.internal.LinkedTreeMap$Node: int hashCode()
com.google.gson.JsonElement: java.math.BigDecimal getAsBigDecimal()
io.sentry.Sentry: void configureScope(io.sentry.ScopeCallback)
androidx.window.embedding.ActivityRule: boolean getAlwaysExpand()
io.sentry.protocol.SentryTransaction: SentryTransaction(io.sentry.SentryTracer)
io.sentry.SamplingContext: io.sentry.CustomSamplingContext getCustomSamplingContext()
com.google.android.gms.maps.internal.zzg: zzg(android.os.IBinder)
androidx.window.layout.SidecarCompat: androidx.window.layout.WindowLayoutInfo getWindowLayoutInfo(android.app.Activity)
androidx.fragment.app.FragmentActivity: void onConfigurationChanged(android.content.res.Configuration)
androidx.lifecycle.Lifecycling$1: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)
androidx.fragment.app.FragmentManagerImpl: androidx.fragment.app.FragmentFactory getFragmentFactory()
io.sentry.android.core.ManifestMetadataReader: ManifestMetadataReader()
kotlin.SynchronizedLazyImpl: boolean isInitialized()
io.sentry.SentryEvent: io.sentry.protocol.Message getMessage()
io.flutter.plugins.googlemaps.Convert: java.util.List toHoles(java.lang.Object)
kotlinx.coroutines.JobSupport: java.util.concurrent.CancellationException toCancellationException$default(kotlinx.coroutines.JobSupport,java.lang.Throwable,java.lang.String,int,java.lang.Object)
androidx.collection.MapCollections: boolean containsAllHelper(java.util.Map,java.util.Collection)
io.flutter.plugins.googlemaps.GoogleMapsPlugin: void onDetachedFromEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
io.flutter.view.AccessibilityBridge: void sendWindowContentChangeEvent(int)
androidx.fragment.app.FragmentManagerImpl$2: FragmentManagerImpl$2(androidx.fragment.app.FragmentManagerImpl)
androidx.lifecycle.Lifecycle$State: Lifecycle$State(java.lang.String,int)
androidx.fragment.app.FragmentManagerImpl: void dispatchOnFragmentViewDestroyed(androidx.fragment.app.Fragment,boolean)
androidx.collection.SparseArrayCompat: java.lang.Object get(int)
io.flutter.embedding.engine.systemchannels.AccessibilityChannel: void dispatchSemanticsAction(int,io.flutter.view.AccessibilityBridge$Action,java.lang.Object)
io.sentry.android.core.SentryAndroidOptions: void setDebugImagesLoader(io.sentry.android.core.IDebugImagesLoader)
com.google.android.gms.maps.model.Marker: void setZIndex(float)
io.sentry.transport.TransportResult: io.sentry.transport.TransportResult success()
com.google.common.base.Joiner: Joiner(java.lang.String)
androidx.fragment.app.FragmentManager: void setFragmentFactory(androidx.fragment.app.FragmentFactory)
kotlinx.coroutines.EventLoopImplBase$DelayedTask: int compareTo(kotlinx.coroutines.EventLoopImplBase$DelayedTask)
kotlin.coroutines.jvm.internal.ContinuationImpl: kotlin.coroutines.CoroutineContext getContext()
com.google.gson.internal.$Gson$Preconditions: void checkArgument(boolean)
io.sentry.hints.SubmissionResult: boolean isSuccess()
com.tekartik.sqflite.SqflitePlugin: void onOpenDatabaseCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.plugins.googlemaps.PolygonsController: void addPolygon(java.lang.String,com.google.android.gms.maps.model.PolygonOptions,boolean)
io.sentry.UnknownPropertiesTypeAdapterFactory$UnknownPropertiesTypeAdapter: com.google.gson.TypeAdapter access$000(java.lang.Class,com.google.gson.TypeAdapter,com.google.gson.internal.Excluder,com.google.gson.FieldNamingStrategy)
io.sentry.transport.AsyncHttpTransport$EnvelopeSender: void run()
io.sentry.SentryEvent: java.lang.String getTransaction()
com.google.android.gms.common.api.internal.zac: zac(int)
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.String access$4000(io.flutter.view.AccessibilityBridge$SemanticsNode)
com.google.common.util.concurrent.AbstractFuture$Cancellation: AbstractFuture$Cancellation(boolean,java.lang.Throwable)
androidx.activity.OnBackPressedCallback: void addCancellable(androidx.activity.Cancellable)
androidx.versionedparcelable.VersionedParcelParcel: void writeBoolean(boolean)
androidx.collection.ArrayMap: java.util.Set entrySet()
androidx.fragment.app.Fragment: void setAnimator(android.animation.Animator)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$InsetsListener: android.view.WindowInsets onApplyWindowInsets(android.view.View,android.view.WindowInsets)
com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper: com.google.common.collect.MapMakerInternalMap$InternalEntry newEntry(com.google.common.collect.MapMakerInternalMap$Segment,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$InternalEntry)
com.google.android.gms.common.api.internal.GoogleApiManager: com.google.android.gms.common.GoogleApiAvailability zag(com.google.android.gms.common.api.internal.GoogleApiManager)
com.google.common.collect.UnmodifiableListIterator: void set(java.lang.Object)
com.google.gson.internal.bind.TypeAdapters$16: java.lang.String read(com.google.gson.stream.JsonReader)
io.flutter.view.AccessibilityBridge$SemanticsNode: android.graphics.Rect access$1700(io.flutter.view.AccessibilityBridge$SemanticsNode)
kotlinx.coroutines.DispatchedTaskKt: void resume(kotlinx.coroutines.DispatchedTask,kotlin.coroutines.Continuation,boolean)
io.sentry.SynchronizedQueue: boolean equals(java.lang.Object)
com.google.gson.JsonStreamParser: com.google.gson.JsonElement next()
io.sentry.protocol.SdkInfo: java.lang.Integer getVersionMajor()
androidx.window.layout.HardwareFoldingFeature: androidx.window.layout.FoldingFeature$Orientation getOrientation()
com.google.gson.stream.JsonReader: com.google.gson.stream.JsonToken peek()
io.sentry.CircularFifoQueue: java.lang.Object[] access$400(io.sentry.CircularFifoQueue)
kotlinx.coroutines.scheduling.WorkQueue: boolean pollTo(kotlinx.coroutines.scheduling.GlobalQueue)
com.google.common.util.concurrent.AbstractFuture: void addDoneString(java.lang.StringBuilder)
com.google.android.gms.maps.zzq: void zzb(android.graphics.Bitmap)
com.google.gson.Gson$1: java.lang.Object read(com.google.gson.stream.JsonReader)
io.sentry.protocol.SentryThread: java.lang.Boolean isCurrent()
com.google.gson.internal.bind.TimeTypeAdapter: TimeTypeAdapter()
com.google.android.gms.common.internal.zah: void onConnectionSuspended(int)
com.google.android.gms.common.internal.RootTelemetryConfigManager: void zza(com.google.android.gms.common.internal.RootTelemetryConfiguration)
com.google.android.gms.maps.internal.zzl: void getMapAsync(com.google.android.gms.maps.internal.zzar)
kotlinx.coroutines.internal.ThreadSafeHeap: kotlinx.coroutines.internal.ThreadSafeHeapNode removeAtImpl(int)
kotlin.text.StringsKt__StringsKt$splitToSequence$1: java.lang.String invoke(kotlin.ranges.IntRange)
com.google.common.collect.MapMakerInternalMap$HashIterator: boolean nextInTable()
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.Task findAnyTask(boolean)
io.flutter.embedding.engine.systemchannels.TextInputChannel: void done(int)
io.sentry.android.core.ActivityLifecycleIntegration: void finishTransaction(io.sentry.ITransaction)
androidx.window.embedding.SplitController: void setStaticSplitRules(java.util.Set)
io.flutter.view.AccessibilityBridge$SemanticsNode: float access$5200(io.flutter.view.AccessibilityBridge$SemanticsNode)
com.google.android.gms.maps.GoogleMapOptions: com.google.android.gms.maps.GoogleMapOptions minZoomPreference(float)
androidx.core.os.ExecutorCompat$HandlerExecutor: ExecutorCompat$HandlerExecutor(android.os.Handler)
io.flutter.view.FlutterCallbackInformation: io.flutter.view.FlutterCallbackInformation lookupCallbackInformation(long)
io.sentry.OutboxSender: void processEnvelopeFile(java.lang.String,java.lang.Object)
kotlin.text.CharsKt__CharJVMKt: boolean isWhitespace(char)
androidx.window.layout.FoldingFeature$Orientation$Companion: FoldingFeature$Orientation$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder: io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder setTextScaleFactor(float)
androidx.window.layout.ExtensionInterfaceCompat: boolean validateExtensionInterface()
kotlinx.coroutines.internal.ArrayQueue: java.lang.Object removeFirstOrNull()
androidx.arch.core.internal.FastSafeIterableMap: boolean contains(java.lang.Object)
com.google.android.gms.common.internal.ConnectionTelemetryConfiguration: int[] getMethodInvocationMethodKeyAllowlist()
kotlin.collections.CollectionsKt___CollectionsKt: java.lang.Appendable joinTo$default(java.lang.Iterable,java.lang.Appendable,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,kotlin.jvm.functions.Function1,int,java.lang.Object)
com.google.android.gms.maps.internal.zzby: void setZoomControlsEnabled(boolean)
androidx.window.layout.HardwareFoldingFeature: android.graphics.Rect getBounds()
io.flutter.plugin.common.BasicMessageChannel$IncomingReplyHandler: BasicMessageChannel$IncomingReplyHandler(io.flutter.plugin.common.BasicMessageChannel,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.flutter.plugins.urllauncher.MethodCallHandlerImpl: android.os.Bundle extractBundle(java.util.Map)
com.google.android.gms.tasks.TaskCompletionSource: TaskCompletionSource()
com.google.android.gms.signin.internal.zah: java.lang.Object[] newArray(int)
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$6: void invoke(boolean)
io.sentry.TransactionContext: io.sentry.TransactionContext fromSentryTrace(java.lang.String,java.lang.String,io.sentry.SentryTraceHeader)
com.google.android.gms.maps.model.SquareCap: java.lang.String toString()
kotlin.sequences.SequencesKt___SequencesKt: java.util.List toList(kotlin.sequences.Sequence)
kotlinx.coroutines.DefaultExecutor: boolean notifyStartup()
com.google.android.gms.maps.internal.zzg: void snapshot(com.google.android.gms.maps.internal.zzbu,com.google.android.gms.dynamic.IObjectWrapper)
io.sentry.NoOpSentryClient: boolean isEnabled()
kotlinx.coroutines.JobSupport: java.lang.Object tryMakeCompleting(java.lang.Object,java.lang.Object)
androidx.lifecycle.ReflectiveGenericLifecycleObserver: ReflectiveGenericLifecycleObserver(java.lang.Object)
androidx.fragment.app.Fragment: void performDestroyView()
com.google.gson.internal.$Gson$Types$WildcardTypeImpl: $Gson$Types$WildcardTypeImpl(java.lang.reflect.Type[],java.lang.reflect.Type[])
io.flutter.util.PathUtils: java.lang.String getFilesDir(android.content.Context)
io.flutter.plugin.platform.PlatformViewsController: android.view.MotionEvent toMotionEvent(float,io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewTouch,boolean)
com.google.common.collect.UnmodifiableListIterator: UnmodifiableListIterator()
com.google.common.util.concurrent.AbstractFuture$SynchronizedHelper: boolean casValue(com.google.common.util.concurrent.AbstractFuture,java.lang.Object,java.lang.Object)
com.tekartik.sqflite.SqflitePlugin$BgResult$1: void run()
com.google.android.gms.maps.model.CircleOptions: float getStrokeWidth()
androidx.collection.ArraySet: void freeArrays(int[],java.lang.Object[],int)
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction: int access$4400(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction)
io.sentry.android.core.DefaultAndroidEventProcessor: java.lang.Long getTotalInternalStorage(android.os.StatFs)
com.google.common.hash.BloomFilterStrategies: BloomFilterStrategies(java.lang.String,int)
io.sentry.EventProcessor: io.sentry.SentryEvent process(io.sentry.SentryEvent,java.lang.Object)
com.google.gson.internal.bind.TypeAdapters$15: void write(com.google.gson.stream.JsonWriter,java.lang.Character)
io.flutter.plugin.platform.SingleViewPresentation$AccessibilityDelegatingFrameLayout: SingleViewPresentation$AccessibilityDelegatingFrameLayout(android.content.Context,io.flutter.plugin.platform.AccessibilityEventsDelegate,android.view.View)
kotlinx.coroutines.CancellableContinuationImpl: void cancelCompletedResult$kotlinx_coroutines_core(java.lang.Object,java.lang.Throwable)
com.tekartik.sqflite.operation.BatchOperation$BatchOperationResult: void success(java.lang.Object)
kotlinx.coroutines.scheduling.NonBlockingContext: int getTaskMode()
com.google.gson.internal.bind.TreeTypeAdapter: java.lang.Object read(com.google.gson.stream.JsonReader)
io.sentry.android.core.DefaultAndroidEventProcessor: void mergeDebugImages(io.sentry.SentryEvent)
kotlin.collections.EmptyList: int indexOf(java.lang.Object)
io.sentry.HubAdapter: void configureScope(io.sentry.ScopeCallback)
io.flutter.embedding.engine.loader.FlutterLoader: void startInitialization(android.content.Context,io.flutter.embedding.engine.loader.FlutterLoader$Settings)
io.sentry.protocol.SentryStackFrame: void setNative(java.lang.Boolean)
com.google.android.gms.common.api.GoogleApi: com.google.android.gms.common.api.internal.ApiKey getApiKey()
com.google.android.gms.common.api.internal.zag: void zad(com.google.android.gms.common.api.Status)
com.google.android.gms.common.internal.zzc: void zzg()
androidx.fragment.app.FragmentManagerImpl: void dispatchCreate()
com.google.gson.JsonParser: JsonParser()
androidx.fragment.app.Fragment: void onDestroyOptionsMenu()
com.google.android.gms.dynamite.DynamiteModule: void zzd(java.lang.ClassLoader)
com.google.android.gms.common.internal.service.zap: int getMinApkVersion()
com.google.gson.DefaultDateTypeAdapter: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
io.flutter.embedding.android.FlutterView$3: void accept(java.lang.Object)
kotlin.ranges.IntRange: java.lang.Integer getEndInclusive()
com.google.gson.GsonBuilder: com.google.gson.GsonBuilder excludeFieldsWithModifiers(int[])
io.flutter.plugins.googlemaps.TileOverlaysController: void changeTileOverlays(java.util.List)
io.sentry.protocol.SentryTransaction: java.util.Date getTimestamp()
io.sentry.config.FilesystemPropertiesLoader: java.util.Properties load()
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation: io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation[] values()
io.sentry.android.core.AppComponentsBreadcrumbsIntegration: void register(io.sentry.IHub,io.sentry.SentryOptions)
com.google.android.gms.common.GoogleApiAvailability: java.lang.String getErrorString(int)
com.google.android.gms.maps.zzu: zzu(com.google.android.gms.maps.GoogleMap,com.google.android.gms.maps.GoogleMap$OnCameraMoveStartedListener)
com.google.gson.internal.bind.ArrayTypeAdapter$1: com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken)
io.sentry.Sentry: void clearBreadcrumbs()
io.flutter.plugin.platform.PlatformViewsController: int toPhysicalPixels(double)
io.sentry.SentryOptions: boolean isEnableShutdownHook()
androidx.fragment.app.FragmentHostCallback: FragmentHostCallback(android.app.Activity,android.content.Context,android.os.Handler,int)
com.google.common.collect.AbstractIndexedListIterator: boolean hasNext()
io.sentry.SentryEvent: void setThreads(java.util.List)
com.google.gson.Gson: com.google.gson.GsonBuilder newBuilder()
com.google.android.gms.maps.GoogleMap: void setOnCameraMoveStartedListener(com.google.android.gms.maps.GoogleMap$OnCameraMoveStartedListener)
com.google.common.collect.MapMakerInternalMap$EntryIterator: java.lang.Object next()
io.flutter.plugin.platform.PlatformViewsController: void onDetachedFromJNI()
com.google.android.gms.common.api.internal.zabq: void zal(com.google.android.gms.common.api.internal.zabq,com.google.android.gms.common.api.internal.zabs)
io.sentry.protocol.App: java.lang.String getAppIdentifier()
com.google.common.util.concurrent.ThreadFactoryBuilder$1: ThreadFactoryBuilder$1(java.util.concurrent.ThreadFactory,java.lang.String,java.util.concurrent.atomic.AtomicLong,java.lang.Boolean,java.lang.Integer,java.lang.Thread$UncaughtExceptionHandler)
kotlinx.coroutines.internal.StackTraceRecoveryKt: boolean elementWiseEquals(java.lang.StackTraceElement,java.lang.StackTraceElement)
io.flutter.embedding.engine.systemchannels.AccessibilityChannel$1: void onMessage(java.lang.Object,io.flutter.plugin.common.BasicMessageChannel$Reply)
io.sentry.protocol.SentryPackage: java.lang.String getVersion()
io.flutter.embedding.android.KeyboardManager: void destroy()
com.google.android.gms.maps.GoogleMapOptions: com.google.android.gms.maps.GoogleMapOptions scrollGesturesEnabled(boolean)
kotlinx.coroutines.EventLoopImplBase: void resetAll()
com.google.common.collect.Hashing: int smear(int)
androidx.fragment.app.FragmentManagerImpl: androidx.fragment.app.Fragment findFragmentById(int)
com.google.common.collect.MapMakerInternalMap$EntrySet: int size()
com.google.android.gms.maps.model.PolygonOptions: float getZIndex()
kotlinx.coroutines.internal.ScopeCoroutine: java.lang.StackTraceElement getStackTraceElement()
io.sentry.SentryOptions: void setFlushTimeoutMillis(long)
io.flutter.view.AccessibilityBridge$SemanticsNode: int access$6300(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.sentry.transport.HttpConnection: void updateRetryAfterLimits(java.net.HttpURLConnection,int)
io.flutter.embedding.engine.loader.FlutterLoader: FlutterLoader()
io.sentry.protocol.SentryStackFrame: java.lang.String getImageAddr()
io.sentry.protocol.App: java.lang.String getDeviceAppHash()
com.google.android.gms.common.GooglePlayServicesNotAvailableException: GooglePlayServicesNotAvailableException(int)
io.flutter.plugin.common.StandardMessageCodec$ExposedByteArrayOutputStream: byte[] buffer()
com.google.common.hash.HashCode$LongHashCode: byte[] asBytes()
com.google.gson.internal.bind.TypeAdapters$9: void write(com.google.gson.stream.JsonWriter,java.util.concurrent.atomic.AtomicBoolean)
kotlinx.coroutines.ChildContinuation: void invoke(java.lang.Throwable)
io.sentry.SentryOptions: void addInAppInclude(java.lang.String)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType: FlutterMutatorsStack$FlutterMutatorType(java.lang.String,int)
io.flutter.view.VsyncWaiter$DisplayListener: void onDisplayAdded(int)
com.google.android.gms.maps.internal.zza: byte zza(java.lang.Boolean)
io.sentry.CustomSamplingContext: void set(java.lang.String,java.lang.Object)
io.flutter.plugin.common.MethodChannel: MethodChannel(io.flutter.plugin.common.BinaryMessenger,java.lang.String)
com.google.android.gms.maps.model.TileOverlayOptions: com.google.android.gms.internal.maps.zzaj zza(com.google.android.gms.maps.model.TileOverlayOptions)
kotlin.collections.EmptySet: java.lang.String toString()
com.google.gson.internal.bind.TypeAdapters$29: TypeAdapters$29()
io.flutter.plugins.googlemaps.GoogleMapController: void onCameraMoveStarted(int)
io.flutter.embedding.android.KeyChannelResponder: KeyChannelResponder(io.flutter.embedding.engine.systemchannels.KeyEventChannel)
androidx.activity.ComponentActivity: ComponentActivity()
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: android.app.Activity getAppComponent()
io.sentry.Stack: Stack(io.sentry.Stack)
io.sentry.Hub: void bindClient(io.sentry.ISentryClient)
io.sentry.SentryTracer: io.sentry.ISpan startChild(io.sentry.SpanId,java.lang.String)
com.google.gson.JsonIOException: JsonIOException(java.lang.Throwable)
io.flutter.embedding.engine.systemchannels.PlatformChannel: io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription decodeAppSwitcherDescription(org.json.JSONObject)
io.flutter.view.AccessibilityBridge$SemanticsNode: int access$2112(io.flutter.view.AccessibilityBridge$SemanticsNode,int)
com.google.android.gms.maps.internal.zzu: zzu()
io.flutter.view.AccessibilityBridge$SemanticsNode: int access$2100(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean hasFlag(io.flutter.view.AccessibilityBridge$Flag)
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureFinalizerRunnable: FlutterRenderer$SurfaceTextureFinalizerRunnable(long,io.flutter.embedding.engine.FlutterJNI)
androidx.collection.ArraySet: boolean retainAll(java.util.Collection)
kotlinx.coroutines.DispatchedTaskKt: boolean isCancellableMode(int)
io.flutter.embedding.engine.loader.FlutterLoader$Settings: java.lang.String getLogTag()
io.flutter.plugins.googlemaps.TileProviderController: com.google.android.gms.maps.model.Tile getTile(int,int,int)
io.sentry.protocol.Browser: void setVersion(java.lang.String)
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$16: void invoke(boolean)
io.sentry.SentryOptions: java.util.List getInAppExcludes()
io.sentry.protocol.SentryStackFrame: void setInstructionAddr(java.lang.String)
com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher: com.google.common.hash.HashCode makeHash()
com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper: java.lang.Object read(com.google.gson.stream.JsonReader)
com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter beginArray()
io.flutter.embedding.android.FlutterActivity: void release()
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean inStack()
androidx.fragment.app.FragmentTransaction: androidx.fragment.app.FragmentTransaction add(androidx.fragment.app.Fragment,java.lang.String)
androidx.window.layout.WindowMetrics: WindowMetrics(android.graphics.Rect)
io.flutter.plugins.pathprovider.PathProviderPlugin$PathProviderBackgroundThread: void getApplicationDocumentsDirectory(io.flutter.plugin.common.MethodChannel$Result)
io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding: io.flutter.plugin.platform.PlatformViewRegistry getPlatformViewRegistry()
io.flutter.plugins.connectivity.Connectivity: java.lang.String getNetworkType()
com.google.gson.internal.LinkedHashTreeMap$EntrySet: LinkedHashTreeMap$EntrySet(com.google.gson.internal.LinkedHashTreeMap)
io.sentry.NoOpHub: void close()
io.flutter.view.AccessibilityBridge$SpellOutStringAttribute: AccessibilityBridge$SpellOutStringAttribute(io.flutter.view.AccessibilityBridge$1)
io.flutter.plugins.googlemaps.MarkerController: void setFlat(boolean)
kotlinx.coroutines.internal.StackTraceRecoveryKt: void mergeRecoveredTraces(java.lang.StackTraceElement[],java.util.ArrayDeque)
com.google.android.gms.common.api.internal.zabq: void zaq()
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean access$2200(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.view.AccessibilityBridge$Action)
com.google.android.gms.signin.internal.zak: com.google.android.gms.common.internal.zav zab()
io.sentry.android.core.DefaultAndroidEventProcessor: java.io.File getExternalStorageDep(java.io.File)
io.flutter.plugin.platform.PlatformViewsController: void attachTextInputPlugin(io.flutter.plugin.editing.TextInputPlugin)
androidx.fragment.app.FragmentManagerImpl: void showFragment(androidx.fragment.app.Fragment)
io.flutter.plugins.urllauncher.UrlLauncherPlugin: UrlLauncherPlugin()
io.flutter.FlutterInjector: io.flutter.FlutterInjector instance()
kotlinx.coroutines.internal.ScopeCoroutine: boolean isScopedCoroutine()
androidx.loader.app.LoaderManagerImpl$LoaderInfo: androidx.loader.content.Loader getLoader()
com.google.gson.internal.bind.TypeAdapters$16: java.lang.Object read(com.google.gson.stream.JsonReader)
io.sentry.cache.EnvelopeCache: java.io.File getEnvelopeFile(io.sentry.SentryEnvelope)
androidx.fragment.app.Fragment: androidx.lifecycle.Lifecycle getLifecycle()
androidx.window.layout.WindowLayoutInfo: int hashCode()
android.support.v4.graphics.drawable.IconCompatParcelizer: IconCompatParcelizer()
com.google.android.gms.maps.model.PolygonOptions: void writeToParcel(android.os.Parcel,int)
com.google.gson.internal.ConstructorConstructor$12: ConstructorConstructor$12(com.google.gson.internal.ConstructorConstructor)
io.flutter.plugins.pathprovider.PathProviderPlugin$UiThreadExecutor: void execute(java.lang.Runnable)
kotlin.collections.EmptyList: EmptyList()
androidx.lifecycle.ReportFragment: void dispatch(androidx.lifecycle.Lifecycle$Event)
io.sentry.DuplicateEventDetectionEventProcessor: boolean containsAnyKey(java.util.Map,java.util.List)
io.sentry.flutter.SentryFlutterPlugin: void setEventEnvironmentTag$default(io.sentry.flutter.SentryFlutterPlugin,io.sentry.SentryEvent,java.lang.String,java.lang.String,int,java.lang.Object)
com.google.android.gms.maps.GoogleMap: boolean setMapStyle(com.google.android.gms.maps.model.MapStyleOptions)
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: WindowInfoTrackerCallbackAdapter$addListener$1$1(kotlinx.coroutines.flow.Flow,androidx.core.util.Consumer,kotlin.coroutines.Continuation)
io.flutter.embedding.engine.systemchannels.PlatformChannel: io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler access$000(io.flutter.embedding.engine.systemchannels.PlatformChannel)
androidx.versionedparcelable.VersionedParcel: void writeBoolean(boolean,int)
com.google.android.gms.common.internal.zzr: long zzd(com.google.android.gms.common.internal.zzr)
io.flutter.plugin.common.JSONMessageCodec: JSONMessageCodec()
com.google.android.gms.common.util.zzb: boolean zza()
kotlinx.coroutines.CoroutineStart: void invoke(kotlin.jvm.functions.Function2,java.lang.Object,kotlin.coroutines.Continuation)
com.google.common.base.Predicates$ObjectPredicate$3: java.lang.String toString()
androidx.lifecycle.LifecycleRegistry: void handleLifecycleEvent(androidx.lifecycle.Lifecycle$Event)
io.flutter.embedding.android.FlutterActivity: io.flutter.plugin.platform.PlatformPlugin providePlatformPlugin(android.app.Activity,io.flutter.embedding.engine.FlutterEngine)
io.sentry.cache.EnvelopeCache: void writeSessionToDisk(java.io.File,io.sentry.Session)
com.google.gson.internal.bind.util.ISO8601Utils: ISO8601Utils()
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorView: boolean onTouchEvent(android.view.MotionEvent)
io.sentry.Breadcrumb: java.lang.String getCategory()
androidx.lifecycle.ProcessLifecycleOwnerInitializer: java.lang.String getType(android.net.Uri)
com.google.android.gms.maps.model.PolylineOptions: com.google.android.gms.maps.model.PolylineOptions addAll(java.lang.Iterable)
com.google.android.gms.maps.model.MarkerOptions: float getInfoWindowAnchorU()
com.google.android.gms.common.api.GoogleApi: int zaa()
com.google.android.gms.maps.model.TileOverlayOptions: float getZIndex()
com.google.android.gms.common.internal.zzo: boolean zzi()
com.google.android.gms.maps.model.zzb: java.lang.Object createFromParcel(android.os.Parcel)
com.google.android.gms.common.internal.Objects: int hashCode(java.lang.Object[])
io.flutter.view.AccessibilityBridge: android.view.View access$100(io.flutter.view.AccessibilityBridge)
io.flutter.plugins.googlemaps.TileOverlaysController: void addTileOverlays(java.util.List)
kotlin.jvm.internal.ReflectionFactory: kotlin.reflect.KDeclarationContainer getOrCreateKotlinPackage(java.lang.Class,java.lang.String)
io.flutter.view.AccessibilityBridge: android.graphics.Rect getBoundsInScreen(android.graphics.Rect)
com.google.gson.internal.reflect.ReflectionAccessor: ReflectionAccessor()
com.google.gson.TypeAdapter: java.lang.Object fromJson(java.io.Reader)
io.sentry.NoOpSerializer: NoOpSerializer()
kotlinx.coroutines.internal.DispatchedContinuationKt: void resumeCancellableWith$default(kotlin.coroutines.Continuation,java.lang.Object,kotlin.jvm.functions.Function1,int,java.lang.Object)
io.sentry.IHub: io.sentry.protocol.SentryId captureEnvelope(io.sentry.SentryEnvelope)
com.google.android.gms.common.api.internal.zaac: void onComplete(com.google.android.gms.tasks.Task)
io.sentry.ISentryClient: io.sentry.protocol.SentryId captureEnvelope(io.sentry.SentryEnvelope,java.lang.Object)
io.sentry.transport.HttpConnection: boolean isSuccessfulResponseCode(int)
com.google.android.gms.maps.model.PolylineOptions: com.google.android.gms.maps.model.PolylineOptions startCap(com.google.android.gms.maps.model.Cap)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutator: FlutterMutatorsStack$FlutterMutator(io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack,android.graphics.Rect)
com.google.android.gms.common.internal.GmsClient: android.accounts.Account getAccount()
com.google.android.gms.dynamite.DynamiteModule$VersionPolicy$SelectionResult: DynamiteModule$VersionPolicy$SelectionResult()
com.google.android.gms.auth.api.signin.GoogleSignInAccount: android.net.Uri getPhotoUrl()
io.flutter.plugins.googlemaps.CircleBuilder: com.google.android.gms.maps.model.CircleOptions build()
com.google.android.gms.maps.UiSettings: void setTiltGesturesEnabled(boolean)
com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper: com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry copy(com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment,com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry,com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry)
dev.fluttercommunity.plus.packageinfo.PackageInfoPlugin: java.lang.String getBuildSignature(android.content.pm.PackageManager)
io.sentry.android.core.SentryAndroidOptions: void setEnableSystemEventBreadcrumbs(boolean)
io.flutter.embedding.android.FlutterSplashView$SavedState$1: io.flutter.embedding.android.FlutterSplashView$SavedState createFromParcel(android.os.Parcel)
androidx.lifecycle.DefaultLifecycleObserver: void onPause(androidx.lifecycle.LifecycleOwner)
io.flutter.embedding.engine.FlutterJNI: void nativeSurfaceChanged(long,int,int)
androidx.window.layout.HardwareFoldingFeature$Type: java.lang.String toString()
androidx.window.layout.SidecarAdapter: java.util.List translate(java.util.List,androidx.window.sidecar.SidecarDeviceState)
io.flutter.plugin.editing.ListenableEditingState: void removeEditingStateListener(io.flutter.plugin.editing.ListenableEditingState$EditingStateWatcher)
com.google.android.gms.dynamic.zag: void zab(com.google.android.gms.dynamic.LifecycleDelegate)
io.sentry.util.CollectionUtils: CollectionUtils()
io.sentry.SentryOptions: io.sentry.transport.ITransportGate getTransportGate()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityCreated(android.app.Activity,android.os.Bundle)
androidx.window.core.Version: int getPatch()
io.flutter.plugin.editing.TextInputPlugin$1: void setEditableSizeAndTransform(double,double,double[])
com.google.android.gms.maps.model.TileOverlayOptions: com.google.android.gms.maps.model.TileOverlayOptions transparency(float)
io.flutter.plugin.editing.TextInputPlugin: boolean handleKeyEvent(android.view.KeyEvent)
com.google.gson.internal.bind.JsonTreeWriter: com.google.gson.stream.JsonWriter value(java.lang.String)
io.sentry.transport.HttpConnection: java.net.HttpURLConnection createConnection()
com.google.android.gms.maps.internal.zzbs: com.google.android.gms.dynamic.IObjectWrapper toScreenLocation(com.google.android.gms.maps.model.LatLng)
com.google.android.gms.maps.GoogleMap: void setOnInfoWindowClickListener(com.google.android.gms.maps.GoogleMap$OnInfoWindowClickListener)
kotlinx.coroutines.scheduling.TaskImpl: void run()
kotlin.collections.MapsKt__MapsJVMKt: java.util.Map mapOf(kotlin.Pair)
io.sentry.protocol.SentryRuntime: void setRawDescription(java.lang.String)
androidx.collection.ArraySet: boolean equals(java.lang.Object)
com.google.android.gms.maps.model.TileOverlay: void setVisible(boolean)
com.google.android.gms.common.internal.safeparcel.SafeParcelWriter: void zzc(android.os.Parcel,int,int)
androidx.window.embedding.EmbeddingCompat$Companion: androidx.window.extensions.embedding.ActivityEmbeddingComponent embeddingComponent()
com.google.gson.internal.bind.TimeTypeAdapter$1: TimeTypeAdapter$1()
io.sentry.protocol.OperatingSystem: java.util.Map getUnknown()
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: java.lang.Long access$600(io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors,android.view.accessibility.AccessibilityRecord)
io.sentry.OutboxSender: void logEnvelopeItemNull(io.sentry.SentryEnvelopeItem,int)
io.sentry.IHub: io.sentry.protocol.SentryId captureEvent(io.sentry.SentryEvent)
com.google.common.collect.MapMakerInternalMap$AbstractWeakKeyEntry: com.google.common.collect.MapMakerInternalMap$InternalEntry getNext()
kotlinx.coroutines.JobSupport: int startInternal(java.lang.Object)
androidx.window.embedding.ActivityFilter: boolean matchesIntent(android.content.Intent)
androidx.window.layout.SidecarAdapter$Companion: java.util.List getSidecarDisplayFeatures(androidx.window.sidecar.SidecarWindowLayoutInfo)
com.google.gson.internal.bind.SqlDateTypeAdapter: SqlDateTypeAdapter()
io.sentry.SentryClient: void close()
com.google.android.gms.common.internal.BaseGmsClient: void setAttributionTag(java.lang.String)
kotlin.jvm.internal.Lambda: int getArity()
com.google.gson.FieldNamingPolicy$1: FieldNamingPolicy$1(java.lang.String,int)
kotlinx.coroutines.JobSupport: java.lang.Object makeCompletingOnce$kotlinx_coroutines_core(java.lang.Object)
com.tekartik.sqflite.operation.BaseReadOperation: java.lang.Boolean getBoolean(java.lang.String)
com.google.android.gms.maps.CameraUpdate: com.google.android.gms.dynamic.IObjectWrapper zza()
androidx.lifecycle.FullLifecycleObserverAdapter: FullLifecycleObserverAdapter(androidx.lifecycle.FullLifecycleObserver,androidx.lifecycle.LifecycleEventObserver)
com.google.common.reflect.TypeVisitor: TypeVisitor()
com.google.android.gms.maps.model.PolylineOptions: com.google.android.gms.maps.model.PolylineOptions jointType(int)
com.google.gson.JsonPrimitive: char getAsCharacter()
kotlinx.coroutines.internal.DispatchedContinuation: kotlin.coroutines.Continuation getDelegate$kotlinx_coroutines_core()
com.google.android.gms.maps.zzab: java.lang.Object[] newArray(int)
kotlinx.coroutines.internal.Symbol: java.lang.String toString()
kotlinx.coroutines.internal.LockFreeTaskQueueCore: kotlinx.coroutines.internal.LockFreeTaskQueueCore fillPlaceholder(int,java.lang.Object)
com.google.android.gms.maps.internal.zzby: void setTiltGesturesEnabled(boolean)
com.google.android.gms.common.internal.BaseGmsClient: void getRemoteService(com.google.android.gms.common.internal.IAccountAccessor,java.util.Set)
com.google.gson.JsonObject: java.util.Set keySet()
io.sentry.protocol.OperatingSystem: void setKernelVersion(java.lang.String)
com.google.common.collect.ImmutableSet$Builder: com.google.common.collect.ImmutableSet$Builder add(java.lang.Object)
com.google.android.gms.internal.maps.zzc: android.os.Parcelable zza(android.os.Parcel,android.os.Parcelable$Creator)
androidx.window.layout.DisplayCompatHelperApi17: DisplayCompatHelperApi17()
com.google.gson.internal.PreJava9DateFormatProvider: java.lang.String getDateFormatPattern(int)
kotlinx.coroutines.CommonPool: java.lang.Thread createPlainPool$lambda-12(java.util.concurrent.atomic.AtomicInteger,java.lang.Runnable)
kotlin.coroutines.CombinedContext: java.lang.String toString()
androidx.fragment.app.FragmentManagerImpl: void dispatchStop()
androidx.window.layout.DisplayCompatHelperApi28: int safeInsetRight(android.view.DisplayCutout)
com.google.common.hash.BloomFilterStrategies: BloomFilterStrategies(java.lang.String,int,com.google.common.hash.BloomFilterStrategies$1)
io.flutter.embedding.engine.systemchannels.TextInputChannel: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputMethodHandler access$000(io.flutter.embedding.engine.systemchannels.TextInputChannel)
com.google.android.gms.signin.internal.zaj: java.lang.Object createFromParcel(android.os.Parcel)
androidx.fragment.app.FragmentActivity$HostCallbacks: boolean onShouldSaveFragmentState(androidx.fragment.app.Fragment)
io.sentry.android.core.SentryInitProvider: boolean onCreate()
androidx.window.java.R: R()
com.google.gson.Gson: com.google.gson.internal.Excluder excluder()
com.google.android.gms.common.api.internal.zabq: com.google.android.gms.common.Feature zaB(com.google.android.gms.common.Feature[])
com.google.android.gms.dynamite.zzb: java.lang.Thread zzc()
io.flutter.embedding.engine.loader.FlutterLoader$1: java.lang.Object call()
androidx.fragment.app.FragmentManagerImpl: void moveToState(int,boolean)
com.google.android.gms.common.api.internal.zzd: android.app.Activity getLifecycleActivity()
kotlinx.coroutines.internal.ThreadSafeHeap: void siftDownFrom(int)
kotlin.random.FallbackThreadLocalRandom: java.util.Random getImpl()
com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper: MapMakerInternalMap$WeakKeyWeakValueEntry$Helper()
io.flutter.plugin.editing.TextInputPlugin: android.view.View access$000(io.flutter.plugin.editing.TextInputPlugin)
io.sentry.Sentry: io.sentry.protocol.SentryId captureMessage(java.lang.String,io.sentry.SentryLevel)
com.google.gson.internal.bind.JsonTreeReader: boolean nextBoolean()
io.sentry.Scope: java.util.Queue getBreadcrumbs()
com.google.common.hash.LittleEndianByteArray$JavaLittleEndianBytes$1: LittleEndianByteArray$JavaLittleEndianBytes$1(java.lang.String,int)
androidx.window.embedding.ExtensionEmbeddingBackend$Companion: ExtensionEmbeddingBackend$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
io.flutter.plugins.googlemaps.MarkersController: void onInfoWindowTap(java.lang.String)
io.flutter.plugins.googlemaps.PolylineController: void setColor(int)
io.sentry.SentryClient: boolean shouldApplyScopeData(io.sentry.SentryBaseEvent,java.lang.Object)
com.google.android.gms.internal.maps.zzy: zzy(android.os.IBinder)
io.flutter.plugin.editing.TextInputPlugin: void lockPlatformViewInputConnection()
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: void onDetachedFromEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
com.google.android.gms.common.internal.BaseGmsClient: void onUserSignOut(com.google.android.gms.common.internal.BaseGmsClient$SignOutCallbacks)
androidx.fragment.app.Fragment: android.content.Context getContext()
androidx.fragment.app.BackStackState$1: androidx.fragment.app.BackStackState[] newArray(int)
com.google.gson.internal.Excluder: boolean excludeClassChecks(java.lang.Class)
com.google.android.gms.maps.model.Polyline: int hashCode()
io.flutter.embedding.engine.FlutterJNI: void removeIsDisplayingFlutterUiListener(io.flutter.embedding.engine.renderer.FlutterUiDisplayListener)
io.flutter.plugins.googlemaps.CircleController: void setFillColor(int)
androidx.window.embedding.SplitController: boolean isSplitSupported()
io.sentry.SentryOptions: void setEnableScopeSync(boolean)
androidx.window.layout.SidecarWindowBackend$ExtensionListenerImpl: void onWindowLayoutChanged(android.app.Activity,androidx.window.layout.WindowLayoutInfo)
com.google.android.gms.common.ConnectionResult: boolean hasResolution()
kotlinx.coroutines.internal.StackTraceRecoveryKt: boolean isArtificial(java.lang.StackTraceElement)
androidx.core.view.WindowInsetsControllerCompat$Impl20: WindowInsetsControllerCompat$Impl20(android.view.Window,android.view.View)
androidx.fragment.app.FragmentController: boolean dispatchOptionsItemSelected(android.view.MenuItem)
com.google.android.gms.common.GoogleApiAvailability: void zaf(android.content.Context)
com.google.android.gms.common.internal.BaseGmsClient: boolean isConnected()
com.google.android.gms.common.internal.BaseGmsClient: void onConnectedLocked(android.os.IInterface)
com.google.common.collect.MapMakerInternalMap$DummyInternalEntry: int getHash()
kotlinx.coroutines.scheduling.DefaultScheduler: java.lang.String toString()
io.sentry.SentryThreadFactory: java.util.List getCurrentThreads(java.util.Map,java.util.List)
io.sentry.NoOpSerializer: java.lang.String serialize(java.util.Map)
com.google.gson.stream.MalformedJsonException: MalformedJsonException(java.lang.String)
kotlin.jvm.internal.FunctionReference: kotlin.reflect.KCallable getReflected()
androidx.fragment.app.Fragment: void onStart()
io.sentry.Breadcrumb: void setType(java.lang.String)
com.google.common.base.MoreObjects: java.lang.Object firstNonNull(java.lang.Object,java.lang.Object)
kotlinx.coroutines.internal.AtomicOp: long getOpSequence()
com.google.android.gms.common.api.ApiException: ApiException(com.google.android.gms.common.api.Status)
kotlinx.coroutines.EventLoop_commonKt: kotlinx.coroutines.internal.Symbol access$getDISPOSED_TASK$p()
com.google.gson.internal.bind.TypeAdapters$22: java.lang.Object read(com.google.gson.stream.JsonReader)
kotlinx.coroutines.CancellableContinuationImpl: void resumeImpl$default(kotlinx.coroutines.CancellableContinuationImpl,java.lang.Object,int,kotlin.jvm.functions.Function1,int,java.lang.Object)
androidx.fragment.app.FragmentTransitionImpl: java.lang.String findKeyForValue(java.util.Map,java.lang.String)
androidx.core.graphics.drawable.IconCompat: java.io.InputStream getUriInputStream(android.content.Context)
io.flutter.embedding.engine.FlutterJNI: void nativePrefetchDefaultFontManager()
com.google.android.gms.maps.GoogleMap: com.google.android.gms.maps.model.Polygon addPolygon(com.google.android.gms.maps.model.PolygonOptions)
androidx.core.app.NotificationCompat$Action: NotificationCompat$Action(androidx.core.graphics.drawable.IconCompat,java.lang.CharSequence,android.app.PendingIntent)
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry: long access$300(io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry)
io.flutter.plugin.platform.PlatformViewsController: boolean checkInputConnectionProxy(android.view.View)
io.flutter.plugins.googlemaps.GoogleMapController: void onInputConnectionUnlocked()
com.google.gson.JsonStreamParser: boolean hasNext()
io.flutter.embedding.android.FlutterActivity: void onSaveInstanceState(android.os.Bundle)
io.flutter.plugins.googlemaps.PolylineBuilder: void setColor(int)
com.google.android.gms.signin.SignInOptions: int hashCode()
io.flutter.plugins.pathprovider.PathProviderPlugin$PathProviderPlatformThread$1: PathProviderPlugin$PathProviderPlatformThread$1(io.flutter.plugins.pathprovider.PathProviderPlugin$PathProviderPlatformThread,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.String access$3200(io.flutter.view.AccessibilityBridge$SemanticsNode)
kotlinx.coroutines.ChildContinuation: ChildContinuation(kotlinx.coroutines.CancellableContinuationImpl)
com.google.android.gms.common.internal.safeparcel.SafeParcelReader: android.os.IBinder readIBinder(android.os.Parcel,int)
io.flutter.embedding.engine.renderer.FlutterRenderer: void swapSurface(android.view.Surface)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: boolean access$200(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
com.google.gson.internal.LazilyParsedNumber: int hashCode()
io.sentry.ISpan: java.lang.String getOperation()
com.google.gson.internal.bind.TypeAdapters$26$1: java.sql.Timestamp read(com.google.gson.stream.JsonReader)
androidx.core.app.NotificationCompat$Action: android.app.PendingIntent getActionIntent()
androidx.fragment.app.FragmentManagerImpl: boolean popBackStackState(java.util.ArrayList,java.util.ArrayList,java.lang.String,int,int)
io.sentry.protocol.SdkInfo: java.lang.Integer getVersionMinor()
com.google.gson.JsonArray: short getAsShort()
com.google.gson.internal.bind.JsonTreeReader: void push(java.lang.Object)
io.sentry.TransactionContext: java.lang.Boolean getParentSampled()
com.google.gson.internal.bind.JsonTreeReader: java.lang.String nextName()
com.google.android.gms.common.api.internal.zabq: void zai(com.google.android.gms.common.api.internal.zabq,com.google.android.gms.common.api.Status)
androidx.fragment.app.Fragment: void onDestroyView()
kotlin.jvm.internal.CallableReference: boolean isAbstract()
io.flutter.plugin.platform.PlatformViewsController: android.util.SparseArray access$300(io.flutter.plugin.platform.PlatformViewsController)
io.flutter.plugins.googlemaps.GoogleMapController: void onSaveInstanceState(android.os.Bundle)
com.google.android.gms.common.util.DeviceProperties: boolean isAuto(android.content.Context)
androidx.window.layout.DisplayCompatHelperApi28: int safeInsetTop(android.view.DisplayCutout)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: void setupFlutterEngine()
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization fromValue(java.lang.String)
io.flutter.plugin.platform.PlatformViewsController: float getDisplayDensity()
androidx.core.view.WindowInsetsControllerCompat$Impl26: void setAppearanceLightNavigationBars(boolean)
com.google.gson.JsonStreamParser: java.lang.Object next()
com.google.gson.internal.LinkedTreeMap: LinkedTreeMap(java.util.Comparator)
androidx.fragment.app.FragmentTransition$2: void run()
io.flutter.plugins.googlemaps.Convert: java.util.List toPattern(java.lang.Object)
androidx.window.embedding.ExtensionEmbeddingBackend: void registerRule(androidx.window.embedding.EmbeddingRule)
androidx.window.layout.WindowMetricsCalculatorCompat: android.graphics.Rect computeWindowBoundsIceCreamSandwich$window_release(android.app.Activity)
com.google.gson.internal.ConstructorConstructor: com.google.gson.internal.ObjectConstructor newDefaultImplementationConstructor(java.lang.reflect.Type,java.lang.Class)
kotlin.jvm.internal.FunctionReference: int getArity()
com.google.android.gms.common.SupportErrorDialogFragment: void onCancel(android.content.DialogInterface)
kotlinx.coroutines.channels.ClosedSendChannelException: ClosedSendChannelException(java.lang.String)
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void runWorker()
androidx.window.embedding.SplitRuleParser: androidx.window.embedding.SplitPairRule parseSplitPairRule(android.content.Context,android.content.res.XmlResourceParser)
io.sentry.UnknownPropertiesTypeAdapterFactory$UnknownPropertiesTypeAdapter: java.util.Collection getPropertyNames(java.lang.Class,com.google.gson.internal.Excluder,com.google.gson.FieldNamingStrategy)
com.google.gson.internal.ConstructorConstructor$8: ConstructorConstructor$8(com.google.gson.internal.ConstructorConstructor)
com.google.common.hash.LittleEndianByteArray$UnsafeByteArray$2: void putLongLittleEndian(byte[],int,long)
androidx.arch.core.internal.FastSafeIterableMap: java.lang.Object remove(java.lang.Object)
com.google.gson.LongSerializationPolicy$2: com.google.gson.JsonElement serialize(java.lang.Long)
com.google.common.collect.MapMakerInternalMap$EntryIterator: MapMakerInternalMap$EntryIterator(com.google.common.collect.MapMakerInternalMap)
androidx.fragment.app.FragmentManagerImpl: android.view.LayoutInflater$Factory2 getLayoutInflaterFactory()
io.sentry.Session: long getSequenceTimestamp(java.util.Date)
com.google.android.gms.common.api.internal.zabu: void zac(com.google.android.gms.common.api.internal.zabu,boolean)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: void detachFromContentProvider()
kotlinx.coroutines.scheduling.SchedulerTimeSource: SchedulerTimeSource()
com.google.gson.internal.LinkedHashTreeMap$KeySet: void clear()
kotlin.jvm.internal.CallableReference: java.lang.Object call(java.lang.Object[])
io.sentry.protocol.App: void setAppVersion(java.lang.String)
com.google.android.gms.internal.maps.zzc: void zzd(android.os.Parcel,android.os.Parcelable)
com.google.android.gms.dynamite.zzq: int zzg(com.google.android.gms.dynamic.IObjectWrapper,java.lang.String,boolean)
com.google.android.gms.common.zzb: java.lang.Object createFromParcel(android.os.Parcel)
io.flutter.embedding.android.FlutterView: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)
io.sentry.Sentry: io.sentry.ISpan getSpan()
com.google.android.gms.common.api.internal.BasePendingResult$CallbackHandler: BasePendingResult$CallbackHandler(android.os.Looper)
com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment: MapMakerInternalMap$WeakKeyWeakValueSegment(com.google.common.collect.MapMakerInternalMap,int,int)
com.google.common.collect.MapMaker: java.lang.String toString()
io.sentry.SentryEnvelopeItem: io.sentry.protocol.SentryTransaction getTransaction(io.sentry.ISerializer)
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$10: SentryFlutterPlugin$initNativeSdk$2$10(io.sentry.android.core.SentryAndroidOptions)
io.sentry.protocol.Gpu: void setNpotSupport(java.lang.String)
androidx.fragment.app.FragmentManagerImpl: java.lang.String toString()
com.google.gson.internal.UnsafeAllocator$1: java.lang.Object newInstance(java.lang.Class)
androidx.window.core.Version$Companion: androidx.window.core.Version getCURRENT()
io.sentry.SentryThreadFactory: SentryThreadFactory(io.sentry.SentryStackTraceFactory,io.sentry.SentryOptions)
io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup: void onMeasure(int,int)
kotlin.coroutines.jvm.internal.ModuleNameRetriever: ModuleNameRetriever()
com.google.android.gms.common.internal.TelemetryLogging: com.google.android.gms.common.internal.TelemetryLoggingClient getClient(android.content.Context,com.google.android.gms.common.internal.TelemetryLoggingOptions)
androidx.fragment.app.BackStackRecord: java.lang.String toString()
com.google.android.gms.maps.model.CameraPosition$Builder: com.google.android.gms.maps.model.CameraPosition$Builder target(com.google.android.gms.maps.model.LatLng)
com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper: com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper instance()
androidx.fragment.app.FragmentController: void restoreSaveState(android.os.Parcelable)
com.google.common.hash.HashCode$IntHashCode: boolean equalsSameBits(com.google.common.hash.HashCode)
kotlinx.coroutines.internal.AtomicOp: kotlinx.coroutines.internal.AtomicOp getAtomicOp()
kotlinx.coroutines.channels.LinkedListChannel: boolean isBufferEmpty()
io.sentry.android.core.AppComponentsBreadcrumbsIntegration: void createLowMemoryBreadcrumb(java.lang.Integer)
com.google.gson.internal.bind.JsonTreeReader: void nextNull()
io.sentry.NoOpSpan: io.sentry.SpanContext getSpanContext()
androidx.fragment.app.FragmentManagerImpl: void putFragment(android.os.Bundle,java.lang.String,androidx.fragment.app.Fragment)
io.sentry.transport.QueuedThreadPoolExecutor: void waitTillIdle(long)
io.sentry.protocol.Mechanism: java.lang.Thread getThread()
com.google.android.gms.maps.MapView: void onCreate(android.os.Bundle)
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$16: SentryFlutterPlugin$initNativeSdk$2$16(io.sentry.android.core.SentryAndroidOptions)
androidx.fragment.app.FragmentActivity: void onNewIntent(android.content.Intent)
io.sentry.EnvelopeReader: io.sentry.SentryEnvelope read(java.io.InputStream)
io.flutter.plugin.common.StandardMessageCodec: void writeChar(java.io.ByteArrayOutputStream,int)
androidx.collection.MapCollections$EntrySet: boolean add(java.lang.Object)
com.google.android.gms.common.internal.zzn: zzn(java.lang.String,java.lang.String,int,boolean)
com.google.common.collect.ImmutableCollection: int internalArrayEnd()
kotlin.coroutines.jvm.internal.ContinuationImpl: void releaseIntercepted()
io.sentry.MainEventProcessor: void setThreads(io.sentry.SentryEvent,java.lang.Object)
kotlinx.coroutines.EventLoopImplBase: java.lang.Runnable dequeue()
com.google.android.gms.maps.zzy: void zzb(com.google.android.gms.maps.model.LatLng)
com.google.common.hash.BloomFilterStrategies: com.google.common.hash.BloomFilterStrategies valueOf(java.lang.String)
kotlinx.coroutines.EventLoop: long getNextTime()
androidx.core.graphics.drawable.IconCompat: int getType()
io.flutter.plugins.googlemaps.PolylinesController: boolean onPolylineTap(java.lang.String)
androidx.window.embedding.SplitController: void unregisterRule(androidx.window.embedding.EmbeddingRule)
io.sentry.android.core.AndroidOptionsInitializer: java.lang.String getSentryReleaseVersion(android.content.pm.PackageInfo,java.lang.String)
io.flutter.plugins.pathprovider.PathProviderPlugin: java.lang.String access$500(io.flutter.plugins.pathprovider.PathProviderPlugin)
com.google.common.base.Equivalence$Identity: boolean doEquivalent(java.lang.Object,java.lang.Object)
com.google.android.gms.maps.GoogleMapOptions: com.google.android.gms.maps.GoogleMapOptions mapType(int)
io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsEmojiModifierBase(int)
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)
io.sentry.android.core.BuildInfoProvider: int getSdkInfoVersion()
androidx.fragment.app.DialogFragment$1: DialogFragment$1(androidx.fragment.app.DialogFragment)
com.google.gson.Gson: Gson()
kotlin.collections.EmptySet: boolean contains(java.lang.Object)
com.google.android.gms.maps.model.CircleOptions: float getZIndex()
com.google.android.gms.tasks.zzw: java.lang.Object getResult()
com.google.android.gms.common.GooglePlayServicesUtilLight: android.content.res.Resources getRemoteResource(android.content.Context)
androidx.core.app.NotificationCompatBuilder: android.app.Notification$Builder getBuilder()
com.google.android.gms.maps.zzag: void onCreate(android.os.Bundle)
com.google.android.gms.common.internal.service.zao: com.google.android.gms.tasks.Task log(com.google.android.gms.common.internal.TelemetryData)
io.flutter.plugin.platform.PlatformPlugin: void access$600(io.flutter.plugin.platform.PlatformPlugin)
kotlin.random.Random$Default: int nextBits(int)
com.google.android.gms.dynamite.zze: int zza(android.content.Context,java.lang.String)
io.flutter.embedding.engine.dart.DartMessenger: void handleError(java.lang.Error)
io.sentry.NoOpSpan: java.lang.String getTag(java.lang.String)
com.google.gson.JsonElement: java.math.BigInteger getAsBigInteger()
androidx.fragment.app.FragmentTransitionCompat21$3: void onTransitionStart(android.transition.Transition)
kotlin.text.StringsKt__StringsKt: int lastIndexOfAny(java.lang.CharSequence,char[],int,boolean)
com.google.common.util.concurrent.AbstractFuture$TrustedFuture: java.lang.Object get()
com.google.gson.internal.LinkedHashTreeMap: com.google.gson.internal.LinkedHashTreeMap$Node findByEntry(java.util.Map$Entry)
kotlin.collections.CollectionsKt__CollectionsJVMKt: java.util.List listOf(java.lang.Object)
io.flutter.embedding.engine.FlutterJNI: void onSurfaceChanged(int,int)
io.flutter.view.AccessibilityBridge$Action: io.flutter.view.AccessibilityBridge$Action valueOf(java.lang.String)
com.google.gson.JsonElement: com.google.gson.JsonPrimitive getAsJsonPrimitive()
androidx.lifecycle.ViewModelProvider: ViewModelProvider(androidx.lifecycle.ViewModelStore,androidx.lifecycle.ViewModelProvider$Factory)
com.google.android.gms.maps.GoogleMap: void setMapType(int)
io.sentry.ILogger: void log(io.sentry.SentryLevel,java.lang.String,java.lang.Object[])
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$1: void invoke(java.lang.String)
com.google.android.gms.maps.internal.zzb: com.google.android.gms.dynamic.IObjectWrapper newCameraPosition(com.google.android.gms.maps.model.CameraPosition)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay: PlatformChannel$SystemUiOverlay(java.lang.String,int,java.lang.String)
io.sentry.protocol.Device: java.lang.Float getScreenDensity()
io.sentry.Sentry: io.sentry.SentryTraceHeader traceHeaders()
androidx.fragment.app.FragmentManagerViewModel: int hashCode()
com.google.android.gms.internal.maps.zzae: java.lang.String zzg()
io.sentry.DirectoryProcessor$SendCachedEnvelopeHint: boolean isSuccess()
io.sentry.AsyncHttpTransportFactory: io.sentry.transport.ITransport create(io.sentry.SentryOptions,io.sentry.RequestDetails)
io.sentry.protocol.SdkVersion: void acceptUnknownProperties(java.util.Map)
kotlinx.coroutines.internal.ThreadSafeHeap: kotlinx.coroutines.internal.ThreadSafeHeapNode peek()
kotlin.collections.EmptyList: boolean equals(java.lang.Object)
androidx.window.embedding.SplitRuleParser: java.util.Set parseSplitXml(android.content.Context,int)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.WindowInsets access$402(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,android.view.WindowInsets)
io.sentry.protocol.Device: void setLowMemory(java.lang.Boolean)
io.flutter.embedding.android.FlutterActivityLaunchConfigs$BackgroundMode: FlutterActivityLaunchConfigs$BackgroundMode(java.lang.String,int)
androidx.collection.SimpleArrayMap: java.lang.Object setValueAt(int,java.lang.Object)
com.google.common.collect.MapMakerInternalMap: java.util.ArrayList access$900(java.util.Collection)
androidx.window.layout.HardwareFoldingFeature$Type$Companion: HardwareFoldingFeature$Type$Companion()
androidx.fragment.app.FragmentManagerImpl: void startPendingDeferredFragments()
io.flutter.plugin.editing.TextInputPlugin: void access$300(io.flutter.plugin.editing.TextInputPlugin,android.view.View)
io.sentry.android.core.PhoneStateBreadcrumbsIntegration$PhoneStateChangeListener: PhoneStateBreadcrumbsIntegration$PhoneStateChangeListener(io.sentry.IHub)
io.sentry.config.EnvironmentVariablePropertiesProvider: EnvironmentVariablePropertiesProvider()
io.sentry.cache.CacheStrategy: boolean isValidSession(io.sentry.Session)
com.google.gson.JsonParseException: JsonParseException(java.lang.String,java.lang.Throwable)
com.google.android.gms.maps.GoogleMapOptions: com.google.android.gms.maps.GoogleMapOptions maxZoomPreference(float)
io.flutter.embedding.engine.systemchannels.PlatformChannel: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode decodeSystemUiMode(java.lang.String)
io.flutter.embedding.engine.loader.FlutterLoader: boolean automaticallyRegisterPlugins()
io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler: void onCancel(java.lang.Object,io.flutter.plugin.common.BinaryMessenger$BinaryReply)
com.google.android.gms.maps.internal.zze: zze(android.os.IBinder)
com.google.android.gms.common.api.internal.ApiExceptionMapper: ApiExceptionMapper()
com.google.common.reflect.Types$JavaVersion$2: Types$JavaVersion$2(java.lang.String,int)
com.google.android.gms.common.api.internal.BackgroundDetector: void onTrimMemory(int)
io.sentry.SentryEnvelope: java.lang.Iterable getItems()
io.flutter.embedding.engine.loader.FlutterLoader: FlutterLoader(io.flutter.embedding.engine.FlutterJNI,java.util.concurrent.ExecutorService)
io.sentry.SentryOptions: io.sentry.protocol.SdkVersion createSdkVersion()
com.google.android.gms.maps.model.CustomCap: CustomCap(com.google.android.gms.maps.model.BitmapDescriptor,float)
com.google.android.gms.common.internal.safeparcel.SafeParcelWriter: void writeBundle(android.os.Parcel,int,android.os.Bundle,boolean)
com.google.common.collect.MapMakerInternalMap$Segment: void runCleanup()
io.flutter.plugin.common.EventChannel: io.flutter.plugin.common.MethodCodec access$000(io.flutter.plugin.common.EventChannel)
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$12: SentryFlutterPlugin$initNativeSdk$2$12(io.sentry.android.core.SentryAndroidOptions)
com.google.gson.internal.bind.TreeTypeAdapter: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
com.google.gson.internal.LinkedHashTreeMap$EntrySet: boolean contains(java.lang.Object)
com.google.android.gms.common.internal.BaseGmsClient: boolean usesClientTelemetry()
com.google.android.gms.maps.model.zzm: zzm()
kotlinx.coroutines.internal.ThreadContextKt$countAll$1: java.lang.Object invoke(java.lang.Object,kotlin.coroutines.CoroutineContext$Element)
kotlin.ranges.IntProgression: int getFirst()
androidx.window.embedding.EmbeddingRule: EmbeddingRule()
androidx.fragment.app.Fragment: boolean performCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)
kotlinx.coroutines.channels.ChannelResult$Companion: java.lang.Object failure-PtdJZtk()
io.flutter.plugins.googlemaps.MarkerBuilder: void setInfoWindowAnchor(float,float)
androidx.fragment.app.FragmentViewLifecycleOwner: androidx.lifecycle.Lifecycle getLifecycle()
io.sentry.Scope: void removeExtra(java.lang.String)
androidx.lifecycle.ReportFragment: androidx.lifecycle.ReportFragment get(android.app.Activity)
com.google.android.gms.common.api.internal.zap: void zad()
kotlinx.coroutines.channels.BufferOverflow: BufferOverflow(java.lang.String,int)
com.google.gson.stream.JsonWriter: void push(int)
io.flutter.embedding.android.SplashScreen: android.os.Bundle saveSplashScreenState()
kotlinx.coroutines.internal.AtomicOp: AtomicOp()
io.flutter.plugins.pathprovider.PathProviderPlugin: java.lang.String access$400(io.flutter.plugins.pathprovider.PathProviderPlugin)
androidx.fragment.app.FragmentManagerImpl$StartEnterTransitionListener: void startListening()
io.sentry.protocol.DebugImage: void setImageSize(long)
com.tekartik.sqflite.operation.BatchOperation$BatchOperationResult: BatchOperation$BatchOperationResult(com.tekartik.sqflite.operation.BatchOperation)
io.flutter.plugins.pathprovider.PathProviderPlugin$UiThreadExecutor: PathProviderPlugin$UiThreadExecutor()
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: void onUserLeaveHint()
io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler$1: void reply(java.lang.Object)
io.sentry.protocol.Device: java.lang.String getLanguage()
kotlin.ranges.IntProgressionIterator: IntProgressionIterator(int,int,int)
com.google.common.collect.ImmutableList: java.lang.Object set(int,java.lang.Object)
io.flutter.plugin.editing.TextInputPlugin$1: void setClient(int,io.flutter.embedding.engine.systemchannels.TextInputChannel$Configuration)
io.sentry.exception.ExceptionMechanismException: java.lang.Thread getThread()
io.sentry.android.core.ActivityLifecycleIntegration: ActivityLifecycleIntegration(android.app.Application,io.sentry.android.core.IBuildInfoProvider)
androidx.fragment.app.FragmentManagerImpl: int allocBackStackIndex(androidx.fragment.app.BackStackRecord)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding: void addOnUserLeaveHintListener(io.flutter.plugin.common.PluginRegistry$UserLeaveHintListener)
io.flutter.embedding.android.FlutterView: void onSizeChanged(int,int,int,int)
io.sentry.protocol.DebugImage: void setArch(java.lang.String)
kotlinx.coroutines.intrinsics.UndispatchedKt: void startCoroutineUndispatched(kotlin.jvm.functions.Function1,kotlin.coroutines.Continuation)
io.sentry.SessionAdapter: void write(com.google.gson.stream.JsonWriter,io.sentry.Session)
kotlinx.coroutines.Dispatchers: kotlinx.coroutines.CoroutineDispatcher getDefault()
com.google.android.gms.common.internal.zzo: void onServiceDisconnected(android.content.ComponentName)
com.google.android.gms.maps.model.MarkerOptions: boolean isVisible()
com.google.common.collect.RegularImmutableList: int size()
kotlinx.coroutines.DebugStringsKt: java.lang.String toDebugString(kotlin.coroutines.Continuation)
androidx.fragment.app.Fragment: boolean equals(java.lang.Object)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityStopped(android.app.Activity)
io.sentry.Dsn: java.lang.String getSecretKey()
androidx.window.layout.SidecarWindowBackend: java.util.concurrent.CopyOnWriteArrayList getWindowLayoutChangeCallbacks()
com.google.gson.internal.bind.JsonTreeReader: java.lang.String locationString()
com.google.gson.Gson$4: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
io.sentry.android.core.ANRWatchDog: ANRWatchDog(long,boolean,io.sentry.android.core.ANRWatchDog$ANRListener,io.sentry.ILogger,io.sentry.android.core.IHandler,android.content.Context)
io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler: java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])
kotlinx.coroutines.DispatchedTask: void handleFatalException(java.lang.Throwable,java.lang.Throwable)
androidx.collection.SimpleArrayMap: void freeArrays(int[],java.lang.Object[],int)
io.sentry.UserFeedback: UserFeedback(io.sentry.protocol.SentryId)
com.tekartik.sqflite.operation.BaseReadOperation: BaseReadOperation()
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void release()
io.sentry.SentryEvent: java.util.List getFingerprints()
io.flutter.embedding.android.FlutterSurfaceView$1: void surfaceChanged(android.view.SurfaceHolder,int,int,int)
androidx.lifecycle.LiveData: void assertMainThread(java.lang.String)
io.sentry.util.LogUtils: LogUtils()
io.flutter.plugins.pathprovider.StorageDirectoryMapper: java.lang.String androidType(java.lang.Integer)
io.sentry.android.ndk.NdkScopeObserver: void setUser(io.sentry.protocol.User)
com.google.android.gms.common.internal.zac: java.lang.String zai(android.content.Context,java.lang.String)
io.flutter.view.AccessibilityBridge$SemanticsNode: java.util.List access$3900(io.flutter.view.AccessibilityBridge$SemanticsNode)
com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$Listener access$900(com.google.common.util.concurrent.AbstractFuture)
io.sentry.protocol.SentryStackTrace: void setSnapshot(java.lang.Boolean)
io.flutter.plugin.editing.InputConnectionAdaptor: InputConnectionAdaptor(android.view.View,int,io.flutter.embedding.engine.systemchannels.TextInputChannel,io.flutter.embedding.android.KeyboardManager,io.flutter.plugin.editing.ListenableEditingState,android.view.inputmethod.EditorInfo,io.flutter.embedding.engine.FlutterJNI)
androidx.core.app.NotificationCompat$BigTextStyle: java.lang.String getClassName()
io.flutter.plugin.editing.InputConnectionAdaptor: boolean handleVerticalMovement(boolean,boolean)
com.google.gson.internal.bind.TimeTypeAdapter: java.sql.Time read(com.google.gson.stream.JsonReader)
kotlin.collections.ArraysKt___ArraysKt: java.lang.Object singleOrNull(java.lang.Object[])
io.flutter.embedding.engine.systemchannels.TextInputChannel: void search(int)
kotlin.coroutines.CoroutineContext$DefaultImpls: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext,kotlin.coroutines.CoroutineContext)
io.flutter.embedding.android.MotionEventTracker$MotionEventId: io.flutter.embedding.android.MotionEventTracker$MotionEventId from(long)
kotlin.collections.EmptySet: boolean equals(java.lang.Object)
io.flutter.embedding.android.MotionEventTracker: MotionEventTracker()
com.google.gson.internal.bind.TypeAdapters$29: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
com.google.android.gms.internal.maps.zzy: void zzA(float)
io.sentry.adapters.SpanIdSerializerAdapter: com.google.gson.JsonElement serialize(io.sentry.SpanId,java.lang.reflect.Type,com.google.gson.JsonSerializationContext)
kotlin.coroutines.jvm.internal.CompletedContinuation: java.lang.String toString()
kotlin.jvm.internal.FunctionReferenceImpl: FunctionReferenceImpl(int,kotlin.reflect.KDeclarationContainer,java.lang.String,java.lang.String)
com.tekartik.sqflite.Database: void close()
io.sentry.Span: io.sentry.SentryTraceHeader toSentryTrace()
io.sentry.android.core.SentryInitProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])
androidx.collection.ArraySet: int indexOfNull()
com.google.gson.internal.LinkedHashTreeMap$EntrySet$1: java.lang.Object next()
io.flutter.plugin.platform.SingleViewPresentation$PresentationState: io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup access$002(io.flutter.plugin.platform.SingleViewPresentation$PresentationState,io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup)
com.google.common.hash.AbstractHasher: com.google.common.hash.Hasher putObject(java.lang.Object,com.google.common.hash.Funnel)
androidx.lifecycle.MethodCallsLogger: MethodCallsLogger()
androidx.fragment.app.FragmentManagerViewModel: androidx.fragment.app.FragmentManagerViewModel getInstance(androidx.lifecycle.ViewModelStore)
com.google.android.gms.common.api.internal.zabq: void zaI()
com.google.gson.Gson$2: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
io.flutter.plugins.googlemaps.PolylinesController: void addPolylines(java.util.List)
com.google.gson.internal.LazilyParsedNumber: LazilyParsedNumber(java.lang.String)
kotlin.text.DelimitedRangesSequence$iterator$1: void remove()
kotlinx.coroutines.channels.Closed: kotlinx.coroutines.channels.Closed getOfferResult()
io.sentry.SentryItemType: io.sentry.SentryItemType valueOf(java.lang.String)
com.google.android.gms.maps.internal.zzg: boolean isBuildingsEnabled()
io.flutter.embedding.engine.FlutterJNI: long nativeAttach(io.flutter.embedding.engine.FlutterJNI)
com.google.gson.internal.UnsafeAllocator: java.lang.Object newInstance(java.lang.Class)
com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper: com.google.common.collect.MapMakerInternalMap$InternalEntry copy(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry)
kotlin.text.Charsets: Charsets()
io.flutter.plugins.connectivity.ConnectivityBroadcastReceiver: ConnectivityBroadcastReceiver(android.content.Context,io.flutter.plugins.connectivity.Connectivity)
io.sentry.NoOpHub: void withScope(io.sentry.ScopeCallback)
kotlinx.coroutines.internal.SystemPropsKt: int systemProp$default(java.lang.String,int,int,int,int,java.lang.Object)
com.google.android.gms.maps.zza: zza(com.google.android.gms.maps.GoogleMap,com.google.android.gms.maps.GoogleMap$OnMarkerClickListener)
io.sentry.IHub: io.sentry.ITransaction startTransaction(java.lang.String,java.lang.String)
com.google.android.gms.common.api.internal.zabq: zabq(com.google.android.gms.common.api.internal.GoogleApiManager,com.google.android.gms.common.api.GoogleApi)
com.google.gson.internal.bind.TypeAdapters$25: java.lang.Object read(com.google.gson.stream.JsonReader)
io.flutter.plugins.googlemaps.TileOverlaysController: void changeTileOverlay(java.util.Map)
com.google.android.gms.maps.internal.zzb: com.google.android.gms.dynamic.IObjectWrapper newLatLng(com.google.android.gms.maps.model.LatLng)
kotlinx.coroutines.internal.SystemPropsKt: long systemProp$default(java.lang.String,long,long,long,int,java.lang.Object)
io.sentry.flutter.R$styleable: R$styleable()
kotlinx.coroutines.internal.LockFreeTaskQueueCore: java.lang.Object removeFirstOrNull()
io.flutter.plugins.googlemaps.TileProviderController: io.flutter.plugin.common.MethodChannel access$200(io.flutter.plugins.googlemaps.TileProviderController)
com.google.android.gms.common.internal.Preconditions: java.lang.String checkNotEmpty(java.lang.String,java.lang.Object)
com.google.android.gms.common.api.internal.zzd: void onCreate(android.os.Bundle)
com.google.android.gms.maps.model.PolylineOptions: com.google.android.gms.maps.model.PolylineOptions width(float)
com.google.android.gms.common.api.internal.BackgroundDetector: void onConfigurationChanged(android.content.res.Configuration)
androidx.fragment.app.FragmentManager: FragmentManager()
io.sentry.protocol.SentryThread: SentryThread()
io.sentry.android.core.EnvelopeFileObserver$CachedEnvelopeHint: void setResult(boolean)
kotlin.UNINITIALIZED_VALUE: UNINITIALIZED_VALUE()
com.google.gson.internal.LinkedTreeMap$EntrySet: boolean contains(java.lang.Object)
com.google.android.gms.maps.internal.zzby: void setMyLocationButtonEnabled(boolean)
androidx.window.embedding.SplitController: androidx.window.embedding.SplitController access$getGlobalInstance$cp()
io.flutter.embedding.engine.FlutterJNI: FlutterJNI()
com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper: com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment newSegment(com.google.common.collect.MapMakerInternalMap,int,int)
androidx.window.layout.ActivityCompatHelperApi30: android.graphics.Rect maximumWindowBounds(android.app.Activity)
io.sentry.util.ExceptionUtils: java.lang.Throwable findRootCause(java.lang.Throwable)
io.sentry.protocol.SentryPackage: SentryPackage(java.lang.String,java.lang.String)
androidx.fragment.app.FragmentManagerViewModel: java.lang.String toString()
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$2: void invoke(boolean)
com.google.gson.stream.JsonReader: void checkLenient()
io.flutter.plugins.googlemaps.GoogleMapFactory: io.flutter.plugin.platform.PlatformView create(android.content.Context,int,java.lang.Object)
io.sentry.android.core.DefaultAndroidEventProcessor: io.sentry.protocol.Device getDevice(boolean,boolean)
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean didScroll()
io.flutter.embedding.android.FlutterSplashView$SavedState: void writeToParcel(android.os.Parcel,int)
androidx.fragment.app.FragmentTransition: void addSharedElementsWithMatchingNames(java.util.ArrayList,androidx.collection.ArrayMap,java.util.Collection)
io.sentry.SentryBaseEvent: void addBreadcrumb(java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void onEndFrame()
com.google.gson.internal.LinkedTreeMap$KeySet: boolean contains(java.lang.Object)
kotlinx.coroutines.internal.MissingMainCoroutineDispatcher: java.lang.Void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)
io.sentry.android.core.IHandler: java.lang.Thread getThread()
io.sentry.SentryOptions$BeforeBreadcrumbCallback: io.sentry.Breadcrumb execute(io.sentry.Breadcrumb,java.lang.Object)
com.google.android.gms.common.api.internal.zal: void zac(com.google.android.gms.common.api.internal.ApiKey,com.google.android.gms.common.ConnectionResult,java.lang.String)
io.sentry.SentryEvent: java.util.Date getTimestamp()
io.flutter.plugins.googlemaps.TileOverlayController: void setZIndex(float)
io.flutter.plugins.pathprovider.PathProviderPlugin: java.lang.String getApplicationSupportDirectory()
com.google.common.util.concurrent.AbstractFuture$SynchronizedHelper: AbstractFuture$SynchronizedHelper(com.google.common.util.concurrent.AbstractFuture$1)
com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment: void maybeClearReferenceQueues()
com.google.android.gms.common.api.internal.GoogleApiManager: com.google.android.gms.common.api.internal.zabq zaI(com.google.android.gms.common.api.GoogleApi)
kotlinx.coroutines.internal.SystemPropsKt: int systemProp(java.lang.String,int,int,int)
com.google.android.gms.common.ErrorDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)
kotlinx.coroutines.JobCancellationException: JobCancellationException(java.lang.String,java.lang.Throwable,kotlinx.coroutines.Job)
androidx.fragment.app.Fragment: void onAttachFragment(androidx.fragment.app.Fragment)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: android.graphics.Matrix getFinalMatrix()
com.google.gson.internal.bind.TypeAdapters$6: TypeAdapters$6()
com.google.android.gms.common.internal.service.zan: zan()
io.sentry.Sentry: void init(io.sentry.OptionsContainer,io.sentry.Sentry$OptionsConfiguration)
kotlin.collections.EmptyIterator: java.lang.Object next()
com.google.android.gms.maps.model.CameraPosition: void writeToParcel(android.os.Parcel,int)
io.sentry.protocol.OperatingSystem: java.lang.String getRawDescription()
io.flutter.plugins.googlemaps.GoogleMapController: void setLiteModeEnabled(boolean)
com.google.gson.internal.bind.TypeAdapters$33: TypeAdapters$33(java.lang.Class,java.lang.Class,com.google.gson.TypeAdapter)
kotlinx.coroutines.CancellableContinuationImpl: boolean cancel(java.lang.Throwable)
com.tekartik.sqflite.SqflitePlugin$BgResult: SqflitePlugin$BgResult(com.tekartik.sqflite.SqflitePlugin,io.flutter.plugin.common.MethodChannel$Result)
androidx.core.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)
kotlinx.coroutines.internal.ExceptionsConstuctorKt: int fieldsCount(java.lang.Class,int)
com.google.gson.internal.LinkedHashTreeMap$EntrySet: boolean remove(java.lang.Object)
io.sentry.UnknownPropertiesTypeAdapterFactory: com.google.gson.TypeAdapterFactory get()
androidx.fragment.app.FragmentManagerViewModel: void onCleared()
com.javih.add2calendar.Add2CalendarPlugin: android.content.Context getActiveContext()
androidx.fragment.app.FragmentManagerImpl: void removeFragment(androidx.fragment.app.Fragment)
com.google.android.gms.maps.GoogleMap: com.google.android.gms.maps.model.Circle addCircle(com.google.android.gms.maps.model.CircleOptions)
io.sentry.protocol.SentrySpan: SentrySpan(io.sentry.Span)
io.sentry.Hub: io.sentry.Stack$StackItem createRootStackItem(io.sentry.SentryOptions)
com.tekartik.sqflite.operation.BatchOperation: boolean getNoResult()
io.sentry.android.core.util.DeviceOrientations: io.sentry.protocol.Device$DeviceOrientation getOrientation(int)
io.sentry.SentryOptions: boolean containsIgnoredExceptionForType(java.lang.Throwable)
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.String access$6400(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.sentry.android.ndk.NativeModuleListLoader: void nativeClearModuleList()
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event[] values()
androidx.window.layout.WindowLayoutInfo: java.lang.String toString()
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$8: java.lang.Object invoke(java.lang.Object)
com.google.android.gms.dynamite.DynamiteModule: boolean zze(android.database.Cursor)
androidx.collection.ArraySet: boolean removeAll(java.util.Collection)
io.flutter.embedding.android.FlutterActivity: boolean shouldHandleDeeplinking()
androidx.fragment.app.FragmentTransitionCompat21$1: android.graphics.Rect onGetEpicenter(android.transition.Transition)
com.google.gson.internal.bind.TreeTypeAdapter$GsonContextImpl: com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type)
androidx.fragment.app.FragmentManagerViewModel: boolean removeRetainedFragment(androidx.fragment.app.Fragment)
com.google.android.gms.maps.model.TileOverlay: TileOverlay(com.google.android.gms.internal.maps.zzag)
androidx.fragment.app.FragmentManagerState$1: java.lang.Object createFromParcel(android.os.Parcel)
com.google.gson.annotations.Until: double value()
io.sentry.SentryStackTraceFactory: boolean isInApp(java.lang.String)
io.sentry.IHub: io.sentry.ITransaction startTransaction(io.sentry.TransactionContext,io.sentry.CustomSamplingContext)
io.sentry.protocol.OperatingSystem: OperatingSystem()
com.google.android.gms.maps.model.MarkerOptions: float getAnchorU()
io.sentry.android.core.SentryAndroidOptions: io.sentry.protocol.SdkVersion createSdkVersion()
androidx.core.app.NotificationCompat$Action: java.lang.CharSequence getTitle()
com.google.android.gms.common.api.internal.zacr: void run()
androidx.fragment.app.FragmentManagerImpl: boolean execPendingActions()
io.sentry.Breadcrumb: Breadcrumb()
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: kotlinx.coroutines.flow.Flow windowLayoutInfo(android.app.Activity)
com.google.android.gms.internal.maps.zzv: boolean zzC(com.google.android.gms.internal.maps.zzx)
com.google.android.gms.signin.internal.SignInClientImpl: android.os.Bundle createBundleFromClientSettings(com.google.android.gms.common.internal.ClientSettings)
com.google.common.base.MoreObjects$ToStringHelper: MoreObjects$ToStringHelper(java.lang.String,com.google.common.base.MoreObjects$1)
kotlinx.coroutines.channels.AbstractSendChannel$SendBuffered: java.lang.Object getPollResult()
androidx.loader.app.LoaderManagerImpl$LoaderViewModel: LoaderManagerImpl$LoaderViewModel()
com.google.gson.JsonArray: java.lang.Number getAsNumber()
io.flutter.embedding.engine.systemchannels.LifecycleChannel: void appIsPaused()
androidx.fragment.app.Fragment: void performStop()
kotlin.jvm.internal.FunctionReference: java.lang.String toString()
io.flutter.plugins.googlemaps.PolylineController: boolean consumeTapEvents()
io.flutter.plugins.googlemaps.GoogleMapsPlugin$2: androidx.lifecycle.Lifecycle getLifecycle()
io.sentry.EnvelopeSender: void safeDelete(java.io.File,java.lang.String)
com.google.android.gms.maps.model.VisibleRegion: boolean equals(java.lang.Object)
io.flutter.plugins.googlemaps.MarkersController: void onMarkerDrag(java.lang.String,com.google.android.gms.maps.model.LatLng)
kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)
kotlinx.coroutines.JobCancellingNode: JobCancellingNode()
com.google.android.gms.common.api.Status: com.google.android.gms.common.api.Status getStatus()
androidx.fragment.app.BackStackRecord: androidx.fragment.app.FragmentTransaction remove(androidx.fragment.app.Fragment)
com.google.common.collect.MapMakerInternalMap$DummyInternalEntry: com.google.common.collect.MapMakerInternalMap$DummyInternalEntry getNext()
androidx.window.layout.SidecarWindowBackend$Companion: boolean isSidecarVersionSupported(androidx.window.core.Version)
com.google.android.gms.maps.model.TileOverlay: boolean isVisible()
io.flutter.embedding.android.FlutterActivity: io.flutter.embedding.android.RenderMode getRenderMode()
io.flutter.embedding.engine.FlutterEngine: io.flutter.plugin.platform.PlatformViewsController access$100(io.flutter.embedding.engine.FlutterEngine)
io.sentry.adapters.SpanIdDeserializerAdapter: SpanIdDeserializerAdapter(io.sentry.SentryOptions)
io.sentry.SentryEvent: SentryEvent(java.util.Date)
kotlinx.coroutines.JobKt: kotlinx.coroutines.CompletableJob Job$default(kotlinx.coroutines.Job,int,java.lang.Object)
kotlin.sequences.SequencesKt___SequencesKt: java.util.Collection toCollection(kotlin.sequences.Sequence,java.util.Collection)
com.google.gson.reflect.TypeToken: boolean isAssignableFrom(com.google.gson.reflect.TypeToken)
io.sentry.protocol.Device: java.lang.String getName()
com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
com.google.android.gms.common.internal.zzr: zzr(android.content.Context,android.os.Looper)
io.flutter.plugin.common.MethodChannel: io.flutter.plugin.common.MethodCodec access$000(io.flutter.plugin.common.MethodChannel)
com.google.android.gms.common.api.GoogleApiActivity: void onSaveInstanceState(android.os.Bundle)
androidx.core.app.NotificationCompat$Action: androidx.core.app.RemoteInput[] getRemoteInputs()
io.sentry.SentryOptions: boolean isAttachStacktrace()
io.sentry.NoOpHub: io.sentry.ISpan getSpan()
kotlinx.coroutines.channels.AbstractSendChannel: int countQueueSize()
androidx.loader.app.LoaderManagerImpl$LoaderInfo: void removeObserver(androidx.lifecycle.Observer)
io.flutter.plugins.pathprovider.PathProviderPlugin$PathProviderBackgroundThread: void getExternalStorageDirectories(java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.Throwable recoverFromStackFrame(java.lang.Throwable,kotlin.coroutines.jvm.internal.CoroutineStackFrame)
com.google.android.gms.internal.maps.zzz: com.google.android.gms.internal.maps.zzaa zzb(android.os.IBinder)
io.sentry.android.core.util.ConnectivityChecker$Status: io.sentry.android.core.util.ConnectivityChecker$Status[] values()
io.sentry.SentryEnvelopeHeader: SentryEnvelopeHeader(io.sentry.protocol.SentryId,io.sentry.protocol.SdkVersion)
kotlin.text.DelimitedRangesSequence: int access$getStartIndex$p(kotlin.text.DelimitedRangesSequence)
kotlin.jvm.internal.CallableReference: kotlin.reflect.KCallable computeReflected()
kotlin.collections.MapsKt__MapsKt: java.util.Map toMap(java.lang.Iterable,java.util.Map)
androidx.window.layout.SidecarCompat: java.util.Map access$getWindowListenerRegisteredContexts$p(androidx.window.layout.SidecarCompat)
com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter value(double)
com.tekartik.sqflite.SqlCommand: java.lang.String getSql()
androidx.lifecycle.ProcessLifecycleOwnerInitializer: ProcessLifecycleOwnerInitializer()
androidx.arch.core.internal.SafeIterableMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)
androidx.core.os.LocaleListCompat: java.util.Locale get(int)
io.sentry.android.core.SentryAndroidOptions: boolean isEnableActivityLifecycleTracingAutoFinish()
io.sentry.SentryOptions: io.sentry.SentryOptions from(io.sentry.config.PropertiesProvider,io.sentry.ILogger)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: void onUserLeaveHint()
io.sentry.Attachment: Attachment(java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String)
io.sentry.android.core.AppComponentsBreadcrumbsIntegration: void onConfigurationChanged(android.content.res.Configuration)
io.flutter.embedding.engine.dart.DartExecutor$DefaultBinaryMessenger: void send(java.lang.String,java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply)
com.tekartik.sqflite.operation.BatchOperation: BatchOperation(java.util.Map,boolean)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: boolean access$202(io.flutter.embedding.android.FlutterActivityAndFragmentDelegate,boolean)
io.flutter.plugins.flutter_plugin_android_lifecycle.FlutterAndroidLifecyclePlugin: void onDetachedFromEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
kotlinx.coroutines.JobCancellationException: java.lang.String toString()
io.flutter.embedding.engine.FlutterJNI: void onRenderingStopped()
com.google.android.gms.common.internal.ConnectionTelemetryConfiguration: void writeToParcel(android.os.Parcel,int)
io.flutter.view.AccessibilityBridge$SemanticsNode: android.graphics.Rect getGlobalRect()
androidx.fragment.app.FragmentTransitionCompat21: void setSharedElementTargets(java.lang.Object,android.view.View,java.util.ArrayList)
com.google.android.gms.dynamite.zza: zza(java.lang.ThreadGroup,java.lang.String)
io.sentry.Sentry: void popScope()
kotlin.jvm.internal.ReflectionFactory: ReflectionFactory()
androidx.fragment.app.Fragment: java.lang.Object getReenterTransition()
com.google.common.collect.MapMakerInternalMap$ValueIterator: MapMakerInternalMap$ValueIterator(com.google.common.collect.MapMakerInternalMap)
io.flutter.plugin.platform.PlatformPlugin$1: void restoreSystemUiOverlays()
com.tekartik.sqflite.Database: void open()
com.google.android.gms.common.api.internal.zabq: void zam(com.google.android.gms.common.api.internal.zabq,com.google.android.gms.common.api.internal.zabs)
androidx.window.embedding.SplitController: void removeSplitListener(androidx.core.util.Consumer)
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry: long id()
com.google.android.gms.common.api.internal.zzb: void addCallback(java.lang.String,com.google.android.gms.common.api.internal.LifecycleCallback)
kotlinx.coroutines.channels.Receive: kotlinx.coroutines.internal.Symbol getOfferResult()
com.google.android.gms.internal.maps.zzj: void zzr(double)
com.google.gson.annotations.Since: double value()
com.google.android.gms.common.api.internal.TaskApiCall: com.google.android.gms.common.Feature[] zab()
io.flutter.embedding.android.FlutterTextureView: void access$200(io.flutter.embedding.android.FlutterTextureView)
io.flutter.plugins.googlemaps.PolygonBuilder: void setVisible(boolean)
kotlinx.coroutines.EventLoopImplBase: EventLoopImplBase()
io.flutter.plugin.editing.FlutterTextUtils: boolean isTagSpecChar(int)
io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler$EventSinkImplementation: EventChannel$IncomingStreamRequestHandler$EventSinkImplementation(io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler,io.flutter.plugin.common.EventChannel$1)
io.sentry.android.core.util.RootChecker: boolean checkTestKeys()
androidx.window.layout.DisplayFeature: android.graphics.Rect getBounds()
kotlinx.coroutines.JobSupport$Finishing: kotlinx.coroutines.NodeList getList()
io.flutter.view.AccessibilityBridge$SemanticsNode: float access$5400(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.sentry.SynchronizedCollection: java.lang.String toString()
io.sentry.protocol.OperatingSystem: java.lang.String getBuild()
androidx.core.view.ViewCompat$UnhandledKeyEventManager: void recalcViewsWithUnhandled()
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.plugins.PluginRegistry getPlugins()
com.google.common.base.Preconditions: int checkElementIndex(int,int)
com.google.gson.internal.bind.TreeTypeAdapter: com.google.gson.TypeAdapterFactory newTypeHierarchyFactory(java.lang.Class,java.lang.Object)
androidx.fragment.app.FragmentTransition: boolean canHandleAll(androidx.fragment.app.FragmentTransitionImpl,java.util.List)
com.google.gson.JsonElement: double getAsDouble()
com.google.android.gms.dynamite.zzr: com.google.android.gms.dynamic.IObjectWrapper zzf(com.google.android.gms.dynamic.IObjectWrapper,java.lang.String,int,com.google.android.gms.dynamic.IObjectWrapper)
androidx.window.embedding.ActivityRule: ActivityRule(java.util.Set,boolean,int,kotlin.jvm.internal.DefaultConstructorMarker)
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: android.graphics.SurfaceTexture surfaceTexture()
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: boolean isEmpty()
io.flutter.view.AccessibilityBridge$SemanticsNode: io.flutter.view.AccessibilityBridge$SemanticsNode access$2602(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.view.AccessibilityBridge$SemanticsNode)
io.sentry.ShutdownHookIntegration: ShutdownHookIntegration(java.lang.Runtime)
com.google.android.gms.dynamite.zzi: com.google.android.gms.dynamite.DynamiteModule$VersionPolicy$SelectionResult selectModule(android.content.Context,java.lang.String,com.google.android.gms.dynamite.DynamiteModule$VersionPolicy$IVersions)
io.sentry.android.core.AppLifecycleIntegration: void close()
io.flutter.embedding.engine.systemchannels.PlatformChannel: io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription access$200(io.flutter.embedding.engine.systemchannels.PlatformChannel,org.json.JSONObject)
com.google.android.gms.signin.internal.SignInClientImpl: void zad(com.google.android.gms.signin.internal.zae)
com.tekartik.sqflite.SqflitePlugin: void onInsertCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.sentry.util.ApplyScopeUtils: ApplyScopeUtils()
com.google.android.gms.signin.internal.SignInClientImpl: boolean requiresSignIn()
io.flutter.embedding.android.FlutterView: void addOnFirstFrameRenderedListener(io.flutter.embedding.engine.renderer.FlutterUiDisplayListener)
com.google.android.gms.common.internal.zzc: zzc(com.google.android.gms.common.internal.BaseGmsClient,java.lang.Object)
io.sentry.ISentryClient: io.sentry.protocol.SentryId captureEnvelope(io.sentry.SentryEnvelope)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin: void onAttachedToEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
androidx.lifecycle.EmptyActivityLifecycleCallbacks: void onActivityResumed(android.app.Activity)
io.flutter.Log: void i(java.lang.String,java.lang.String)
com.google.gson.internal.bind.util.ISO8601Utils: java.lang.String format(java.util.Date,boolean)
io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding: android.content.Context getApplicationContext()
io.sentry.SentryEvent: java.util.Map getUnknown()
androidx.lifecycle.ViewModelStore: ViewModelStore()
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: void removeListener(androidx.core.util.Consumer)
com.google.android.gms.maps.internal.zzw: boolean zza(int,android.os.Parcel,android.os.Parcel,int)
io.sentry.protocol.Mechanism: java.lang.String getType()
com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper: void setValue(com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment,com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry,java.lang.Object)
io.sentry.android.core.util.ConnectivityChecker: io.sentry.android.core.util.ConnectivityChecker$Status getConnectionStatus(android.content.Context,android.net.ConnectivityManager,io.sentry.ILogger)
kotlin.collections.EmptyMap: java.util.Collection values()
io.sentry.android.core.ActivityLifecycleIntegration: java.lang.String getActivityName(android.app.Activity)
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter: void removeWindowLayoutInfoListener(androidx.core.util.Consumer)
com.google.common.collect.MapMakerInternalMap: void clear()
com.google.common.collect.ImmutableList$SubList: java.util.List subList(int,int)
com.google.android.gms.maps.model.Polyline: void setGeodesic(boolean)
com.google.android.gms.common.api.internal.zabp: zabp(com.google.android.gms.common.api.internal.zabq)
kotlinx.coroutines.JobSupport$ChildCompletion: JobSupport$ChildCompletion(kotlinx.coroutines.JobSupport,kotlinx.coroutines.JobSupport$Finishing,kotlinx.coroutines.ChildHandleNode,java.lang.Object)
com.google.android.gms.common.api.internal.zag: void zag(com.google.android.gms.common.api.internal.zaad,boolean)
io.sentry.Hub: void captureUserFeedback(io.sentry.UserFeedback)
kotlin.collections.CollectionsKt__IterablesKt: int collectionSizeOrDefault(java.lang.Iterable,int)
io.sentry.hints.Retryable: boolean isRetry()
com.google.common.collect.MapMakerInternalMap: com.google.common.collect.MapMakerInternalMap$Segment createSegment(int,int)
androidx.window.layout.ExtensionWindowLayoutInfoBackend: void unregisterLayoutChangeCallback(androidx.core.util.Consumer)
io.sentry.NoOpHub: io.sentry.NoOpHub getInstance()
com.google.common.collect.SingletonImmutableSet: java.lang.String toString()
androidx.window.core.Version$bigInteger$2: Version$bigInteger$2(androidx.window.core.Version)
com.google.android.gms.common.api.internal.zzb: int zza(com.google.android.gms.common.api.internal.zzb)
com.google.android.gms.common.internal.zav: com.google.android.gms.common.internal.IAccountAccessor zab()
io.sentry.protocol.SentryStackFrame: java.lang.String getRawFunction()
com.google.android.gms.common.api.internal.BackgroundDetector: BackgroundDetector()
io.flutter.plugin.platform.PlatformViewFactory: PlatformViewFactory(io.flutter.plugin.common.MessageCodec)
io.flutter.plugins.urllauncher.WebViewActivity: WebViewActivity()
kotlin.internal.PlatformImplementations: void addSuppressed(java.lang.Throwable,java.lang.Throwable)
io.flutter.embedding.android.MotionEventTracker$MotionEventId: io.flutter.embedding.android.MotionEventTracker$MotionEventId createUnique()
io.flutter.plugin.platform.VirtualDisplayController: void resize(int,int,java.lang.Runnable)
com.google.common.collect.MapMakerInternalMap$Segment: java.lang.Object get(java.lang.Object,int)
io.sentry.Sentry: io.sentry.protocol.SentryId getLastEventId()
io.flutter.embedding.engine.dart.DartMessenger: void handlePlatformMessageResponse(int,java.nio.ByteBuffer)
com.google.gson.internal.LinkedHashTreeMap$LinkedTreeMapIterator: boolean hasNext()
kotlinx.coroutines.internal.LockFreeLinkedListNode: int tryCondAddNext(kotlinx.coroutines.internal.LockFreeLinkedListNode,kotlinx.coroutines.internal.LockFreeLinkedListNode,kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp)
com.google.gson.JsonObject: boolean has(java.lang.String)
androidx.lifecycle.ProcessLifecycleOwner: void activityPaused()
com.google.common.hash.HashCode$BytesHashCode: long padToLong()
kotlin.collections.EmptyMap: boolean containsKey(java.lang.Object)
io.sentry.adapters.SentryLevelSerializerAdapter: com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,com.google.gson.JsonSerializationContext)
com.google.gson.internal.$Gson$Types$WildcardTypeImpl: boolean equals(java.lang.Object)
androidx.fragment.app.DialogFragment: void onActivityCreated(android.os.Bundle)
androidx.fragment.app.Fragment: void onSaveInstanceState(android.os.Bundle)
com.google.gson.internal.bind.JsonTreeWriter: JsonTreeWriter()
com.google.android.gms.maps.CameraUpdateFactory: com.google.android.gms.maps.CameraUpdate zoomTo(float)
com.tekartik.sqflite.Database: java.lang.String getThreadLogPrefix()
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: boolean access$102(io.flutter.embedding.android.FlutterActivityAndFragmentDelegate,boolean)
com.google.gson.stream.JsonWriter: int peek()
androidx.arch.core.internal.SafeIterableMap$AscendingIterator: androidx.arch.core.internal.SafeIterableMap$Entry backward(androidx.arch.core.internal.SafeIterableMap$Entry)
kotlin.internal.PlatformImplementationsKt: int getJavaVersion()
kotlinx.coroutines.Empty: java.lang.String toString()
io.flutter.plugin.common.JSONMethodCodec: JSONMethodCodec()
com.google.android.gms.common.internal.BaseGmsClient: void onConnectionFailed(com.google.android.gms.common.ConnectionResult)
io.sentry.MainEventProcessor: void mergeUser(io.sentry.SentryBaseEvent)
io.sentry.transport.TransportResult: TransportResult(io.sentry.transport.TransportResult$1)
kotlinx.coroutines.CommonPool: int getParallelism()
androidx.lifecycle.LifecycleRegistry: void backwardPass(androidx.lifecycle.LifecycleOwner)
io.flutter.embedding.android.FlutterImageView: FlutterImageView(android.content.Context,int,int,io.flutter.embedding.android.FlutterImageView$SurfaceKind)
io.flutter.embedding.android.FlutterSurfaceView: void access$400(io.flutter.embedding.android.FlutterSurfaceView)
kotlinx.coroutines.internal.FastServiceLoader: java.lang.Object getProviderInstance(java.lang.String,java.lang.ClassLoader,java.lang.Class)
androidx.fragment.app.FragmentManagerImpl: void dispatchOnFragmentStopped(androidx.fragment.app.Fragment,boolean)
com.google.android.gms.maps.internal.zzg: void setMapType(int)
com.google.android.gms.maps.model.Marker: void hideInfoWindow()
io.sentry.SentryTracer: java.lang.Boolean isSampled()
io.sentry.android.core.util.RootChecker: RootChecker(android.content.Context,io.sentry.android.core.IBuildInfoProvider,io.sentry.ILogger,java.lang.String[],java.lang.String[],java.lang.Runtime)
com.google.gson.internal.bind.SqlDateTypeAdapter$1: SqlDateTypeAdapter$1()
androidx.collection.SimpleArrayMap: java.lang.String toString()
io.sentry.SentryEnvelope: io.sentry.SentryEnvelopeHeader getHeader()
com.google.android.gms.dynamite.zzd: java.lang.Object initialValue()
androidx.collection.SparseArrayCompat: java.lang.String toString()
com.tekartik.sqflite.SqlCommand: java.util.List getRawSqlArguments()
com.google.android.gms.dynamite.zzg: com.google.android.gms.dynamite.DynamiteModule$VersionPolicy$SelectionResult selectModule(android.content.Context,java.lang.String,com.google.android.gms.dynamite.DynamiteModule$VersionPolicy$IVersions)
io.sentry.adapters.SentryIdSerializerAdapter: SentryIdSerializerAdapter(io.sentry.SentryOptions)
kotlinx.coroutines.CancellableContinuationImpl: void detachChildIfNonResuable()
com.google.android.gms.common.api.GoogleApiActivity: void onCreate(android.os.Bundle)
io.sentry.Sentry: void pushScope()
com.google.android.gms.common.internal.zzm: void zza(com.google.android.gms.common.internal.GetServiceRequest,android.os.Parcel,int)
com.google.android.gms.common.api.CommonStatusCodes: java.lang.String getStatusCodeString(int)
kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp: LockFreeLinkedListNode$CondAddOp(kotlinx.coroutines.internal.LockFreeLinkedListNode)
com.google.common.reflect.TypeToken: com.google.common.reflect.TypeToken of(java.lang.reflect.Type)
io.flutter.embedding.engine.FlutterJNI: void updateSemantics(java.nio.ByteBuffer,java.lang.String[],java.nio.ByteBuffer[])
kotlin.jvm.internal.Intrinsics: void checkNotNullExpressionValue(java.lang.Object,java.lang.String)
io.flutter.embedding.engine.FlutterJNI: void runBundleAndSnapshotFromLibrary(java.lang.String,java.lang.String,java.lang.String,android.content.res.AssetManager,java.util.List)
io.sentry.SentryExceptionFactory: java.util.List getSentryExceptions(java.lang.Throwable)
io.sentry.protocol.SdkVersion: java.util.List getIntegrations()
com.google.android.gms.maps.model.Circle: void setStrokeWidth(float)
com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment: com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment self()
com.google.android.gms.common.api.Api$BaseClientBuilder: Api$BaseClientBuilder()
io.flutter.view.AccessibilityBridge$SemanticsNode: int access$2000(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.sentry.adapters.SentryIdDeserializerAdapter: java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext)
androidx.window.embedding.SplitPairRule: SplitPairRule(java.util.Set,boolean,boolean,boolean,int,int,float,int)
kotlinx.coroutines.flow.internal.SafeCollector: java.lang.StackTraceElement getStackTraceElement()
androidx.core.view.ViewCompat$3: ViewCompat$3(int,java.lang.Class,int,int)
kotlinx.coroutines.scheduling.CoroutineScheduler: void dispatch$default(kotlinx.coroutines.scheduling.CoroutineScheduler,java.lang.Runnable,kotlinx.coroutines.scheduling.TaskContext,boolean,int,java.lang.Object)
io.sentry.android.core.LifecycleWatcher$1: LifecycleWatcher$1(io.sentry.android.core.LifecycleWatcher)
io.sentry.protocol.SentryException: void setType(java.lang.String)
io.sentry.SentryBaseEvent: io.sentry.protocol.User getUser()
io.flutter.embedding.engine.dart.DartExecutor: void send(java.lang.String,java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply)
androidx.fragment.app.FragmentManagerImpl: androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator loadAnimation(androidx.fragment.app.Fragment,int,boolean,int)
androidx.window.layout.SidecarWindowBackend: void callbackRemovedForActivity(android.app.Activity)
io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder: io.flutter.embedding.engine.systemchannels.SettingsChannel$MessageBuilder setPlatformBrightness(io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness)
kotlinx.coroutines.internal.ThreadSafeHeap: kotlinx.coroutines.internal.ThreadSafeHeapNode removeFirstOrNull()
io.sentry.Session: java.util.Date getTimestamp()
io.sentry.SendFireAndForgetOutboxSender: SendFireAndForgetOutboxSender(io.sentry.SendCachedEnvelopeFireAndForgetIntegration$SendFireAndForgetDirPath)
com.google.common.collect.RegularImmutableSet: int hashCode()
com.google.android.gms.common.internal.zzf: void zzb(com.google.android.gms.common.ConnectionResult)
com.google.common.util.concurrent.AbstractFuture$Waiter: void setNext(com.google.common.util.concurrent.AbstractFuture$Waiter)
com.google.common.reflect.Types$1: Types$1()
io.sentry.util.Objects: java.lang.Object requireNonNull(java.lang.Object,java.lang.String)
com.google.android.gms.common.api.internal.TaskApiCall$Builder: com.google.android.gms.common.api.internal.TaskApiCall$Builder setFeatures(com.google.android.gms.common.Feature[])
com.google.android.gms.common.internal.zag: zag()
io.sentry.android.ndk.NativeScope: void nativeRemoveTag(java.lang.String)
androidx.savedstate.Recreator: Recreator(androidx.savedstate.SavedStateRegistryOwner)
com.google.common.collect.MapMaker: java.util.concurrent.ConcurrentMap makeMap()
io.flutter.embedding.engine.dart.DartExecutor: boolean isExecutingDart()
io.sentry.IHub: io.sentry.IHub clone()
com.google.android.gms.maps.model.PolygonOptions: com.google.android.gms.maps.model.PolygonOptions addAll(java.lang.Iterable)
kotlin.collections.MapsKt__MapsJVMKt: java.util.Map toSingletonMap(java.util.Map)
com.google.android.gms.common.internal.zau: zau()
androidx.window.layout.HardwareFoldingFeature: androidx.window.layout.HardwareFoldingFeature$Type getType$window_release()
com.google.gson.internal.bind.util.ISO8601Utils: boolean checkOffset(java.lang.String,int,char)
io.flutter.plugin.platform.PlatformPlugin$1: void showSystemUiMode(io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: void release()
androidx.window.embedding.SplitPairRule: boolean getFinishPrimaryWithSecondary()
io.sentry.SentryBaseEvent: void setRequest(io.sentry.protocol.Request)
io.sentry.protocol.DebugImage: java.lang.Long getImageSize()
io.flutter.embedding.android.FlutterActivity: void onRequestPermissionsResult(int,java.lang.String[],int[])
kotlin.text.StringsKt__IndentKt$getIndentFunction$2: java.lang.Object invoke(java.lang.Object)
com.google.common.io.Files$FilePredicate$1: boolean apply(java.lang.Object)
io.flutter.embedding.engine.renderer.FlutterRenderer: FlutterRenderer(io.flutter.embedding.engine.FlutterJNI)
com.google.gson.JsonObject: com.google.gson.JsonElement deepCopy()
com.google.common.base.Joiner: com.google.common.base.Joiner on(java.lang.String)
io.sentry.SentryOptions: io.sentry.SentryOptions$BeforeSendCallback getBeforeSend()
kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext: kotlinx.coroutines.internal.Symbol tryResumeReceive(java.lang.Object,kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp)
kotlinx.coroutines.JobKt__JobKt: void ensureActive(kotlin.coroutines.CoroutineContext)
kotlinx.coroutines.internal.LockFreeLinkedListNode: LockFreeLinkedListNode()
io.flutter.embedding.engine.FlutterJNI: void handlePlatformMessage(java.lang.String,java.nio.ByteBuffer,int,long)
com.google.gson.internal.bind.util.ISO8601Utils: java.lang.String format(java.util.Date,boolean,java.util.TimeZone)
com.google.common.collect.Lists: int lastIndexOfRandomAccess(java.util.List,java.lang.Object)
kotlinx.coroutines.UndispatchedMarker: kotlin.coroutines.CoroutineContext$Key getKey()
kotlinx.coroutines.DispatchedCoroutine: boolean tryResume()
io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry$ShimRegistrarAggregate: void onAttachedToEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
io.sentry.transport.RateLimiter$DataCategory: io.sentry.transport.RateLimiter$DataCategory[] values()
io.flutter.plugins.pathprovider.PathProviderPlugin: java.util.List getPathProviderExternalCacheDirectories()
io.flutter.plugin.editing.ListenableEditingState: int getComposingStart()
androidx.fragment.app.FragmentManagerViewModel: androidx.lifecycle.ViewModelStore getViewModelStore(androidx.fragment.app.Fragment)
io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler: EventChannel$IncomingStreamRequestHandler(io.flutter.plugin.common.EventChannel,io.flutter.plugin.common.EventChannel$StreamHandler)
io.sentry.protocol.Device: java.lang.Long getUsableMemory()
io.flutter.view.AccessibilityBridge: boolean shouldSetCollectionInfo(io.flutter.view.AccessibilityBridge$SemanticsNode)
com.google.android.gms.common.api.internal.zzd: android.os.Bundle zzb(com.google.android.gms.common.api.internal.zzd)
io.flutter.plugins.pathprovider.PathProviderPlugin$PathProviderPlatformThread: void getApplicationSupportDirectory(io.flutter.plugin.common.MethodChannel$Result)
io.sentry.UserFeedback: java.lang.String getName()
com.google.android.gms.common.internal.zzg: void zzb(com.google.android.gms.common.ConnectionResult)
com.google.common.collect.ImmutableCollection: java.lang.Object[] toArray(java.lang.Object[])
io.sentry.exception.InvalidSentryTraceHeaderException: InvalidSentryTraceHeaderException(java.lang.String)
com.google.common.base.MoreObjects$ToStringHelper$ValueHolder: MoreObjects$ToStringHelper$ValueHolder()
io.sentry.adapters.DateSerializerAdapter: DateSerializerAdapter(io.sentry.SentryOptions)
androidx.activity.OnBackPressedDispatcher$LifecycleOnBackPressedCancellable: OnBackPressedDispatcher$LifecycleOnBackPressedCancellable(androidx.activity.OnBackPressedDispatcher,androidx.lifecycle.Lifecycle,androidx.activity.OnBackPressedCallback)
androidx.window.layout.EmptyDecorator: EmptyDecorator()
com.google.common.collect.Maps$EntryFunction$2: Maps$EntryFunction$2(java.lang.String,int)
kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.StackTraceElement artificialFrame(java.lang.String)
com.google.common.hash.ChecksumHashFunction$ChecksumHasher: com.google.common.hash.HashCode hash()
androidx.window.layout.WindowLayoutInfo: java.util.List getDisplayFeatures()
com.google.common.base.Preconditions: void checkArgument(boolean,java.lang.String,int,int)
com.google.android.gms.common.api.internal.zzb: void onResume()
io.flutter.plugins.googlemaps.PolylineBuilder: void setEndCap(com.google.android.gms.maps.model.Cap)
com.tekartik.sqflite.operation.ExecuteOperation: java.lang.Boolean getInTransaction()
io.sentry.android.core.DefaultAndroidEventProcessor: DefaultAndroidEventProcessor(android.content.Context,io.sentry.ILogger,io.sentry.android.core.IBuildInfoProvider,io.sentry.android.core.util.RootChecker)
io.sentry.protocol.SdkVersion: io.sentry.protocol.SdkVersion updateSdkVersion(io.sentry.protocol.SdkVersion,java.lang.String,java.lang.String)
com.google.gson.internal.bind.JsonTreeWriter: com.google.gson.stream.JsonWriter endObject()
io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness: io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness[] values()
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin: void onDetachedFromEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
kotlinx.coroutines.EventLoopImplBase: boolean enqueueImpl(java.lang.Runnable)
kotlinx.coroutines.intrinsics.CancellableKt: void startCoroutineCancellable(kotlin.jvm.functions.Function2,java.lang.Object,kotlin.coroutines.Continuation,kotlin.jvm.functions.Function1)
com.google.common.collect.MapMakerInternalMap$KeySet: int size()
com.google.common.collect.RegularImmutableSet: RegularImmutableSet(java.lang.Object[],int,java.lang.Object[],int,int)
androidx.lifecycle.LiveData: void removeObserver(androidx.lifecycle.Observer)
com.google.android.gms.tasks.zzj: void zzd(com.google.android.gms.tasks.Task)
androidx.core.view.KeyEventDispatcher: boolean activitySuperDispatchKeyEventPre28(android.app.Activity,android.view.KeyEvent)
io.flutter.embedding.engine.FlutterJNI: io.flutter.embedding.engine.FlutterJNI nativeSpawn(long,java.lang.String,java.lang.String,java.lang.String,java.util.List)
androidx.fragment.app.FragmentController: void dispatchActivityCreated()
com.google.gson.stream.JsonWriter: boolean isLenient()
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: void destroy()
com.google.gson.JsonArray: java.lang.String getAsString()
com.google.android.gms.common.stats.ConnectionTracker: void unbindService(android.content.Context,android.content.ServiceConnection)
androidx.fragment.app.FragmentActivity$HostCallbacks: void onStartActivityFromFragment(androidx.fragment.app.Fragment,android.content.Intent,int,android.os.Bundle)
com.google.android.gms.internal.base.zac: android.os.Parcelable zaa(android.os.Parcel,android.os.Parcelable$Creator)
io.sentry.Sentry: void setCurrentHub(io.sentry.IHub)
com.google.android.gms.maps.model.PatternItem: PatternItem(int,java.lang.Float)
com.google.gson.internal.bind.ObjectTypeAdapter$1: com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$2: FlutterActivityAndFragmentDelegate$2(io.flutter.embedding.android.FlutterActivityAndFragmentDelegate,io.flutter.embedding.android.FlutterView)
androidx.core.view.WindowInsetsControllerCompat$Impl20: void setSystemUiFlag(int)
androidx.lifecycle.Lifecycle$State: androidx.lifecycle.Lifecycle$State valueOf(java.lang.String)
androidx.fragment.app.FragmentTransitionCompat21$3: void onTransitionEnd(android.transition.Transition)
kotlinx.coroutines.flow.AbstractFlow: AbstractFlow()
io.flutter.embedding.engine.FlutterJNI: void nativeMarkTextureFrameAvailable(long,long)
androidx.window.embedding.SplitRule: int getMinSmallestWidth()
com.google.gson.FieldNamingPolicy$2: FieldNamingPolicy$2(java.lang.String,int)
io.sentry.NoOpTransaction: java.util.List getSpans()
com.google.common.collect.RegularImmutableSet: int internalArrayEnd()
io.sentry.NoOpHub: void setExtra(java.lang.String,java.lang.String)
androidx.fragment.app.FragmentManagerImpl: androidx.fragment.app.FragmentManagerViewModel getChildNonConfig(androidx.fragment.app.Fragment)
com.google.android.gms.common.internal.safeparcel.SafeParcelReader: android.os.Bundle createBundle(android.os.Parcel,int)
com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
kotlinx.coroutines.scheduling.CoroutineScheduler: void dispatch(java.lang.Runnable,kotlinx.coroutines.scheduling.TaskContext,boolean)
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewResizeRequest: PlatformViewsChannel$PlatformViewResizeRequest(int,double,double)
io.sentry.NoOpSpan: boolean isFinished()
kotlinx.coroutines.scheduling.CoroutineScheduler: void shutdown(long)
kotlin.collections.EmptySet: boolean removeAll(java.util.Collection)
kotlinx.coroutines.internal.MainDispatchersKt: java.lang.Void throwMissingMainDispatcherException()
kotlinx.coroutines.JobSupport$Finishing: boolean isSealed()
io.flutter.plugin.common.StandardMessageCodec: void writeInt(java.io.ByteArrayOutputStream,int)
io.sentry.SpanId: SpanId()
io.flutter.plugins.flutter_plugin_android_lifecycle.FlutterAndroidLifecyclePlugin: void onAttachedToEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
kotlinx.coroutines.scheduling.NanoTimeSource: NanoTimeSource()
com.google.android.gms.maps.model.CameraPosition: com.google.android.gms.maps.model.CameraPosition$Builder builder()
com.google.android.gms.dynamite.zzl: zzl()
io.sentry.SentryOptions: int getMaxSpans()
io.flutter.plugins.googlemaps.Convert: int toInt(java.lang.Object)
com.google.common.base.Predicates$ObjectPredicate$4: java.lang.String toString()
kotlinx.coroutines.internal.DispatchedContinuation: DispatchedContinuation(kotlinx.coroutines.CoroutineDispatcher,kotlin.coroutines.Continuation)
androidx.window.layout.SidecarCompat: SidecarCompat(androidx.window.sidecar.SidecarInterface,androidx.window.layout.SidecarAdapter)
com.google.gson.internal.LinkedTreeMap$KeySet: boolean remove(java.lang.Object)
io.sentry.MainEventProcessor: void setEnvironment(io.sentry.SentryBaseEvent)
kotlin.text.StringsKt__StringsKt: void requireNonNegativeLimit(int)
io.flutter.view.AccessibilityBridge$3: void onChange(boolean)
com.google.gson.internal.bind.util.ISO8601Utils: void padInt(java.lang.StringBuilder,int,int)
androidx.window.embedding.ActivityFilter: int hashCode()
kotlinx.coroutines.internal.SystemPropsKt__SystemProps_commonKt: boolean systemProp(java.lang.String,boolean)
io.sentry.NoOpHub: io.sentry.ITransaction startTransaction(io.sentry.TransactionContext)
kotlin.text.StringsKt__StringsKt$splitToSequence$1: StringsKt__StringsKt$splitToSequence$1(java.lang.CharSequence)
com.google.common.util.concurrent.Futures: void addCallback(com.google.common.util.concurrent.ListenableFuture,com.google.common.util.concurrent.FutureCallback,java.util.concurrent.Executor)
com.google.gson.internal.bind.TypeAdapters$18: java.math.BigInteger read(com.google.gson.stream.JsonReader)
androidx.fragment.app.FragmentTransition: java.util.ArrayList configureEnteringExitingViews(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,androidx.fragment.app.Fragment,java.util.ArrayList,android.view.View)
com.tekartik.sqflite.operation.MethodCallOperation: MethodCallOperation(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.sentry.android.R: R()
io.sentry.android.core.EnvelopeFileObserver: void onEvent(int,java.lang.String)
androidx.fragment.app.BackStackRecord: boolean interactsWith(int)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextInputType: TextInputChannel$TextInputType(java.lang.String,int,java.lang.String)
io.flutter.view.AccessibilityBridge: AccessibilityBridge(android.view.View,io.flutter.embedding.engine.systemchannels.AccessibilityChannel,android.view.accessibility.AccessibilityManager,android.content.ContentResolver,io.flutter.plugin.platform.PlatformViewsAccessibilityDelegate)
kotlin.jvm.internal.FunctionReference: boolean equals(java.lang.Object)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: void onDestroyView()
io.flutter.embedding.engine.FlutterJNI: void dispatchPlatformMessage(java.lang.String,java.nio.ByteBuffer,int,int)
kotlinx.coroutines.internal.ThreadSafeHeap: boolean remove(kotlinx.coroutines.internal.ThreadSafeHeapNode)
androidx.fragment.app.FragmentTransitionCompat21: void setEpicenter(java.lang.Object,android.graphics.Rect)
com.google.common.collect.ImmutableList: boolean contains(java.lang.Object)
androidx.window.embedding.EmbeddingAdapter: EmbeddingAdapter()
io.sentry.android.core.DefaultAndroidEventProcessor: java.lang.Long getTotalExternalStorage(android.os.StatFs)
androidx.fragment.app.FragmentActivity: boolean onMenuItemSelected(int,android.view.MenuItem)
com.google.android.gms.signin.zaa: com.google.android.gms.common.api.Api$Client buildClient(android.content.Context,android.os.Looper,com.google.android.gms.common.internal.ClientSettings,java.lang.Object,com.google.android.gms.common.api.GoogleApiClient$ConnectionCallbacks,com.google.android.gms.common.api.GoogleApiClient$OnConnectionFailedListener)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivitySaveInstanceState(android.app.Activity,android.os.Bundle)
com.google.common.base.Predicates$ObjectPredicate: com.google.common.base.Predicate withNarrowedType()
io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness: io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness fromValue(java.lang.String)
io.flutter.plugin.platform.PlatformViewsController: void onDisplayOverlaySurface(int,int,int,int,int)
io.sentry.android.core.LifecycleWatcher: LifecycleWatcher(io.sentry.IHub,long,boolean,boolean)
com.google.gson.internal.LinkedHashTreeMap: void replaceInParent(com.google.gson.internal.LinkedHashTreeMap$Node,com.google.gson.internal.LinkedHashTreeMap$Node)
io.sentry.NoOpHub: io.sentry.protocol.SentryId getLastEventId()
com.google.android.gms.tasks.zzw: boolean isComplete()
androidx.fragment.app.Fragment: void noteStateNotSaved()
kotlin.text.StringsKt__StringsKt: kotlin.Pair access$findAnyOf(java.lang.CharSequence,java.util.Collection,int,boolean,boolean)
com.google.common.hash.Murmur3_128HashFunction: Murmur3_128HashFunction(int)
io.flutter.view.AccessibilityBridge: io.flutter.view.AccessibilityBridge$SemanticsNode access$6600(io.flutter.view.AccessibilityBridge,int)
androidx.fragment.app.FragmentManagerImpl: void noteStateNotSaved()
kotlinx.coroutines.StandaloneCoroutine: StandaloneCoroutine(kotlin.coroutines.CoroutineContext,boolean)
com.google.common.hash.LittleEndianByteArray$UnsafeByteArray: long getLongLittleEndian(byte[],int)
com.google.android.gms.maps.internal.zzg: void setOnCameraIdleListener(com.google.android.gms.maps.internal.zzp)
com.google.common.util.concurrent.internal.InternalFutures: java.lang.Throwable tryInternalFastPathGetFailure(com.google.common.util.concurrent.internal.InternalFutureFailureAccess)
io.sentry.MainEventProcessor: void setExceptions(io.sentry.SentryEvent)
androidx.core.util.LogWriter: void close()
com.google.android.gms.common.api.internal.zabq: boolean zaA()
io.sentry.NoOpSpan: NoOpSpan()
com.google.android.gms.common.util.PlatformVersion: boolean isAtLeastR()
io.sentry.SentryOptions: boolean isAttachThreads()
io.sentry.NoOpTransaction: io.sentry.ISpan startChild(java.lang.String)
androidx.fragment.app.FragmentState: int describeContents()
io.flutter.embedding.android.FlutterTextureView: void access$400(io.flutter.embedding.android.FlutterTextureView)
io.sentry.transport.RateLimiter: io.sentry.SentryEnvelope filter(io.sentry.SentryEnvelope,java.lang.Object)
kotlin.Result$Failure: boolean equals(java.lang.Object)
com.google.gson.JsonArray: void add(java.lang.Boolean)
io.sentry.EnvelopeSender: boolean isRelevantFileName(java.lang.String)
com.google.android.gms.common.internal.zav: com.google.android.gms.common.ConnectionResult zaa()
com.google.common.collect.MapMakerInternalMap$WriteThroughEntry: java.lang.Object getKey()
kotlinx.coroutines.internal.ArrayQueue: void addLast(java.lang.Object)
io.sentry.protocol.Mechanism: java.util.Map getData()
io.sentry.adapters.DateSerializerAdapter: com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,com.google.gson.JsonSerializationContext)
androidx.window.layout.SidecarCompat$DistinctElementCallback: void onWindowLayoutChanged(android.app.Activity,androidx.window.layout.WindowLayoutInfo)
com.google.gson.internal.$Gson$Types: java.lang.reflect.Type resolveTypeVariable(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.TypeVariable)
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: java.lang.Long access$100(io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors,android.view.accessibility.AccessibilityNodeInfo)
com.google.android.gms.common.internal.zzt: android.content.Intent zzc(java.lang.String)
kotlin.text.StringsKt__StringsJVMKt: boolean startsWith(java.lang.String,java.lang.String,boolean)
kotlinx.coroutines.flow.AbstractFlow$collect$1: java.lang.Object invokeSuspend(java.lang.Object)
io.sentry.SynchronizedQueue: java.lang.Object remove()
androidx.core.app.NotificationCompat$Action: boolean getAllowGeneratedReplies()
com.tekartik.sqflite.operation.MethodCallOperation$Result: void error(java.lang.String,java.lang.String,java.lang.Object)
com.google.android.gms.maps.model.Marker: void setFlat(boolean)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutator: FlutterMutatorsStack$FlutterMutator(io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack,android.graphics.Rect,float[])
androidx.core.os.LocaleListPlatformWrapper: java.util.Locale get(int)
io.sentry.SentryBaseEvent: java.lang.String getPlatform()
androidx.versionedparcelable.VersionedParcel: android.os.Parcelable readParcelable(android.os.Parcelable,int)
com.google.android.gms.common.api.internal.zabq: com.google.android.gms.common.api.internal.ApiKey zag(com.google.android.gms.common.api.internal.zabq)
com.google.android.gms.common.internal.safeparcel.SafeParcelReader: double readDouble(android.os.Parcel,int)
androidx.collection.ContainerHelpers: int idealByteArraySize(int)
com.google.common.base.Predicates$ObjectPredicate: boolean apply(java.lang.Object)
io.sentry.protocol.DebugImage: java.lang.String getDebugId()
kotlinx.coroutines.channels.AbstractSendChannel: java.lang.Object offerInternal(java.lang.Object)
io.flutter.plugins.googlemaps.PolygonBuilder: void setPoints(java.util.List)
kotlinx.coroutines.InvokeOnCompletion: InvokeOnCompletion(kotlin.jvm.functions.Function1)
io.sentry.transport.AsyncHttpTransport$AsyncConnectionThreadFactory: java.lang.Thread newThread(java.lang.Runnable)
io.flutter.util.PathUtils: java.lang.String getCacheDirectory(android.content.Context)
com.google.common.reflect.Types$GenericArrayTypeImpl: java.lang.reflect.Type getGenericComponentType()
io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler: void onMessage(java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply)
io.flutter.plugins.googlemaps.CircleBuilder: void setVisible(boolean)
kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: ExperimentalCoroutineDispatcher(int,int,java.lang.String)
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry: boolean access$100(io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry)
androidx.window.embedding.EmbeddingBackend: void setSplitRules(java.util.Set)
io.sentry.SentryOptions: int getMaxQueueSize()
io.sentry.NoOpHub: void clearBreadcrumbs()
io.flutter.embedding.android.FlutterTextureView: boolean access$002(io.flutter.embedding.android.FlutterTextureView,boolean)
io.sentry.SentryClient: io.sentry.SentryEvent processEvent(io.sentry.SentryEvent,java.lang.Object,java.util.List)
io.sentry.Hub: void assignTraceContext(io.sentry.SentryEvent)
io.sentry.NoOpLogger: io.sentry.NoOpLogger getInstance()
io.flutter.embedding.engine.renderer.FlutterRenderer: void startRenderingToSurface(android.view.Surface,boolean)
com.google.android.gms.common.util.DeviceProperties: boolean zzb(android.content.Context)
com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter: void write(com.google.gson.stream.JsonWriter,java.util.Collection)
io.flutter.plugins.googlemaps.Convert: java.lang.Object polygonIdToJson(java.lang.String)
com.google.android.gms.common.api.internal.zaag: zaag(java.lang.String)
com.google.gson.JsonSyntaxException: JsonSyntaxException(java.lang.String,java.lang.Throwable)
io.sentry.NoOpEnvelopeReader: io.sentry.NoOpEnvelopeReader getInstance()
kotlinx.coroutines.scheduling.GlobalQueue: GlobalQueue()
androidx.arch.core.internal.SafeIterableMap$AscendingIterator: SafeIterableMap$AscendingIterator(androidx.arch.core.internal.SafeIterableMap$Entry,androidx.arch.core.internal.SafeIterableMap$Entry)
androidx.savedstate.SavedStateRegistryController: void performRestore(android.os.Bundle)
com.google.common.util.concurrent.AbstractFuture: void releaseWaiters()
androidx.window.layout.SidecarCompat$Companion: SidecarCompat$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
io.flutter.view.AccessibilityBridge$SemanticsNode: float access$5300(io.flutter.view.AccessibilityBridge$SemanticsNode)
com.google.gson.internal.bind.DateTypeAdapter$1: com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken)
com.google.android.gms.maps.model.zzf: java.lang.Object[] newArray(int)
io.sentry.protocol.SentryStackFrame: void setFramesOmitted(java.util.List)
com.google.android.gms.common.api.internal.zah: void zag(com.google.android.gms.common.api.internal.zaad,boolean)
io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler$EventSinkImplementation: void success(java.lang.Object)
io.sentry.cache.CacheStrategy: void $closeResource(java.lang.Throwable,java.lang.AutoCloseable)
io.sentry.android.core.DefaultAndroidEventProcessor: java.lang.Long getUnusedExternalStorage(android.os.StatFs)
com.google.android.gms.common.internal.safeparcel.SafeParcelReader: byte readByte(android.os.Parcel,int)
androidx.window.embedding.ExtensionEmbeddingBackend$Companion: ExtensionEmbeddingBackend$Companion()
io.sentry.adapters.DateDeserializerAdapter: java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext)
com.google.android.gms.common.internal.zal: void zac()
com.google.android.gms.maps.internal.zzac: boolean zza(int,android.os.Parcel,android.os.Parcel,int)
io.flutter.view.AccessibilityBridge$SemanticsNode: int access$6200(io.flutter.view.AccessibilityBridge$SemanticsNode)
kotlinx.coroutines.BuildersKt__Builders_commonKt: kotlinx.coroutines.Job launch$default(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2,int,java.lang.Object)
io.flutter.embedding.android.FlutterTextureView$1: boolean onSurfaceTextureDestroyed(android.graphics.SurfaceTexture)
kotlinx.coroutines.JobSupport$addLastAtomic$$inlined$addLastIf$1: java.lang.Object prepare(kotlinx.coroutines.internal.LockFreeLinkedListNode)
io.sentry.NoOpTransaction: void setTag(java.lang.String,java.lang.String)
androidx.versionedparcelable.VersionedParcel: java.lang.reflect.Method getReadMethod(java.lang.String)
com.google.android.gms.maps.zzag: void onStop()
com.google.android.gms.common.internal.GetServiceRequest: java.lang.String zza()
kotlinx.coroutines.EventLoop: boolean isUnconfinedQueueEmpty()
io.sentry.protocol.SentryTransaction: java.lang.String getTransaction()
com.google.gson.internal.bind.TypeAdapters$35$1: TypeAdapters$35$1(com.google.gson.internal.bind.TypeAdapters$35,java.lang.Class)
io.flutter.plugin.platform.PlatformViewsController$1: void onTouch(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewTouch)
com.google.gson.Gson$2: java.lang.Object read(com.google.gson.stream.JsonReader)
com.google.gson.FieldNamingPolicy$5: FieldNamingPolicy$5(java.lang.String,int)
io.sentry.transport.RateLimiter: void applyRetryAfterOnlyIfLonger(io.sentry.transport.RateLimiter$DataCategory,java.util.Date)
kotlinx.coroutines.CoroutineDispatcher: void releaseInterceptedContinuation(kotlin.coroutines.Continuation)
io.sentry.CustomSamplingContext: java.lang.Object get(java.lang.String)
com.google.android.gms.common.internal.zzo: void zzg(java.lang.String)
kotlinx.coroutines.BuildersKt: kotlinx.coroutines.Job launch$default(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2,int,java.lang.Object)
kotlin.coroutines.intrinsics.CoroutineSingletons: kotlin.coroutines.intrinsics.CoroutineSingletons[] values()
com.google.android.gms.common.zzj: byte[] zzf()
androidx.window.embedding.SplitPlaceholderRule: android.content.Intent getPlaceholderIntent()
androidx.window.layout.HardwareFoldingFeature$Type$Companion: HardwareFoldingFeature$Type$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
com.google.android.gms.maps.zzy: zzy(com.google.android.gms.maps.GoogleMap,com.google.android.gms.maps.GoogleMap$OnMapClickListener)
kotlinx.coroutines.scheduling.WorkQueue: kotlinx.coroutines.scheduling.Task add(kotlinx.coroutines.scheduling.Task,boolean)
com.google.android.gms.maps.zzag: zzag(android.view.ViewGroup,com.google.android.gms.maps.internal.IMapViewDelegate)
io.sentry.protocol.Device: java.lang.String[] getArchs()
io.sentry.android.core.AndroidTransportGate: boolean isConnected()
androidx.lifecycle.MutableLiveData: void setValue(java.lang.Object)
com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$Waiter access$800(com.google.common.util.concurrent.AbstractFuture)
com.google.common.base.Joiner$1: com.google.common.base.Joiner useForNull(java.lang.String)
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$7: java.lang.Object invoke(java.lang.Object)
com.google.android.gms.common.internal.safeparcel.SafeParcelWriter: void writeIntegerObject(android.os.Parcel,int,java.lang.Integer,boolean)
io.sentry.SystemOutLogger: java.lang.String captureStackTrace(java.lang.Throwable)
com.google.android.gms.common.api.internal.GoogleApiManager: long zac(com.google.android.gms.common.api.internal.GoogleApiManager)
androidx.collection.MapCollections$MapIterator: java.lang.Object next()
io.flutter.plugin.platform.PlatformViewsController: android.content.Context access$200(io.flutter.plugin.platform.PlatformViewsController)
io.sentry.Sentry: void setTag(java.lang.String,java.lang.String)
androidx.collection.MapCollections$KeySet: java.lang.Object[] toArray()
com.google.android.gms.common.internal.safeparcel.SafeParcelWriter: void writeFloat(android.os.Parcel,int,float)
com.google.android.gms.maps.UiSettings: void setZoomGesturesEnabled(boolean)
com.google.android.gms.common.internal.safeparcel.SafeParcelWriter: void writeLong(android.os.Parcel,int,long)
androidx.fragment.app.Fragment: void setNextAnim(int)
androidx.fragment.app.FragmentManagerImpl: void cleanupExec()
androidx.window.layout.SidecarCompat: void onWindowLayoutChangeListenerRemoved(android.app.Activity)
io.sentry.Dsn: java.net.URI getSentryUri()
androidx.core.view.OneShotPreDrawListener: boolean onPreDraw()
com.google.android.gms.dynamite.zza: void run()
com.google.gson.internal.LinkedHashTreeMap: void clear()
kotlinx.coroutines.DispatchedTask: java.lang.Object getSuccessfulResult$kotlinx_coroutines_core(java.lang.Object)
com.google.gson.DefaultDateTypeAdapter: DefaultDateTypeAdapter(java.lang.Class,int,int)
androidx.fragment.app.FragmentManagerImpl: android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: java.lang.String maybeGetInitialRouteFromIntent(android.content.Intent)
com.google.common.collect.Iterators$9: Iterators$9(java.lang.Object)
io.flutter.plugins.googlemaps.GoogleMapController: void setTrackCameraPosition(boolean)
androidx.window.embedding.ActivityStack: boolean isEmpty()
io.flutter.plugin.platform.PlatformPlugin$1: java.lang.CharSequence getClipboardData(io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat)
kotlin.collections.CollectionsKt___CollectionsKt: java.lang.Appendable joinTo(java.lang.Iterable,java.lang.Appendable,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,int,java.lang.CharSequence,kotlin.jvm.functions.Function1)
kotlin.coroutines.EmptyCoroutineContext: int hashCode()
android.support.v4.graphics.drawable.IconCompatParcelizer: androidx.core.graphics.drawable.IconCompat read(androidx.versionedparcelable.VersionedParcel)
io.flutter.plugin.common.BasicMessageChannel$IncomingMessageHandler: BasicMessageChannel$IncomingMessageHandler(io.flutter.plugin.common.BasicMessageChannel,io.flutter.plugin.common.BasicMessageChannel$MessageHandler,io.flutter.plugin.common.BasicMessageChannel$1)
kotlinx.coroutines.EventLoopImplBase: int scheduleImpl(long,kotlinx.coroutines.EventLoopImplBase$DelayedTask)
com.google.android.gms.common.api.internal.zacd: com.google.android.gms.common.internal.ConnectionTelemetryConfiguration zab(com.google.android.gms.common.api.internal.zabq,com.google.android.gms.common.internal.BaseGmsClient,int)
com.google.android.gms.internal.maps.zzv: void zzr(boolean)
io.flutter.plugins.googlemaps.Convert: int toPixels(java.lang.Object,float)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: void onTrimMemory(int)
io.sentry.NoOpTransaction: void setOperation(java.lang.String)
com.google.common.hash.LittleEndianByteArray$UnsafeByteArray$1: long getLongLittleEndian(byte[],int)
com.google.gson.JsonElement: JsonElement()
io.sentry.protocol.Request: void setData(java.lang.Object)
io.sentry.protocol.DebugImage: java.lang.String getImageAddr()
io.sentry.android.ndk.DebugImagesLoader: java.util.List loadDebugImages()
io.sentry.ISpan: void finish()
com.google.common.collect.ImmutableList: boolean addAll(int,java.util.Collection)
kotlinx.coroutines.internal.FastServiceLoaderKt: boolean getANDROID_DETECTED()
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.String access$6100(io.flutter.view.AccessibilityBridge$SemanticsNode)
com.google.gson.stream.JsonWriter: void beforeValue()
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: boolean has(java.lang.Class)
io.sentry.SentryClient$SortBreadcrumbsByDate: SentryClient$SortBreadcrumbsByDate(io.sentry.SentryClient$1)
com.google.android.gms.maps.model.CameraPosition: java.lang.String toString()
androidx.fragment.app.FragmentTransitionImpl$3: FragmentTransitionImpl$3(androidx.fragment.app.FragmentTransitionImpl,java.util.ArrayList,java.util.Map)
io.sentry.cache.EnvelopeCache: EnvelopeCache(io.sentry.SentryOptions,java.lang.String,int)
io.sentry.android.core.ActivityLifecycleIntegration: void onActivityStopped(android.app.Activity)
com.google.common.util.concurrent.CycleDetectingLockFactory$1: CycleDetectingLockFactory$1()
kotlinx.coroutines.AbstractCoroutine: AbstractCoroutine(kotlin.coroutines.CoroutineContext,boolean,boolean)
androidx.fragment.app.FragmentController: boolean dispatchPrepareOptionsMenu(android.view.Menu)
androidx.collection.SparseArrayCompat: java.lang.Object valueAt(int)
androidx.collection.SimpleArrayMap: java.lang.Object remove(java.lang.Object)
com.google.common.collect.MapMakerInternalMap$Segment: com.google.common.collect.MapMakerInternalMap$InternalEntry getEntry(java.lang.Object,int)
io.flutter.plugin.platform.PlatformPlugin: void access$100(io.flutter.plugin.platform.PlatformPlugin,int)
io.sentry.android.core.AndroidLogger: void log(io.sentry.SentryLevel,java.lang.String,java.lang.Throwable)
io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsRegionalIndicator(int)
io.flutter.embedding.engine.FlutterJNI: void dispatchSemanticsAction(int,io.flutter.view.AccessibilityBridge$Action)
androidx.loader.app.LoaderManagerImpl$LoaderInfo: void onActive()
io.flutter.plugins.googlemaps.PolygonBuilder: void setFillColor(int)
io.sentry.transport.TransportResult: io.sentry.transport.TransportResult error(int)
io.sentry.android.core.DefaultAndroidEventProcessor: int getBlockCountDep(android.os.StatFs)
io.flutter.plugins.googlemaps.GoogleMapController: void setMinMaxZoomPreference(java.lang.Float,java.lang.Float)
io.sentry.android.core.DefaultAndroidEventProcessor: android.os.StatFs getExternalStorageStat(java.io.File)
com.google.common.hash.AbstractStreamingHasher: AbstractStreamingHasher(int)
io.sentry.android.core.NdkIntegration: java.lang.Class getSentryNdkClass()
com.google.common.hash.LittleEndianByteArray$UnsafeByteArray: com.google.common.hash.LittleEndianByteArray$UnsafeByteArray valueOf(java.lang.String)
com.google.android.gms.common.api.internal.zzd: void onActivityResult(int,int,android.content.Intent)
io.sentry.protocol.SentryThread: void setStacktrace(io.sentry.protocol.SentryStackTrace)
com.tekartik.sqflite.SqflitePlugin: boolean access$400(com.tekartik.sqflite.SqflitePlugin,com.tekartik.sqflite.Database,com.tekartik.sqflite.operation.Operation)
io.sentry.config.PropertiesProvider: java.lang.Boolean getBooleanProperty(java.lang.String)
io.sentry.Hub: void close()
androidx.window.embedding.SplitController: void access$setStaticSplitRules(androidx.window.embedding.SplitController,java.util.Set)
io.sentry.UncaughtExceptionHandler$Adapter: UncaughtExceptionHandler$Adapter()
com.tekartik.sqflite.operation.MethodCallOperation$Result: void success(java.lang.Object)
com.google.android.gms.dynamite.zzn: zzn()
com.google.android.gms.maps.UiSettings: boolean isZoomGesturesEnabled()
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: void onActivityResult(int,int,android.content.Intent)
kotlinx.coroutines.CancelHandler: CancelHandler()
io.sentry.protocol.SentryStackTrace: SentryStackTrace(java.util.List)
io.sentry.SentryOptions: java.util.Set getIgnoredExceptionsForType()
com.google.android.gms.maps.internal.zzl: com.google.android.gms.dynamic.IObjectWrapper getView()
com.google.android.gms.maps.internal.zzby: boolean isMyLocationButtonEnabled()
io.flutter.view.AccessibilityBridge$TextDirection: AccessibilityBridge$TextDirection(java.lang.String,int)
com.google.android.gms.maps.GoogleMap: void setOnMarkerClickListener(com.google.android.gms.maps.GoogleMap$OnMarkerClickListener)
androidx.lifecycle.ViewModelStore: void clear()
kotlinx.coroutines.JobSupport: void handleOnCompletionException$kotlinx_coroutines_core(java.lang.Throwable)
io.flutter.embedding.android.TransparencyMode: io.flutter.embedding.android.TransparencyMode[] values()
com.google.gson.GsonBuilder: com.google.gson.GsonBuilder registerTypeAdapter(java.lang.reflect.Type,java.lang.Object)
io.flutter.view.AccessibilityBridge: android.content.ContentResolver access$1000(io.flutter.view.AccessibilityBridge)
io.sentry.SentryOptions: void setServerName(java.lang.String)
io.sentry.cache.CacheStrategy: io.sentry.Session getFirstSession(io.sentry.SentryEnvelope)
com.google.gson.internal.bind.TypeAdapters$13: void write(com.google.gson.stream.JsonWriter,java.lang.Number)
com.google.gson.JsonSerializer: com.google.gson.JsonElement serialize(java.lang.Object,java.lang.reflect.Type,com.google.gson.JsonSerializationContext)
io.flutter.embedding.engine.dart.DartExecutor: io.flutter.embedding.engine.dart.DartExecutor$IsolateServiceIdListener access$100(io.flutter.embedding.engine.dart.DartExecutor)
com.google.gson.internal.LinkedHashTreeMap$Node: com.google.gson.internal.LinkedHashTreeMap$Node first()
io.sentry.android.core.MainLooperHandler: java.lang.Thread getThread()
io.sentry.DateUtils: java.util.Date getDateTime(long)
androidx.fragment.app.FragmentHostCallback: int onGetWindowAnimations()
com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter: void write(com.google.gson.stream.JsonWriter,java.util.Map)
com.google.gson.JsonPrimitive: long getAsLong()
com.google.android.gms.maps.UiSettings: boolean isCompassEnabled()
androidx.fragment.app.FragmentTransaction$Op: FragmentTransaction$Op(int,androidx.fragment.app.Fragment)
io.sentry.protocol.Device$DeviceOrientation: io.sentry.protocol.Device$DeviceOrientation valueOf(java.lang.String)
io.flutter.plugins.googlemaps.CircleBuilder: CircleBuilder(float)
com.google.common.io.Files$FilePredicate: com.google.common.io.Files$FilePredicate[] values()
androidx.savedstate.SavedStateRegistryController: SavedStateRegistryController(androidx.savedstate.SavedStateRegistryOwner)
com.google.gson.internal.bind.DateTypeAdapter: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
io.flutter.plugins.googlemaps.PolylinesController: void changePolyline(java.lang.Object)
io.sentry.SentryEnvelopeHeaderAdapter: SentryEnvelopeHeaderAdapter()
androidx.lifecycle.LifecycleRegistry: androidx.lifecycle.Lifecycle$Event upEvent(androidx.lifecycle.Lifecycle$State)
io.flutter.plugin.platform.VirtualDisplayController: io.flutter.plugin.platform.VirtualDisplayController create(android.content.Context,io.flutter.plugin.platform.AccessibilityEventsDelegate,io.flutter.plugin.platform.PlatformViewFactory,io.flutter.view.TextureRegistry$SurfaceTextureEntry,int,int,int,java.lang.Object,android.view.View$OnFocusChangeListener)
androidx.versionedparcelable.VersionedParcel: void writeVersionedParcelableCreator(androidx.versionedparcelable.VersionedParcelable)
com.google.android.gms.common.internal.safeparcel.SafeParcelReader: int readHeader(android.os.Parcel)
com.google.android.gms.maps.internal.zze: com.google.android.gms.maps.internal.IMapViewDelegate zzg(com.google.android.gms.dynamic.IObjectWrapper,com.google.android.gms.maps.GoogleMapOptions)
com.google.gson.stream.JsonWriter: com.google.gson.stream.JsonWriter value(java.lang.Boolean)
kotlinx.coroutines.channels.AbstractSendChannel: kotlinx.coroutines.internal.LockFreeLinkedListHead getQueue()
io.sentry.SentryOptions: java.lang.Boolean getEnableUncaughtExceptionHandler()
com.google.android.gms.common.internal.Objects$ToStringHelper: java.lang.String toString()
androidx.fragment.app.FragmentManagerImpl: void makeInactive(androidx.fragment.app.Fragment)
io.sentry.SystemOutLogger: boolean isEnabled(io.sentry.SentryLevel)
com.google.common.collect.MapMakerInternalMap$Segment: void postReadCleanup()
com.google.common.hash.BloomFilterStrategies$1: BloomFilterStrategies$1(java.lang.String,int)
com.google.gson.JsonArray: long getAsLong()
com.google.gson.internal.bind.ObjectTypeAdapter: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
com.google.common.base.Strings: java.lang.String lenientToString(java.lang.Object)
io.flutter.embedding.engine.renderer.FlutterRenderer: boolean isSoftwareRenderingEnabled()
kotlinx.coroutines.CompletionStateKt: java.lang.Object toState$default(java.lang.Object,kotlin.jvm.functions.Function1,int,java.lang.Object)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding: void addRequestPermissionsResultListener(io.flutter.plugin.common.PluginRegistry$RequestPermissionsResultListener)
androidx.fragment.app.Fragment: boolean getAllowReturnTransitionOverlap()
io.sentry.SpanContext: void setSampled(java.lang.Boolean)
io.flutter.embedding.engine.FlutterJNI: java.lang.String[] computePlatformResolvedLocale(java.lang.String[])
com.google.android.gms.common.api.internal.zabq: java.util.Map zah()
kotlinx.coroutines.NonDisposableHandle: void dispose()
com.google.android.gms.common.api.Status: boolean equals(java.lang.Object)
com.google.common.collect.MapMakerInternalMap$HashIterator: void remove()
kotlin.coroutines.CombinedContext: CombinedContext(kotlin.coroutines.CoroutineContext,kotlin.coroutines.CoroutineContext$Element)
io.flutter.plugins.googlemaps.MarkersController: java.lang.String getMarkerId(java.lang.Object)
io.sentry.OutboxSender: void logUnexpectedEventId(io.sentry.SentryEnvelope,io.sentry.protocol.SentryId,int)
io.flutter.plugin.platform.PlatformPlugin$1: void popSystemNavigator()
com.google.android.gms.maps.model.PolylineOptions: boolean isGeodesic()
io.sentry.protocol.SentryException: void setModule(java.lang.String)
io.flutter.embedding.android.FlutterView: void attachToFlutterEngine(io.flutter.embedding.engine.FlutterEngine)
com.google.android.gms.common.internal.GmsClientSupervisor: int getDefaultBindFlags()
io.sentry.android.core.util.RootChecker: RootChecker(android.content.Context,io.sentry.android.core.IBuildInfoProvider,io.sentry.ILogger)
kotlinx.coroutines.DispatcherExecutor: java.lang.String toString()
io.sentry.android.core.SentryAndroidOptions: boolean isEnableActivityLifecycleBreadcrumbs()
io.sentry.SentryOptions: void setCacheDirSize(int)
io.sentry.android.ndk.NativeScope: void removeUser()
io.sentry.SentryOptions: void addInAppExclude(java.lang.String)
io.sentry.android.core.DefaultAndroidEventProcessor: java.util.TimeZone getTimeZone()
io.sentry.protocol.SdkInfo: java.lang.String getSdkName()
io.flutter.embedding.engine.FlutterJNI: void asyncWaitForVsync(long)
kotlinx.coroutines.CancellableContinuationImpl: kotlin.coroutines.Continuation getDelegate$kotlinx_coroutines_core()
com.google.gson.JsonNull: JsonNull()
androidx.activity.ComponentActivity: void access$001(androidx.activity.ComponentActivity)
kotlinx.coroutines.CommonPool: void close()
com.google.gson.internal.bind.TypeAdapters$22: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
io.flutter.plugins.googlemaps.MarkersController: void hideMarkerInfoWindow(java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
com.google.android.gms.common.internal.zze: void onServiceDisconnected(android.content.ComponentName)
com.google.common.collect.Maps$EntryFunction: com.google.common.collect.Maps$EntryFunction valueOf(java.lang.String)
io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry$ShimRegistrarAggregate: ShimPluginRegistry$ShimRegistrarAggregate(io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry$1)
io.sentry.SentryOptions: io.sentry.SentryOptions$BeforeBreadcrumbCallback getBeforeBreadcrumb()
androidx.fragment.app.Fragment: void onInflate(android.content.Context,android.util.AttributeSet,android.os.Bundle)
com.google.gson.TypeAdapter: java.lang.String toJson(java.lang.Object)
io.sentry.Scope: void clearTransaction()
io.sentry.Breadcrumb: Breadcrumb(io.sentry.Breadcrumb)
io.flutter.embedding.engine.dart.DartExecutor: void send(java.lang.String,java.nio.ByteBuffer)
io.sentry.Session: java.lang.Long getSequence()
kotlinx.coroutines.EventLoop: boolean processUnconfinedEvent()
androidx.fragment.app.FragmentTransition: java.lang.Object getEnterTransition(androidx.fragment.app.FragmentTransitionImpl,androidx.fragment.app.Fragment,boolean)
com.google.gson.Gson$5: java.lang.Object read(com.google.gson.stream.JsonReader)
io.flutter.plugins.googlemaps.PolylineBuilder: void setPoints(java.util.List)
io.flutter.embedding.android.RenderMode: RenderMode(java.lang.String,int)
kotlinx.coroutines.internal.LockFreeTaskQueue: void close()
androidx.fragment.app.Fragment: androidx.fragment.app.Fragment getParentFragment()
io.sentry.Session: void setInitAsTrue()
io.flutter.plugin.editing.FlutterTextUtils: boolean isEmojiModifierBase(int)
io.sentry.Sentry: io.sentry.protocol.SentryId captureException(java.lang.Throwable)
androidx.collection.ArraySet: java.util.Iterator iterator()
com.google.android.gms.common.GoogleSignatureVerifier: GoogleSignatureVerifier(android.content.Context)
com.google.android.gms.signin.internal.zak: com.google.android.gms.common.ConnectionResult zaa()
androidx.window.layout.WindowMetrics: android.graphics.Rect getBounds()
com.google.common.util.concurrent.AbstractFuture$Listener: AbstractFuture$Listener(java.lang.Runnable,java.util.concurrent.Executor)
androidx.window.core.Version: Version(int,int,int,java.lang.String)
com.google.common.hash.HashCode$BytesHashCode: boolean equalsSameBits(com.google.common.hash.HashCode)
io.sentry.android.core.DefaultAndroidEventProcessor: java.lang.Float getBatteryTemperature(android.content.Intent)
io.flutter.plugins.googlemaps.CircleBuilder: void setFillColor(int)
io.sentry.ISentryClient: void captureSession(io.sentry.Session,java.lang.Object)
kotlinx.coroutines.JobSupport: void onCancelling(java.lang.Throwable)
kotlinx.coroutines.CoroutineName$Key: CoroutineName$Key()
io.sentry.SynchronizedCollection: boolean equals(java.lang.Object)
com.google.android.gms.internal.base.zaa: android.os.IBinder asBinder()
io.flutter.embedding.engine.renderer.FlutterRenderer: void unregisterTexture(long)
com.google.android.gms.maps.model.MarkerOptions: com.google.android.gms.maps.model.MarkerOptions draggable(boolean)
kotlinx.coroutines.ExecutorCoroutineDispatcherImpl: int hashCode()
io.flutter.embedding.android.FlutterSplashView$SavedState$1: java.lang.Object createFromParcel(android.os.Parcel)
kotlinx.coroutines.JobSupport: void parentCancelled(kotlinx.coroutines.ParentJob)
kotlinx.coroutines.internal.MainDispatchersKt: kotlinx.coroutines.MainCoroutineDispatcher tryCreateDispatcher(kotlinx.coroutines.internal.MainDispatcherFactory,java.util.List)
androidx.fragment.app.FragmentTransitionCompat21$4: FragmentTransitionCompat21$4(androidx.fragment.app.FragmentTransitionCompat21,android.graphics.Rect)
com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper: MapMakerInternalMap$StrongKeyStrongValueEntry$Helper()
androidx.lifecycle.ViewModel: void onCleared()
com.google.android.gms.maps.model.CircleOptions: double getRadius()
kotlin.collections.EmptyMap: java.lang.Object put(java.lang.Object,java.lang.Object)
io.sentry.ISentryExecutorService: java.util.concurrent.Future submit(java.lang.Runnable)
androidx.collection.MapCollections$ValuesCollection: int size()
androidx.window.layout.WindowBackend: void unregisterLayoutChangeCallback(androidx.core.util.Consumer)
io.flutter.plugins.urllauncher.WebViewActivity$FlutterWebChromeClient$1: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)
androidx.window.embedding.SplitPairRule: androidx.window.embedding.SplitPairRule plus$window_release(androidx.window.embedding.SplitPairFilter)
com.google.gson.internal.bind.TypeAdapters$19: java.lang.Object read(com.google.gson.stream.JsonReader)
com.google.android.gms.tasks.zzw: void zza(java.lang.Exception)
com.google.gson.internal.bind.TypeAdapters$18: TypeAdapters$18()
com.google.common.collect.MapMakerInternalMap: MapMakerInternalMap(com.google.common.collect.MapMaker,com.google.common.collect.MapMakerInternalMap$InternalEntryHelper)
androidx.window.layout.DisplayCompatHelperApi17: void getRealSize(android.view.Display,android.graphics.Point)
com.google.android.gms.maps.zzb: zzb(com.google.android.gms.maps.GoogleMap,com.google.android.gms.maps.GoogleMap$OnMarkerDragListener)
io.flutter.plugin.platform.SingleViewPresentation$PresentationState: io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler access$100(io.flutter.plugin.platform.SingleViewPresentation$PresentationState)
com.google.gson.internal.$Gson$Types: java.lang.reflect.Type getSupertype(java.lang.reflect.Type,java.lang.Class,java.lang.Class)
androidx.window.layout.FoldingFeature$OcclusionType$Companion: FoldingFeature$OcclusionType$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
io.flutter.embedding.engine.FlutterJNI: boolean nativeFlutterTextUtilsIsVariationSelector(int)
com.google.gson.stream.JsonReader: int nextNonWhitespace(boolean)
com.google.android.gms.common.api.internal.NonGmsServiceBrokerClient: void zad()
com.google.android.gms.common.internal.zzo: int zza()
io.sentry.protocol.Mechanism: java.util.Map getMeta()
kotlin.Result$Companion: Result$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
kotlin.collections.EmptyMap: java.util.Collection getValues()
com.google.android.gms.maps.internal.zzo: boolean zza(int,android.os.Parcel,android.os.Parcel,int)
io.sentry.SentryEnvelopeItemHeader: SentryEnvelopeItemHeader(io.sentry.SentryItemType,java.util.concurrent.Callable,java.lang.String,java.lang.String,java.lang.String)
com.google.android.gms.auth.api.signin.GoogleSignInAccount: java.lang.String getServerAuthCode()
kotlinx.coroutines.channels.BufferOverflow: kotlinx.coroutines.channels.BufferOverflow[] values()
androidx.fragment.app.FragmentManagerImpl: void setMaxLifecycle(androidx.fragment.app.Fragment,androidx.lifecycle.Lifecycle$State)
androidx.fragment.app.BackStackState: BackStackState(android.os.Parcel)
androidx.fragment.app.FragmentTransition: void addToFirstInLastOut(androidx.fragment.app.BackStackRecord,androidx.fragment.app.FragmentTransaction$Op,android.util.SparseArray,boolean,boolean)
androidx.window.core.Bounds: int getWidth()
io.flutter.plugin.platform.SingleViewPresentation$AccessibilityDelegatingFrameLayout: boolean requestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)
kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion: LockFreeTaskQueueCore$Companion()
io.flutter.plugins.googlemaps.TileOverlayBuilder: com.google.android.gms.maps.model.TileOverlayOptions build()
com.google.android.gms.common.internal.BaseGmsClient: void disconnect()
io.flutter.plugins.googlemaps.MarkerBuilder: void setPosition(com.google.android.gms.maps.model.LatLng)
com.google.common.hash.Hashing$ChecksumType: Hashing$ChecksumType(java.lang.String,int,java.lang.String)
io.sentry.adapters.MapAdapter: com.google.gson.JsonElement serialize(java.util.Map,java.lang.reflect.Type,com.google.gson.JsonSerializationContext)
com.google.gson.FieldNamingPolicy: java.lang.String upperCaseFirstLetter(java.lang.String)
androidx.arch.core.internal.SafeIterableMap: java.lang.Object remove(java.lang.Object)
com.google.gson.internal.Streams$AppendableWriter$CurrentWrite: java.lang.CharSequence subSequence(int,int)
io.sentry.UncaughtExceptionHandlerIntegration$UncaughtExceptionHint: UncaughtExceptionHandlerIntegration$UncaughtExceptionHint(long,io.sentry.ILogger)
kotlinx.coroutines.CommonPool: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)
kotlinx.coroutines.channels.ChannelKt: kotlinx.coroutines.channels.Channel Channel$default(int,kotlinx.coroutines.channels.BufferOverflow,kotlin.jvm.functions.Function1,int,java.lang.Object)
com.google.android.gms.maps.UiSettings: boolean isZoomControlsEnabled()
com.google.android.gms.maps.model.Marker: boolean equals(java.lang.Object)
androidx.fragment.app.FragmentHostCallback: android.app.Activity getActivity()
io.flutter.embedding.engine.FlutterJNI: void nativeDeferredComponentInstallFailure(int,java.lang.String,boolean)
com.google.android.gms.common.api.GoogleApi$Settings: GoogleApi$Settings(com.google.android.gms.common.api.internal.StatusExceptionMapper,android.accounts.Account,android.os.Looper)
io.sentry.NoOpTransaction: void finish(io.sentry.SpanStatus)
io.flutter.embedding.engine.dart.DartMessenger: void dispatchMessageToQueue(java.lang.String,io.flutter.embedding.engine.dart.DartMessenger$HandlerInfo,java.nio.ByteBuffer,int,long)
io.sentry.transport.ReusableCountLatch: void waitTillZero()
androidx.fragment.app.FragmentHostCallback: boolean onShouldSaveFragmentState(androidx.fragment.app.Fragment)
io.sentry.SentryTraceHeader: SentryTraceHeader(java.lang.String)
io.flutter.plugin.editing.ListenableEditingState: void beginBatchEdit()
com.google.common.reflect.Types$JavaVersion: Types$JavaVersion(java.lang.String,int)
io.sentry.HostnameCache: HostnameCache()
kotlinx.coroutines.CoroutineId: void restoreThreadContext(kotlin.coroutines.CoroutineContext,java.lang.String)
io.flutter.plugin.platform.PlatformViewsController: void detachAccessibilityBridge()
io.flutter.view.AccessibilityBridge$SemanticsNode: int access$002(io.flutter.view.AccessibilityBridge$SemanticsNode,int)
kotlinx.coroutines.DebugKt: java.util.concurrent.atomic.AtomicLong getCOROUTINE_ID()
com.google.gson.internal.bind.TypeAdapters$18: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
io.sentry.UnknownPropertiesTypeAdapterFactory$UnknownPropertiesTypeAdapter: void write(com.google.gson.stream.JsonWriter,io.sentry.IUnknownPropertiesConsumer)
io.sentry.protocol.SentryStackFrame: void setContextLine(java.lang.String)
io.sentry.android.ndk.INativeScope: void addBreadcrumb(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
kotlin.coroutines.EmptyCoroutineContext: java.lang.Object fold(java.lang.Object,kotlin.jvm.functions.Function2)
com.google.android.gms.common.api.internal.zabo: zabo(com.google.android.gms.common.api.internal.zabp)
com.google.gson.internal.bind.JsonTreeReader: double nextDouble()
com.google.common.reflect.Types$JavaVersion$5: Types$JavaVersion$5()
com.google.android.gms.common.internal.zaf: void zaa()
io.flutter.embedding.engine.FlutterJNI: void nativeSetViewportMetrics(long,float,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int,int[],int[],int[])
io.sentry.protocol.App: App(io.sentry.protocol.App)
kotlinx.coroutines.DispatchedTaskKt: void resumeUnconfined(kotlinx.coroutines.DispatchedTask)
com.google.gson.JsonObject: java.util.Set entrySet()
kotlinx.coroutines.Unconfined: java.lang.String toString()
com.google.android.gms.maps.model.PolygonOptions: int getStrokeColor()
io.sentry.android.core.DefaultAndroidEventProcessor: int getBlockSizeDep(android.os.StatFs)
com.tekartik.sqflite.SqflitePlugin$1: SqflitePlugin$1(com.tekartik.sqflite.SqflitePlugin,io.flutter.plugin.common.MethodCall,com.tekartik.sqflite.SqflitePlugin$BgResult,com.tekartik.sqflite.Database)
com.google.android.gms.maps.model.MarkerOptions: float getRotation()
com.google.android.gms.maps.model.CircleOptions: CircleOptions(com.google.android.gms.maps.model.LatLng,double,float,int,int,float,boolean,boolean,java.util.List)
com.google.common.collect.MapMakerInternalMap$Segment: void tryDrainReferenceQueues()
io.sentry.android.core.AppLifecycleIntegration: AppLifecycleIntegration()
androidx.lifecycle.ProcessLifecycleOwner$1: ProcessLifecycleOwner$1(androidx.lifecycle.ProcessLifecycleOwner)
kotlinx.coroutines.CoroutineContextKt: java.lang.String getCoroutineName(kotlin.coroutines.CoroutineContext)
androidx.versionedparcelable.ParcelImpl$1: java.lang.Object[] newArray(int)
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.CharSequence getValueLabelHint()
com.google.gson.JsonPrimitive: byte getAsByte()
com.google.common.reflect.TypeToken$TypeFilter$1: TypeToken$TypeFilter$1(java.lang.String,int)
kotlinx.coroutines.ChildHandleNode: kotlinx.coroutines.Job getParent()
com.google.android.gms.maps.internal.zzak: zzak()
kotlinx.coroutines.JobSupport: kotlinx.coroutines.NodeList getOrPromoteCancellingList(kotlinx.coroutines.Incomplete)
kotlinx.coroutines.flow.internal.NoOpContinuation: void resumeWith(java.lang.Object)
kotlin.coroutines.CombinedContext$toString$1: java.lang.String invoke(java.lang.String,kotlin.coroutines.CoroutineContext$Element)
androidx.fragment.app.FragmentTransitionCompat21$3: void onTransitionCancel(android.transition.Transition)
com.google.android.gms.internal.maps.zzj: int zzi()
com.google.common.util.concurrent.ThreadFactoryBuilder: java.lang.String access$000(java.lang.String,java.lang.Object[])
com.google.android.gms.maps.model.PolygonOptions: PolygonOptions()
io.sentry.SpanStatus: boolean matches(int)
com.google.android.gms.common.api.internal.zacd: void onComplete(com.google.android.gms.tasks.Task)
io.sentry.Session: java.util.Date getStarted()
com.google.android.gms.common.api.ResolvableApiException: ResolvableApiException(com.google.android.gms.common.api.Status)
io.flutter.plugin.editing.ListenableEditingState: void notifyListenersIfNeeded(boolean,boolean,boolean)
kotlinx.coroutines.CoroutineDispatcher$Key: CoroutineDispatcher$Key()
com.google.gson.GsonBuilder: void addTypeAdaptersForDate(java.lang.String,int,int,java.util.List)
com.google.gson.JsonParser: com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader)
com.google.android.gms.maps.model.zzl: java.lang.Object[] newArray(int)
kotlin.jvm.internal.Intrinsics: void checkNotNull(java.lang.Object)
androidx.collection.MapCollections$KeySet: boolean retainAll(java.util.Collection)
io.sentry.SentryEnvelopeHeader: SentryEnvelopeHeader(io.sentry.protocol.SentryId)
androidx.versionedparcelable.ParcelImpl: int describeContents()
io.sentry.UncaughtExceptionHandlerIntegration$UncaughtExceptionHint: boolean waitFlush()
com.google.android.gms.maps.zzu: void zzb(int)
com.google.common.collect.MapMakerInternalMap$Values: int size()
io.sentry.SentryOptions: void setProxy(io.sentry.SentryOptions$Proxy)
io.flutter.plugins.googlemaps.CircleController: void setRadius(double)
androidx.fragment.app.FragmentManagerImpl$EndViewTransitionAnimation: void run()
io.sentry.SentryEnvelopeItem$CachedItem: byte[] getBytes()
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: java.lang.Long access$300(io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors,android.view.accessibility.AccessibilityNodeInfo)
com.google.common.hash.HashCode$BytesHashCode: HashCode$BytesHashCode(byte[])
androidx.collection.MapCollections$ValuesCollection: boolean removeAll(java.util.Collection)
com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper: MapMakerInternalMap$WeakKeyStrongValueEntry$Helper()
io.flutter.plugins.googlemaps.CircleController: java.lang.String getGoogleMapsCircleId()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityPreDestroyed(android.app.Activity)
androidx.savedstate.SavedStateRegistry$1: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)
com.tekartik.sqflite.SqflitePlugin: void closeDatabase(com.tekartik.sqflite.Database)
androidx.fragment.app.FragmentTransitionCompat21$2: void onTransitionResume(android.transition.Transition)
com.google.gson.internal.ConstructorConstructor$2: ConstructorConstructor$2(com.google.gson.internal.ConstructorConstructor,com.google.gson.InstanceCreator,java.lang.reflect.Type)
io.sentry.android.core.DefaultAndroidEventProcessor: java.lang.String getDeviceName()
io.sentry.protocol.SentryException: void acceptUnknownProperties(java.util.Map)
com.google.android.gms.internal.maps.zzy: void zzt(java.util.List)
io.sentry.android.core.LifecycleWatcher$1: void run()
androidx.window.R: R()
com.google.android.gms.maps.GoogleMapOptions: GoogleMapOptions(byte,byte,int,com.google.android.gms.maps.model.CameraPosition,byte,byte,byte,byte,byte,byte,byte,byte,byte,java.lang.Float,java.lang.Float,com.google.android.gms.maps.model.LatLngBounds,byte,java.lang.Integer,java.lang.String)
com.google.android.gms.internal.maps.zzai: zzai()
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$14: SentryFlutterPlugin$initNativeSdk$2$14(io.sentry.android.core.SentryAndroidOptions)
androidx.lifecycle.ProcessLifecycleOwner: void activityStopped()
io.sentry.protocol.Device: void setBrand(java.lang.String)
androidx.collection.ArraySet$1: java.lang.Object colGetEntry(int,int)
io.flutter.embedding.engine.systemchannels.TextInputChannel$1: void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
com.google.android.gms.maps.model.CircleOptions: int getStrokeColor()
kotlinx.coroutines.CancellableContinuationImpl: void resumeWith(java.lang.Object)
com.google.common.base.MoreObjects$ToStringHelper: java.lang.String toString()
kotlinx.coroutines.scheduling.ExperimentalCoroutineDispatcher: void close()
io.sentry.SentryClient: io.sentry.SentryEnvelope buildEnvelope(io.sentry.UserFeedback)
io.sentry.SentryOptions: boolean isEnableDeduplication()
io.sentry.protocol.Mechanism: void acceptUnknownProperties(java.util.Map)
androidx.core.view.ViewCompat: int getAccessibilityLiveRegion(android.view.View)
io.sentry.Integration: void register(io.sentry.IHub,io.sentry.SentryOptions)
com.google.gson.JsonParser: com.google.gson.JsonElement parse(java.io.Reader)
io.sentry.android.core.DefaultAndroidEventProcessor: android.util.DisplayMetrics getDisplayMetrics()
kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt: kotlin.coroutines.Continuation intercepted(kotlin.coroutines.Continuation)
com.google.android.gms.dynamic.ObjectWrapper: ObjectWrapper(java.lang.Object)
com.google.common.collect.MapMakerInternalMap$AbstractStrongKeyEntry: MapMakerInternalMap$AbstractStrongKeyEntry(java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$InternalEntry)
com.google.android.gms.internal.maps.zzj: void zzp(boolean)
androidx.window.layout.ExtensionWindowLayoutInfoBackend$MulticastConsumer: void removeListener(androidx.core.util.Consumer)
io.flutter.plugins.googlemaps.GoogleMapController: void setBuildingsEnabled(boolean)
io.sentry.protocol.Contexts: io.sentry.protocol.SentryRuntime getRuntime()
io.flutter.plugins.googlemaps.MarkerBuilder: void setAlpha(float)
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry: FlutterRenderer$SurfaceTextureRegistryEntry(io.flutter.embedding.engine.renderer.FlutterRenderer,long,android.graphics.SurfaceTexture)
io.flutter.embedding.android.FlutterTextureView: void setRenderSurface(android.view.Surface)
io.sentry.HostnameCache: HostnameCache(long)
androidx.fragment.app.FragmentManagerImpl$3: void onAnimationRepeat(android.view.animation.Animation)
io.flutter.plugin.platform.PlatformViewsController: void onAttachedToJNI()
androidx.collection.MapCollections$EntrySet: java.lang.Object[] toArray()
com.google.android.gms.maps.model.zzm: java.lang.Object[] newArray(int)
io.flutter.embedding.android.FlutterImageView: void attachToRenderer(io.flutter.embedding.engine.renderer.FlutterRenderer)
io.flutter.plugins.googlemaps.MarkerBuilder: void setConsumeTapEvents(boolean)
io.flutter.plugins.googlemaps.GoogleMapController: void onStart(androidx.lifecycle.LifecycleOwner)
io.sentry.protocol.SentryRuntime: java.lang.String getRawDescription()
io.flutter.embedding.android.FlutterView$3: void accept(androidx.window.layout.WindowLayoutInfo)
kotlin.collections.EmptyIterator: void set(java.lang.Object)
io.flutter.embedding.android.MotionEventTracker$MotionEventId: MotionEventTracker$MotionEventId(long)
kotlin.coroutines.jvm.internal.CompletedContinuation: void resumeWith(java.lang.Object)
io.flutter.view.AccessibilityBridge: android.view.accessibility.AccessibilityEvent obtainAccessibilityEvent(int,int)
com.google.gson.JsonArray: boolean equals(java.lang.Object)
kotlinx.coroutines.android.HandlerContext: java.lang.String toString()
androidx.arch.core.executor.ArchTaskExecutor: androidx.arch.core.executor.ArchTaskExecutor getInstance()
io.flutter.plugins.googlemaps.GoogleMapController: void onPause(androidx.lifecycle.LifecycleOwner)
com.google.gson.internal.bind.JsonTreeWriter: void flush()
io.sentry.UserFeedback: void setComments(java.lang.String)
com.google.android.gms.maps.model.Marker: Marker(com.google.android.gms.internal.maps.zzx)
io.sentry.protocol.Request: Request(io.sentry.protocol.Request)
com.google.android.gms.common.internal.BaseGmsClient: java.util.concurrent.Executor getBindServiceExecutor()
com.google.gson.internal.bind.TypeAdapters$1: java.lang.Object read(com.google.gson.stream.JsonReader)
kotlinx.coroutines.DispatchedCoroutine: void afterResume(java.lang.Object)
io.sentry.SentryOptions$Proxy: java.lang.String getPass()
androidx.window.layout.WindowMetricsCalculator$Companion$decorator$1: java.lang.Object invoke(java.lang.Object)
io.flutter.embedding.engine.systemchannels.TextInputChannel: void send(int)
kotlinx.coroutines.channels.Closed: java.lang.Throwable getReceiveException()
com.google.common.util.concurrent.CycleDetectingLockFactory$Policies: void handlePotentialDeadlock(com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException)
io.flutter.embedding.engine.dart.DartExecutor$DartEntrypoint: int hashCode()
io.flutter.embedding.engine.loader.ApplicationInfoLoader: java.lang.String getNetworkPolicy(android.content.pm.ApplicationInfo,android.content.Context)
com.google.android.gms.dynamite.zzq: com.google.android.gms.dynamic.IObjectWrapper zzj(com.google.android.gms.dynamic.IObjectWrapper,java.lang.String,int)
com.google.android.gms.common.api.internal.NonGmsServiceBrokerClient: void zab()
androidx.window.core.Version: androidx.window.core.Version access$getCURRENT$cp()
io.sentry.protocol.SentryThread: void setState(java.lang.String)
io.flutter.embedding.android.FlutterSurfaceView: void pause()
com.google.common.hash.BloomFilterStrategies: boolean put(java.lang.Object,com.google.common.hash.Funnel,int,com.google.common.hash.BloomFilterStrategies$LockFreeBitArray)
io.sentry.protocol.SentryPackage: void setName(java.lang.String)
kotlin.collections.EmptyList: int getSize()
androidx.core.app.NotificationCompat$Builder: androidx.core.app.NotificationCompat$Builder setTicker(java.lang.CharSequence)
androidx.core.app.NotificationCompat$Action: int getSemanticAction()
com.google.android.gms.common.api.internal.zabw: zabw()
androidx.activity.OnBackPressedDispatcher$LifecycleOnBackPressedCancellable: void cancel()
kotlinx.coroutines.channels.AbstractSendChannel: kotlinx.coroutines.channels.Send takeFirstSendOrPeekClosed()
kotlinx.coroutines.channels.Closed: java.lang.Object getPollResult()
com.google.android.gms.common.api.internal.BackgroundDetector: boolean readCurrentStateIfPossible(boolean)
io.sentry.protocol.DebugImage: java.lang.String getArch()
io.sentry.protocol.Message: java.lang.String getMessage()
androidx.window.embedding.EmbeddingBackend: void registerSplitListenerForActivity(android.app.Activity,java.util.concurrent.Executor,androidx.core.util.Consumer)
io.sentry.protocol.App: java.lang.String getAppVersion()
io.flutter.embedding.android.FlutterView: void sendViewportMetricsToFlutter()
io.flutter.embedding.engine.loader.ApplicationInfoLoader: java.lang.String getString(android.os.Bundle,java.lang.String)
com.tekartik.sqflite.SqflitePlugin$6: void run()
kotlin.collections.EmptyMap: java.lang.Object get(java.lang.Object)
androidx.collection.ArrayMap$1: java.lang.Object colSetValue(int,java.lang.Object)
io.sentry.android.ndk.NdkScopeObserver: void removeTag(java.lang.String)
kotlinx.coroutines.internal.LockFreeLinkedListNode$CondAddOp: void complete(kotlinx.coroutines.internal.LockFreeLinkedListNode,java.lang.Object)
com.google.common.collect.ImmutableList: java.util.Iterator iterator()
androidx.lifecycle.LiveData: void setValue(java.lang.Object)
com.google.android.gms.tasks.zzi: zzi(com.google.android.gms.tasks.zzj,com.google.android.gms.tasks.Task)
com.google.android.gms.maps.internal.zzbz: java.lang.ClassLoader zzd()
com.google.common.hash.Hashing$ChecksumType$2: Hashing$ChecksumType$2(java.lang.String,int,java.lang.String)
io.flutter.embedding.engine.systemchannels.SettingsChannel: SettingsChannel(io.flutter.embedding.engine.dart.DartExecutor)
io.flutter.plugin.platform.PlatformPlugin: void access$700(io.flutter.plugin.platform.PlatformPlugin,io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemChromeStyle)
com.google.android.gms.common.internal.TelemetryData: void writeToParcel(android.os.Parcel,int)
kotlinx.coroutines.AbstractCoroutine: java.lang.String cancellationExceptionMessage()
com.google.android.gms.maps.model.PolylineOptions: boolean isVisible()
com.google.common.hash.AbstractHashFunction: AbstractHashFunction()
com.google.gson.internal.JsonReaderInternalAccess: void promoteNameToValue(com.google.gson.stream.JsonReader)
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: CoroutineScheduler$Worker(kotlinx.coroutines.scheduling.CoroutineScheduler,int)
kotlinx.coroutines.channels.AbstractChannel$ReceiveHasNext: java.lang.String toString()
kotlinx.coroutines.internal.MainDispatchersKt: kotlinx.coroutines.internal.MissingMainCoroutineDispatcher createMissingDispatcher(java.lang.Throwable,java.lang.String)
kotlin.jvm.internal.FunctionReference: FunctionReference(int,java.lang.Object)
androidx.window.layout.SidecarCompat$Companion: androidx.window.core.Version getSidecarVersion()
com.google.gson.internal.bind.TypeAdapters$2: java.util.BitSet read(com.google.gson.stream.JsonReader)
io.sentry.protocol.SentryThread: java.lang.Long getId()
io.sentry.SentryClient: io.sentry.protocol.SentryId captureEnvelope(io.sentry.SentryEnvelope,java.lang.Object)
io.sentry.SentryOptions: void setReadTimeoutMillis(int)
io.sentry.adapters.SentryLevelDeserializerAdapter: java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext)
androidx.lifecycle.LifecycleRegistry: void forwardPass(androidx.lifecycle.LifecycleOwner)
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField: boolean writeField(java.lang.Object)
com.google.common.collect.ObjectArrays: java.lang.Object[] checkElementsNotNull(java.lang.Object[],int)
android.support.v4.app.RemoteActionCompatParcelizer: RemoteActionCompatParcelizer()
kotlinx.coroutines.EventLoopImplBase: boolean isEmpty()
io.sentry.protocol.DebugImage: DebugImage()
io.sentry.android.core.ContextUtils: java.lang.String getVersionCode(android.content.pm.PackageInfo)
kotlinx.coroutines.channels.LinkedListChannel: java.lang.Object offerInternal(java.lang.Object)
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$1$1: void run()
kotlin.collections.ArraysKt___ArraysJvmKt: java.util.List asList(java.lang.Object[])
androidx.fragment.app.Fragment: android.view.View getView()
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField: ReflectiveTypeAdapterFactory$BoundField(java.lang.String,boolean,boolean)
io.sentry.Dsn: java.lang.String getPublicKey()
com.google.gson.FieldNamingPolicy$4: java.lang.String translateName(java.lang.reflect.Field)
io.flutter.embedding.android.FlutterSplashView$SavedState$1: io.flutter.embedding.android.FlutterSplashView$SavedState[] newArray(int)
kotlin.text.DelimitedRangesSequence$iterator$1: DelimitedRangesSequence$iterator$1(kotlin.text.DelimitedRangesSequence)
kotlin.coroutines.CoroutineContext$Element$DefaultImpls: java.lang.Object fold(kotlin.coroutines.CoroutineContext$Element,java.lang.Object,kotlin.jvm.functions.Function2)
com.google.android.gms.common.GoogleApiAvailability: boolean showErrorDialogFragment(android.app.Activity,int,int,android.content.DialogInterface$OnCancelListener)
androidx.activity.OnBackPressedDispatcher$LifecycleOnBackPressedCancellable: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)
com.google.gson.JsonArray: void add(java.lang.String)
io.sentry.android.core.ManifestMetadataReader: java.lang.Double readDouble(android.os.Bundle,io.sentry.ILogger,java.lang.String)
androidx.collection.ArraySet: boolean isEmpty()
androidx.activity.OnBackPressedCallback: void removeCancellable(androidx.activity.Cancellable)
com.google.android.gms.maps.GoogleMap: float getMaxZoomLevel()
com.google.gson.internal.JsonReaderInternalAccess: JsonReaderInternalAccess()
androidx.loader.app.LoaderManager: LoaderManager()
com.google.common.collect.MapMaker: int getConcurrencyLevel()
com.google.gson.internal.bind.TypeAdapters$22: TypeAdapters$22()
io.flutter.embedding.android.TransparencyMode: TransparencyMode(java.lang.String,int)
io.sentry.SentryOptions: javax.net.ssl.HostnameVerifier getHostnameVerifier()
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$1: PlatformViewsChannel$1(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel)
androidx.window.layout.SidecarCompat: androidx.window.layout.SidecarAdapter access$getSidecarAdapter$p(androidx.window.layout.SidecarCompat)
kotlin.coroutines.jvm.internal.DebugProbesKt: kotlin.coroutines.Continuation probeCoroutineCreated(kotlin.coroutines.Continuation)
androidx.window.embedding.ExtensionEmbeddingBackend: java.util.concurrent.CopyOnWriteArrayList getSplitChangeCallbacks()
io.flutter.plugins.googlemaps.Convert: boolean toBoolean(java.lang.Object)
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeature: FlutterRenderer$DisplayFeature(android.graphics.Rect,io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType)
io.flutter.plugin.common.MethodChannel: void invokeMethod(java.lang.String,java.lang.Object)
com.google.gson.TypeAdapterFactory: com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken)
com.google.android.gms.common.api.internal.zabs: java.lang.String toString()
com.google.gson.FieldNamingPolicy: FieldNamingPolicy(java.lang.String,int)
com.google.android.gms.auth.api.signin.GoogleSignInAccount: java.lang.String getEmail()
com.google.gson.JsonNull: int hashCode()
io.sentry.Session: java.lang.String getUserAgent()
io.sentry.DirectoryProcessor$SendCachedEnvelopeHint: void setRetry(boolean)
com.google.android.gms.tasks.zzw: boolean isSuccessful()
androidx.core.app.NotificationCompat$Action: NotificationCompat$Action(androidx.core.graphics.drawable.IconCompat,java.lang.CharSequence,android.app.PendingIntent,android.os.Bundle,androidx.core.app.RemoteInput[],androidx.core.app.RemoteInput[],boolean,int,boolean,boolean)
kotlinx.coroutines.internal.ExceptionsConstuctorKt$createConstructor$$inlined$safeCtor$4: java.lang.Throwable invoke(java.lang.Throwable)
kotlin.collections.CollectionsKt__CollectionsKt: int getLastIndex(java.util.List)
io.sentry.android.core.AndroidOptionsInitializer: void initializeCacheDirs(android.content.Context,io.sentry.SentryOptions)
com.google.android.gms.maps.model.Circle: void setCenter(com.google.android.gms.maps.model.LatLng)
kotlinx.coroutines.ExecutorCoroutineDispatcherImpl: java.util.concurrent.Executor getExecutor()
com.google.gson.internal.bind.TypeAdapters$29: java.lang.Object read(com.google.gson.stream.JsonReader)
kotlinx.coroutines.internal.LockFreeLinkedListNode: boolean addNext(kotlinx.coroutines.internal.LockFreeLinkedListNode,kotlinx.coroutines.internal.LockFreeLinkedListNode)
androidx.core.view.ViewCompat$UnhandledKeyEventManager: android.util.SparseArray getCapturedKeys()
io.sentry.SynchronizedQueue: SynchronizedQueue(java.util.Queue,java.lang.Object)
com.google.android.gms.common.api.internal.zabs: boolean equals(java.lang.Object)
io.flutter.view.AccessibilityBridge$SemanticsNode: int access$2700(io.flutter.view.AccessibilityBridge$SemanticsNode)
dev.fluttercommunity.plus.packageinfo.PackageInfoPlugin$Companion: PackageInfoPlugin$Companion()
androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri()
com.google.android.gms.maps.internal.zzby: boolean isScrollGesturesEnabled()
androidx.window.layout.SidecarWindowBackend: java.util.concurrent.locks.ReentrantLock access$getGlobalLock$cp()
io.sentry.protocol.SentryThread: void setId(java.lang.Long)
kotlin.collections.EmptySet: void clear()
com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry: com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry copy(com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry)
com.google.android.gms.maps.internal.zzg: boolean setIndoorEnabled(boolean)
io.sentry.Breadcrumb: void setMessage(java.lang.String)
androidx.window.embedding.SplitRule: float getSplitRatio()
io.sentry.DirectoryProcessor: void processFile(java.io.File,java.lang.Object)
io.sentry.transport.ReusableCountLatch: void increment()
io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding: io.flutter.embedding.engine.FlutterEngine getFlutterEngine()
androidx.fragment.app.FragmentTransitionImpl$2: FragmentTransitionImpl$2(androidx.fragment.app.FragmentTransitionImpl,java.util.ArrayList,java.util.Map)
io.flutter.plugins.googlemaps.Convert: com.google.android.gms.maps.model.Cap toCap(java.lang.Object)
com.google.android.gms.common.SupportErrorDialogFragment: com.google.android.gms.common.SupportErrorDialogFragment newInstance(android.app.Dialog,android.content.DialogInterface$OnCancelListener)
io.sentry.SentryOptions$Proxy: java.lang.String getHost()
com.google.android.gms.maps.internal.zzg: float getMaxZoomLevel()
io.sentry.android.core.AppComponentsBreadcrumbsIntegration: void close()
io.sentry.SentryOptions: int getCacheDirSize()
com.google.android.gms.common.api.internal.GoogleApiManager: void zaL(com.google.android.gms.tasks.TaskCompletionSource,int,com.google.android.gms.common.api.GoogleApi)
io.sentry.android.core.LifecycleWatcher: void cancelTask()
io.sentry.adapters.OrientationDeserializerAdapter: java.lang.Object deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext)
kotlinx.coroutines.internal.DispatchedContinuationKt: kotlinx.coroutines.internal.Symbol access$getUNDEFINED$p()
com.google.gson.internal.bind.TypeAdapters$3: TypeAdapters$3()
com.google.gson.internal.bind.DateTypeAdapter: java.util.Date deserializeToDate(java.lang.String)
androidx.core.os.ExecutorCompat$HandlerExecutor: void execute(java.lang.Runnable)
io.flutter.embedding.engine.systemchannels.KeyEventChannel: java.util.Map encodeKeyEvent(io.flutter.embedding.engine.systemchannels.KeyEventChannel$FlutterKeyEvent,boolean)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle,int,boolean)
com.google.common.base.Throwables: java.lang.Object getJLA()
com.google.android.gms.internal.maps.zzab: void zzp(boolean)
io.flutter.plugin.editing.InputConnectionAdaptor: boolean deleteSurroundingTextInCodePoints(int,int)
kotlinx.coroutines.channels.AbstractSendChannel: void helpClose(kotlinx.coroutines.channels.Closed)
io.sentry.android.ndk.DebugImagesLoader: java.util.List getCachedDebugImages()
io.sentry.Attachment: Attachment(java.lang.String,java.lang.String)
com.google.common.util.concurrent.AbstractFuture: com.google.common.util.concurrent.AbstractFuture$Listener access$902(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Listener)
androidx.fragment.app.FragmentManagerImpl: java.util.List getFragments()
androidx.activity.ComponentActivity: androidx.savedstate.SavedStateRegistry getSavedStateRegistry()
androidx.versionedparcelable.ParcelImpl: void writeToParcel(android.os.Parcel,int)
kotlin.collections.EmptyIterator: java.lang.Object previous()
com.google.android.gms.maps.internal.zzg: com.google.android.gms.maps.internal.IUiSettingsDelegate getUiSettings()
io.sentry.protocol.Device: java.lang.Boolean isCharging()
com.google.common.collect.MapMakerInternalMap$Segment: boolean isCollected(com.google.common.collect.MapMakerInternalMap$InternalEntry)
io.sentry.TracesSampler: boolean sample(io.sentry.SamplingContext)
androidx.collection.MapCollections$KeySet: int size()
kotlinx.coroutines.CommonPool: java.lang.String toString()
com.google.gson.JsonObject: com.google.gson.JsonObject deepCopy()
androidx.collection.SparseArrayCompat: void put(int,java.lang.Object)
com.google.android.gms.maps.CameraUpdateFactory: com.google.android.gms.maps.CameraUpdate newLatLngZoom(com.google.android.gms.maps.model.LatLng,float)
com.google.android.gms.common.internal.zzd: zzd(com.google.android.gms.common.internal.BaseGmsClient,int)
io.flutter.plugins.googlemaps.GoogleMapsPlugin: void onAttachedToActivity(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding)
androidx.fragment.app.FragmentTransition: void callSharedElementStartEnd(androidx.fragment.app.Fragment,androidx.fragment.app.Fragment,boolean,androidx.collection.ArrayMap,boolean)
com.google.gson.internal.bind.TypeAdapters$1: void write(com.google.gson.stream.JsonWriter,java.lang.Class)
io.flutter.plugins.googlemaps.PolylineController: void setPoints(java.util.List)
com.tekartik.sqflite.SqflitePlugin$5: SqflitePlugin$5(com.tekartik.sqflite.SqflitePlugin,io.flutter.plugin.common.MethodCall,com.tekartik.sqflite.SqflitePlugin$BgResult,com.tekartik.sqflite.Database)
io.flutter.plugins.googlemaps.PolygonController: void setConsumeTapEvents(boolean)
com.google.common.collect.MapMakerInternalMap$Segment: com.google.common.collect.MapMakerInternalMap$InternalEntry removeFromChain(com.google.common.collect.MapMakerInternalMap$InternalEntry,com.google.common.collect.MapMakerInternalMap$InternalEntry)
io.sentry.protocol.SentrySpan: java.util.Date getStartTimestamp()
com.google.gson.internal.LinkedTreeMap$EntrySet: LinkedTreeMap$EntrySet(com.google.gson.internal.LinkedTreeMap)
io.flutter.plugins.urllauncher.UrlLauncherPlugin: void onAttachedToEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$5: void invoke(java.lang.String)
io.sentry.util.ExceptionUtils: ExceptionUtils()
kotlinx.coroutines.scheduling.WorkQueue: long tryStealLastScheduled(kotlinx.coroutines.scheduling.WorkQueue,boolean)
io.sentry.SynchronizedCollection: java.lang.Object[] toArray(java.lang.Object[])
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: void tryPark()
com.tekartik.sqflite.SqlCommand: java.lang.Object[] getSqlArguments()
androidx.core.app.NotificationCompat$Action: boolean getShowsUserInterface()
io.sentry.SpanStatus: io.sentry.SpanStatus valueOf(java.lang.String)
com.google.common.base.Equivalence$Identity: Equivalence$Identity()
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$1: SentryFlutterPlugin$initNativeSdk$2$1(io.sentry.android.core.SentryAndroidOptions)
io.flutter.embedding.android.FlutterView: io.flutter.embedding.android.WindowInfoRepositoryCallbackAdapterWrapper createWindowInfoRepo()
io.flutter.embedding.android.FlutterTextureView: void init()
kotlinx.coroutines.channels.AbstractSendChannel: java.lang.String getQueueDebugStateString()
com.google.android.gms.common.GooglePlayServicesUtil: int isGooglePlayServicesAvailable(android.content.Context,int)
com.google.common.base.Equivalence: Equivalence()
kotlinx.coroutines.EventLoopImplBase: void setCompleted(boolean)
com.google.android.gms.maps.internal.zzg: com.google.android.gms.internal.maps.zzl addCircle(com.google.android.gms.maps.model.CircleOptions)
io.flutter.embedding.engine.loader.FlutterLoader$1: io.flutter.embedding.engine.loader.FlutterLoader$InitResult call()
io.flutter.plugins.pathprovider.PathProviderPlugin$PathProviderPlatformThread: void getApplicationDocumentsDirectory(io.flutter.plugin.common.MethodChannel$Result)
io.sentry.SynchronizedQueue: java.lang.Object poll()
com.google.gson.JsonStreamParser: JsonStreamParser(java.io.Reader)
io.flutter.embedding.engine.systemchannels.PlatformChannel$1: PlatformChannel$1(io.flutter.embedding.engine.systemchannels.PlatformChannel)
com.google.android.gms.maps.model.Dot: Dot()
io.sentry.protocol.Mechanism: void setDescription(java.lang.String)
com.google.android.gms.common.internal.safeparcel.SafeParcelWriter: void writeByte(android.os.Parcel,int,byte)
io.sentry.android.core.LifecycleWatcher: void onDestroy(androidx.lifecycle.LifecycleOwner)
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.Task findTask(boolean)
kotlin.text.StringsKt__StringsJVMKt: boolean endsWith(java.lang.String,java.lang.String,boolean)
com.google.common.reflect.Types$1: java.lang.Object apply(java.lang.Object)
io.flutter.embedding.android.FlutterView: io.flutter.embedding.android.FlutterImageView access$300(io.flutter.embedding.android.FlutterView)
com.google.common.collect.MapMakerInternalMap$Segment: void drainValueReferenceQueue(java.lang.ref.ReferenceQueue)
androidx.core.app.Person: android.app.Person toAndroidPerson()
androidx.fragment.app.FragmentTransitionCompat21: void swapSharedElementTargets(java.lang.Object,java.util.ArrayList,java.util.ArrayList)
androidx.fragment.app.FragmentManagerState: FragmentManagerState()
com.google.gson.internal.bind.TypeAdapters$3: void write(com.google.gson.stream.JsonWriter,java.lang.Boolean)
androidx.lifecycle.LifecycleRegistry: void removeObserver(androidx.lifecycle.LifecycleObserver)
kotlinx.coroutines.BuildersKt__Builders_commonKt: kotlinx.coroutines.Job launch(kotlinx.coroutines.CoroutineScope,kotlin.coroutines.CoroutineContext,kotlinx.coroutines.CoroutineStart,kotlin.jvm.functions.Function2)
kotlin.jvm.internal.FunctionReference: FunctionReference(int,java.lang.Object,java.lang.Class,java.lang.String,java.lang.String,int)
kotlin.text.StringsKt__StringsKt: kotlin.sequences.Sequence splitToSequence$default(java.lang.CharSequence,java.lang.String[],boolean,int,int,java.lang.Object)
com.google.android.gms.common.internal.zzn: android.content.ComponentName zzb()
com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter: CollectionTypeAdapterFactory$Adapter(com.google.gson.Gson,java.lang.reflect.Type,com.google.gson.TypeAdapter,com.google.gson.internal.ObjectConstructor)
kotlin.jvm.internal.CallableReference: CallableReference()
com.google.android.gms.common.internal.safeparcel.SafeParcelReader: java.lang.Object[] createTypedArray(android.os.Parcel,int,android.os.Parcelable$Creator)
io.flutter.plugins.sharedpreferences.SharedPreferencesPlugin: SharedPreferencesPlugin()
com.google.common.util.concurrent.Futures$CallbackListener: void run()
io.flutter.view.VsyncWaiter$1$1: VsyncWaiter$1$1(io.flutter.view.VsyncWaiter$1,long)
com.google.android.gms.common.internal.zzr: java.util.HashMap zzh(com.google.android.gms.common.internal.zzr)
androidx.lifecycle.ReportFragment$LifecycleCallbacks: void onActivityDestroyed(android.app.Activity)
com.google.common.base.Preconditions: void checkState(boolean,java.lang.Object)
kotlin.jvm.internal.Intrinsics: java.lang.String stringPlus(java.lang.String,java.lang.Object)
androidx.core.app.NotificationCompat$Builder: androidx.core.app.NotificationCompat$Builder addAction(int,java.lang.CharSequence,android.app.PendingIntent)
androidx.collection.ArraySet: java.lang.Object[] toArray(java.lang.Object[])
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType: io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutatorType[] values()
kotlin.collections.ArraysKt___ArraysJvmKt: java.lang.Object[] copyInto(java.lang.Object[],java.lang.Object[],int,int,int)
com.google.android.gms.maps.GoogleMapOptions: com.google.android.gms.maps.GoogleMapOptions compassEnabled(boolean)
com.google.common.util.concurrent.ThreadFactoryBuilder: com.google.common.util.concurrent.ThreadFactoryBuilder setNameFormat(java.lang.String)
kotlin.sequences.TransformingSequence$iterator$1: TransformingSequence$iterator$1(kotlin.sequences.TransformingSequence)
com.google.android.gms.common.internal.service.zap: boolean getUseDynamicLookup()
kotlinx.coroutines.DefaultExecutor: void acknowledgeShutdownIfNeeded()
com.google.gson.internal.bind.TypeAdapters$21: TypeAdapters$21()
com.google.android.gms.common.api.internal.zap: void onStart()
androidx.lifecycle.ReportFragment: void onDestroy()
kotlinx.coroutines.EventLoopImplBase$DelayedTask: void dispose()
androidx.window.embedding.ActivityFilter: android.content.ComponentName getComponentName()
com.google.android.gms.internal.maps.zzae: void zzi()
io.flutter.plugins.connectivity.ConnectivityPlugin: void onDetachedFromEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
io.sentry.protocol.SentryStackFrame: void setLineno(java.lang.Integer)
com.google.android.gms.maps.model.Polyline: void setZIndex(float)
io.sentry.Scope: io.sentry.Session endSession()
com.google.common.reflect.Types$GenericArrayTypeImpl: java.lang.String toString()
androidx.fragment.app.FragmentManagerImpl: void dispatchStart()
io.sentry.SentryEvent: void setLogger(java.lang.String)
androidx.fragment.app.FragmentManagerImpl: void scheduleCommit()
com.google.android.gms.common.GoogleApiAvailabilityLight: boolean isUninstalledAppPossiblyUpdating(android.content.Context,java.lang.String)
com.google.common.hash.Hashing$ChecksumType$1: java.lang.Object get()
androidx.fragment.app.FragmentManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])
kotlin.random.Random$Default: Random$Default(kotlin.jvm.internal.DefaultConstructorMarker)
com.google.android.gms.maps.internal.zzac: zzac()
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: java.util.List getFinalClippingPaths()
com.google.gson.internal.bind.TypeAdapters$19: java.lang.StringBuilder read(com.google.gson.stream.JsonReader)
com.google.android.gms.signin.internal.zac: zac()
com.tekartik.sqflite.SqlCommand: boolean equals(java.lang.Object)
com.google.android.gms.common.api.zza: java.lang.Object[] newArray(int)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: void onStop()
androidx.window.embedding.ActivityFilter: java.lang.String toString()
com.google.gson.internal.LinkedHashTreeMap: boolean containsKey(java.lang.Object)
kotlinx.coroutines.channels.ChannelResult$Closed: int hashCode()
io.sentry.protocol.SentryStackFrame: java.lang.String getFilename()
io.flutter.plugin.platform.PlatformViewsController: void onPreEngineRestart()
com.google.android.gms.common.internal.safeparcel.SafeParcelReader: java.lang.Float readFloatObject(android.os.Parcel,int)
io.sentry.SentryEnvelopeItem: io.sentry.SentryEvent getEvent(io.sentry.ISerializer)
androidx.window.layout.DisplayCompatHelperApi28: int safeInsetBottom(android.view.DisplayCutout)
com.google.common.base.MoreObjects: com.google.common.base.MoreObjects$ToStringHelper toStringHelper(java.lang.Object)
com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter: java.util.Map read(com.google.gson.stream.JsonReader)
kotlin.ranges.IntProgressionIterator: boolean hasNext()
com.google.android.gms.maps.model.TileOverlay: void setFadeIn(boolean)
io.sentry.IHub: void clearBreadcrumbs()
com.google.android.gms.internal.maps.zzc: boolean zzg(android.os.Parcel)
com.google.gson.internal.bind.TypeAdapters$8: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
io.flutter.plugins.googlemaps.PolygonController: void setPoints(java.util.List)
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction: int access$4402(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction,int)
androidx.loader.app.LoaderManagerImpl$LoaderViewModel: androidx.loader.app.LoaderManagerImpl$LoaderViewModel getInstance(androidx.lifecycle.ViewModelStore)
com.google.common.hash.LittleEndianByteArray$JavaLittleEndianBytes: com.google.common.hash.LittleEndianByteArray$JavaLittleEndianBytes valueOf(java.lang.String)
kotlin.jvm.internal.CallableReference: kotlin.reflect.KCallable compute()
androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl: void setLastInfo(java.util.List)
io.flutter.embedding.engine.plugins.util.GeneratedPluginRegister: void registerGeneratedPlugins(io.flutter.embedding.engine.FlutterEngine)
com.google.android.gms.maps.internal.zzb: com.google.android.gms.dynamic.IObjectWrapper zoomIn()
kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState: kotlinx.coroutines.scheduling.CoroutineScheduler$WorkerState[] values()
com.google.gson.internal.bind.TypeAdapters$14: void write(com.google.gson.stream.JsonWriter,java.lang.Number)
io.sentry.MainEventProcessor: MainEventProcessor(io.sentry.SentryOptions,io.sentry.HostnameCache)
com.google.android.gms.common.internal.zai: zai(com.google.android.gms.common.api.internal.OnConnectionFailedListener)
kotlinx.coroutines.NonDisposableHandle: java.lang.String toString()
io.sentry.android.core.DefaultAndroidEventProcessor: android.content.Intent getBatteryIntent()
com.tekartik.sqflite.SqflitePlugin: com.tekartik.sqflite.SqlCommand getSqlCommand(io.flutter.plugin.common.MethodCall)
io.sentry.SentryOptions: io.sentry.IEnvelopeReader getEnvelopeReader()
io.sentry.android.core.IBuildInfoProvider: int getSdkInfoVersion()
com.google.android.gms.common.internal.zzo: android.content.ComponentName zzb()
io.flutter.embedding.engine.loader.ApplicationInfoLoader: void parseDomain(android.content.res.XmlResourceParser,org.json.JSONArray,boolean)
com.google.android.gms.signin.internal.zaa: void writeToParcel(android.os.Parcel,int)
androidx.window.layout.FoldingFeature$Orientation$Companion: FoldingFeature$Orientation$Companion()
com.google.android.gms.internal.maps.zzv: boolean zzF()
androidx.fragment.app.FragmentTransition: androidx.fragment.app.FragmentTransition$FragmentContainerTransition ensureContainer(androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.util.SparseArray,int)
io.sentry.protocol.Gpu: Gpu()
kotlinx.coroutines.JobSupport: void afterCompletion(java.lang.Object)
io.flutter.plugin.platform.PlatformViewsController: void detachFromView()
io.sentry.IHub: void setTransaction(java.lang.String)
com.google.android.gms.auth.api.signin.zab: java.lang.Object[] newArray(int)
androidx.fragment.app.FragmentManagerImpl$3: void onAnimationStart(android.view.animation.Animation)
androidx.lifecycle.ViewModel: void closeWithRuntimeException(java.lang.Object)
com.google.android.gms.maps.model.CustomCap: CustomCap(com.google.android.gms.maps.model.BitmapDescriptor)
io.sentry.Scope: void addEventProcessor(io.sentry.EventProcessor)
kotlinx.coroutines.ExecutorCoroutineDispatcherImpl: boolean equals(java.lang.Object)
androidx.window.embedding.ExtensionEmbeddingBackend$EmbeddingCallbackImpl: java.util.List getLastInfo()
com.google.gson.internal.bind.util.ISO8601Utils: java.util.Date parse(java.lang.String,java.text.ParsePosition)
io.flutter.plugin.mouse.MouseCursorPlugin$2: MouseCursorPlugin$2(io.flutter.plugin.mouse.MouseCursorPlugin)
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$8: SentryFlutterPlugin$initNativeSdk$2$8(io.sentry.android.core.SentryAndroidOptions)
com.google.android.gms.tasks.zzj: zzj(java.util.concurrent.Executor,com.google.android.gms.tasks.OnCompleteListener)
androidx.arch.core.internal.SafeIterableMap$Entry: int hashCode()
io.sentry.SpanContext: SpanContext(io.sentry.protocol.SentryId,io.sentry.SpanId,java.lang.String,io.sentry.SpanId,java.lang.Boolean)
com.tekartik.sqflite.SqflitePlugin: boolean update(com.tekartik.sqflite.Database,com.tekartik.sqflite.operation.Operation)
com.google.android.gms.maps.Projection: android.graphics.Point toScreenLocation(com.google.android.gms.maps.model.LatLng)
io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry$ShimRegistrarAggregate: void onDetachedFromEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
io.sentry.android.core.LifecycleWatcher: void scheduleEndSession()
com.google.common.reflect.TypeCapture: TypeCapture()
com.google.gson.JsonObject: void add(java.lang.String,com.google.gson.JsonElement)
androidx.core.app.Person: boolean isBot()
com.google.gson.stream.JsonReader$1: void promoteNameToValue(com.google.gson.stream.JsonReader)
com.google.android.gms.common.internal.Objects$ToStringHelper: com.google.android.gms.common.internal.Objects$ToStringHelper add(java.lang.String,java.lang.Object)
io.flutter.plugin.platform.PlatformPlugin: java.lang.CharSequence getClipboardData(io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat)
com.google.gson.internal.JavaVersion: int determineMajorJavaVersion()
io.sentry.CircularFifoQueue$1: boolean hasNext()
io.sentry.android.core.NdkIntegration: void close()
io.sentry.android.core.BuildInfoProvider: BuildInfoProvider()
com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper: void setValue(com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment,com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry,java.lang.Object)
io.flutter.plugins.googlemaps.GoogleMapBuilder: void setCompassEnabled(boolean)
io.sentry.android.core.AppLifecycleIntegration: AppLifecycleIntegration(io.sentry.android.core.IHandler)
androidx.collection.ArraySet: boolean addAll(java.util.Collection)
androidx.lifecycle.ClassesInfoCache: androidx.lifecycle.ClassesInfoCache$CallbackInfo getInfo(java.lang.Class)
io.flutter.view.VsyncWaiter: io.flutter.embedding.engine.FlutterJNI access$100(io.flutter.view.VsyncWaiter)
io.sentry.Stack$StackItem: void setClient(io.sentry.ISentryClient)
androidx.fragment.app.Fragment: void performConfigurationChanged(android.content.res.Configuration)
kotlin.text.StringsKt__StringsKt: kotlin.sequences.Sequence rangesDelimitedBy$StringsKt__StringsKt$default(java.lang.CharSequence,java.lang.String[],int,boolean,int,int,java.lang.Object)
com.google.gson.internal.reflect.UnsafeReflectionAccessor: java.lang.reflect.Field getOverrideField()
io.flutter.embedding.engine.renderer.FlutterRenderer: boolean access$002(io.flutter.embedding.engine.renderer.FlutterRenderer,boolean)
io.sentry.SessionAdapter: java.lang.Object read(com.google.gson.stream.JsonReader)
com.google.gson.internal.bind.TypeAdapters$26$1: java.lang.Object read(com.google.gson.stream.JsonReader)
com.google.gson.GsonBuilder: com.google.gson.GsonBuilder setDateFormat(java.lang.String)
io.sentry.SentryBaseEvent: java.util.List getBreadcrumbs()
io.flutter.plugins.googlemaps.CircleController: void setConsumeTapEvents(boolean)
kotlin.random.Random: kotlin.random.Random access$getDefaultRandom$cp()
com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper$1: AbstractFuture$UnsafeAtomicHelper$1()
com.google.android.gms.common.api.internal.zzd: void onResume()
io.flutter.plugins.googlemaps.GoogleMapController: void setInitialPolygons(java.lang.Object)
androidx.lifecycle.Lifecycle$Event: androidx.lifecycle.Lifecycle$Event valueOf(java.lang.String)
io.sentry.Span: void setDescription(java.lang.String)
kotlinx.coroutines.scheduling.CoroutineScheduler: int parkedWorkersStackNextIndex(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)
com.google.android.gms.common.internal.BaseGmsClient: boolean requiresSignIn()
kotlinx.coroutines.channels.AbstractChannel: boolean access$enqueueReceive(kotlinx.coroutines.channels.AbstractChannel,kotlinx.coroutines.channels.Receive)
io.sentry.protocol.SdkVersion: java.lang.String getName()
com.google.android.gms.maps.model.MarkerOptions: com.google.android.gms.maps.model.MarkerOptions icon(com.google.android.gms.maps.model.BitmapDescriptor)
com.google.common.hash.AbstractHashFunction: com.google.common.hash.HashCode hashObject(java.lang.Object,com.google.common.hash.Funnel)
com.google.android.gms.common.internal.ClientSettings$Builder: com.google.android.gms.common.internal.ClientSettings$Builder setRealClientPackageName(java.lang.String)
com.google.common.collect.MapMakerInternalMap$Strength$1: MapMakerInternalMap$Strength$1(java.lang.String,int)
com.google.android.gms.common.api.internal.zacf: zacf(com.google.android.gms.common.api.internal.NonGmsServiceBrokerClient)
com.google.android.gms.common.internal.TelemetryLoggingOptions: TelemetryLoggingOptions(java.lang.String,com.google.android.gms.common.internal.zaad)
io.sentry.Session: java.lang.Boolean getInit()
com.google.android.gms.common.api.internal.zaae: androidx.collection.ArraySet zaa()
io.sentry.SynchronizedQueue: boolean offer(java.lang.Object)
io.sentry.protocol.User: User()
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$4: SentryFlutterPlugin$initNativeSdk$2$4(io.sentry.android.core.SentryAndroidOptions)
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.String access$2402(io.flutter.view.AccessibilityBridge$SemanticsNode,java.lang.String)
com.google.android.gms.common.internal.zzn: boolean equals(java.lang.Object)
kotlin.Result$Failure: Result$Failure(java.lang.Throwable)
com.google.android.gms.internal.maps.zzah: zzah(android.os.IBinder)
com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry: void setValue(java.lang.Object,java.lang.ref.ReferenceQueue)
androidx.core.app.NotificationCompat$Style: NotificationCompat$Style()
androidx.fragment.app.Fragment: androidx.fragment.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle)
kotlinx.coroutines.scheduling.WorkQueue: int getSize$kotlinx_coroutines_core()
com.google.common.collect.MapMakerInternalMap$Segment: boolean containsKey(java.lang.Object,int)
com.tekartik.sqflite.SqflitePlugin: SqflitePlugin()
io.sentry.cache.CacheStrategy: CacheStrategy(io.sentry.SentryOptions,java.lang.String,int)
io.flutter.plugin.platform.PlatformViewsController: void initializeRootImageViewIfNeeded()
kotlinx.coroutines.scheduling.CoroutineScheduler: boolean isTerminated()
io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry$ShimRegistrarAggregate: void onDetachedFromActivityForConfigChanges()
com.google.android.gms.common.api.internal.zact: void onConnected(android.os.Bundle)
io.flutter.plugin.editing.TextInputPlugin: boolean composingChanged(io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState,io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState)
io.flutter.plugins.googlemaps.PolylinesController: void addPolyline(java.lang.String,com.google.android.gms.maps.model.PolylineOptions,boolean)
kotlinx.coroutines.channels.Closed: java.lang.Object getOfferResult()
com.google.gson.FieldAttributes: java.lang.Class getDeclaringClass()
io.flutter.embedding.engine.loader.FlutterApplicationInfo: FlutterApplicationInfo(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean)
com.google.android.gms.dynamic.zaf: int zaa()
com.google.common.io.Files$FilePredicate$2: boolean apply(java.lang.Object)
io.sentry.android.core.NdkIntegration: void register(io.sentry.IHub,io.sentry.SentryOptions)
io.sentry.ISentryClient: void captureUserFeedback(io.sentry.UserFeedback)
io.sentry.SpanStatus: io.sentry.SpanStatus fromHttpStatusCode(java.lang.Integer,io.sentry.SpanStatus)
com.google.android.gms.maps.model.PolylineOptions: float getWidth()
kotlinx.coroutines.android.HandlerDispatcher: HandlerDispatcher(kotlin.jvm.internal.DefaultConstructorMarker)
io.flutter.plugins.googlemaps.GoogleMapController: void setCompassEnabled(boolean)
androidx.core.graphics.drawable.IconCompat: android.graphics.drawable.Icon toIcon()
com.google.common.hash.LittleEndianByteArray$JavaLittleEndianBytes: LittleEndianByteArray$JavaLittleEndianBytes(java.lang.String,int,com.google.common.hash.LittleEndianByteArray$1)
io.sentry.protocol.Device: void setBootTime(java.util.Date)
com.google.gson.internal.bind.TypeAdapters$12: java.lang.Number read(com.google.gson.stream.JsonReader)
com.google.gson.internal.PreJava9DateFormatProvider: java.text.DateFormat getUSDateFormat(int)
io.flutter.plugins.connectivity.ConnectivityBroadcastReceiver: void onListen(java.lang.Object,io.flutter.plugin.common.EventChannel$EventSink)
com.google.android.gms.common.internal.TelemetryLoggingOptions: com.google.android.gms.common.internal.TelemetryLoggingOptions$Builder builder()
kotlinx.coroutines.channels.ChannelResult$Failed: java.lang.String toString()
androidx.window.embedding.ActivityStack: boolean equals(java.lang.Object)
io.sentry.CircularFifoQueue: java.lang.Object remove()
io.sentry.protocol.OperatingSystem: void setRooted(java.lang.Boolean)
androidx.collection.MapCollections$MapIterator: java.lang.Object setValue(java.lang.Object)
androidx.fragment.app.Fragment: boolean isStateSaved()
io.sentry.ISpan: io.sentry.SpanContext getSpanContext()
com.google.gson.internal.bind.TypeAdapters$21: void write(com.google.gson.stream.JsonWriter,java.net.URL)
com.google.android.gms.common.internal.zac: java.lang.String zah(android.content.Context,java.lang.String,java.lang.String)
com.google.gson.internal.Streams: void write(com.google.gson.JsonElement,com.google.gson.stream.JsonWriter)
io.sentry.android.core.DefaultAndroidEventProcessor: void setAppExtras(io.sentry.protocol.App)
io.flutter.plugin.common.StandardMethodCodec: java.lang.Object decodeEnvelope(java.nio.ByteBuffer)
com.google.android.gms.maps.model.TileOverlayOptions: void writeToParcel(android.os.Parcel,int)
com.tekartik.sqflite.SqflitePlugin$8: SqflitePlugin$8(com.tekartik.sqflite.SqflitePlugin,com.tekartik.sqflite.Database,java.lang.String,com.tekartik.sqflite.SqflitePlugin$BgResult)
io.sentry.transport.ReusableCountLatch: boolean waitTillZero(long,java.util.concurrent.TimeUnit)
io.sentry.SentryEnvelopeHeaderAdapter: java.lang.Object read(com.google.gson.stream.JsonReader)
dev.fluttercommunity.plus.packageinfo.PackageInfoPlugin: long getLongVersionCode(android.content.pm.PackageInfo)
io.sentry.SentryOptions: void setAttachThreads(boolean)
kotlinx.coroutines.internal.LockFreeLinkedListNode: void helpRemove()
com.google.gson.internal.bind.TypeAdapters$33: com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken)
io.flutter.embedding.engine.dart.DartMessenger$Reply: void reply(java.nio.ByteBuffer)
androidx.versionedparcelable.ParcelImpl$1: ParcelImpl$1()
io.flutter.embedding.android.KeyboardManager: void onUnhandled(android.view.KeyEvent)
io.sentry.SentryOptions: void setDsn(java.lang.String)
com.google.android.gms.common.internal.zzo: void zze(java.lang.String,java.util.concurrent.Executor)
com.google.android.gms.common.api.internal.zam: int zaa()
androidx.lifecycle.ReportFragment: void dispatchStart(androidx.lifecycle.ReportFragment$ActivityInitializationListener)
io.sentry.NoOpTransaction: void setDescription(java.lang.String)
com.google.common.reflect.TypeToken$TypeFilter$1: boolean apply(com.google.common.reflect.TypeToken)
io.sentry.protocol.Device: void setFreeMemory(java.lang.Long)
com.google.android.gms.maps.internal.zze: void zzl(com.google.android.gms.dynamic.IObjectWrapper,int)
io.flutter.embedding.android.FlutterView: void convertToImageView()
com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment: MapMakerInternalMap$StrongKeyWeakValueSegment(com.google.common.collect.MapMakerInternalMap,int,int)
com.tekartik.sqflite.SqflitePlugin: void onBatchCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
com.google.android.gms.internal.maps.zzv: void zzp(float,float)
io.sentry.protocol.SentryStackTrace: void setRegisters(java.util.Map)
com.google.common.collect.MapMakerInternalMap: int hash(java.lang.Object)
io.sentry.protocol.User: java.lang.String getEmail()
com.google.gson.JsonPrimitive: boolean getAsBoolean()
com.google.gson.internal.bind.TypeAdapters$2: void write(com.google.gson.stream.JsonWriter,java.util.BitSet)
androidx.fragment.app.Fragment: Fragment()
androidx.loader.app.LoaderManagerImpl: void markForRedelivery()
com.google.android.gms.maps.zzz: zzz(com.google.android.gms.maps.GoogleMap,com.google.android.gms.maps.GoogleMap$OnMapLongClickListener)
com.google.gson.internal.$Gson$Types: boolean equals(java.lang.reflect.Type,java.lang.reflect.Type)
io.sentry.SentryBaseEvent: void setEventId(io.sentry.protocol.SentryId)
kotlin.text.DelimitedRangesSequence: DelimitedRangesSequence(java.lang.CharSequence,int,int,kotlin.jvm.functions.Function2)
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter: ReflectiveTypeAdapterFactory$Adapter(com.google.gson.internal.ObjectConstructor,java.util.Map)
kotlin.text.CharsKt__CharKt: boolean equals(char,char,boolean)
io.sentry.SentryOptions: io.sentry.ITransportFactory getTransportFactory()
com.google.common.collect.AbstractIndexedListIterator: boolean hasPrevious()
kotlinx.coroutines.channels.LinkedListChannel: LinkedListChannel(kotlin.jvm.functions.Function1)
com.google.gson.internal.bind.JsonTreeReader$1: int read(char[],int,int)
com.google.gson.internal.bind.TypeAdapters$19: void write(com.google.gson.stream.JsonWriter,java.lang.StringBuilder)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding: boolean onRequestPermissionsResult(int,java.lang.String[],int[])
io.sentry.protocol.Request: void acceptUnknownProperties(java.util.Map)
kotlin.jvm.internal.FunctionReference: boolean isInfix()
io.sentry.android.core.util.ConnectivityChecker: java.lang.String getConnectionType(android.content.Context,io.sentry.ILogger,io.sentry.android.core.IBuildInfoProvider)
io.sentry.transport.QueuedThreadPoolExecutor: java.util.concurrent.Future submit(java.lang.Runnable)
kotlin.collections.EmptyList: int lastIndexOf(java.lang.Void)
androidx.collection.ArraySet$1: void colClear()
com.google.common.collect.MapMakerInternalMap: void putAll(java.util.Map)
io.sentry.NoOpHub: io.sentry.protocol.SentryId captureEnvelope(io.sentry.SentryEnvelope,java.lang.Object)
io.sentry.protocol.SentryRuntime: SentryRuntime(io.sentry.protocol.SentryRuntime)
com.google.android.gms.common.api.internal.zacq: zacq(com.google.android.gms.common.api.internal.zact)
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$9: void invoke(boolean)
com.google.common.collect.ImmutableList: java.util.ListIterator listIterator(int)
io.sentry.SynchronizedQueue: int hashCode()
io.sentry.android.core.DefaultAndroidEventProcessor: java.lang.String getFamily()
com.google.android.gms.maps.internal.zzg: com.google.android.gms.maps.internal.IProjectionDelegate getProjection()
com.google.android.gms.internal.maps.zzab: void zzo()
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction: int access$3402(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction,int)
com.google.android.gms.common.internal.ConnectionTelemetryConfiguration: int[] getMethodInvocationMethodKeyDisallowlist()
com.google.gson.internal.bind.JsonTreeWriter$1: void close()
androidx.fragment.app.FragmentActivity: void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int,android.os.Bundle)
kotlinx.coroutines.scheduling.CoroutineScheduler: boolean tryCreateWorker$default(kotlinx.coroutines.scheduling.CoroutineScheduler,long,int,java.lang.Object)
io.flutter.embedding.engine.FlutterJNI: void nativeDispatchEmptyPlatformMessage(long,java.lang.String,int)
com.google.gson.Gson: com.google.gson.stream.JsonReader newJsonReader(java.io.Reader)
io.sentry.android.core.AndroidLogger: void log(io.sentry.SentryLevel,java.lang.Throwable,java.lang.String,java.lang.Object[])
com.google.gson.JsonParser: com.google.gson.JsonElement parse(java.lang.String)
com.google.android.gms.common.internal.safeparcel.SafeParcelReader: int getFieldId(int)
io.sentry.Session: double calculateDurationTime(java.util.Date)
com.google.android.gms.maps.internal.zzl: void onStart()
androidx.fragment.app.FragmentManagerImpl: void dispatchPause()
io.sentry.android.core.SentryAndroid: void init(android.content.Context,io.sentry.Sentry$OptionsConfiguration)
io.sentry.SentryOptions$Proxy: SentryOptions$Proxy(java.lang.String,java.lang.String,java.lang.String,java.lang.String)
androidx.fragment.app.FragmentTransitionCompat21$4: android.graphics.Rect onGetEpicenter(android.transition.Transition)
kotlin.coroutines.jvm.internal.BaseContinuationImpl: kotlin.coroutines.Continuation create(java.lang.Object,kotlin.coroutines.Continuation)
com.tekartik.sqflite.SqlCommand: java.util.Map fixMap(java.util.Map)
io.flutter.plugin.platform.SingleViewPresentation$FakeWindowViewGroup: void onLayout(boolean,int,int,int,int)
com.google.android.gms.maps.model.TileOverlayOptions: com.google.android.gms.maps.model.TileOverlayOptions tileProvider(com.google.android.gms.maps.model.TileProvider)
kotlin.collections.MapsKt__MapsKt: java.util.Map optimizeReadOnlyMap(java.util.Map)
kotlinx.coroutines.CoroutineDispatcher: boolean isDispatchNeeded(kotlin.coroutines.CoroutineContext)
kotlinx.coroutines.AbstractCoroutine: void start(kotlinx.coroutines.CoroutineStart,java.lang.Object,kotlin.jvm.functions.Function2)
com.google.gson.reflect.TypeToken: com.google.gson.reflect.TypeToken getParameterized(java.lang.reflect.Type,java.lang.reflect.Type[])
com.google.common.io.Files$FilePredicate$2: Files$FilePredicate$2(java.lang.String,int)
com.google.android.gms.common.ConnectionResult: ConnectionResult(int,android.app.PendingIntent)
io.flutter.plugin.editing.TextInputPlugin$1: void sendAppPrivateCommand(java.lang.String,android.os.Bundle)
com.google.android.gms.common.api.internal.GoogleApiManager: com.google.android.gms.common.internal.TelemetryLoggingClient zaJ()
androidx.core.app.Person: java.lang.String getUri()
io.flutter.embedding.android.AndroidTouchProcessor: AndroidTouchProcessor(io.flutter.embedding.engine.renderer.FlutterRenderer,boolean)
kotlin.collections.EmptySet: java.lang.Object[] toArray()
kotlin.random.RandomKt: int takeUpperBits(int,int)
androidx.window.core.Bounds: java.lang.String toString()
io.flutter.util.PathUtils: java.lang.String getDataDirPath(android.content.Context)
io.sentry.MainEventProcessor: MainEventProcessor(io.sentry.SentryOptions)
kotlinx.coroutines.channels.Send: void undeliveredElement()
io.sentry.protocol.Message: void setParams(java.util.List)
com.google.gson.JsonElement: boolean isJsonPrimitive()
io.sentry.Span: void setOperation(java.lang.String)
com.google.gson.internal.LinkedHashTreeMap$AvlBuilder: void add(com.google.gson.internal.LinkedHashTreeMap$Node)
androidx.lifecycle.ReportFragment: void onPause()
com.google.android.gms.common.internal.Objects$ToStringHelper: Objects$ToStringHelper(java.lang.Object,com.google.android.gms.common.internal.zzah)
io.flutter.embedding.android.FlutterSplashView: boolean wasPreviousSplashTransitionInterrupted()
io.flutter.plugins.pathprovider.PathProviderPlugin$PathProviderPlatformThread: void getExternalCacheDirectories(io.flutter.plugin.common.MethodChannel$Result)
io.flutter.plugins.pathprovider.PathProviderPlugin$UiThreadExecutor: PathProviderPlugin$UiThreadExecutor(io.flutter.plugins.pathprovider.PathProviderPlugin$1)
com.google.android.gms.common.GoogleApiAvailability: int isGooglePlayServicesAvailable(android.content.Context,int)
com.google.android.gms.maps.internal.zzca: zzca()
androidx.fragment.app.FragmentActivity: FragmentActivity()
androidx.versionedparcelable.VersionedParcel: java.lang.CharSequence readCharSequence(java.lang.CharSequence,int)
com.google.android.gms.tasks.zzw: boolean zzd(java.lang.Exception)
androidx.fragment.app.FragmentManagerImpl: void removeRedundantOperationsAndExecute(java.util.ArrayList,java.util.ArrayList)
androidx.window.embedding.ExtensionEmbeddingBackend: void access$setGlobalInstance$cp(androidx.window.embedding.ExtensionEmbeddingBackend)
io.sentry.SentryBaseEvent: java.lang.String getServerName()
androidx.fragment.app.Fragment: void onOptionsMenuClosed(android.view.Menu)
com.google.android.gms.common.GoogleApiAvailability: android.app.Dialog zab(android.app.Activity,android.content.DialogInterface$OnCancelListener)
com.tekartik.sqflite.SqflitePlugin: void onDebugModeCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
androidx.arch.core.executor.DefaultTaskExecutor$1: java.lang.Thread newThread(java.lang.Runnable)
com.google.common.collect.ImmutableList$Itr: java.lang.Object get(int)
kotlinx.coroutines.JobKt__JobKt: void cancel(kotlin.coroutines.CoroutineContext,java.util.concurrent.CancellationException)
io.sentry.SentryOptions: SentryOptions()
io.flutter.FlutterInjector: io.flutter.embedding.engine.loader.FlutterLoader flutterLoader()
io.sentry.SentryOptions$Proxy: void setHost(java.lang.String)
io.flutter.plugin.platform.PlatformViewsController: void onEndFrame()
io.sentry.android.core.PhoneStateBreadcrumbsIntegration: void close()
com.google.android.gms.common.internal.TelemetryLoggingOptions: boolean equals(java.lang.Object)
io.sentry.transport.HttpConnection: void closeAndDisconnect(java.net.HttpURLConnection)
kotlinx.coroutines.JobSupport: void access$continueCompleting(kotlinx.coroutines.JobSupport,kotlinx.coroutines.JobSupport$Finishing,kotlinx.coroutines.ChildHandleNode,java.lang.Object)
kotlin.collections.EmptySet: boolean remove(java.lang.Object)
io.sentry.protocol.Request: java.lang.String getCookies()
io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat: io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat fromValue(java.lang.String)
io.flutter.embedding.engine.systemchannels.AccessibilityChannel: io.flutter.embedding.engine.systemchannels.AccessibilityChannel$AccessibilityMessageHandler access$000(io.flutter.embedding.engine.systemchannels.AccessibilityChannel)
com.google.android.gms.tasks.zzj: com.google.android.gms.tasks.OnCompleteListener zza(com.google.android.gms.tasks.zzj)
com.google.gson.internal.bind.ArrayTypeAdapter: ArrayTypeAdapter(com.google.gson.Gson,com.google.gson.TypeAdapter,java.lang.Class)
io.flutter.FlutterInjector: io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager deferredComponentManager()
io.flutter.embedding.android.FlutterView$4: FlutterView$4(io.flutter.embedding.android.FlutterView,io.flutter.embedding.engine.renderer.FlutterRenderer,java.lang.Runnable)
com.google.android.gms.common.internal.zzac: zzac(android.os.IBinder)
com.google.gson.reflect.TypeToken: com.google.gson.reflect.TypeToken get(java.lang.reflect.Type)
kotlinx.coroutines.channels.ArrayChannel: kotlinx.coroutines.internal.Symbol updateBufferSize(int)
kotlinx.coroutines.JobImpl: boolean handlesException()
androidx.fragment.app.FragmentManagerImpl: void dispatchStateChange(int)
io.flutter.embedding.android.FlutterView$ZeroSides: io.flutter.embedding.android.FlutterView$ZeroSides[] values()
com.google.gson.ExclusionStrategy: boolean shouldSkipClass(java.lang.Class)
io.sentry.Sentry: io.sentry.ITransaction startTransaction(java.lang.String,java.lang.String,io.sentry.CustomSamplingContext,boolean)
io.sentry.protocol.SentryStackFrame: java.lang.String getModule()
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization valueOf(java.lang.String)
kotlin.jvm.internal.Intrinsics: Intrinsics()
io.sentry.SentryTracer: io.sentry.protocol.Contexts getContexts()
io.sentry.NoOpSentryClient: io.sentry.protocol.SentryId captureTransaction(io.sentry.protocol.SentryTransaction,io.sentry.Scope,java.lang.Object)
com.google.gson.internal.bind.TreeTypeAdapter: com.google.gson.TypeAdapterFactory newFactoryWithMatchRawType(com.google.gson.reflect.TypeToken,java.lang.Object)
io.sentry.protocol.Gpu: void setVersion(java.lang.String)
com.google.gson.JsonElement: boolean isJsonObject()
io.flutter.plugins.urllauncher.WebViewActivity$FlutterWebChromeClient: boolean onCreateWindow(android.webkit.WebView,boolean,boolean,android.os.Message)
androidx.lifecycle.DefaultLifecycleObserver: void onStart(androidx.lifecycle.LifecycleOwner)
com.google.android.gms.maps.GoogleMapOptions: java.lang.String toString()
io.flutter.plugin.mouse.MouseCursorPlugin: android.view.PointerIcon resolveSystemCursor(java.lang.String)
io.flutter.embedding.android.KeyChannelResponder: void handleEvent(android.view.KeyEvent,io.flutter.embedding.android.KeyboardManager$Responder$OnKeyEventHandledCallback)
io.flutter.embedding.engine.FlutterJNI: android.graphics.Bitmap decodeImage(java.nio.ByteBuffer,long)
kotlinx.coroutines.CoroutineStart: kotlinx.coroutines.CoroutineStart valueOf(java.lang.String)
io.sentry.SynchronizedCollection: boolean add(java.lang.Object)
io.sentry.android.core.MainLooperHandler: MainLooperHandler(android.os.Looper)
androidx.fragment.app.FragmentActivity: void onPostResume()
androidx.fragment.app.Fragment: androidx.core.app.SharedElementCallback getExitTransitionCallback()
io.sentry.android.core.ActivityLifecycleIntegration: void startTracing(android.app.Activity)
androidx.fragment.app.FragmentManagerImpl: androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator makeFadeAnimation(float,float)
com.google.common.reflect.Types$1: java.lang.String apply(java.lang.reflect.Type)
androidx.fragment.app.FragmentTransitionCompat21: FragmentTransitionCompat21()
io.sentry.android.core.DefaultAndroidEventProcessor: void $closeResource(java.lang.Throwable,java.lang.AutoCloseable)
io.sentry.android.core.ActivityLifecycleIntegration: void addBreadcrumb(android.app.Activity,java.lang.String)
io.sentry.SentryTracer: java.lang.String getDescription()
com.google.android.gms.common.api.GoogleApiActivity: void onCancel(android.content.DialogInterface)
com.google.gson.internal.bind.TypeAdapters$26: com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken)
androidx.collection.MapCollections$EntrySet: java.lang.Object[] toArray(java.lang.Object[])
io.flutter.plugins.googlemaps.TileProviderController: java.lang.String access$100(io.flutter.plugins.googlemaps.TileProviderController)
com.google.common.primitives.UnsignedBytes: int toInt(byte)
androidx.collection.SimpleArrayMap: int indexOfNull()
com.google.android.gms.common.api.internal.zzd: zzd()
io.flutter.view.AccessibilityBridge$SemanticsNode: io.flutter.view.AccessibilityBridge$SemanticsNode hitTest(float[])
io.sentry.protocol.App: void setAppBuild(java.lang.String)
io.sentry.cache.CacheStrategy: boolean isSessionType(io.sentry.SentryEnvelopeItem)
androidx.versionedparcelable.VersionedParcel: void writeToParcel(androidx.versionedparcelable.VersionedParcelable,androidx.versionedparcelable.VersionedParcel)
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction: int access$3400(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction)
com.google.gson.annotations.Expose: boolean serialize()
com.google.gson.internal.bind.TypeAdapters$20: java.lang.Object read(com.google.gson.stream.JsonReader)
io.flutter.view.VsyncWaiter$DisplayListener: VsyncWaiter$DisplayListener(io.flutter.view.VsyncWaiter,android.hardware.display.DisplayManager)
io.sentry.android.core.util.Permissions: Permissions()
io.sentry.protocol.Device: Device(io.sentry.protocol.Device)
io.flutter.plugin.platform.PlatformViewsController: boolean validateDirection(int)
io.sentry.flutter.SentryFlutterPlugin: void closeNativeSdk(io.flutter.plugin.common.MethodChannel$Result)
io.sentry.SentryClient: io.sentry.protocol.SentryId captureEvent(io.sentry.SentryEvent,io.sentry.Scope,java.lang.Object)
io.sentry.protocol.OperatingSystem: java.lang.String getVersion()
com.google.android.gms.common.api.internal.zap: void zah(com.google.android.gms.common.ConnectionResult,int)
com.google.gson.internal.LinkedTreeMap: com.google.gson.internal.LinkedTreeMap$Node removeInternalByKey(java.lang.Object)
io.sentry.NoOpSentryExecutorService: void close(long)
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$13: java.lang.Object invoke(java.lang.Object)
com.google.gson.Gson: com.google.gson.TypeAdapter atomicLongArrayAdapter(com.google.gson.TypeAdapter)
kotlinx.coroutines.channels.ConflatedChannel: kotlinx.coroutines.internal.UndeliveredElementException updateValueLocked(java.lang.Object)
kotlin.SynchronizedLazyImpl: java.lang.Object getValue()
kotlin.coroutines.ContinuationKt: void startCoroutine(kotlin.jvm.functions.Function1,kotlin.coroutines.Continuation)
com.google.common.collect.MapMaker: com.google.common.collect.MapMakerInternalMap$Strength getValueStrength()
io.flutter.embedding.engine.systemchannels.RestorationChannel$2: void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
com.google.gson.Gson: java.lang.Object fromJson(java.lang.String,java.lang.reflect.Type)
io.sentry.protocol.Device: void setModelId(java.lang.String)
kotlin.coroutines.EmptyCoroutineContext: java.lang.String toString()
kotlinx.coroutines.flow.internal.SafeCollector_commonKt$checkContext$result$1: java.lang.Integer invoke(int,kotlin.coroutines.CoroutineContext$Element)
com.google.common.hash.BloomFilter$Strategy: boolean put(java.lang.Object,com.google.common.hash.Funnel,int,com.google.common.hash.BloomFilterStrategies$LockFreeBitArray)
io.sentry.SentryEvent: java.lang.String getLogger()
io.sentry.protocol.Request: void setQueryString(java.lang.String)
com.google.android.gms.common.internal.zac: java.lang.String zab(android.content.Context)
kotlin.coroutines.jvm.internal.RestrictedContinuationImpl: RestrictedContinuationImpl(kotlin.coroutines.Continuation)
androidx.collection.MapCollections$KeySet: java.lang.Object[] toArray(java.lang.Object[])
androidx.core.app.ComponentActivity: ComponentActivity()
io.sentry.SentryEnvelopeItem: io.sentry.SentryEnvelopeItemHeader getHeader()
com.google.android.gms.common.internal.BaseGmsClient: void zzj(com.google.android.gms.common.internal.BaseGmsClient,com.google.android.gms.common.internal.zzj)
com.google.android.gms.common.api.internal.TaskApiCall: boolean shouldAutoResolveMissingFeatures()
androidx.core.app.NotificationCompatJellybean: android.util.SparseArray buildActionExtrasMap(java.util.List)
kotlin.text.StringsKt__StringsKt: int indexOf(java.lang.CharSequence,char,int,boolean)
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: void onDetachedFromActivity()
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
com.tekartik.sqflite.SqflitePlugin$BgResult$2: SqflitePlugin$BgResult$2(com.tekartik.sqflite.SqflitePlugin$BgResult,java.lang.String,java.lang.String,java.lang.Object)
kotlinx.coroutines.internal.LockFreeTaskQueue: boolean addLast(java.lang.Object)
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$11: SentryFlutterPlugin$initNativeSdk$2$11(io.sentry.android.core.SentryAndroidOptions)
androidx.tracing.TraceApi18Impl: void beginSection(java.lang.String)
androidx.lifecycle.ClassesInfoCache$MethodReference: boolean equals(java.lang.Object)
androidx.window.embedding.ExtensionEmbeddingBackend: void getSplitChangeCallbacks$annotations()
com.google.android.gms.maps.model.TileOverlayOptions: boolean getFadeIn()
io.sentry.cache.CacheStrategy: io.sentry.SentryEnvelope readEnvelope(java.io.File)
io.flutter.plugins.googlemaps.MarkersController: void addMarker(java.lang.Object)
io.sentry.SentryBaseEvent: SentryBaseEvent(io.sentry.protocol.SentryId)
kotlin.SynchronizedLazyImpl: SynchronizedLazyImpl(kotlin.jvm.functions.Function0,java.lang.Object)
kotlinx.coroutines.JobSupportKt: java.lang.Object boxIncomplete(java.lang.Object)
com.google.android.gms.common.api.internal.GoogleApiManager: void zax(com.google.android.gms.common.api.GoogleApi,int,com.google.android.gms.common.api.internal.TaskApiCall,com.google.android.gms.tasks.TaskCompletionSource,com.google.android.gms.common.api.internal.StatusExceptionMapper)
kotlin.coroutines.EmptyCoroutineContext: EmptyCoroutineContext()
io.flutter.plugin.editing.TextInputPlugin: void access$200(io.flutter.plugin.editing.TextInputPlugin)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: ImeSyncDeferringInsetsCallback$AnimationCallback(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
io.sentry.SentryEnvelopeItem: SentryEnvelopeItem(io.sentry.SentryEnvelopeItemHeader,java.util.concurrent.Callable)
io.flutter.embedding.android.FlutterImageView: io.flutter.embedding.engine.renderer.FlutterRenderer getAttachedRenderer()
androidx.arch.core.executor.ArchTaskExecutor: ArchTaskExecutor()
com.google.common.hash.BloomFilterStrategies$2: boolean mightContain(java.lang.Object,com.google.common.hash.Funnel,int,com.google.common.hash.BloomFilterStrategies$LockFreeBitArray)
kotlin.sequences.SequencesKt__SequencesKt$asSequence$$inlined$Sequence$1: SequencesKt__SequencesKt$asSequence$$inlined$Sequence$1(java.util.Iterator)
com.google.android.gms.common.api.internal.GoogleApiManager: java.lang.Object zas()
androidx.fragment.app.FragmentHostCallback: void onStartActivityFromFragment(androidx.fragment.app.Fragment,android.content.Intent,int,android.os.Bundle)
com.google.android.gms.common.SupportErrorDialogFragment: android.app.Dialog onCreateDialog(android.os.Bundle)
com.google.android.gms.maps.model.CustomCap: java.lang.String toString()
com.google.common.hash.HashCode: int hashCode()
androidx.versionedparcelable.ParcelImpl: ParcelImpl(android.os.Parcel)
com.tekartik.sqflite.SqflitePlugin$BgResult$2: void run()
com.google.android.gms.internal.maps.zzv: void zzB()
com.google.android.gms.maps.model.Polygon: int hashCode()
com.google.common.collect.MapMakerInternalMap$DummyInternalEntry: java.lang.Object getValue()
kotlin.jvm.internal.Reflection: kotlin.reflect.KClass getOrCreateKotlinClass(java.lang.Class)
androidx.fragment.app.Fragment: boolean isInBackStack()
io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler: void updateViewLayout(java.lang.Object[])
com.google.common.collect.MapMakerInternalMap$1: java.lang.Object get()
io.sentry.SentryEnvelopeHeaderAdapter: void write(com.google.gson.stream.JsonWriter,io.sentry.SentryEnvelopeHeader)
androidx.fragment.app.FragmentTransition: void replaceHide(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,androidx.fragment.app.Fragment,java.util.ArrayList)
kotlinx.coroutines.internal.LockFreeLinkedListNode: kotlinx.coroutines.internal.LockFreeLinkedListNode removeOrNext()
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$1: void dispose(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
com.google.android.gms.maps.GoogleMap: void setPadding(int,int,int,int)
com.google.android.gms.common.util.PlatformVersion: boolean isAtLeastN()
io.sentry.SentryOptions: int getMaxCacheItems()
com.google.gson.internal.Excluder: com.google.gson.internal.Excluder withModifiers(int[])
com.google.common.hash.LittleEndianByteArray$JavaLittleEndianBytes: LittleEndianByteArray$JavaLittleEndianBytes(java.lang.String,int)
kotlinx.coroutines.internal.MissingMainCoroutineDispatcher: kotlinx.coroutines.MainCoroutineDispatcher getImmediate()
androidx.fragment.app.FragmentTransitionImpl: void captureTransitioningViews(java.util.ArrayList,android.view.View)
androidx.window.embedding.SplitPairRule: SplitPairRule(java.util.Set,boolean,boolean,boolean,int,int,float,int,int,kotlin.jvm.internal.DefaultConstructorMarker)
com.google.android.gms.tasks.zzr: void zza(com.google.android.gms.tasks.zzq)
com.google.gson.internal.bind.TypeAdapters$35$1: java.lang.Object read(com.google.gson.stream.JsonReader)
com.google.common.collect.ImmutableList: com.google.common.collect.UnmodifiableListIterator listIterator()
com.google.common.collect.RegularImmutableSet: int internalArrayStart()
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: void accept$lambda-0(androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper,androidx.window.layout.WindowLayoutInfo)
com.google.android.gms.maps.zzz: void zzb(com.google.android.gms.maps.model.LatLng)
io.sentry.SentryClient: io.sentry.protocol.SentryId captureTransaction(io.sentry.protocol.SentryTransaction,io.sentry.Scope,java.lang.Object)
androidx.window.embedding.SplitInfo: boolean equals(java.lang.Object)
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.renderer.FlutterRenderer getRenderer()
io.sentry.transport.AsyncHttpTransport: void flush(long)
com.google.common.collect.SingletonImmutableSet: java.util.Iterator iterator()
com.google.android.gms.maps.model.TileOverlay: void remove()
io.sentry.transport.AsyncHttpTransport: io.sentry.transport.ITransportGate access$200(io.sentry.transport.AsyncHttpTransport)
com.google.android.gms.common.api.GoogleApiActivity: android.content.Intent zaa(android.content.Context,android.app.PendingIntent,int,boolean)
com.google.gson.JsonElement: com.google.gson.JsonNull getAsJsonNull()
androidx.fragment.app.Fragment: boolean performPrepareOptionsMenu(android.view.Menu)
com.google.gson.internal.bind.TypeAdapters$13: java.lang.Number read(com.google.gson.stream.JsonReader)
com.google.common.collect.MapMakerInternalMap$AbstractStrongKeyEntry: java.lang.Object getKey()
io.sentry.android.core.DefaultAndroidEventProcessor: DefaultAndroidEventProcessor(android.content.Context,io.sentry.ILogger,io.sentry.android.core.IBuildInfoProvider)
com.tekartik.sqflite.SqflitePlugin$2: void run()
com.google.android.gms.common.api.internal.zzb: zzb()
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: void onRequestPermissionsResult(int,java.lang.String[],int[])
androidx.window.layout.WindowMetricsCalculator$Companion$decorator$1: androidx.window.layout.WindowMetricsCalculator invoke(androidx.window.layout.WindowMetricsCalculator)
io.flutter.view.AccessibilityBridge: void access$1200(io.flutter.view.AccessibilityBridge)
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$4: java.lang.Object invoke(java.lang.Object)
io.sentry.protocol.Contexts: java.lang.Object toContextType(java.lang.String,java.lang.Class)
io.flutter.embedding.android.KeyboardManager$PerEventCallbackBuilder$Callback: void onKeyEventHandled(java.lang.Boolean)
io.sentry.protocol.Contexts: io.sentry.protocol.Browser getBrowser()
kotlinx.coroutines.internal.DispatchedContinuation: kotlin.coroutines.CoroutineContext getContext()
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$1: void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
com.google.common.reflect.TypeToken: TypeToken(java.lang.reflect.Type,com.google.common.reflect.TypeToken$1)
com.google.gson.GsonBuilder: com.google.gson.GsonBuilder generateNonExecutableJson()
com.google.android.gms.common.internal.zzf: boolean zzd()
com.google.common.collect.MapMakerInternalMap$Values: java.lang.Object[] toArray(java.lang.Object[])
io.sentry.SentryOptions: java.lang.String getCacheDirPath()
androidx.fragment.app.FragmentTransitionImpl: java.util.ArrayList prepareSetNameOverridesReordered(java.util.ArrayList)
io.sentry.CircularFifoQueue: java.lang.Object get(int)
com.google.common.hash.HashCode$BytesHashCode: long asLong()
kotlinx.coroutines.Job$DefaultImpls: void cancel$default(kotlinx.coroutines.Job,java.util.concurrent.CancellationException,int,java.lang.Object)
com.google.gson.internal.LinkedHashTreeMap$Node: boolean equals(java.lang.Object)
com.google.gson.internal.bind.TypeAdapters$24: void write(com.google.gson.stream.JsonWriter,java.util.UUID)
com.google.android.gms.signin.zaa: zaa()
kotlin.random.Random$Default: int nextInt()
androidx.lifecycle.ReportFragment$LifecycleCallbacks: ReportFragment$LifecycleCallbacks()
kotlin.text.StringsKt__StringsKt$rangesDelimitedBy$2: kotlin.Pair invoke(java.lang.CharSequence,int)
io.flutter.embedding.android.FlutterActivity: io.flutter.embedding.engine.FlutterEngine provideFlutterEngine(android.content.Context)
com.tekartik.sqflite.operation.BaseReadOperation: java.lang.Boolean getInTransaction()
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$2: java.lang.Object invoke(java.lang.Object)
com.google.android.gms.common.zzb: zzb()
com.google.common.base.MoreObjects$ToStringHelper: com.google.common.base.MoreObjects$ToStringHelper add(java.lang.String,java.lang.Object)
io.sentry.SentryOptions: void setAttachStacktrace(boolean)
io.flutter.embedding.engine.renderer.FlutterRenderer: void access$500(io.flutter.embedding.engine.renderer.FlutterRenderer,long)
io.sentry.cache.CacheStrategy: void sortFilesOldestToNewest(java.io.File[])
io.flutter.embedding.engine.FlutterJNI: void loadLibrary()
io.flutter.embedding.engine.renderer.FlutterRenderer: void setSemanticsEnabled(boolean)
io.sentry.protocol.OperatingSystem: void acceptUnknownProperties(java.util.Map)
kotlin.Pair: int hashCode()
kotlinx.coroutines.scheduling.CoroutineScheduler: void runSafely(kotlinx.coroutines.scheduling.Task)
kotlinx.coroutines.InvokeOnCancel: java.lang.Object invoke(java.lang.Object)
com.google.gson.internal.LinkedTreeMap: com.google.gson.internal.LinkedTreeMap$Node findByObject(java.lang.Object)
io.sentry.Hub: io.sentry.IHub clone()
kotlin.collections.CollectionsKt___CollectionsKt: java.util.Set toSet(java.lang.Iterable)
com.google.gson.internal.LinkedHashTreeMap: void rebalance(com.google.gson.internal.LinkedHashTreeMap$Node,boolean)
com.tekartik.sqflite.Database: java.lang.String getThreadLogTag()
io.flutter.plugin.editing.InputConnectionAdaptor: boolean deleteSurroundingText(int,int)
com.google.android.gms.maps.model.VisibleRegion: VisibleRegion(com.google.android.gms.maps.model.LatLng,com.google.android.gms.maps.model.LatLng,com.google.android.gms.maps.model.LatLng,com.google.android.gms.maps.model.LatLng,com.google.android.gms.maps.model.LatLngBounds)
kotlinx.coroutines.CommonPool: CommonPool()
io.sentry.SentryExceptionFactory: SentryExceptionFactory(io.sentry.SentryStackTraceFactory)
io.flutter.plugins.googlemaps.GoogleMapBuilder: void setMapToolbarEnabled(boolean)
io.sentry.android.core.DefaultAndroidEventProcessor: long getAvailableBlocksLong(android.os.StatFs)
androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper: void accept$lambda-1(androidx.window.embedding.ExtensionEmbeddingBackend$SplitListenerWrapper,java.util.List)
io.flutter.plugin.platform.SingleViewPresentation$PresentationState: SingleViewPresentation$PresentationState()
io.sentry.adapters.TimeZoneDeserializerAdapter: java.util.TimeZone deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext)
com.google.android.gms.internal.maps.zzae: void zzm(float)
com.google.gson.reflect.TypeToken: int hashCode()
kotlinx.coroutines.channels.ConflatedChannel: boolean isBufferEmpty()
com.google.android.gms.maps.internal.zzb: com.google.android.gms.dynamic.IObjectWrapper zoomBy(float)
com.google.android.gms.common.api.internal.zaae: zaae(com.google.android.gms.common.api.internal.LifecycleFragment,com.google.android.gms.common.api.internal.GoogleApiManager,com.google.android.gms.common.GoogleApiAvailability)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay valueOf(java.lang.String)
io.flutter.view.AccessibilityBridge$SemanticsNode: void transformPoint(float[],float[],float[])
com.google.android.gms.common.internal.zan: java.lang.Object createFromParcel(android.os.Parcel)
io.flutter.plugins.googlemaps.CircleController: void setStrokeColor(int)
com.google.gson.internal.bind.DateTypeAdapter$1: DateTypeAdapter$1()
io.flutter.plugin.common.StandardMessageCodec: int readSize(java.nio.ByteBuffer)
androidx.core.view.ViewCompat$3: java.lang.CharSequence frameworkGet(android.view.View)
com.google.gson.internal.ConstructorConstructor$2: java.lang.Object construct()
kotlin.collections.EmptyMap: java.lang.Object remove(java.lang.Object)
androidx.collection.MapCollections$ArrayIterator: java.lang.Object next()
kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion: long updateHead(long,int)
io.flutter.embedding.engine.FlutterJNI: void onPreEngineRestart()
com.google.gson.JsonArray: char getAsCharacter()
io.flutter.embedding.engine.systemchannels.PlatformChannel: void setPlatformMessageHandler(io.flutter.embedding.engine.systemchannels.PlatformChannel$PlatformMessageHandler)
io.flutter.plugins.urllauncher.WebViewActivity$2: boolean shouldOverrideUrlLoading(android.webkit.WebView,android.webkit.WebResourceRequest)
com.javih.add2calendar.Add2CalendarPlugin: void insert(java.lang.String,java.lang.String,java.lang.String,long,long,java.lang.String,boolean)
io.sentry.android.core.DefaultAndroidEventProcessor: void setDeviceIO(io.sentry.protocol.Device,boolean)
io.sentry.protocol.Contexts: void setTrace(io.sentry.SpanContext)
androidx.fragment.app.FragmentManagerImpl: void dispatchConfigurationChanged(android.content.res.Configuration)
io.flutter.plugin.localization.LocalizationPlugin$1: LocalizationPlugin$1(io.flutter.plugin.localization.LocalizationPlugin)
com.google.android.gms.dynamic.DeferredLifecycleHelper: com.google.android.gms.dynamic.LifecycleDelegate zaa(com.google.android.gms.dynamic.DeferredLifecycleHelper)
com.google.gson.internal.LinkedTreeMap$Node: LinkedTreeMap$Node()
androidx.core.app.NotificationCompat$Style: android.widget.RemoteViews makeContentView(androidx.core.app.NotificationBuilderWithBuilderAccessor)
kotlinx.coroutines.channels.AbstractChannel: kotlinx.coroutines.channels.ReceiveOrClosed takeFirstReceiveOrPeekClosed()
io.sentry.CircularFifoQueue: java.util.Iterator iterator()
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: void onResume()
io.flutter.embedding.android.FlutterActivity: boolean popSystemNavigator()
com.google.gson.internal.bind.TypeAdapters$12: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
kotlin.ranges.RangesKt___RangesKt: int coerceAtLeast(int,int)
com.google.android.gms.maps.GoogleMap: boolean setIndoorEnabled(boolean)
kotlin.collections.CollectionsKt___CollectionsKt: java.util.List toMutableList(java.lang.Iterable)
io.flutter.plugin.mouse.MouseCursorPlugin: void destroy()
io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler: android.view.WindowManager getWindowManager()
io.flutter.plugin.platform.PlatformViewsController: int access$500(io.flutter.plugin.platform.PlatformViewsController,double)
com.google.common.util.concurrent.CycleDetectingLockFactory$1: java.util.ArrayList initialValue()
com.google.gson.stream.JsonWriter: void replaceTop(int)
com.google.android.gms.tasks.zzu: void execute(java.lang.Runnable)
androidx.window.embedding.EmptyEmbeddingComponent: EmptyEmbeddingComponent()
androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions: boolean hasNext()
com.google.common.hash.HashCode: com.google.common.hash.HashCode fromBytesNoCopy(byte[])
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean access$5500(io.flutter.view.AccessibilityBridge$SemanticsNode,io.flutter.view.AccessibilityBridge$Action)
kotlin.ranges.IntRange: kotlin.ranges.IntRange access$getEMPTY$cp()
com.google.android.gms.maps.model.Polyline: void setWidth(float)
com.google.common.reflect.TypeToken: java.lang.String toString()
com.google.android.gms.tasks.DuplicateTaskCompletionException: java.lang.IllegalStateException of(com.google.android.gms.tasks.Task)
androidx.versionedparcelable.VersionedParcel: void writeParcelable(android.os.Parcelable,int)
androidx.fragment.app.FragmentFactory: java.lang.Class loadFragmentClass(java.lang.ClassLoader,java.lang.String)
com.google.gson.internal.bind.JsonTreeReader: JsonTreeReader(com.google.gson.JsonElement)
com.google.gson.internal.bind.TreeTypeAdapter$GsonContextImpl: TreeTypeAdapter$GsonContextImpl(com.google.gson.internal.bind.TreeTypeAdapter)
androidx.arch.core.executor.ArchTaskExecutor$2: ArchTaskExecutor$2()
kotlinx.coroutines.internal.DispatchedContinuation: java.lang.StackTraceElement getStackTraceElement()
com.google.android.gms.common.internal.ConnectionTelemetryConfiguration: boolean getMethodInvocationTelemetryEnabled()
io.sentry.protocol.SdkVersion: void addIntegration(java.lang.String)
io.sentry.protocol.Gpu: java.lang.Integer getVendorId()
io.flutter.plugins.googlemaps.GoogleMapController$1: GoogleMapController$1(io.flutter.plugins.googlemaps.GoogleMapController,io.flutter.plugin.common.MethodChannel$Result)
androidx.fragment.app.Fragment: void callStartTransitionListener()
com.google.gson.JsonParseException: JsonParseException(java.lang.Throwable)
com.google.gson.annotations.SerializedName: java.lang.String value()
androidx.collection.SimpleArrayMap: int indexOfKey(java.lang.Object)
com.google.common.collect.ImmutableList: int hashCode()
androidx.versionedparcelable.VersionedParcelParcel: boolean readBoolean()
androidx.versionedparcelable.VersionedParcel: void writeCharSequence(java.lang.CharSequence,int)
com.google.gson.internal.LinkedTreeMap$Node: java.lang.Object getKey()
com.google.android.gms.maps.GoogleMapOptions: int getMapType()
com.google.android.gms.common.internal.zzab: boolean zza(int,android.os.Parcel,android.os.Parcel,int)
io.flutter.embedding.android.FlutterSplashView$SavedState: FlutterSplashView$SavedState(android.os.Parcel)
io.sentry.protocol.SentryStackFrame: void setPreContext(java.util.List)
kotlin.jvm.internal.CallableReference: kotlin.reflect.KVisibility getVisibility()
io.sentry.protocol.SentryStackFrame: void setRawFunction(java.lang.String)
io.flutter.embedding.android.AndroidTouchProcessor: void addPointerForIndex(android.view.MotionEvent,int,int,int,android.graphics.Matrix,java.nio.ByteBuffer)
io.sentry.SentryBaseEvent: void setEnvironment(java.lang.String)
com.google.gson.stream.JsonWriter: boolean getSerializeNulls()
com.google.gson.FieldAttributes: java.lang.Object get(java.lang.Object)
com.google.android.gms.common.api.internal.ApiExceptionMapper: java.lang.Exception getException(com.google.android.gms.common.api.Status)
kotlinx.coroutines.scheduling.LimitingDispatcher: java.lang.String toString()
kotlinx.coroutines.EventLoop_commonKt: kotlinx.coroutines.internal.Symbol access$getCLOSED_EMPTY$p()
kotlinx.coroutines.channels.ArrayChannel: boolean isBufferEmpty()
com.tekartik.sqflite.Database: Database(java.lang.String,int,boolean,int)
com.google.gson.Gson: com.google.gson.TypeAdapter atomicLongAdapter(com.google.gson.TypeAdapter)
kotlinx.coroutines.JobSupport: kotlin.coroutines.CoroutineContext minusKey(kotlin.coroutines.CoroutineContext$Key)
io.sentry.SentryClient: io.sentry.protocol.SentryTransaction processTransaction(io.sentry.protocol.SentryTransaction,java.lang.Object,java.util.List)
kotlinx.coroutines.internal.MainDispatcherLoader: kotlinx.coroutines.MainCoroutineDispatcher loadMainDispatcher()
io.flutter.embedding.engine.FlutterJNI: void nativeDispatchSemanticsAction(long,int,int,java.nio.ByteBuffer,int)
io.flutter.view.AccessibilityBridge$AccessibilityFeature: AccessibilityBridge$AccessibilityFeature(java.lang.String,int,int)
androidx.window.embedding.SplitController: androidx.window.embedding.SplitController getInstance()
kotlin.coroutines.jvm.internal.CompletedContinuation: kotlin.coroutines.CoroutineContext getContext()
io.flutter.Log: void e(java.lang.String,java.lang.String,java.lang.Throwable)
kotlin.internal.ProgressionUtilKt: int getProgressionLastElement(int,int,int)
com.google.android.gms.common.Feature: java.lang.String toString()
com.google.gson.JsonObject: boolean equals(java.lang.Object)
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewCreationRequest: PlatformViewsChannel$PlatformViewCreationRequest(int,java.lang.String,double,double,int,java.nio.ByteBuffer)
io.flutter.plugins.googlemaps.PolygonController: void setHoles(java.util.List)
com.google.android.gms.maps.model.zzu: com.google.android.gms.maps.model.Tile zzb(int,int,int)
com.google.android.gms.maps.zzo: void zzb(com.google.android.gms.internal.maps.zzaa)
io.flutter.plugin.editing.InputConnectionAdaptor: boolean doPerformContextMenuAction(int)
io.sentry.android.core.SystemEventsBreadcrumbsIntegration$SystemEventsBroadcastReceiver: SystemEventsBreadcrumbsIntegration$SystemEventsBroadcastReceiver(io.sentry.IHub,io.sentry.ILogger)
io.sentry.Session: io.sentry.Session clone()
com.google.android.gms.common.api.internal.BasePendingResult: void zab(com.google.android.gms.common.api.Result)
com.google.gson.internal.bind.TypeAdapters$18: void write(com.google.gson.stream.JsonWriter,java.math.BigInteger)
com.google.android.gms.common.api.internal.zah: boolean zaa(com.google.android.gms.common.api.internal.zabq)
com.google.android.gms.common.api.internal.zacf: void run()
io.flutter.plugin.common.StandardMethodCodec: java.nio.ByteBuffer encodeMethodCall(io.flutter.plugin.common.MethodCall)
com.google.android.gms.common.util.DefaultClock: DefaultClock()
androidx.core.util.LogWriter: void write(char[],int,int)
io.sentry.SentryOptions: java.lang.String getSentryClientName()
kotlin.io.FilesKt__FileReadWriteKt: void writeText(java.io.File,java.lang.String,java.nio.charset.Charset)
com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper: com.google.common.collect.MapMakerInternalMap$Strength valueStrength()
kotlinx.coroutines.JobSupport: java.lang.Throwable getFinalRootCause(kotlinx.coroutines.JobSupport$Finishing,java.util.List)
androidx.fragment.app.FragmentManagerState$1: androidx.fragment.app.FragmentManagerState createFromParcel(android.os.Parcel)
io.flutter.plugin.platform.PlatformViewsController: android.view.MotionEvent$PointerCoords parsePointerCoords(java.lang.Object,float)
io.sentry.HubAdapter: io.sentry.protocol.SentryId captureException(java.lang.Throwable,java.lang.Object)
com.google.common.collect.ImmutableList$SubList: int internalArrayEnd()
com.google.android.gms.maps.model.Circle: void setVisible(boolean)
io.flutter.embedding.engine.dart.DartExecutor: void executeDartEntrypoint(io.flutter.embedding.engine.dart.DartExecutor$DartEntrypoint)
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: void setLastInfo(androidx.window.layout.WindowLayoutInfo)
io.sentry.protocol.Device: java.lang.Long getFreeMemory()
com.google.android.gms.signin.internal.zaj: zaj()
com.google.android.gms.maps.internal.zzau: boolean zza(int,android.os.Parcel,android.os.Parcel,int)
androidx.lifecycle.LifecycleRegistry$ObserverWithState: void dispatchEvent(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)
io.flutter.plugin.platform.PlatformViewsController: void initializePlatformViewIfNeeded(int)
com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment: void maybeDrainReferenceQueues()
com.google.common.collect.MapMakerInternalMap$EntryIterator: java.util.Map$Entry next()
androidx.window.embedding.ExtensionEmbeddingBackend: ExtensionEmbeddingBackend(androidx.window.embedding.EmbeddingInterfaceCompat)
io.sentry.util.CollectionUtils: java.util.List newArrayList(java.util.List)
com.google.android.gms.maps.model.Polygon: void setGeodesic(boolean)
kotlinx.coroutines.DispatchedTask: void cancelCompletedResult$kotlinx_coroutines_core(java.lang.Object,java.lang.Throwable)
com.google.android.gms.common.internal.service.zap: com.google.android.gms.common.Feature[] getApiFeatures()
kotlin.coroutines.CoroutineContext$plus$1: CoroutineContext$plus$1()
io.sentry.SendFireAndForgetEnvelopeSender: io.sentry.SendCachedEnvelopeFireAndForgetIntegration$SendFireAndForget create(io.sentry.IHub,io.sentry.SentryOptions)
kotlin.text.StringsKt__StringsKt: int getLastIndex(java.lang.CharSequence)
androidx.window.embedding.ActivityFilter: ActivityFilter(android.content.ComponentName,java.lang.String)
com.google.android.gms.auth.api.signin.GoogleSignInAccount: java.lang.String getFamilyName()
com.google.common.collect.UnmodifiableIterator: void remove()
io.sentry.android.core.TempSensorBreadcrumbsIntegration: void onAccuracyChanged(android.hardware.Sensor,int)
kotlinx.coroutines.EventLoopImplBase$DelayedTask: int compareTo(java.lang.Object)
com.google.android.gms.common.internal.BaseGmsClient: boolean requiresGooglePlayServices()
io.sentry.adapters.TimeZoneSerializerAdapter: TimeZoneSerializerAdapter(io.sentry.SentryOptions)
com.google.common.collect.MapMakerInternalMap: java.lang.Object put(java.lang.Object,java.lang.Object)
io.sentry.protocol.SentryStackFrame: java.lang.Boolean isNative()
kotlinx.coroutines.EventLoop: EventLoop()
com.google.common.collect.MapMakerInternalMap$EntrySet: MapMakerInternalMap$EntrySet(com.google.common.collect.MapMakerInternalMap)
com.google.gson.internal.bind.TypeAdapters$21: java.lang.Object read(com.google.gson.stream.JsonReader)
io.sentry.android.core.SentryAndroidOptions: boolean isEnableSystemEventBreadcrumbs()
com.google.android.gms.maps.model.RoundCap: RoundCap()
com.google.android.gms.auth.api.signin.internal.Storage: Storage(android.content.Context)
com.google.gson.internal.Excluder$1: java.lang.Object read(com.google.gson.stream.JsonReader)
com.google.android.gms.common.api.internal.zza: zza(com.google.android.gms.common.api.internal.zzb,com.google.android.gms.common.api.internal.LifecycleCallback,java.lang.String)
com.google.android.gms.common.util.ArrayUtils: boolean contains(java.lang.Object[],java.lang.Object)
io.sentry.SentryOptions: boolean isSendDefaultPii()
io.flutter.embedding.engine.FlutterJNI: void destroyOverlaySurfaces()
com.google.android.gms.common.util.zza: int zza(int)
io.flutter.embedding.android.FlutterActivity: java.lang.String getCachedEngineId()
androidx.fragment.app.FragmentActivity: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])
com.google.common.collect.ImmutableList: java.lang.Object remove(int)
io.sentry.SendFireAndForgetOutboxSender: io.sentry.SendCachedEnvelopeFireAndForgetIntegration$SendFireAndForget create(io.sentry.IHub,io.sentry.SentryOptions)
com.google.android.gms.maps.model.Polyline: void setJointType(int)
androidx.fragment.app.FragmentTransitionImpl: void getBoundsOnScreen(android.view.View,android.graphics.Rect)
io.flutter.embedding.engine.renderer.FlutterRenderer$1: FlutterRenderer$1(io.flutter.embedding.engine.renderer.FlutterRenderer)
com.google.android.gms.maps.GoogleMap: void setBuildingsEnabled(boolean)
com.google.android.gms.common.internal.safeparcel.SafeParcelWriter: int zza(android.os.Parcel,int)
io.sentry.protocol.Device: void setExternalFreeStorage(java.lang.Long)
io.flutter.plugins.googlemaps.PolylinesController: void changePolylines(java.util.List)
kotlinx.coroutines.JobSupport: boolean isCompleted()
com.google.common.base.Predicate: boolean apply(java.lang.Object)
io.sentry.IHub: void withScope(io.sentry.ScopeCallback)
com.google.common.base.Equivalence: com.google.common.base.Equivalence equals()
com.google.android.gms.common.internal.zau: java.lang.Object createFromParcel(android.os.Parcel)
io.flutter.plugins.googlemaps.GoogleMapController: void setInitialTileOverlays(java.util.List)
io.sentry.transport.ReusableCountLatch: int getCount()
io.sentry.config.ClasspathPropertiesLoader: ClasspathPropertiesLoader(io.sentry.ILogger)
kotlinx.coroutines.internal.SystemPropsKt__SystemPropsKt: java.lang.String systemProp(java.lang.String)
com.google.gson.JsonPrimitive: JsonPrimitive(java.lang.String)
io.sentry.protocol.SdkVersion: SdkVersion(java.lang.String,java.lang.String)
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry: android.graphics.SurfaceTexture surfaceTexture()
com.google.android.gms.common.api.GoogleApi: GoogleApi(android.content.Context,com.google.android.gms.common.api.Api,com.google.android.gms.common.api.Api$ApiOptions,com.google.android.gms.common.api.GoogleApi$Settings)
io.sentry.SpanStatus: io.sentry.SpanStatus[] values()
io.sentry.SentryOptions: long getFlushTimeoutMillis()
com.google.android.gms.dynamite.zzc: zzc(java.lang.String,java.lang.ClassLoader)
com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry: java.lang.Object getValue()
io.flutter.plugin.platform.PlatformViewsController: io.flutter.embedding.android.FlutterView access$900(io.flutter.plugin.platform.PlatformViewsController)
io.sentry.android.core.ANRWatchDog$ANRListener: void onAppNotResponding(io.sentry.android.core.ApplicationNotResponding)
io.flutter.plugins.urllauncher.UrlLauncherPlugin: void onDetachedFromActivity()
io.flutter.view.AccessibilityBridge$SemanticsNode: io.flutter.view.AccessibilityBridge$CustomAccessibilityAction access$2800(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.sentry.protocol.SentryTransaction: boolean isSampled()
com.google.common.collect.MapMakerInternalMap$1: void clear()
com.google.android.gms.maps.model.zzb: zzb()
io.sentry.android.core.DefaultAndroidEventProcessor: void setAppPackageInfo(io.sentry.protocol.App,android.content.pm.PackageInfo)
androidx.arch.core.executor.DefaultTaskExecutor$1: DefaultTaskExecutor$1(androidx.arch.core.executor.DefaultTaskExecutor)
com.google.gson.internal.ConstructorConstructor$3: ConstructorConstructor$3(com.google.gson.internal.ConstructorConstructor,java.lang.reflect.Constructor)
com.tekartik.sqflite.SqflitePlugin: com.tekartik.sqflite.Database access$500(com.tekartik.sqflite.SqflitePlugin,com.tekartik.sqflite.Database,io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
com.google.common.collect.MapMakerInternalMap$KeySet: void clear()
io.flutter.plugin.mouse.MouseCursorPlugin: MouseCursorPlugin(io.flutter.plugin.mouse.MouseCursorPlugin$MouseCursorViewDelegate,io.flutter.embedding.engine.systemchannels.MouseCursorChannel)
androidx.collection.MapCollections$EntrySet: MapCollections$EntrySet(androidx.collection.MapCollections)
kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt: kotlin.coroutines.Continuation createCoroutineUnintercepted(kotlin.jvm.functions.Function2,java.lang.Object,kotlin.coroutines.Continuation)
com.google.android.gms.maps.model.MarkerOptions: com.google.android.gms.maps.model.MarkerOptions anchor(float,float)
kotlinx.coroutines.CompletedWithCancellation: boolean equals(java.lang.Object)
com.google.android.gms.internal.maps.zzc: void zze(android.os.Parcel,android.os.Parcelable)
io.flutter.view.AccessibilityBridge$SemanticsNode: float min(float,float,float,float)
androidx.window.embedding.EmbeddingAdapter: java.util.function.Predicate translateActivityPredicates(java.util.Set)
io.flutter.plugins.googlemaps.MarkerBuilder: void setInfoWindowText(java.lang.String,java.lang.String)
io.flutter.embedding.android.FlutterView: int guessBottomKeyboardInset(android.view.WindowInsets)
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType: io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType fromValue(java.lang.String)
io.flutter.view.AccessibilityBridge$3: AccessibilityBridge$3(io.flutter.view.AccessibilityBridge,android.os.Handler)
io.sentry.android.core.LoadClass: LoadClass()
io.sentry.EventProcessor: io.sentry.protocol.SentryTransaction process(io.sentry.protocol.SentryTransaction,java.lang.Object)
io.flutter.plugin.common.StandardMessageCodec: void readAlignment(java.nio.ByteBuffer,int)
com.google.android.gms.signin.internal.SignInClientImpl: android.os.IInterface createServiceInterface(android.os.IBinder)
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory: com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$BoundField createBoundField(com.google.gson.Gson,java.lang.reflect.Field,java.lang.String,com.google.gson.reflect.TypeToken,boolean,boolean)
io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type: io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type valueOf(java.lang.String)
androidx.window.embedding.EmbeddingAdapter: java.lang.Object component2(android.util.Pair)
com.google.gson.JsonPrimitive: java.math.BigInteger getAsBigInteger()
io.sentry.CircularFifoQueue: CircularFifoQueue()
kotlinx.coroutines.internal.ThreadSafeHeap: void swap(int,int)
com.google.android.gms.dynamite.zzh: zzh()
androidx.fragment.app.FragmentManagerState$1: FragmentManagerState$1()
io.sentry.util.ApplyScopeUtils: boolean shouldApplyScopeData(java.lang.Object)
com.google.android.gms.maps.model.Marker: void setAnchor(float,float)
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation: io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation fromValue(java.lang.String)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$1: FlutterActivityAndFragmentDelegate$1(io.flutter.embedding.android.FlutterActivityAndFragmentDelegate)
com.google.android.gms.common.api.internal.ApiKey: com.google.android.gms.common.api.internal.ApiKey zaa(com.google.android.gms.common.api.Api,com.google.android.gms.common.api.Api$ApiOptions,java.lang.String)
io.sentry.protocol.Device: void setConnectionType(java.lang.String)
androidx.collection.ArraySet: boolean add(java.lang.Object)
kotlinx.coroutines.EventLoop: void incrementUseCount$default(kotlinx.coroutines.EventLoop,boolean,int,java.lang.Object)
com.google.common.collect.RegularImmutableSet: com.google.common.collect.ImmutableList createAsList()
io.sentry.SynchronizedCollection: boolean containsAll(java.util.Collection)
com.google.android.gms.common.api.internal.zact: zact(android.content.Context,android.os.Handler,com.google.android.gms.common.internal.ClientSettings)
io.sentry.android.core.ActivityLifecycleIntegration: void onActivityDestroyed(android.app.Activity)
androidx.core.app.NotificationCompat$Builder: androidx.core.app.NotificationCompat$Builder setChannelId(java.lang.String)
io.flutter.plugins.googlemaps.GoogleMapController: void setMapToolbarEnabled(boolean)
io.sentry.CircularFifoQueue: boolean isFull()
io.sentry.SentryBaseEvent: void setExtras(java.util.Map)
kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsKt: java.lang.Object getCOROUTINE_SUSPENDED()
com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment: java.lang.ref.ReferenceQueue access$300(com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment)
io.sentry.Scope: java.lang.String getTransactionName()
io.flutter.plugins.urllauncher.WebViewActivity$1: WebViewActivity$1(io.flutter.plugins.urllauncher.WebViewActivity)
io.sentry.UserFeedback: io.sentry.protocol.SentryId getEventId()
androidx.core.view.ViewCompat: androidx.core.view.ViewCompat$AccessibilityViewProperty paneTitleProperty()
com.google.android.gms.dynamic.DeferredLifecycleHelper: void zac(com.google.android.gms.dynamic.DeferredLifecycleHelper,com.google.android.gms.dynamic.LifecycleDelegate)
kotlinx.coroutines.ExecutorCoroutineDispatcherImpl: void close()
androidx.window.core.Bounds: Bounds(android.graphics.Rect)
androidx.window.embedding.SplitRule: boolean checkParentMetrics(android.view.WindowMetrics)
androidx.collection.SimpleArrayMap: java.lang.Object valueAt(int)
com.google.android.gms.common.internal.zad: void zaa()
io.sentry.SentryEnvelopeItemHeader: java.lang.String getAttachmentType()
androidx.collection.ArraySet$1: java.util.Map colGetMap()
io.sentry.protocol.SentryStackFrame: java.lang.String getContextLine()
kotlinx.coroutines.channels.Closed: kotlinx.coroutines.internal.Symbol tryResumeSend(kotlinx.coroutines.internal.LockFreeLinkedListNode$PrepareOp)
io.flutter.embedding.android.FlutterImageView: void updateCurrentBitmap()
io.flutter.plugins.googlemaps.MarkerController: void setIcon(com.google.android.gms.maps.model.BitmapDescriptor)
io.flutter.plugin.editing.TextInputPlugin$1: void setPlatformViewClient(int,boolean)
com.google.gson.internal.bind.TypeAdapters$20: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
com.google.android.gms.maps.model.zzw: java.lang.Object createFromParcel(android.os.Parcel)
io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler: void addView(java.lang.Object[])
io.sentry.SentryOptions: void setMaxAttachmentSize(long)
io.flutter.plugins.googlemaps.GoogleMapController: void onMapLongClick(com.google.android.gms.maps.model.LatLng)
kotlin.Result: java.lang.Throwable exceptionOrNull-impl(java.lang.Object)
androidx.fragment.app.BackStackState: BackStackState(androidx.fragment.app.BackStackRecord)
androidx.window.core.Version: int hashCode()
io.sentry.protocol.SentryId: SentryId(java.util.UUID)
com.google.gson.internal.LinkedHashTreeMap$LinkedTreeMapIterator: com.google.gson.internal.LinkedHashTreeMap$Node nextNode()
com.tekartik.sqflite.SqlCommand: java.lang.String toString(java.lang.Object)
io.sentry.protocol.SentryStackFrame: java.lang.String getPlatform()
androidx.collection.ArraySet$1: ArraySet$1(androidx.collection.ArraySet)
io.sentry.protocol.Device: Device()
com.google.android.gms.common.api.PendingResult: PendingResult()
androidx.window.layout.WindowInfoTrackerImpl$windowLayoutInfo$1: java.lang.Object invokeSuspend(java.lang.Object)
io.sentry.android.core.AppLifecycleIntegration: void removeObserver()
kotlinx.coroutines.channels.AbstractChannel: java.lang.Object pollInternal()
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel: io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewsHandler access$000(io.flutter.embedding.engine.systemchannels.PlatformViewsChannel)
kotlinx.coroutines.ChildHandleNode: boolean childCancelled(java.lang.Throwable)
io.sentry.protocol.SentryThread: java.lang.String getName()
io.flutter.plugins.sharedpreferences.MethodCallHandlerImpl$1$1: void run()
com.google.common.collect.MapMakerInternalMap$1: com.google.common.collect.MapMakerInternalMap$InternalEntry getEntry()
io.sentry.android.ndk.SentryNdk: void shutdown()
com.google.android.gms.dynamic.IObjectWrapper$Stub: com.google.android.gms.dynamic.IObjectWrapper asInterface(android.os.IBinder)
io.flutter.embedding.android.FlutterSplashView$1: void onFlutterEngineAttachedToFlutterView(io.flutter.embedding.engine.FlutterEngine)
kotlin.jvm.JvmClassMappingKt: java.lang.Class getJavaObjectType(kotlin.reflect.KClass)
kotlinx.coroutines.CompletedContinuation: int hashCode()
com.google.common.collect.ImmutableList$SubList: java.lang.Object[] internalArray()
io.flutter.plugin.platform.SingleViewPresentation: SingleViewPresentation(android.content.Context,android.view.Display,io.flutter.plugin.platform.AccessibilityEventsDelegate,io.flutter.plugin.platform.SingleViewPresentation$PresentationState,android.view.View$OnFocusChangeListener,boolean)
io.sentry.Stack: io.sentry.Stack$StackItem peek()
io.flutter.plugins.googlemaps.MarkerController: void remove()
io.sentry.adapters.SentryIdDeserializerAdapter: io.sentry.protocol.SentryId deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext)
kotlinx.coroutines.internal.ExceptionsConstuctorKt$createConstructor$$inlined$safeCtor$4: java.lang.Object invoke(java.lang.Object)
androidx.window.embedding.SplitPairFilter: android.content.ComponentName getSecondaryActivityName()
io.sentry.CircularFifoQueue$1: void remove()
io.sentry.CircularFifoQueue: int access$000(io.sentry.CircularFifoQueue)
com.google.gson.internal.bind.TypeAdapters$28: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
com.google.common.reflect.Types$JavaVersion: com.google.common.collect.ImmutableList usedInGenericType(java.lang.reflect.Type[])
io.sentry.SentryOptions: void setSentryClientName(java.lang.String)
com.google.android.gms.common.ConnectionResult: int hashCode()
kotlinx.coroutines.UndispatchedCoroutine: boolean clearThreadContext()
androidx.core.app.RemoteActionCompatParcelizer: void write(androidx.core.app.RemoteActionCompat,androidx.versionedparcelable.VersionedParcel)
io.flutter.plugin.editing.InputConnectionAdaptor: void didChangeEditingState(boolean,boolean,boolean)
androidx.fragment.app.FragmentTransition: java.lang.Object configureSharedElementsOrdered(androidx.fragment.app.FragmentTransitionImpl,android.view.ViewGroup,android.view.View,androidx.collection.ArrayMap,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,java.util.ArrayList,java.util.ArrayList,java.lang.Object,java.lang.Object)
com.google.android.gms.common.api.internal.zace: zace(com.google.android.gms.common.internal.MethodInvocation,int,long,int)
androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager: void checkPaneVisibility(android.view.View,boolean)
com.google.android.gms.maps.model.TileOverlay: void clearTileCache()
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.KeyEventChannel getKeyEventChannel()
com.google.android.gms.dynamic.DeferredLifecycleHelper: void onDestroy()
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState: io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState fromJson(org.json.JSONObject)
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.CharSequence access$3100(io.flutter.view.AccessibilityBridge$SemanticsNode)
io.flutter.plugins.googlemaps.GoogleMapController: void onInputConnectionLocked()
androidx.lifecycle.FullLifecycleObserverAdapter: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)
kotlinx.coroutines.CoroutineId: java.lang.Object updateThreadContext(kotlin.coroutines.CoroutineContext)
com.google.android.gms.dynamic.DeferredLifecycleHelper: void zaf(android.os.Bundle,com.google.android.gms.dynamic.zah)
io.flutter.plugin.common.StringCodec: java.lang.String decodeMessage(java.nio.ByteBuffer)
com.google.common.collect.MapMakerInternalMap$1: MapMakerInternalMap$1()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: android.view.WindowInsetsAnimation$Callback getAnimationCallback()
com.google.android.gms.maps.internal.zzbs: zzbs(android.os.IBinder)
io.flutter.embedding.android.FlutterImageView: android.media.ImageReader createImageReader(int,int)
io.flutter.plugin.platform.PlatformPlugin: void setSystemChromeChangeListener()
io.flutter.view.AccessibilityBridge$Flag: AccessibilityBridge$Flag(java.lang.String,int,int)
kotlinx.coroutines.internal.MissingMainCoroutineDispatcher: MissingMainCoroutineDispatcher(java.lang.Throwable,java.lang.String)
kotlinx.coroutines.scheduling.WorkQueue: long tryStealBlockingFrom(kotlinx.coroutines.scheduling.WorkQueue)
com.google.android.gms.common.internal.zzu: int zza()
com.google.android.gms.common.internal.safeparcel.SafeParcelWriter: void writeList(android.os.Parcel,int,java.util.List,boolean)
com.google.gson.internal.JavaVersion: JavaVersion()
io.sentry.android.core.SentryAndroid: void init(android.content.Context,io.sentry.ILogger)
com.google.android.gms.common.api.internal.LifecycleActivity: androidx.fragment.app.FragmentActivity zzb()
com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter: java.lang.Object read(com.google.gson.stream.JsonReader)
io.flutter.plugins.googlemaps.MarkerController: void setVisible(boolean)
com.google.android.gms.maps.UiSettings: void setRotateGesturesEnabled(boolean)
androidx.window.layout.SidecarCompat$Companion: SidecarCompat$Companion()
io.flutter.view.AccessibilityBridge$SemanticsNode: int access$2120(io.flutter.view.AccessibilityBridge$SemanticsNode,int)
com.google.common.util.concurrent.AbstractFuture$UnsafeAtomicHelper: boolean casWaiters(com.google.common.util.concurrent.AbstractFuture,com.google.common.util.concurrent.AbstractFuture$Waiter,com.google.common.util.concurrent.AbstractFuture$Waiter)
io.flutter.plugin.common.JSONMessageCodec: java.lang.Object decodeMessage(java.nio.ByteBuffer)
io.flutter.embedding.android.AndroidTouchProcessor: boolean onTouchEvent(android.view.MotionEvent,android.graphics.Matrix)
kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt$createCoroutineUnintercepted$$inlined$createCoroutineFromSuspendFunction$IntrinsicsKt__IntrinsicsJvmKt$1: IntrinsicsKt__IntrinsicsJvmKt$createCoroutineUnintercepted$$inlined$createCoroutineFromSuspendFunction$IntrinsicsKt__IntrinsicsJvmKt$1(kotlin.coroutines.Continuation,kotlin.jvm.functions.Function1)
io.flutter.plugin.editing.TextInputPlugin$1: void setEditingState(io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState)
io.flutter.view.AccessibilityBridge: boolean performAction(int,int,android.os.Bundle)
com.google.android.gms.common.api.internal.zabq: void zau()
androidx.fragment.app.FragmentManagerImpl: int reverseTransit(int)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback: int access$500(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback)
com.google.gson.Gson: java.lang.String toJson(com.google.gson.JsonElement)
io.flutter.plugins.googlemaps.Convert: java.util.List toList(java.lang.Object)
kotlin.sequences.SequencesKt___SequencesKt: kotlin.sequences.Sequence map(kotlin.sequences.Sequence,kotlin.jvm.functions.Function1)
com.google.android.gms.internal.maps.zzv: void zzy(java.lang.String)
kotlin.ranges.IntProgression: kotlin.collections.IntIterator iterator()
com.google.android.gms.common.api.internal.zabl: zabl(com.google.android.gms.common.api.internal.GoogleApiManager)
androidx.fragment.app.Fragment: void performPause()
io.sentry.SynchronizedCollection: SynchronizedCollection(java.util.Collection,java.lang.Object)
io.sentry.GsonSerializer: void serialize(io.sentry.SentryEnvelope,java.io.OutputStream)
kotlin.jvm.internal.Reflection: kotlin.reflect.KDeclarationContainer getOrCreateKotlinPackage(java.lang.Class)
io.sentry.protocol.Device: void setMemorySize(java.lang.Long)
com.google.gson.stream.JsonReader: java.lang.String nextString()
com.google.android.gms.common.internal.BaseGmsClient: void onConnectionSuspended(int)
com.google.common.collect.MapMakerInternalMap$KeySet: java.util.Iterator iterator()
kotlinx.coroutines.internal.ExceptionsConstuctorKt$createConstructor$$inlined$safeCtor$4: ExceptionsConstuctorKt$createConstructor$$inlined$safeCtor$4(java.lang.reflect.Constructor)
io.flutter.plugin.platform.SingleViewPresentation$ImmContext: SingleViewPresentation$ImmContext(android.content.Context)
io.sentry.android.core.EnvelopeFileObserver$CachedEnvelopeHint: EnvelopeFileObserver$CachedEnvelopeHint(long,io.sentry.ILogger)
com.google.gson.internal.bind.TypeAdapters$7: java.lang.Number read(com.google.gson.stream.JsonReader)
com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry: MapMakerInternalMap$WeakKeyWeakValueEntry(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry)
com.google.android.gms.common.internal.BaseGmsClient: boolean requiresAccount()
com.google.common.reflect.TypeToken$4: void visitGenericArrayType(java.lang.reflect.GenericArrayType)
androidx.fragment.app.FragmentActivity$HostCallbacks: androidx.activity.OnBackPressedDispatcher getOnBackPressedDispatcher()
kotlin.jvm.internal.Reflection: java.lang.String renderLambdaToString(kotlin.jvm.internal.Lambda)
com.google.gson.internal.bind.TypeAdapters$35: java.lang.String toString()
io.flutter.embedding.engine.systemchannels.TextInputChannel: void next(int)
androidx.core.view.WindowInsetsControllerCompat$Impl30: void setAppearanceLightStatusBars(boolean)
io.sentry.transport.AsyncHttpTransport: void markHintWhenSendingFailed(java.lang.Object,boolean)
io.flutter.embedding.engine.FlutterJNI: void setAsyncWaitForVsyncDelegate(io.flutter.embedding.engine.FlutterJNI$AsyncWaitForVsyncDelegate)
com.google.common.collect.ImmutableSet: com.google.common.collect.ImmutableSet of(java.lang.Object)
androidx.collection.ArraySet$1: void colRemoveAt(int)
io.flutter.embedding.engine.FlutterEngine: io.flutter.embedding.engine.systemchannels.SystemChannel getSystemChannel()
com.google.common.util.concurrent.AbstractFuture$SynchronizedHelper: void putNext(com.google.common.util.concurrent.AbstractFuture$Waiter,com.google.common.util.concurrent.AbstractFuture$Waiter)
kotlin.coroutines.jvm.internal.BaseContinuationImpl: void releaseIntercepted()
androidx.fragment.app.FragmentActivity: void startActivityForResult(android.content.Intent,int,android.os.Bundle)
com.tekartik.sqflite.operation.BatchOperation: void handleSuccess(java.util.List)
androidx.lifecycle.ViewModelProvider: androidx.lifecycle.ViewModel get(java.lang.String,java.lang.Class)
io.sentry.SentryOptions: io.sentry.ILogger getLogger()
com.google.common.reflect.Types$JavaVersion$2: java.lang.reflect.Type newArrayType(java.lang.reflect.Type)
com.google.common.hash.HashCode: com.google.common.hash.HashCode fromLong(long)
kotlin.collections.EmptyList: java.util.ListIterator listIterator()
kotlin.coroutines.jvm.internal.DebugMetadataKt: kotlin.coroutines.jvm.internal.DebugMetadata getDebugMetadataAnnotation(kotlin.coroutines.jvm.internal.BaseContinuationImpl)
kotlinx.coroutines.CancellableContinuationImpl: void detachChild$kotlinx_coroutines_core()
androidx.fragment.app.FragmentTransitionCompat21$2: FragmentTransitionCompat21$2(androidx.fragment.app.FragmentTransitionCompat21,android.view.View,java.util.ArrayList)
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean isFocusable()
kotlinx.coroutines.JobSupport: kotlinx.coroutines.JobNode makeNode(kotlin.jvm.functions.Function1,boolean)
com.google.android.gms.internal.maps.zzb: android.os.IBinder asBinder()
androidx.fragment.app.Fragment: void startActivityForResult(android.content.Intent,int,android.os.Bundle)
io.sentry.protocol.SentryTransaction: io.sentry.SpanStatus getStatus()
io.sentry.protocol.User: java.util.Map getUnknown()
com.google.android.gms.common.GoogleApiAvailability: int isGooglePlayServicesAvailable(android.content.Context)
com.google.common.collect.MapMakerInternalMap$Segment: com.google.common.collect.MapMakerInternalMap$InternalEntry getLiveEntry(java.lang.Object,int)
com.google.android.gms.dynamic.DeferredLifecycleHelper: void onStop()
io.sentry.protocol.Device: java.lang.Integer getScreenWidthPixels()
com.google.common.collect.RegularImmutableList: java.lang.Object[] internalArray()
io.flutter.embedding.engine.dart.DartExecutor: java.lang.String getIsolateServiceId()
androidx.fragment.app.FragmentManagerViewModel$1: androidx.lifecycle.ViewModel create(java.lang.Class)
com.google.gson.internal.Excluder$1: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
androidx.core.view.OneShotPreDrawListener: androidx.core.view.OneShotPreDrawListener add(android.view.View,java.lang.Runnable)
kotlin.collections.EmptyIterator: int nextIndex()
androidx.fragment.app.FragmentTransaction: void doAddOp(int,androidx.fragment.app.Fragment,java.lang.String,int)
com.google.common.collect.SingletonImmutableSet: SingletonImmutableSet(java.lang.Object,int)
io.flutter.plugin.platform.PlatformViewRegistryImpl: io.flutter.plugin.platform.PlatformViewFactory getFactory(java.lang.String)
androidx.savedstate.SavedStateRegistryController: androidx.savedstate.SavedStateRegistryController create(androidx.savedstate.SavedStateRegistryOwner)
com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry: MapMakerInternalMap$WeakKeyStrongValueEntry(java.lang.ref.ReferenceQueue,java.lang.Object,int,com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry)
io.flutter.embedding.engine.FlutterEngineCache: io.flutter.embedding.engine.FlutterEngine get(java.lang.String)
io.flutter.embedding.android.DrawableSplashScreen$1: DrawableSplashScreen$1(io.flutter.embedding.android.DrawableSplashScreen,java.lang.Runnable)
io.flutter.embedding.android.FlutterSurfaceView: void detachFromRenderer()
kotlin.coroutines.jvm.internal.ContinuationImpl: ContinuationImpl(kotlin.coroutines.Continuation,kotlin.coroutines.CoroutineContext)
androidx.core.app.NotificationCompatJellybean: android.os.Bundle getBundleForAction(androidx.core.app.NotificationCompat$Action)
io.sentry.SentryOptions: void setEnvironment(java.lang.String)
com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList of()
androidx.versionedparcelable.VersionedParcel: androidx.versionedparcelable.VersionedParcelable readFromParcel(java.lang.String,androidx.versionedparcelable.VersionedParcel)
io.sentry.TransactionContext: TransactionContext(java.lang.String,java.lang.String,io.sentry.protocol.SentryId,io.sentry.SpanId,io.sentry.SpanId,java.lang.Boolean)
androidx.window.layout.WindowMetricsCalculatorCompat: androidx.window.layout.WindowMetrics computeMaximumWindowMetrics(android.app.Activity)
androidx.fragment.app.Fragment: void onPause()
com.google.android.gms.common.api.internal.zabq: void zaH(int)
io.sentry.config.FilesystemPropertiesLoader: FilesystemPropertiesLoader(java.lang.String,io.sentry.ILogger)
io.flutter.plugins.googlemaps.GoogleMapBuilder: void setInitialCameraPosition(com.google.android.gms.maps.model.CameraPosition)
io.sentry.flutter.SentryFlutterPluginKt: void access$getIfNotNull(java.util.Map,java.lang.String,kotlin.jvm.functions.Function1)
io.flutter.plugins.googlemaps.Convert: android.graphics.Bitmap toBitmap(java.lang.Object)
io.flutter.plugin.editing.TextInputPlugin$InputTarget: TextInputPlugin$InputTarget(io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type,int)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: void ensureAlive()
io.flutter.embedding.engine.systemchannels.PlatformViewsChannel$PlatformViewTouch: PlatformViewsChannel$PlatformViewTouch(int,java.lang.Number,java.lang.Number,int,int,java.lang.Object,java.lang.Object,int,int,float,float,int,int,int,int,long)
io.sentry.flutter.SentryFlutterPlugin: void onAttachedToEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
androidx.lifecycle.DefaultLifecycleObserver: void onResume(androidx.lifecycle.LifecycleOwner)
com.google.android.gms.common.internal.ConnectionTelemetryConfiguration: int getMaxMethodInvocationsLogged()
io.flutter.plugins.googlemaps.GoogleMapController: void onCameraMove()
com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList subListUnchecked(int,int)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack$FlutterMutator: android.graphics.Matrix getMatrix()
androidx.window.layout.SidecarCompat: boolean validateExtensionInterface()
com.google.android.gms.common.api.internal.zap: void onCreate(android.os.Bundle)
io.flutter.plugins.googlemaps.PolylineBuilder: void setVisible(boolean)
com.google.gson.internal.$Gson$Preconditions: java.lang.Object checkNotNull(java.lang.Object)
com.google.common.collect.MapMakerInternalMap: int size()
com.google.gson.internal.ConstructorConstructor$14: ConstructorConstructor$14(com.google.gson.internal.ConstructorConstructor,java.lang.Class,java.lang.reflect.Type)
io.flutter.plugin.common.BasicMessageChannel: io.flutter.plugin.common.MessageCodec access$200(io.flutter.plugin.common.BasicMessageChannel)
io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay: io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiOverlay fromValue(java.lang.String)
com.google.android.gms.internal.base.zaa: zaa(android.os.IBinder,java.lang.String)
androidx.window.core.Version: java.lang.String getDescription()
androidx.window.embedding.SplitRule$Api30Impl: android.graphics.Rect getBounds(android.view.WindowMetrics)
com.google.android.gms.internal.maps.zzab: void zzy(boolean)
io.sentry.CustomSamplingContext: CustomSamplingContext()
androidx.window.layout.SidecarWindowBackend: androidx.window.layout.ExtensionInterfaceCompat getWindowExtension()
io.sentry.SentryOptions$Proxy: SentryOptions$Proxy()
androidx.collection.MapCollections$EntrySet: java.util.Iterator iterator()
io.flutter.plugins.pathprovider.PathProviderPlugin: void onDetachedFromEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
io.flutter.plugin.editing.TextInputPlugin: int inputTypeFromTextInputType(io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType,boolean,boolean,boolean,boolean,io.flutter.embedding.engine.systemchannels.TextInputChannel$TextCapitalization)
io.sentry.android.core.DefaultAndroidEventProcessor: io.sentry.SentryEvent process(io.sentry.SentryEvent,java.lang.Object)
kotlinx.coroutines.JobSupport: java.lang.Throwable getExceptionOrNull(java.lang.Object)
kotlinx.coroutines.EventLoopImplBase: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)
com.google.android.gms.common.api.internal.zzb: void onSaveInstanceState(android.os.Bundle)
com.google.android.gms.signin.internal.zaa: zaa(int,int,android.content.Intent)
com.google.common.hash.AbstractStreamingHasher: void munch()
com.google.android.gms.common.api.internal.TaskApiCall: int zaa()
kotlinx.coroutines.internal.Removed: Removed(kotlinx.coroutines.internal.LockFreeLinkedListNode)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry$FlutterEngineActivityPluginBinding: java.lang.Object getLifecycle()
androidx.fragment.app.Fragment: int getNextTransition()
io.sentry.transport.AsyncHttpTransport$AsyncConnectionThreadFactory: AsyncHttpTransport$AsyncConnectionThreadFactory(io.sentry.transport.AsyncHttpTransport$1)
com.google.android.gms.common.api.GoogleApi: com.google.android.gms.tasks.Task zae(int,com.google.android.gms.common.api.internal.TaskApiCall)
com.google.common.reflect.TypeToken$TypeFilter$1: boolean apply(java.lang.Object)
kotlin.jvm.internal.Intrinsics: int compare(int,int)
androidx.fragment.app.FragmentFactory: FragmentFactory()
com.google.android.gms.common.zac: zac(com.google.android.gms.common.GoogleApiAvailability,android.content.Context)
com.google.android.gms.maps.model.MapStyleOptions: void writeToParcel(android.os.Parcel,int)
com.tekartik.sqflite.operation.BaseReadOperation: java.lang.String getSql()
com.google.common.hash.Murmur3_128HashFunction: boolean equals(java.lang.Object)
io.flutter.plugin.platform.PlatformView: void onInputConnectionLocked()
com.google.android.gms.maps.internal.zzs: zzs()
androidx.window.layout.HardwareFoldingFeature: boolean isSeparating()
io.flutter.view.AccessibilityViewEmbedder: android.view.accessibility.AccessibilityNodeInfo convertToFlutterNode(android.view.accessibility.AccessibilityNodeInfo,int,android.view.View)
io.flutter.embedding.engine.FlutterJNI: void init(android.content.Context,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,long)
androidx.core.view.WindowInsetsControllerCompat$Impl26: WindowInsetsControllerCompat$Impl26(android.view.Window,android.view.View)
com.google.gson.internal.LinkedTreeMap$Node: java.lang.String toString()
io.flutter.embedding.engine.renderer.FlutterRenderer: io.flutter.view.TextureRegistry$SurfaceTextureEntry registerSurfaceTexture(android.graphics.SurfaceTexture)
io.sentry.protocol.Device: void setFamily(java.lang.String)
androidx.core.app.NotificationCompat$BubbleMetadata$Api30Impl: android.app.Notification$BubbleMetadata toPlatform(androidx.core.app.NotificationCompat$BubbleMetadata)
com.google.common.hash.HashCode$LongHashCode: int asInt()
kotlin.collections.EmptyList: java.lang.Object[] toArray(java.lang.Object[])
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: boolean isBitSet(long,int)
io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType: io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType valueOf(java.lang.String)
com.google.android.gms.common.internal.GmsClientSupervisor: void zzb(java.lang.String,java.lang.String,int,android.content.ServiceConnection,java.lang.String,boolean)
io.flutter.view.VsyncWaiter$1$1: void doFrame(long)
androidx.window.layout.WindowMetricsCalculatorCompat: void getRectSizeFromDisplay(android.app.Activity,android.graphics.Rect)
com.google.android.gms.maps.model.PolylineOptions: com.google.android.gms.maps.model.PolylineOptions geodesic(boolean)
androidx.fragment.app.BackStackRecord: void setOnStartPostponedListener(androidx.fragment.app.Fragment$OnStartEnterTransitionListener)
kotlinx.coroutines.internal.ThreadSafeHeap: kotlinx.coroutines.internal.ThreadSafeHeapNode[] realloc()
androidx.window.layout.SidecarWindowBackend$Companion: SidecarWindowBackend$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
io.sentry.Attachment: Attachment(java.lang.String,java.lang.String,java.lang.String)
io.sentry.transport.RateLimiter: RateLimiter(io.sentry.transport.ICurrentDateProvider,io.sentry.ILogger)
kotlinx.coroutines.JobSupportKt: kotlinx.coroutines.internal.Symbol access$getTOO_LATE_TO_CANCEL$p()
androidx.window.layout.HardwareFoldingFeature$Type$Companion: androidx.window.layout.HardwareFoldingFeature$Type getHINGE()
androidx.fragment.app.FragmentActivity: void onStateNotSaved()
androidx.collection.MapCollections$MapIterator: MapCollections$MapIterator(androidx.collection.MapCollections)
com.google.common.hash.ChecksumHashFunction$ChecksumHasher: ChecksumHashFunction$ChecksumHasher(com.google.common.hash.ChecksumHashFunction,java.util.zip.Checksum)
com.google.gson.internal.LinkedHashTreeMap$EntrySet: int size()
com.google.android.gms.internal.maps.zzy: boolean zzB(com.google.android.gms.internal.maps.zzaa)
com.tekartik.sqflite.operation.ExecuteOperation: java.lang.Object getArgument(java.lang.String)
com.google.android.gms.maps.model.zzc: java.lang.Object[] newArray(int)
io.flutter.plugin.common.EventChannel: EventChannel(io.flutter.plugin.common.BinaryMessenger,java.lang.String,io.flutter.plugin.common.MethodCodec,io.flutter.plugin.common.BinaryMessenger$TaskQueue)
com.google.common.reflect.Types$JavaVersion: com.google.common.reflect.Types$JavaVersion[] values()
androidx.arch.core.internal.SafeIterableMap$Entry: java.lang.Object getKey()
com.google.gson.internal.bind.SqlDateTypeAdapter: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
androidx.arch.core.internal.SafeIterableMap$DescendingIterator: androidx.arch.core.internal.SafeIterableMap$Entry forward(androidx.arch.core.internal.SafeIterableMap$Entry)
io.sentry.transport.StdoutTransport: StdoutTransport(io.sentry.ISerializer)
kotlinx.coroutines.AbstractCoroutine: void handleOnCompletionException$kotlinx_coroutines_core(java.lang.Throwable)
kotlinx.coroutines.LazyStandaloneCoroutine: LazyStandaloneCoroutine(kotlin.coroutines.CoroutineContext,kotlin.jvm.functions.Function2)
androidx.collection.MapCollections$MapIterator: boolean equals(java.lang.Object)
com.google.android.gms.common.internal.zzl: zzl()
com.google.android.gms.common.internal.safeparcel.SafeParcelWriter: void writeIBinder(android.os.Parcel,int,android.os.IBinder,boolean)
com.google.common.collect.ObjectArrays: java.lang.Object[] checkElementsNotNull(java.lang.Object[])
kotlinx.coroutines.Empty: boolean isActive()
io.sentry.DateUtils$2: DateUtils$2()
io.flutter.view.AccessibilityBridge$SemanticsNode: void access$5000(io.flutter.view.AccessibilityBridge$SemanticsNode,java.util.List)
io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType: io.flutter.embedding.engine.renderer.FlutterRenderer$DisplayFeatureType valueOf(java.lang.String)
io.sentry.SpanContext: io.sentry.SpanId getSpanId()
io.flutter.plugin.editing.TextInputPlugin$InputTarget$Type: TextInputPlugin$InputTarget$Type(java.lang.String,int)
androidx.arch.core.executor.ArchTaskExecutor$1: ArchTaskExecutor$1()
androidx.fragment.app.Fragment$4: android.view.View onFindViewById(int)
com.google.gson.JsonElement: int getAsInt()
io.flutter.embedding.android.FlutterActivity: androidx.lifecycle.Lifecycle getLifecycle()
com.google.android.gms.internal.maps.zzy: void zzp(boolean)
io.sentry.ISpan: void setStatus(io.sentry.SpanStatus)
com.google.common.util.concurrent.CycleDetectingLockFactory$Policies$3: void handlePotentialDeadlock(com.google.common.util.concurrent.CycleDetectingLockFactory$PotentialDeadlockException)
io.flutter.embedding.engine.dart.DartMessenger: void send(java.lang.String,java.nio.ByteBuffer,io.flutter.plugin.common.BinaryMessenger$BinaryReply)
io.flutter.embedding.android.FlutterView$ZeroSides: FlutterView$ZeroSides(java.lang.String,int)
io.sentry.transport.ReusableCountLatch$Sync: boolean tryReleaseShared(int)
io.sentry.Sentry: io.sentry.protocol.SentryId captureEvent(io.sentry.SentryEvent)
com.google.android.gms.maps.zzab: java.lang.Object createFromParcel(android.os.Parcel)
io.sentry.ISpan: io.sentry.ISpan startChild(java.lang.String,java.lang.String)
com.google.gson.internal.bind.TypeAdapters$12: TypeAdapters$12()
androidx.activity.ComponentActivity: java.lang.Object onRetainNonConfigurationInstance()
com.google.gson.InstanceCreator: java.lang.Object createInstance(java.lang.reflect.Type)
androidx.fragment.app.BackStackRecord: void runOnCommitRunnables()
com.google.common.hash.LittleEndianByteArray$JavaLittleEndianBytes: void putLongLittleEndian(byte[],int,long)
com.google.common.util.concurrent.AbstractFuture: java.lang.String pendingToString()
com.google.gson.internal.reflect.PreJava9ReflectionAccessor: void makeAccessible(java.lang.reflect.AccessibleObject)
com.google.gson.internal.bind.TypeAdapters$EnumTypeAdapter: java.lang.Object read(com.google.gson.stream.JsonReader)
androidx.lifecycle.LifecycleRegistry: void sync()
io.sentry.SentryOptions: void setEnableSessionTracking(boolean)
com.google.android.gms.common.internal.RootTelemetryConfiguration: RootTelemetryConfiguration(int,boolean,boolean,int,int)
androidx.fragment.app.FragmentManagerImpl: void addBackStackState(androidx.fragment.app.BackStackRecord)
com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper: void setValue(com.google.common.collect.MapMakerInternalMap$Segment,com.google.common.collect.MapMakerInternalMap$InternalEntry,java.lang.Object)
com.google.common.util.concurrent.AbstractFuture: java.lang.Object getFutureValue(com.google.common.util.concurrent.ListenableFuture)
io.sentry.NoOpSentryClient: io.sentry.NoOpSentryClient getInstance()
com.google.android.gms.maps.zzag: void onDestroy()
io.flutter.view.AccessibilityBridge$TextDirection: io.flutter.view.AccessibilityBridge$TextDirection[] values()
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: java.lang.Object getNextParkedWorker()
com.google.android.gms.common.api.internal.zabu: com.google.android.gms.common.api.Api$Client zaa(com.google.android.gms.common.api.internal.zabu)
io.flutter.embedding.android.FlutterView: void revertImageView(java.lang.Runnable)
com.google.gson.internal.LinkedTreeMap: com.google.gson.internal.LinkedTreeMap$Node findByEntry(java.util.Map$Entry)
io.sentry.protocol.Gpu: void setId(java.lang.Integer)
io.sentry.protocol.SentryId: boolean equals(java.lang.Object)
com.google.android.gms.common.Feature: boolean equals(java.lang.Object)
io.sentry.Scope: void setExtra(java.lang.String,java.lang.String)
com.google.gson.internal.$Gson$Types: java.lang.String typeToString(java.lang.reflect.Type)
androidx.collection.SimpleArrayMap: boolean remove(java.lang.Object,java.lang.Object)
com.google.android.gms.maps.model.zzh: zzh()
kotlin.io.FilesKt__FileReadWriteKt: void writeBytes(java.io.File,byte[])
androidx.arch.core.internal.FastSafeIterableMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)
io.flutter.embedding.engine.systemchannels.DeferredComponentChannel: void setDeferredComponentManager(io.flutter.embedding.engine.deferredcomponents.DeferredComponentManager)
androidx.window.embedding.EmbeddingAdapter: java.lang.Object component1(android.util.Pair)
androidx.core.view.ViewCompat$UnhandledKeyEventManager: boolean onUnhandledKeyEvent(android.view.View,android.view.KeyEvent)
io.flutter.plugins.googlemaps.GoogleMapController: void updateMyLocationSettings()
io.flutter.embedding.engine.FlutterJNI: void nativeSurfaceCreated(long,android.view.Surface)
kotlinx.coroutines.CommonPool: void isGoodCommonPool$lambda-9()
androidx.window.embedding.EmbeddingAdapter: boolean translateActivityIntentPredicates$lambda-3(androidx.window.embedding.EmbeddingAdapter,java.util.Set,android.util.Pair)
io.flutter.plugin.mouse.MouseCursorPlugin$1: void activateSystemCursor(java.lang.String)
androidx.fragment.app.FragmentTransitionImpl: void findNamedViews(java.util.Map,android.view.View)
io.sentry.SentryBaseEvent: void removeExtra(java.lang.String)
androidx.loader.app.LoaderManagerImpl$LoaderViewModel: void markForRedelivery()
com.google.android.gms.common.api.internal.BasePendingResult: BasePendingResult()
androidx.fragment.app.FragmentTransition$3: void run()
io.flutter.plugin.editing.FlutterTextUtils: FlutterTextUtils(io.flutter.embedding.engine.FlutterJNI)
com.google.android.gms.internal.maps.zzai: com.google.android.gms.internal.maps.zzaj zzc(android.os.IBinder)
io.sentry.ShutdownHookIntegration: void register(io.sentry.IHub,io.sentry.SentryOptions)
io.flutter.embedding.engine.FlutterJNI: java.lang.String getObservatoryUri()
io.sentry.android.core.SentryAndroidOptions: void setEnableAppLifecycleBreadcrumbs(boolean)
androidx.versionedparcelable.VersionedParcel: void writeVersionedParcelable(androidx.versionedparcelable.VersionedParcelable)
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: java.lang.Long getParentNodeId(android.view.accessibility.AccessibilityNodeInfo)
kotlinx.coroutines.CoroutineId: java.lang.String toString()
io.sentry.DateUtils$1: java.lang.Object initialValue()
io.flutter.plugins.pathprovider.PathProviderPlugin: java.util.List access$300(io.flutter.plugins.pathprovider.PathProviderPlugin)
com.google.android.gms.common.internal.BaseGmsClient: void zzi(com.google.android.gms.common.internal.BaseGmsClient,int,android.os.IInterface)
io.flutter.view.AccessibilityViewEmbedder: boolean onAccessibilityHoverEvent(int,android.view.MotionEvent)
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction: java.lang.String access$2902(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction,java.lang.String)
io.flutter.view.AccessibilityViewEmbedder: void cacheVirtualIdMappings(android.view.View,int,int)
com.google.android.gms.dynamite.zzq: int zze()
com.google.android.gms.dynamic.DeferredLifecycleHelper: void zae(int)
com.google.android.gms.maps.model.PolygonOptions: com.google.android.gms.maps.model.PolygonOptions strokeWidth(float)
androidx.core.app.NotificationCompat$Builder: android.os.Bundle getExtras()
androidx.fragment.app.FragmentManagerImpl: void makeActive(androidx.fragment.app.Fragment)
io.flutter.plugin.platform.PlatformPlugin$1: void setApplicationSwitcherDescription(io.flutter.embedding.engine.systemchannels.PlatformChannel$AppSwitcherDescription)
io.sentry.Span: boolean isFinished()
io.flutter.plugin.editing.FlutterTextUtils: boolean isRegionalIndicatorSymbol(int)
com.google.android.gms.maps.model.Marker: com.google.android.gms.maps.model.LatLng getPosition()
com.google.common.collect.ImmutableList: com.google.common.collect.ImmutableList$Builder builder()
kotlinx.coroutines.internal.MissingMainCoroutineDispatcher: java.lang.Void missing()
io.flutter.plugins.sharedpreferences.MethodCallHandlerImpl: void teardown()
io.flutter.plugins.urllauncher.WebViewActivity$2: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)
io.sentry.Breadcrumb: io.sentry.SentryLevel getLevel()
io.sentry.protocol.SentryStackFrame: java.lang.String getPackage()
androidx.fragment.app.FragmentManagerImpl: int transitToStyleIndex(int,boolean)
io.sentry.Hub: void addBreadcrumb(io.sentry.Breadcrumb,java.lang.Object)
androidx.fragment.app.FragmentActivity$HostCallbacks: int onGetWindowAnimations()
com.google.android.gms.common.stats.ConnectionTracker: boolean zza(android.content.Context,java.lang.String,android.content.Intent,android.content.ServiceConnection,int,java.util.concurrent.Executor)
com.google.android.gms.maps.model.PolylineOptions: com.google.android.gms.maps.model.PolylineOptions clickable(boolean)
com.google.android.gms.common.zzg: byte[] zzb()
kotlinx.coroutines.internal.StackTraceRecoveryKt: java.util.ArrayDeque createStackTrace(kotlin.coroutines.jvm.internal.CoroutineStackFrame)
io.flutter.plugin.editing.TextEditingDelta: org.json.JSONObject toJSON()
androidx.core.graphics.drawable.IconCompat: androidx.core.graphics.drawable.IconCompat createWithResource(android.content.res.Resources,java.lang.String,int)
io.flutter.plugin.platform.PlatformViewsController: android.util.SparseArray access$400(io.flutter.plugin.platform.PlatformViewsController)
com.google.android.gms.signin.internal.SignInClientImpl: java.lang.String getStartServiceAction()
kotlinx.coroutines.CompletedContinuation: java.lang.String toString()
io.sentry.protocol.SentryRuntime: void setName(java.lang.String)
kotlinx.coroutines.scheduling.LimitingDispatcher: void dispatch(kotlin.coroutines.CoroutineContext,java.lang.Runnable)
io.flutter.embedding.engine.systemchannels.MouseCursorChannel: void setMethodHandler(io.flutter.embedding.engine.systemchannels.MouseCursorChannel$MouseCursorMethodHandler)
androidx.fragment.app.FragmentManagerImpl: void endAnimatingAwayFragments()
com.google.android.gms.common.api.internal.LifecycleActivity: boolean zzc()
com.google.gson.JsonElement: java.lang.Boolean getAsBooleanWrapper()
com.google.android.gms.common.internal.ClientSettings: android.accounts.Account getAccount()
androidx.core.app.ComponentActivity: boolean superDispatchKeyEvent(android.view.KeyEvent)
androidx.window.layout.SidecarCompat: void setExtensionCallback(androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface)
com.google.common.collect.Maps$EntryFunction$2: java.lang.Object apply(java.lang.Object)
com.google.android.gms.internal.maps.zza: void zzc(int,android.os.Parcel)
io.sentry.SentryTracer: java.util.List getChildren()
androidx.fragment.app.FragmentActivity: void onStart()
androidx.lifecycle.LifecycleDispatcher$DispatcherActivityCallback: void onActivityCreated(android.app.Activity,android.os.Bundle)
io.sentry.SystemOutLogger: void log(io.sentry.SentryLevel,java.lang.String,java.lang.Object[])
io.sentry.UnknownPropertiesTypeAdapterFactory$UnknownPropertiesTypeAdapter: io.sentry.IUnknownPropertiesConsumer read(com.google.gson.stream.JsonReader)
io.flutter.plugins.urllauncher.UrlLauncherPlugin: void onAttachedToActivity(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding)
com.google.gson.JsonArray: void add(java.lang.Number)
io.flutter.plugin.platform.PlatformPlugin: void access$1000(io.flutter.plugin.platform.PlatformPlugin,java.lang.String)
com.google.android.gms.common.internal.zzm: java.lang.Object createFromParcel(android.os.Parcel)
io.sentry.DiagnosticLogger: DiagnosticLogger(io.sentry.SentryOptions,io.sentry.ILogger)
androidx.fragment.app.Fragment: void onViewCreated(android.view.View,android.os.Bundle)
io.flutter.plugins.googlemaps.GoogleMapController: void updateInitialMarkers()
io.flutter.embedding.engine.dart.PlatformTaskQueue: void dispatch(java.lang.Runnable)
io.sentry.config.AbstractPropertiesProvider: AbstractPropertiesProvider(java.lang.String,java.util.Properties)
io.sentry.EnvelopeReader: io.sentry.SentryEnvelopeItemHeader deserializeEnvelopeItemHeader(byte[],int,int)
kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion: LockFreeTaskQueueCore$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
com.google.common.collect.MapMakerInternalMap: java.lang.Object replace(java.lang.Object,java.lang.Object)
com.google.android.gms.internal.common.zza: zza(android.os.IBinder,java.lang.String)
io.flutter.embedding.engine.FlutterJNI: boolean isCodePointEmojiModifierBase(int)
io.sentry.Session$State: io.sentry.Session$State valueOf(java.lang.String)
kotlinx.coroutines.Dispatchers: Dispatchers()
com.google.android.gms.maps.model.Polygon: Polygon(com.google.android.gms.internal.maps.zzaa)
com.google.android.gms.common.api.zza: java.lang.Object createFromParcel(android.os.Parcel)
com.google.gson.FieldAttributes: java.util.Collection getAnnotations()
com.google.common.collect.ImmutableCollection$Builder: int expandedCapacity(int,int)
kotlinx.coroutines.internal.LockFreeLinkedListNode: kotlinx.coroutines.internal.LockFreeLinkedListNode getNextNode()
kotlinx.coroutines.CoroutineName: boolean equals(java.lang.Object)
io.sentry.transport.TransportResult$SuccessTransportResult: boolean isSuccess()
androidx.window.layout.WindowInfoTracker$Companion: void overrideDecorator(androidx.window.layout.WindowInfoTrackerDecorator)
io.sentry.SentryOptions: long getMaxAttachmentSize()
io.sentry.adapters.CollectionAdapter: com.google.gson.JsonElement serialize(java.util.Collection,java.lang.reflect.Type,com.google.gson.JsonSerializationContext)
com.google.android.gms.maps.internal.zzl: void onDestroy()
io.sentry.android.core.AnrIntegration: AnrIntegration(android.content.Context)
com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment: com.google.common.collect.MapMakerInternalMap$Segment self()
io.sentry.SendCachedEnvelopeFireAndForgetIntegration$SendFireAndForgetFactory: boolean hasValidPath(java.lang.String,io.sentry.ILogger)
androidx.window.layout.SidecarAdapter: SidecarAdapter()
kotlinx.coroutines.NodeList: java.lang.String getString(java.lang.String)
com.google.common.collect.ImmutableList: int lastIndexOf(java.lang.Object)
io.sentry.protocol.SdkVersion: SdkVersion()
androidx.fragment.app.FragmentManagerImpl: androidx.fragment.app.Fragment findFragmentUnder(androidx.fragment.app.Fragment)
androidx.core.graphics.drawable.IconCompat: android.net.Uri getUri(android.graphics.drawable.Icon)
com.google.android.gms.common.internal.zat: void writeToParcel(android.os.Parcel,int)
io.flutter.plugin.common.MethodChannel$IncomingResultHandler: void reply(java.nio.ByteBuffer)
io.sentry.adapters.SentryLevelDeserializerAdapter: io.sentry.SentryLevel deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext)
io.sentry.SpanContext: void setDescription(java.lang.String)
com.google.common.collect.MapMakerInternalMap: java.util.Set entrySet()
io.flutter.embedding.engine.plugins.shim.ShimPluginRegistry$ShimRegistrarAggregate: void onAttachedToActivity(io.flutter.embedding.engine.plugins.activity.ActivityPluginBinding)
com.google.android.gms.common.api.internal.zact: void zad(com.google.android.gms.common.api.internal.zact,com.google.android.gms.signin.internal.zak)
kotlinx.coroutines.scheduling.CoroutineScheduler: kotlinx.coroutines.scheduling.Task submitToLocalQueue(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker,kotlinx.coroutines.scheduling.Task,boolean)
kotlinx.coroutines.JobKt__JobKt: void ensureActive(kotlinx.coroutines.Job)
com.google.android.gms.common.GooglePlayServicesUtilLight: boolean isUserRecoverableError(int)
io.sentry.IHub: io.sentry.protocol.SentryId captureTransaction(io.sentry.protocol.SentryTransaction)
com.google.android.gms.maps.GoogleMapOptions: com.google.android.gms.maps.model.LatLngBounds getLatLngBoundsForCameraTarget()
com.google.gson.JsonObject: com.google.gson.JsonElement createJsonElement(java.lang.Object)
com.google.gson.internal.ConstructorConstructor$12: java.lang.Object construct()
com.google.android.gms.common.zzf: byte[] zzb()
io.flutter.embedding.engine.dart.DartExecutor$DartEntrypoint: java.lang.String toString()
io.sentry.NoOpHub: void addBreadcrumb(io.sentry.Breadcrumb,java.lang.Object)
com.google.android.gms.maps.model.zza: java.lang.Object createFromParcel(android.os.Parcel)
com.google.android.gms.maps.internal.zzby: boolean isMapToolbarEnabled()
androidx.window.java.layout.WindowInfoTrackerCallbackAdapter$addListener$1$1$invokeSuspend$$inlined$collect$1: WindowInfoTrackerCallbackAdapter$addListener$1$1$invokeSuspend$$inlined$collect$1(androidx.core.util.Consumer)
io.sentry.adapters.SpanStatusDeserializerAdapter: io.sentry.SpanStatus deserialize(com.google.gson.JsonElement,java.lang.reflect.Type,com.google.gson.JsonDeserializationContext)
kotlin.collections.EmptyList: boolean contains(java.lang.Object)
com.tekartik.sqflite.SqflitePlugin: void onDebugCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
com.google.common.util.concurrent.AbstractFuture: java.lang.Object get()
com.google.common.hash.LittleEndianByteArray$UnsafeByteArray: sun.misc.Unsafe getUnsafe()
com.google.android.gms.maps.internal.zzbe: boolean zza(int,android.os.Parcel,android.os.Parcel,int)
com.google.android.gms.common.util.DeviceProperties: boolean isWearable(android.content.Context)
androidx.fragment.app.FragmentManagerImpl$StartEnterTransitionListener: boolean isReady()
io.sentry.SentryLevel: io.sentry.SentryLevel valueOf(java.lang.String)
io.flutter.plugins.googlemaps.Convert: java.lang.Object latlngBoundsToJson(com.google.android.gms.maps.model.LatLngBounds)
io.sentry.SpanId: java.lang.String toString()
androidx.window.layout.HardwareFoldingFeature: int hashCode()
io.sentry.protocol.SentryStackFrame: java.util.List getPreContext()
androidx.window.layout.SidecarAdapter: boolean isEqualSidecarDisplayFeature(androidx.window.sidecar.SidecarDisplayFeature,androidx.window.sidecar.SidecarDisplayFeature)
androidx.window.embedding.EmbeddingAdapter: java.util.function.Predicate translateParentMetricsPredicate(androidx.window.embedding.SplitRule)
io.flutter.plugin.common.JSONMessageCodec: java.nio.ByteBuffer encodeMessage(java.lang.Object)
io.flutter.plugins.googlemaps.PolygonController: boolean consumeTapEvents()
kotlinx.coroutines.internal.LockFreeTaskQueueCore$Companion: long wo(long,long)
com.google.android.gms.common.internal.BaseGmsClient: boolean zzn(com.google.android.gms.common.internal.BaseGmsClient,int,int,android.os.IInterface)
com.google.android.gms.dynamic.zaf: void zab(com.google.android.gms.dynamic.LifecycleDelegate)
androidx.versionedparcelable.VersionedParcel: java.lang.Class findParcelClass(java.lang.Class)
androidx.fragment.app.Fragment: android.view.LayoutInflater getLayoutInflater(android.os.Bundle)
kotlin.collections.MapsKt__MapsKt: java.util.Map toMap(java.lang.Iterable)
androidx.fragment.app.FragmentController: boolean execPendingActions()
com.google.common.collect.MapMakerInternalMap$1: com.google.common.collect.MapMakerInternalMap$DummyInternalEntry getEntry()
io.flutter.plugin.editing.TextInputPlugin: void showTextInput(android.view.View)
io.sentry.SendCachedEnvelopeFireAndForgetIntegration: void register(io.sentry.IHub,io.sentry.SentryOptions)
io.flutter.embedding.android.FlutterView: void init()
io.sentry.android.ndk.BuildConfig: BuildConfig()
androidx.fragment.app.Fragment$3: Fragment$3(androidx.fragment.app.Fragment)
io.sentry.MainEventProcessor: void setDist(io.sentry.SentryBaseEvent)
io.flutter.plugins.googlemaps.GoogleMapController: void init()
com.google.android.gms.common.internal.zzg: boolean zzd()
androidx.activity.ComponentActivity: void onCreate(android.os.Bundle)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: FlutterMutatorsStack()
com.google.common.io.Files$FilePredicate$2: java.lang.String toString()
com.google.android.gms.maps.model.Marker: void setAlpha(float)
androidx.lifecycle.ClassesInfoCache: java.lang.reflect.Method[] getDeclaredMethods(java.lang.Class)
io.sentry.SentryEnvelopeItem: void $closeResource(java.lang.Throwable,java.lang.AutoCloseable)
io.sentry.Breadcrumb: Breadcrumb(java.lang.String)
com.google.android.gms.maps.model.CircleOptions: com.google.android.gms.maps.model.CircleOptions center(com.google.android.gms.maps.model.LatLng)
com.google.android.gms.common.internal.Preconditions: java.lang.String checkNotEmpty(java.lang.String)
io.flutter.embedding.android.DrawableSplashScreen$1: void onAnimationStart(android.animation.Animator)
com.google.gson.reflect.TypeToken: java.lang.reflect.Type getSuperclassTypeParameter(java.lang.Class)
kotlinx.coroutines.InactiveNodeList: java.lang.String toString()
androidx.fragment.app.FragmentTransition: java.lang.Object mergeTransitions(androidx.fragment.app.FragmentTransitionImpl,java.lang.Object,java.lang.Object,java.lang.Object,androidx.fragment.app.Fragment,boolean)
androidx.fragment.app.Fragment: android.view.View requireView()
io.flutter.plugins.googlemaps.GoogleMapController: com.google.android.gms.maps.model.CameraPosition getCameraPosition()
kotlin.coroutines.CoroutineContext$Element$DefaultImpls: kotlin.coroutines.CoroutineContext$Element get(kotlin.coroutines.CoroutineContext$Element,kotlin.coroutines.CoroutineContext$Key)
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: java.lang.Long getChildId(android.view.accessibility.AccessibilityNodeInfo,int)
kotlin.coroutines.jvm.internal.BaseContinuationImpl: kotlin.coroutines.Continuation create(kotlin.coroutines.Continuation)
com.google.common.collect.MapMakerInternalMap$AbstractWeakKeyEntry: int getHash()
com.google.android.gms.common.api.internal.zabq: void zap(com.google.android.gms.common.api.internal.zai)
io.flutter.embedding.engine.systemchannels.TextInputChannel$TextEditState: TextInputChannel$TextEditState(java.lang.String,int,int,int,int)
com.google.android.gms.maps.internal.zzau: zzau()
com.google.gson.internal.LinkedHashTreeMap$KeySet: boolean contains(java.lang.Object)
io.flutter.embedding.android.FlutterActivity: boolean isDebuggable()
io.flutter.view.AccessibilityBridge: android.view.accessibility.AccessibilityEvent access$300(io.flutter.view.AccessibilityBridge,int,int)
com.google.android.gms.internal.maps.zzv: zzv(android.os.IBinder)
com.google.common.collect.MapMakerInternalMap$HashIterator: MapMakerInternalMap$HashIterator(com.google.common.collect.MapMakerInternalMap)
androidx.activity.OnBackPressedCallback: boolean isEnabled()
com.google.android.gms.maps.GoogleMap: void setOnCameraMoveListener(com.google.android.gms.maps.GoogleMap$OnCameraMoveListener)
androidx.core.view.KeyEventDispatcher: android.content.DialogInterface$OnKeyListener getDialogKeyListenerPre28(android.app.Dialog)
com.google.android.gms.internal.maps.zzv: void zzs(com.google.android.gms.dynamic.IObjectWrapper)
com.google.common.util.concurrent.AbstractFuture: boolean isCancelled()
androidx.savedstate.SavedStateRegistry: void performRestore(androidx.lifecycle.Lifecycle,android.os.Bundle)
com.google.gson.FieldAttributes: boolean hasModifier(int)
com.google.android.gms.common.api.internal.zao: zao(com.google.android.gms.common.api.internal.zap,com.google.android.gms.common.api.internal.zam)
io.sentry.transport.AuthenticatorWrapper: io.sentry.transport.AuthenticatorWrapper getInstance()
io.flutter.embedding.engine.plugins.shim.ShimRegistrar: void onAttachedToEngine(io.flutter.embedding.engine.plugins.FlutterPlugin$FlutterPluginBinding)
kotlinx.coroutines.CompletedContinuation: void invokeHandlers(kotlinx.coroutines.CancellableContinuationImpl,java.lang.Throwable)
com.google.gson.stream.JsonReader: java.io.IOException syntaxError(java.lang.String)
androidx.fragment.app.FragmentManagerImpl$1: void handleOnBackPressed()
io.flutter.embedding.engine.loader.ApplicationInfoLoader: android.content.pm.ApplicationInfo getApplicationInfo(android.content.Context)
com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry$Helper: com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry copy(com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueSegment,com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry,com.google.common.collect.MapMakerInternalMap$StrongKeyStrongValueEntry)
com.tekartik.sqflite.operation.ExecuteOperation: void success(java.lang.Object)
androidx.window.layout.FoldingFeature$OcclusionType: java.lang.String toString()
com.google.android.gms.common.internal.zac: java.lang.String zad(android.content.Context,int)
io.flutter.embedding.android.FlutterSplashView: android.os.Parcelable onSaveInstanceState()
io.flutter.view.AccessibilityBridge$SemanticsNode: java.util.List getStringAttributesFromBuffer(java.nio.ByteBuffer,java.nio.ByteBuffer[])
io.sentry.android.core.Installation: Installation()
com.google.android.gms.common.api.Status: boolean hasResolution()
io.sentry.config.SimplePropertiesProvider: SimplePropertiesProvider(java.util.Properties)
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$1: java.lang.Object invoke(java.lang.Object)
kotlinx.coroutines.JobSupport: boolean getHandlesException$kotlinx_coroutines_core()
kotlin.text.StringsKt__IndentKt$getIndentFunction$2: java.lang.String invoke(java.lang.String)
io.flutter.plugins.googlemaps.PolylineBuilder: void setGeodesic(boolean)
com.tekartik.sqflite.Database: android.database.sqlite.SQLiteDatabase getReadableDatabase()
com.google.android.gms.common.internal.zzq: zzq(com.google.android.gms.common.internal.zzr,com.google.android.gms.common.internal.zzp)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate$1: void onFlutterUiNoLongerDisplayed()
com.google.common.collect.MapMakerInternalMap: com.google.common.collect.MapMakerInternalMap$Segment[] newSegmentArray(int)
androidx.window.embedding.SplitPlaceholderRule: java.util.Set getFilters()
com.google.gson.reflect.TypeToken: TypeToken()
kotlinx.coroutines.internal.SystemPropsKt: boolean systemProp(java.lang.String,boolean)
com.google.common.collect.MapMakerInternalMap: boolean remove(java.lang.Object,java.lang.Object)
com.google.android.gms.maps.internal.zzg: void setMinZoomPreference(float)
kotlinx.coroutines.CompletedContinuation: boolean getCancelled()
com.google.gson.JsonElement: com.google.gson.JsonElement deepCopy()
kotlinx.coroutines.channels.ChannelResult$Closed: ChannelResult$Closed(java.lang.Throwable)
io.sentry.SentryBaseEvent: void setUser(io.sentry.protocol.User)
com.google.common.collect.MapMakerInternalMap$EntrySet: boolean contains(java.lang.Object)
io.flutter.plugin.editing.TextInputPlugin: void sendTextInputAppPrivateCommand(java.lang.String,android.os.Bundle)
kotlinx.coroutines.Unconfined: boolean isDispatchNeeded(kotlin.coroutines.CoroutineContext)
com.tekartik.sqflite.operation.BaseReadOperation: boolean getNoResult()
androidx.lifecycle.Lifecycling: int resolveObserverCallbackType(java.lang.Class)
io.flutter.embedding.android.KeyboardManager$PerEventCallbackBuilder$Callback: KeyboardManager$PerEventCallbackBuilder$Callback(io.flutter.embedding.android.KeyboardManager$PerEventCallbackBuilder,io.flutter.embedding.android.KeyboardManager$1)
androidx.fragment.app.Fragment: android.view.View getAnimatingAway()
io.sentry.protocol.Device: void setTimezone(java.util.TimeZone)
io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat: PlatformChannel$ClipboardContentFormat(java.lang.String,int,java.lang.String)
com.google.android.gms.common.Feature: java.lang.String getName()
androidx.core.view.ViewCompat$AccessibilityPaneVisibilityManager: void registerForLayoutCallback(android.view.View)
io.flutter.plugin.platform.PlatformPlugin: void setSystemChromeEnabledSystemUIMode(io.flutter.embedding.engine.systemchannels.PlatformChannel$SystemUiMode)
com.google.common.reflect.TypeToken$SimpleTypeToken: TypeToken$SimpleTypeToken(java.lang.reflect.Type)
io.sentry.RequestDetails: RequestDetails(java.lang.String,java.util.Map)
io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType: io.flutter.embedding.engine.systemchannels.TextInputChannel$InputType fromJson(org.json.JSONObject)
io.flutter.embedding.engine.systemchannels.LifecycleChannel: void appIsDetached()
androidx.core.os.LocaleListCompatWrapper: void toLanguageTag(java.lang.StringBuilder,java.util.Locale)
androidx.fragment.app.BackStackRecord: androidx.fragment.app.Fragment expandOps(java.util.ArrayList,androidx.fragment.app.Fragment)
kotlinx.coroutines.CoroutineId: void restoreThreadContext(kotlin.coroutines.CoroutineContext,java.lang.Object)
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean hasAction(io.flutter.view.AccessibilityBridge$Action)
kotlin.internal.jdk8.JDK8PlatformImplementations: JDK8PlatformImplementations()
com.google.common.reflect.Types: java.lang.Class getArrayClass(java.lang.Class)
com.google.gson.internal.$Gson$Types$GenericArrayTypeImpl: java.lang.String toString()
com.google.gson.Gson: com.google.gson.TypeAdapter longAdapter(com.google.gson.LongSerializationPolicy)
com.google.android.gms.maps.model.CircleOptions: com.google.android.gms.maps.model.CircleOptions strokeColor(int)
io.flutter.embedding.android.FlutterActivity: void detachFromFlutterEngine()
com.google.android.gms.internal.common.zzi: zzi(android.os.Looper)
com.google.common.collect.Iterators: com.google.common.collect.UnmodifiableIterator singletonIterator(java.lang.Object)
com.google.gson.internal.LinkedTreeMap: void rebalance(com.google.gson.internal.LinkedTreeMap$Node,boolean)
com.google.android.gms.common.api.internal.GoogleApiManager: java.util.Set zau(com.google.android.gms.common.api.internal.GoogleApiManager)
com.google.android.gms.common.api.internal.GoogleApiManager: void zaC(com.google.android.gms.common.api.internal.zaae)
io.flutter.view.AccessibilityBridge: void access$400(io.flutter.view.AccessibilityBridge,android.view.accessibility.AccessibilityEvent)
com.google.android.gms.common.internal.safeparcel.SafeParcelWriter: void writeTypedList(android.os.Parcel,int,java.util.List,boolean)
com.google.common.collect.ImmutableSet$Builder: void addDeduping(java.lang.Object)
androidx.fragment.app.FragmentActivity: android.view.View dispatchFragmentsOnCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet)
io.sentry.Scope: io.sentry.Scope$SessionPair startSession()
kotlinx.coroutines.DispatchedTask: void run()
com.google.android.gms.maps.GoogleMap: com.google.android.gms.maps.model.Marker addMarker(com.google.android.gms.maps.model.MarkerOptions)
kotlin.text.DelimitedRangesSequence: java.util.Iterator iterator()
io.flutter.embedding.engine.renderer.SurfaceTextureWrapper: void detachFromGLContext()
androidx.core.app.NotificationCompat$Builder: NotificationCompat$Builder(android.content.Context,java.lang.String)
com.google.gson.annotations.JsonAdapter: java.lang.Class value()
io.sentry.NoOpSerializer: java.lang.Object deserialize(java.io.Reader,java.lang.Class)
com.google.android.gms.common.internal.zzo: boolean zzh(android.content.ServiceConnection)
com.google.gson.internal.ConstructorConstructor$11: java.lang.Object construct()
com.google.gson.internal.ConstructorConstructor$7: java.lang.Object construct()
kotlin.jvm.internal.PackageReference: PackageReference(java.lang.Class,java.lang.String)
io.flutter.plugin.platform.PlatformPlugin$1: void vibrateHapticFeedback(io.flutter.embedding.engine.systemchannels.PlatformChannel$HapticFeedbackType)
io.flutter.plugins.googlemaps.GoogleMapBuilder: void setTiltGesturesEnabled(boolean)
io.sentry.NoOpTransportFactory: NoOpTransportFactory()
io.flutter.plugin.platform.PlatformPlugin$1: void setSystemUiChangeListener()
androidx.window.layout.WindowMetricsCalculatorCompat: int getNavigationBarHeight(android.content.Context)
com.google.gson.JsonArray: JsonArray(int)
kotlinx.coroutines.JobSupport: boolean tryWaitForChild(kotlinx.coroutines.JobSupport$Finishing,kotlinx.coroutines.ChildHandleNode,java.lang.Object)
kotlinx.coroutines.scheduling.CoroutineScheduler: boolean parkedWorkersStackPush(kotlinx.coroutines.scheduling.CoroutineScheduler$Worker)
io.flutter.embedding.engine.FlutterJNI: void onSurfaceDestroyed()
com.google.gson.Gson: java.lang.Object fromJson(java.io.Reader,java.lang.Class)
androidx.core.view.KeyEventDispatcher: boolean dialogSuperDispatchKeyEventPre28(android.app.Dialog,android.view.KeyEvent)
io.sentry.IHub: io.sentry.ITransaction startTransaction(java.lang.String,java.lang.String,io.sentry.CustomSamplingContext)
io.sentry.IHub: void setSpanContext(java.lang.Throwable,io.sentry.ISpan,java.lang.String)
io.flutter.plugin.platform.PlatformPlugin: boolean clipboardHasStrings()
io.sentry.transport.RateLimiter: RateLimiter(io.sentry.ILogger)
io.sentry.SynchronizedCollection: io.sentry.SynchronizedCollection synchronizedCollection(java.util.Collection)
androidx.collection.MapCollections: boolean removeAllHelper(java.util.Map,java.util.Collection)
io.flutter.plugins.googlemaps.MarkerController: void setInfoWindowAnchor(float,float)
com.google.android.gms.common.internal.zzd: void zzb(int,android.os.Bundle)
com.google.android.gms.maps.model.MarkerOptions: float getZIndex()
androidx.window.embedding.ExtensionEmbeddingBackend: androidx.window.embedding.ExtensionEmbeddingBackend access$getGlobalInstance$cp()
kotlin.jvm.internal.Intrinsics: java.lang.Throwable sanitizeStackTrace(java.lang.Throwable,java.lang.String)
com.google.gson.internal.bind.TypeAdapters$11: java.lang.Number read(com.google.gson.stream.JsonReader)
androidx.fragment.app.Fragment: int hashCode()
io.sentry.android.core.ActivityLifecycleIntegration: boolean isPerformanceEnabled(io.sentry.android.core.SentryAndroidOptions)
kotlinx.coroutines.JobSupport$ChildCompletion: void invoke(java.lang.Throwable)
androidx.core.view.OneShotPreDrawListener: OneShotPreDrawListener(android.view.View,java.lang.Runnable)
kotlinx.coroutines.internal.ContextScope: ContextScope(kotlin.coroutines.CoroutineContext)
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: boolean tryAcquireCpuPermit()
io.flutter.view.AccessibilityBridge$StringAttribute: AccessibilityBridge$StringAttribute()
com.google.common.collect.ImmutableCollection: java.lang.Object[] internalArray()
io.sentry.Stack$StackItem: Stack$StackItem(io.sentry.Stack$StackItem)
io.flutter.plugin.platform.PlatformViewsController: void onDisplayPlatformView(int,int,int,int,int,int,int,io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack)
androidx.lifecycle.LiveData: void observe(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Observer)
com.google.common.hash.BloomFilterStrategies$2: boolean put(java.lang.Object,com.google.common.hash.Funnel,int,com.google.common.hash.BloomFilterStrategies$LockFreeBitArray)
io.flutter.view.AccessibilityViewEmbedder: void copyAccessibilityFields(android.view.accessibility.AccessibilityNodeInfo,android.view.accessibility.AccessibilityNodeInfo)
io.sentry.android.ndk.INativeScope: void removeTag(java.lang.String)
androidx.savedstate.SavedStateRegistry: SavedStateRegistry()
com.google.common.util.concurrent.AbstractFuture$AtomicHelper: AbstractFuture$AtomicHelper(com.google.common.util.concurrent.AbstractFuture$1)
io.flutter.embedding.engine.FlutterJNI: void invokePlatformMessageResponseCallback(int,java.nio.ByteBuffer,int)
kotlinx.coroutines.flow.internal.SafeCollector: void checkContext(kotlin.coroutines.CoroutineContext,kotlin.coroutines.CoroutineContext,java.lang.Object)
com.google.android.gms.maps.model.Polyline: void setVisible(boolean)
com.google.gson.internal.bind.TypeAdapters$8: void write(com.google.gson.stream.JsonWriter,java.util.concurrent.atomic.AtomicInteger)
io.flutter.plugins.googlemaps.MarkerController: java.lang.String getGoogleMapsMarkerId()
com.google.android.gms.dynamic.ObjectWrapper: com.google.android.gms.dynamic.IObjectWrapper wrap(java.lang.Object)
com.google.gson.Gson$3: Gson$3()
com.google.android.gms.common.internal.safeparcel.SafeParcelReader: java.lang.String createString(android.os.Parcel,int)
kotlin.collections.MapsKt__MapsJVMKt: int mapCapacity(int)
androidx.window.core.Bounds: int getTop()
androidx.window.layout.WindowMetricsCalculatorCompat: android.view.DisplayCutout getCutoutForDisplay(android.view.Display)
io.flutter.plugin.common.MethodChannel: java.lang.String access$100(io.flutter.plugin.common.MethodChannel)
io.sentry.android.core.LifecycleWatcher: io.sentry.IHub access$100(io.sentry.android.core.LifecycleWatcher)
kotlin.collections.CollectionsKt___CollectionsKt: java.lang.Object single(java.util.List)
kotlin.jvm.internal.CallableReference: boolean isOpen()
androidx.fragment.app.Fragment$2: void onStateChanged(androidx.lifecycle.LifecycleOwner,androidx.lifecycle.Lifecycle$Event)
kotlinx.coroutines.flow.internal.DownstreamExceptionElement$Key: DownstreamExceptionElement$Key(kotlin.jvm.internal.DefaultConstructorMarker)
io.sentry.SentryOptions: io.sentry.SentryOptions$TracesSamplerCallback getTracesSampler()
androidx.fragment.app.FragmentManagerState$1: androidx.fragment.app.FragmentManagerState[] newArray(int)
kotlinx.coroutines.scheduling.CoroutineScheduler$Worker: kotlinx.coroutines.scheduling.Task pollGlobalQueues()
androidx.core.app.RemoteActionCompatParcelizer: RemoteActionCompatParcelizer()
com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry$Helper: void setValue(com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueSegment,com.google.common.collect.MapMakerInternalMap$StrongKeyWeakValueEntry,java.lang.Object)
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$14: java.lang.Object invoke(java.lang.Object)
com.google.gson.internal.LinkedTreeMap: java.lang.Object get(java.lang.Object)
io.flutter.plugin.platform.PlatformViewsController: void lockInputConnection(io.flutter.plugin.platform.VirtualDisplayController)
io.sentry.ITransaction: io.sentry.protocol.SentryId getEventId()
kotlinx.coroutines.internal.LockFreeLinkedListNode: boolean isRemoved()
com.google.common.collect.MapMakerInternalMap$WeakValueReferenceImpl: MapMakerInternalMap$WeakValueReferenceImpl(java.lang.ref.ReferenceQueue,java.lang.Object,com.google.common.collect.MapMakerInternalMap$InternalEntry)
com.google.gson.JsonPrimitive: double getAsDouble()
androidx.tracing.TraceApi18Impl: void endSection()
kotlinx.coroutines.internal.LockFreeLinkedListNode: kotlinx.coroutines.internal.LockFreeLinkedListNode getPrevNode()
io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler$1: void error(java.lang.String,java.lang.String,java.lang.Object)
androidx.core.app.CoreComponentFactory: CoreComponentFactory()
kotlinx.coroutines.internal.LockFreeTaskQueueCore$Placeholder: LockFreeTaskQueueCore$Placeholder(int)
com.google.gson.internal.reflect.UnsafeReflectionAccessor: void makeAccessible(java.lang.reflect.AccessibleObject)
com.google.gson.TypeAdapter: void toJson(java.io.Writer,java.lang.Object)
kotlinx.coroutines.JobSupport: void removeNode$kotlinx_coroutines_core(kotlinx.coroutines.JobNode)
io.sentry.Sentry: void addBreadcrumb(java.lang.String)
kotlinx.coroutines.ThreadLocalEventLoop: kotlinx.coroutines.EventLoop getEventLoop$kotlinx_coroutines_core()
io.flutter.embedding.android.FlutterView: boolean isAttachedToFlutterEngine()
io.flutter.plugin.common.StandardMessageCodec: void writeFloat(java.io.ByteArrayOutputStream,float)
androidx.core.app.NotificationCompatBuilder: NotificationCompatBuilder(androidx.core.app.NotificationCompat$Builder)
androidx.fragment.app.FragmentState$1: java.lang.Object createFromParcel(android.os.Parcel)
com.google.common.collect.MapMakerInternalMap$Strength$2: MapMakerInternalMap$Strength$2(java.lang.String,int)
com.google.android.gms.maps.GoogleMap: void setOnCircleClickListener(com.google.android.gms.maps.GoogleMap$OnCircleClickListener)
io.sentry.Attachment: Attachment(java.lang.String,java.lang.String,java.lang.String,boolean)
androidx.fragment.app.FragmentActivity$HostCallbacks: void onSupportInvalidateOptionsMenu()
com.google.android.gms.common.api.ApiException: com.google.android.gms.common.api.Status getStatus()
io.sentry.android.core.NoOpDebugImagesLoader: java.util.List loadDebugImages()
kotlinx.coroutines.flow.internal.DownstreamExceptionElement$Key: DownstreamExceptionElement$Key()
kotlin.collections.EmptyMap: java.lang.Void get(java.lang.Object)
io.flutter.plugin.platform.SingleViewPresentation: io.flutter.plugin.platform.SingleViewPresentation$PresentationState detachState()
io.sentry.SentryItemType: java.lang.String getItemType()
io.flutter.embedding.android.FlutterView: io.flutter.embedding.android.FlutterImageView createImageView()
io.flutter.embedding.engine.dart.DartExecutor: java.lang.String access$000(io.flutter.embedding.engine.dart.DartExecutor)
io.sentry.HostnameCache$HostnameCacheThreadFactory: HostnameCache$HostnameCacheThreadFactory(io.sentry.HostnameCache$1)
io.flutter.plugin.platform.PlatformViewsController: void access$1100(io.flutter.plugin.platform.PlatformViewsController,io.flutter.plugin.platform.VirtualDisplayController)
io.flutter.embedding.engine.FlutterJNI: void setAccessibilityDelegate(io.flutter.embedding.engine.FlutterJNI$AccessibilityDelegate)
com.google.android.gms.common.api.internal.TaskApiCall$Builder: com.google.android.gms.common.api.internal.RemoteCall zaa(com.google.android.gms.common.api.internal.TaskApiCall$Builder)
androidx.window.embedding.EmbeddingAdapter: androidx.window.embedding.SplitInfo translate(androidx.window.extensions.embedding.SplitInfo)
kotlinx.coroutines.intrinsics.CancellableKt: void access$dispatcherFailure(kotlin.coroutines.Continuation,java.lang.Throwable)
kotlinx.coroutines.android.AndroidDispatcherFactory: java.lang.String hintOnError()
com.google.gson.JsonElement: char getAsCharacter()
io.flutter.embedding.engine.FlutterJNI: boolean isCodePointVariantSelector(int)
androidx.window.layout.WindowMetricsCalculator: androidx.window.layout.WindowMetrics computeMaximumWindowMetrics(android.app.Activity)
kotlinx.coroutines.channels.AbstractSendChannel: java.lang.String getBufferDebugString()
com.google.android.gms.common.api.internal.zabu: void zag()
io.sentry.SentryOptions: int getReadTimeoutMillis()
io.flutter.embedding.android.FlutterView$1: FlutterView$1(io.flutter.embedding.android.FlutterView)
kotlin.jvm.internal.Intrinsics: void checkNotNullParameter(java.lang.Object,java.lang.String)
io.flutter.view.AccessibilityBridge$1: void onTooltip(java.lang.String)
io.flutter.plugin.platform.VirtualDisplayController$1$1: VirtualDisplayController$1$1(io.flutter.plugin.platform.VirtualDisplayController$1)
androidx.fragment.app.FragmentManagerImpl: void dispatchOnFragmentPaused(androidx.fragment.app.Fragment,boolean)
com.google.android.gms.auth.api.signin.GoogleSignInAccount: java.util.Set getRequestedScopes()
io.sentry.util.LogUtils: void logIfNotFlushable(io.sentry.ILogger,java.lang.Object)
com.google.gson.internal.$Gson$Types$WildcardTypeImpl: java.lang.String toString()
com.google.common.util.concurrent.Futures: java.lang.Object getDone(java.util.concurrent.Future)
io.sentry.transport.ReusableCountLatch$Sync: int getCount()
com.google.common.collect.SingletonImmutableSet: boolean contains(java.lang.Object)
io.flutter.plugins.connectivity.ConnectivityBroadcastReceiver: void onCancel(java.lang.Object)
kotlinx.coroutines.CancellableContinuationImpl: void parentCancelled$kotlinx_coroutines_core(java.lang.Throwable)
androidx.versionedparcelable.VersionedParcelParcel: void writeString(java.lang.String)
androidx.fragment.app.DialogFragment: DialogFragment()
kotlin.coroutines.CombinedContext$toString$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)
io.sentry.protocol.App: java.lang.String getAppName()
androidx.fragment.app.DialogFragment: void dismissInternal(boolean,boolean)
io.sentry.android.core.ApplicationNotResponding: java.lang.Thread getThread()
io.sentry.ISentryClient: io.sentry.protocol.SentryId captureEvent(io.sentry.SentryEvent,java.lang.Object)
com.google.gson.internal.GsonBuildConfig: GsonBuildConfig()
kotlinx.coroutines.channels.Receive: java.lang.Object getOfferResult()
io.sentry.AsyncHttpTransportFactory: AsyncHttpTransportFactory()
androidx.fragment.app.FragmentTransition: void configureTransitionsOrdered(androidx.fragment.app.FragmentManagerImpl,int,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap)
com.google.android.gms.common.GoogleApiAvailability: com.google.android.gms.common.GoogleApiAvailability getInstance()
io.sentry.Hub: io.sentry.protocol.SentryId captureMessage(java.lang.String,io.sentry.SentryLevel)
com.google.android.gms.common.internal.zzu: boolean zzd()
com.google.gson.internal.LinkedHashTreeMap: java.util.Set entrySet()
io.sentry.IHub: void configureScope(io.sentry.ScopeCallback)
kotlinx.coroutines.JobSupport: java.lang.Object finalizeFinishingState(kotlinx.coroutines.JobSupport$Finishing,java.lang.Object)
com.google.common.collect.MapMakerInternalMap: com.google.common.base.Equivalence valueEquivalence()
com.google.android.gms.common.api.GoogleApi: GoogleApi(android.content.Context,android.app.Activity,com.google.android.gms.common.api.Api,com.google.android.gms.common.api.Api$ApiOptions,com.google.android.gms.common.api.GoogleApi$Settings)
androidx.window.layout.SidecarCompat: void registerConfigurationChangeListener(android.app.Activity)
io.sentry.Sentry: void init(io.sentry.Sentry$OptionsConfiguration)
io.flutter.plugin.common.MethodChannel$IncomingMethodCallHandler$1: void success(java.lang.Object)
io.sentry.protocol.SentrySpan: io.sentry.protocol.SentryId getTraceId()
androidx.collection.ArraySet: androidx.collection.MapCollections getCollection()
io.sentry.DirectoryProcessor$SendCachedEnvelopeHint: void setResult(boolean)
io.sentry.transport.NoOpTransportGate: NoOpTransportGate()
com.google.android.gms.dynamite.zzk: zzk()
io.sentry.flutter.SentryFlutterPlugin: void initNativeSdk$lambda-1(java.util.Map,io.sentry.flutter.SentryFlutterPlugin,io.sentry.android.core.SentryAndroidOptions)
com.google.android.gms.common.api.GoogleApiClient: GoogleApiClient()
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: void onStart()
com.google.gson.internal.Primitives: java.lang.Class wrap(java.lang.Class)
com.google.android.gms.internal.maps.zzab: void zzA(float)
io.sentry.Scope: void removeContexts(java.lang.String)
io.sentry.SentryEnvelopeHeaderAdapter: boolean hasValidSdkVersion(io.sentry.protocol.SdkVersion)
com.google.android.gms.common.zzc: zzc()
io.flutter.plugins.googlemaps.GoogleMapBuilder: void setZoomControlsEnabled(boolean)
io.sentry.android.ndk.DebugImagesLoader: void clearDebugImages()
io.sentry.Sentry: io.sentry.ITransaction startTransaction(io.sentry.TransactionContext,io.sentry.CustomSamplingContext,boolean)
io.flutter.view.FlutterMain: java.lang.String getLookupKeyForAsset(java.lang.String,java.lang.String)
kotlinx.coroutines.CompletedExceptionally: java.lang.String toString()
com.google.android.gms.common.api.internal.TaskApiCall$Builder: com.google.android.gms.common.api.internal.TaskApiCall$Builder run(com.google.android.gms.common.api.internal.RemoteCall)
kotlin.text.StringsKt__StringsKt: int indexOfAny(java.lang.CharSequence,char[],int,boolean)
com.google.android.gms.maps.model.Polygon: java.lang.String getId()
io.sentry.android.core.SentryAndroidOptions: boolean isEnableAppLifecycleBreadcrumbs()
androidx.fragment.app.FragmentActivity: void markFragmentsCreated()
io.sentry.protocol.Gpu: void setMemorySize(java.lang.Integer)
com.google.android.gms.maps.zzag: void getMapAsync(com.google.android.gms.maps.OnMapReadyCallback)
com.google.common.collect.UnmodifiableIterator: UnmodifiableIterator()
io.sentry.SentryTracer: io.sentry.SpanContext getSpanContext()
kotlinx.coroutines.JobSupport$Finishing: boolean isCompleting()
com.google.android.gms.internal.common.zza: android.os.Parcel zza()
androidx.arch.core.internal.SafeIterableMap$Entry: boolean equals(java.lang.Object)
io.flutter.embedding.engine.FlutterJNI: void markTextureFrameAvailable(long)
kotlinx.coroutines.internal.ThreadContextKt$updateState$1: ThreadContextKt$updateState$1()
com.google.gson.internal.LinkedHashTreeMap: int secondaryHash(int)
io.sentry.UncaughtExceptionHandler: java.lang.Thread$UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()
com.google.android.gms.tasks.zzi: void run()
com.google.android.gms.common.SupportErrorDialogFragment: void show(androidx.fragment.app.FragmentManager,java.lang.String)
androidx.window.layout.WindowMetricsCalculatorCompat: android.graphics.Rect computeWindowBoundsQ$window_release(android.app.Activity)
io.sentry.SentryTracer: io.sentry.protocol.Request getRequest()
io.flutter.embedding.engine.FlutterJNI$Factory: io.flutter.embedding.engine.FlutterJNI provideFlutterJNI()
com.google.gson.internal.$Gson$Types$ParameterizedTypeImpl: java.lang.reflect.Type getOwnerType()
kotlin.SynchronizedLazyImpl: java.lang.String toString()
com.google.gson.internal.bind.CollectionTypeAdapterFactory: CollectionTypeAdapterFactory(com.google.gson.internal.ConstructorConstructor)
com.google.common.base.Preconditions: int checkPositionIndex(int,int,java.lang.String)
io.flutter.embedding.android.FlutterActivity: FlutterActivity()
io.sentry.util.CollectionUtils: java.util.Map filterMapEntries(java.util.Map,io.sentry.util.CollectionUtils$Predicate)
kotlin.collections.IntIterator: void remove()
kotlinx.coroutines.ExecutorsKt: kotlinx.coroutines.CoroutineDispatcher from(java.util.concurrent.Executor)
com.google.gson.internal.Streams$AppendableWriter$CurrentWrite: char charAt(int)
com.google.android.gms.common.api.internal.GoogleApiManager: com.google.android.gms.common.api.Status zah()
com.google.android.gms.maps.internal.zzg: void setOnMapLongClickListener(com.google.android.gms.maps.internal.zzap)
io.sentry.android.core.LifecycleWatcher: void addAppBreadcrumb(java.lang.String)
com.google.common.collect.MapMakerInternalMap: void reclaimValue(com.google.common.collect.MapMakerInternalMap$WeakValueReference)
io.flutter.view.AccessibilityViewEmbedder$ReflectionAccessors: java.lang.Long getSourceNodeId(android.view.accessibility.AccessibilityNodeInfo)
kotlinx.coroutines.JobSupport: void promoteSingleToNodeList(kotlinx.coroutines.JobNode)
com.google.gson.internal.LinkedHashTreeMap$Node: LinkedHashTreeMap$Node()
io.flutter.embedding.android.FlutterSurfaceView: void attachToRenderer(io.flutter.embedding.engine.renderer.FlutterRenderer)
io.flutter.embedding.android.FlutterView: boolean checkInputConnectionProxy(android.view.View)
com.google.common.collect.RegularImmutableSet: java.util.Iterator iterator()
com.google.common.hash.HashCode$BytesHashCode: byte[] asBytes()
com.google.android.gms.maps.internal.zzbz: void zzc(android.os.Bundle,java.lang.String,android.os.Parcelable)
kotlin.reflect.KVisibility: KVisibility(java.lang.String,int)
com.google.common.util.concurrent.AbstractFuture: void afterDone()
com.google.gson.stream.JsonReader: void consumeNonExecutePrefix()
io.sentry.transport.ReusableCountLatch$Sync: int access$000(io.sentry.transport.ReusableCountLatch$Sync)
io.flutter.view.AccessibilityBridge: void access$200(io.flutter.view.AccessibilityBridge,int,int)
io.sentry.Hub: void setSpanContext(java.lang.Throwable,io.sentry.ISpan,java.lang.String)
com.google.gson.TypeAdapter: java.lang.Object fromJson(java.lang.String)
io.flutter.plugin.editing.InputConnectionAdaptor: boolean endBatchEdit()
io.sentry.Breadcrumb: java.util.Map getData()
io.sentry.SentryBaseEvent: java.util.Map getExtras()
io.flutter.embedding.android.FlutterSplashView$SavedState: android.os.Bundle access$700(io.flutter.embedding.android.FlutterSplashView$SavedState)
androidx.window.layout.WindowMetricsCalculator$Companion: void overrideDecorator(androidx.window.layout.WindowMetricsCalculatorDecorator)
io.sentry.adapters.DateDeserializerAdapter: DateDeserializerAdapter(io.sentry.SentryOptions)
kotlin.collections.CollectionsKt__CollectionsKt: java.util.List optimizeReadOnlyList(java.util.List)
com.google.android.gms.maps.internal.zzb: zzb(android.os.IBinder)
kotlinx.coroutines.channels.BufferOverflow: kotlinx.coroutines.channels.BufferOverflow valueOf(java.lang.String)
androidx.collection.SimpleArrayMap: boolean isEmpty()
kotlin.coroutines.intrinsics.CoroutineSingletons: kotlin.coroutines.intrinsics.CoroutineSingletons[] $values()
io.sentry.protocol.Mechanism: void setHelpLink(java.lang.String)
kotlinx.coroutines.channels.AbstractChannel: void access$removeReceiveOnCancel(kotlinx.coroutines.channels.AbstractChannel,kotlinx.coroutines.CancellableContinuation,kotlinx.coroutines.channels.Receive)
io.flutter.embedding.android.FlutterActivity: java.lang.String getAppBundlePath()
com.google.android.gms.signin.zac: boolean equals(java.lang.Object)
kotlinx.coroutines.JobSupport: boolean getOnCancelComplete$kotlinx_coroutines_core()
androidx.fragment.app.FragmentManagerImpl: androidx.fragment.app.Fragment getPrimaryNavigationFragment()
androidx.activity.OnBackPressedDispatcher: void onBackPressed()
io.flutter.plugins.urllauncher.MethodCallHandlerImpl: void onCanLaunch(io.flutter.plugin.common.MethodChannel$Result,java.lang.String)
com.google.android.gms.maps.model.TileOverlay: boolean equals(java.lang.Object)
androidx.arch.core.internal.SafeIterableMap: androidx.arch.core.internal.SafeIterableMap$Entry get(java.lang.Object)
kotlin.collections.EmptyList: java.lang.Object set(int,java.lang.Object)
androidx.fragment.app.Fragment: java.lang.String toString()
com.tekartik.sqflite.operation.ExecuteOperation: void error(java.lang.String,java.lang.String,java.lang.Object)
com.google.gson.stream.JsonReader: void setLenient(boolean)
io.sentry.CircularFifoQueue: int increment(int)
androidx.fragment.app.FragmentManagerImpl: androidx.fragment.app.Fragment getFragment(android.os.Bundle,java.lang.String)
io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation: io.flutter.embedding.engine.systemchannels.PlatformChannel$DeviceOrientation valueOf(java.lang.String)
com.google.android.gms.dynamite.zzk: com.google.android.gms.dynamite.DynamiteModule$VersionPolicy$SelectionResult selectModule(android.content.Context,java.lang.String,com.google.android.gms.dynamite.DynamiteModule$VersionPolicy$IVersions)
io.sentry.Scope: io.sentry.SentryLevel getLevel()
com.google.gson.internal.Streams$AppendableWriter: Streams$AppendableWriter(java.lang.Appendable)
com.google.android.gms.tasks.DuplicateTaskCompletionException: DuplicateTaskCompletionException(java.lang.String,java.lang.Throwable)
com.google.android.gms.common.api.GoogleApi: com.google.android.gms.common.api.internal.zact zac(android.content.Context,android.os.Handler)
kotlinx.coroutines.CoroutineId: CoroutineId(long)
io.flutter.plugins.googlemaps.TileOverlayController: void setTransparency(float)
io.sentry.android.core.ILoadClass: java.lang.Class loadClass(java.lang.String)
com.google.gson.internal.Excluder: boolean excludeClassInStrategy(java.lang.Class,boolean)
io.flutter.plugin.common.EventChannel: void setStreamHandler(io.flutter.plugin.common.EventChannel$StreamHandler)
kotlin.jvm.internal.FunctionReference: int hashCode()
kotlinx.coroutines.internal.LockFreeLinkedListNode: kotlinx.coroutines.internal.Removed removed()
io.flutter.plugins.googlemaps.MarkerController: void setPosition(com.google.android.gms.maps.model.LatLng)
com.google.android.gms.common.internal.TelemetryLogging: com.google.android.gms.common.internal.TelemetryLoggingClient getClient(android.content.Context)
androidx.fragment.app.Fragment: void performOptionsMenuClosed(android.view.Menu)
io.flutter.plugin.platform.PlatformViewsController: boolean access$1202(io.flutter.plugin.platform.PlatformViewsController,boolean)
androidx.core.os.LocaleListCompat: androidx.core.os.LocaleListCompat wrap(android.os.LocaleList)
androidx.collection.SparseArrayCompat: void remove(int)
kotlinx.coroutines.CancellableContinuationImpl: java.lang.String nameString()
io.sentry.protocol.Request: java.util.Map getUnknown()
io.flutter.view.AccessibilityViewEmbedder: void addChildrenToFlutterNode(android.view.accessibility.AccessibilityNodeInfo,android.view.View,android.view.accessibility.AccessibilityNodeInfo)
io.flutter.embedding.android.FlutterView: boolean access$102(io.flutter.embedding.android.FlutterView,boolean)
io.sentry.Scope$SessionPair: io.sentry.Session getPrevious()
io.flutter.plugins.googlemaps.TileOverlaysController: java.lang.String getTileOverlayId(java.util.Map)
com.google.android.gms.common.api.internal.GoogleApiManager: android.content.Context zae(com.google.android.gms.common.api.internal.GoogleApiManager)
androidx.fragment.app.FragmentTransitionImpl$2: void run()
io.sentry.adapters.CollectionAdapter: CollectionAdapter()
io.sentry.Sentry: boolean initConfigurations(io.sentry.SentryOptions)
com.google.gson.internal.bind.JsonTreeWriter: void close()
com.google.android.gms.maps.internal.zzby: void setRotateGesturesEnabled(boolean)
androidx.versionedparcelable.VersionedParcelParcel: void writeInt(int)
androidx.window.layout.SidecarAdapter: java.lang.String access$getTAG$cp()
com.google.gson.stream.JsonReader: void skipValue()
com.tekartik.sqflite.SqflitePlugin$3: void run()
io.sentry.android.ndk.SentryNdk: SentryNdk()
com.google.android.gms.internal.maps.zzj: java.lang.String zzl()
com.google.gson.internal.LinkedTreeMap$KeySet$1: java.lang.Object next()
io.flutter.embedding.engine.systemchannels.AccessibilityChannel: void setAccessibilityFeatures(int)
com.google.gson.internal.bind.TypeAdapters$1: TypeAdapters$1()
kotlinx.coroutines.CancellableContinuationImpl: java.lang.Throwable getContinuationCancellationCause(kotlinx.coroutines.Job)
com.google.gson.internal.ConstructorConstructor$5: ConstructorConstructor$5(com.google.gson.internal.ConstructorConstructor,java.lang.reflect.Type)
kotlinx.coroutines.internal.SystemPropsKt: java.lang.String systemProp(java.lang.String)
com.google.common.collect.Lists: boolean equalsImpl(java.util.List,java.lang.Object)
io.sentry.transport.QueuedThreadPoolExecutor$CancelledFuture: java.lang.Object get()
kotlinx.coroutines.channels.AbstractSendChannel: kotlinx.coroutines.channels.ReceiveOrClosed sendBuffered(java.lang.Object)
io.flutter.embedding.android.FlutterImageView: void resizeIfNeeded(int,int)
io.flutter.view.AccessibilityBridge: void updateCustomAccessibilityActions(java.nio.ByteBuffer,java.lang.String[])
com.google.android.gms.maps.model.PolygonOptions: float getStrokeWidth()
io.flutter.plugin.common.MethodCall: MethodCall(java.lang.String,java.lang.Object)
io.flutter.plugins.googlemaps.TileOverlaysController: void removeTileOverlays(java.util.List)
androidx.window.embedding.SplitPairRule: java.util.Set getFilters()
androidx.window.layout.SidecarCompat$DistinctElementCallback: SidecarCompat$DistinctElementCallback(androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface)
com.google.gson.stream.JsonReader: void skipToEndOfLine()
com.google.common.reflect.Types$JavaVersion$4: Types$JavaVersion$4(java.lang.String,int)
com.google.android.gms.maps.zza: boolean zzb(com.google.android.gms.internal.maps.zzx)
androidx.window.embedding.SplitRule: SplitRule()
io.flutter.plugin.platform.PlatformPlugin: void setSystemChromePreferredOrientations(int)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: void onDetach()
io.sentry.Sentry: void init(io.sentry.Sentry$OptionsConfiguration,boolean)
androidx.fragment.app.FragmentHostCallback: android.content.Context getContext()
com.google.gson.internal.Excluder: Excluder()
io.sentry.cache.CacheStrategy: io.sentry.Session readSession(io.sentry.SentryEnvelopeItem)
io.flutter.embedding.android.FlutterSurfaceView$2: void onFlutterUiNoLongerDisplayed()
com.google.gson.internal.ConstructorConstructor$13: java.lang.Object construct()
kotlinx.coroutines.android.HandlerDispatcherKt: android.os.Handler asHandler(android.os.Looper,boolean)
kotlinx.coroutines.CompletionStateKt: java.lang.Object toState(java.lang.Object,kotlin.jvm.functions.Function1)
androidx.collection.MapCollections$KeySet: java.util.Iterator iterator()
io.sentry.android.core.EnvelopeFileObserver$CachedEnvelopeHint: boolean isSuccess()
androidx.activity.ImmLeaksCleaner: void initializeReflectiveFields()
io.flutter.plugins.urllauncher.UrlLauncher: io.flutter.plugins.urllauncher.UrlLauncher$LaunchStatus launch(java.lang.String,android.os.Bundle,boolean,boolean,boolean)
com.google.gson.Gson: com.google.gson.TypeAdapter getDelegateAdapter(com.google.gson.TypeAdapterFactory,com.google.gson.reflect.TypeToken)
io.sentry.android.core.SentryAndroid: void init(android.content.Context)
com.google.common.base.Preconditions: void checkPositionIndexes(int,int,int)
io.sentry.android.core.LifecycleWatcher: void onPause(androidx.lifecycle.LifecycleOwner)
io.sentry.android.core.SentryAndroid: void init(android.content.Context,io.sentry.ILogger,io.sentry.Sentry$OptionsConfiguration)
io.flutter.plugins.googlemaps.GoogleMapBuilder: void setMinMaxZoomPreference(java.lang.Float,java.lang.Float)
com.google.android.gms.maps.model.BitmapDescriptorFactory: com.google.android.gms.maps.model.BitmapDescriptor defaultMarker()
com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment: java.lang.ref.ReferenceQueue access$500(com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueSegment)
androidx.fragment.app.FragmentTransitionCompat21: void addTarget(java.lang.Object,android.view.View)
io.flutter.embedding.android.FlutterSplashView$SavedState: FlutterSplashView$SavedState(android.os.Parcelable)
androidx.window.R$styleable: R$styleable()
io.sentry.NoOpTransaction: java.lang.String getName()
androidx.fragment.app.Fragment: void onActivityCreated(android.os.Bundle)
kotlinx.coroutines.JobSupport$Finishing: java.lang.String toString()
io.sentry.protocol.SentryRuntime: SentryRuntime()
com.google.android.gms.common.api.internal.zabt: zabt(com.google.android.gms.common.api.internal.zabu,com.google.android.gms.common.ConnectionResult)
kotlin.random.Random: int nextInt()
kotlin.collections.EmptyList: void add(int,java.lang.Object)
io.sentry.SentryOptions: void setEnableAutoSessionTracking(boolean)
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: void removeAll()
androidx.fragment.app.FragmentManagerImpl: boolean dispatchContextItemSelected(android.view.MenuItem)
com.google.gson.GsonBuilder: com.google.gson.GsonBuilder registerTypeAdapterFactory(com.google.gson.TypeAdapterFactory)
io.flutter.plugins.urllauncher.MethodCallHandlerImpl: void startListening(io.flutter.plugin.common.BinaryMessenger)
io.flutter.plugin.editing.FlutterTextUtils: boolean isEmoji(int)
io.flutter.view.AccessibilityBridge: boolean performCursorMoveAction(io.flutter.view.AccessibilityBridge$SemanticsNode,int,android.os.Bundle,boolean)
io.flutter.plugin.editing.TextInputPlugin: void setPlatformViewTextInputClient(int,boolean)
io.flutter.view.AccessibilityBridge$1: void onLongPress(int)
com.google.android.gms.common.api.internal.zag: boolean zaa(com.google.android.gms.common.api.internal.zabq)
io.sentry.NoOpTransaction: java.lang.String getOperation()
androidx.window.embedding.SplitController: void access$setGlobalInstance$cp(androidx.window.embedding.SplitController)
io.flutter.embedding.android.FlutterView: void onAttachedToWindow()
com.google.android.gms.common.internal.TelemetryLoggingOptions: int hashCode()
kotlinx.coroutines.NonDisposableHandle: kotlinx.coroutines.Job getParent()
com.google.android.gms.common.api.zzb: zzb()
kotlinx.coroutines.internal.SystemPropsKt: int getAVAILABLE_PROCESSORS()
io.sentry.HostnameCache: java.lang.String getHostname()
com.google.android.gms.maps.model.PolylineOptions: float getZIndex()
io.flutter.view.AccessibilityBridge$SemanticsNode: java.lang.String access$2400(io.flutter.view.AccessibilityBridge$SemanticsNode)
androidx.window.layout.SidecarWindowBackend$WindowLayoutChangeCallbackWrapper: void accept(androidx.window.layout.WindowLayoutInfo)
io.flutter.embedding.engine.FlutterJNI: void setPlatformViewsController(io.flutter.plugin.platform.PlatformViewsController)
io.sentry.NoOpHub: void removeTag(java.lang.String)
io.sentry.SentryTracer: io.sentry.ISpan startChild(java.lang.String,java.lang.String)
androidx.core.app.NotificationCompat$Builder: android.app.Notification build()
com.google.gson.FieldNamingPolicy$1: java.lang.String translateName(java.lang.reflect.Field)
kotlinx.coroutines.ChildHandleNode: ChildHandleNode(kotlinx.coroutines.ChildJob)
androidx.fragment.app.SuperNotCalledException: SuperNotCalledException(java.lang.String)
io.sentry.protocol.SentryThread: void setName(java.lang.String)
com.google.gson.GsonBuilder: GsonBuilder()
com.google.common.hash.Murmur3_128HashFunction$Murmur3_128Hasher: long mixK1(long)
kotlinx.coroutines.AbstractCoroutine: kotlin.coroutines.CoroutineContext getCoroutineContext()
io.flutter.embedding.engine.dart.DartMessenger: void handleMessageFromDart(java.lang.String,java.nio.ByteBuffer,int,long)
kotlin.jvm.internal.CallableReference$NoReceiver: kotlin.jvm.internal.CallableReference$NoReceiver access$000()
androidx.window.layout.HardwareFoldingFeature: java.lang.String toString()
com.google.common.hash.HashCode: byte[] getBytesInternal()
com.google.common.collect.AbstractMapEntry: java.lang.String toString()
com.google.gson.internal.bind.TypeAdapters$3: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
io.flutter.plugin.platform.SingleViewPresentation$PresentationContext: boolean isCalledFromAlertDialog()
kotlin.random.FallbackThreadLocalRandom: FallbackThreadLocalRandom()
kotlinx.coroutines.flow.internal.SafeCollector: void exceptionTransparencyViolated(kotlinx.coroutines.flow.internal.DownstreamExceptionElement,java.lang.Object)
com.google.android.gms.maps.internal.zzbs: com.google.android.gms.maps.model.VisibleRegion getVisibleRegion()
io.sentry.transport.AuthenticatorWrapper: void setDefault(java.net.Authenticator)
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: void onAttach(android.content.Context)
kotlinx.coroutines.internal.DispatchedContinuation: void release()
io.flutter.plugin.editing.TextInputPlugin: void access$600(io.flutter.plugin.editing.TextInputPlugin,int,boolean)
com.google.android.gms.common.api.internal.zaac: zaac(com.google.android.gms.common.api.internal.zaad,com.google.android.gms.tasks.TaskCompletionSource)
com.google.common.collect.RegularImmutableList: int copyIntoArray(java.lang.Object[],int)
com.google.gson.stream.JsonReader: boolean nextBoolean()
androidx.fragment.app.FragmentTransition: void configureTransitionsReordered(androidx.fragment.app.FragmentManagerImpl,int,androidx.fragment.app.FragmentTransition$FragmentContainerTransition,android.view.View,androidx.collection.ArrayMap)
kotlinx.coroutines.internal.OnUndeliveredElementKt: kotlin.jvm.functions.Function1 bindCancellationFun(kotlin.jvm.functions.Function1,java.lang.Object,kotlin.coroutines.CoroutineContext)
com.google.common.collect.RegularImmutableList: java.lang.Object get(int)
io.flutter.embedding.android.FlutterActivity: void configureStatusBarForFullscreenFlutterExperience()
androidx.core.app.RemoteActionCompat: RemoteActionCompat()
io.flutter.plugin.editing.TextInputPlugin: void unlockPlatformViewInputConnection()
io.sentry.protocol.SentryStackFrame: void setFilename(java.lang.String)
com.google.android.gms.common.api.internal.zabq: void zaF()
com.google.android.gms.maps.model.BitmapDescriptor: BitmapDescriptor(com.google.android.gms.dynamic.IObjectWrapper)
io.sentry.Session$State: io.sentry.Session$State[] values()
com.google.android.gms.maps.UiSettings: void setScrollGesturesEnabled(boolean)
com.google.android.gms.internal.maps.zza: zza(android.os.IBinder,java.lang.String)
io.sentry.SentryOptions: void setSampleRate(java.lang.Double)
androidx.fragment.app.FragmentHostCallback: android.view.LayoutInflater onGetLayoutInflater()
com.google.android.gms.common.api.internal.zabx: void onReceive(android.content.Context,android.content.Intent)
androidx.core.app.NotificationCompat$BigTextStyle: NotificationCompat$BigTextStyle()
kotlin.internal.jdk7.JDK7PlatformImplementations: JDK7PlatformImplementations()
io.sentry.ISerializer: void serialize(io.sentry.SentryEnvelope,java.io.OutputStream)
io.flutter.plugins.connectivity.Connectivity: java.lang.String getWifiIPAddress()
androidx.collection.ArraySet: void allocArrays(int)
kotlinx.coroutines.channels.ChannelResult: kotlinx.coroutines.channels.ChannelResult$Failed access$getFailed$cp()
com.google.android.gms.internal.maps.zzab: void zzr(com.google.android.gms.maps.model.Cap)
kotlin.jvm.internal.PackageReference: int hashCode()
androidx.core.app.NotificationCompat$Builder: androidx.core.app.NotificationCompat$Builder setContentText(java.lang.CharSequence)
io.sentry.protocol.Message: void setMessage(java.lang.String)
io.sentry.protocol.Device: java.lang.Boolean isOnline()
com.google.common.io.Files$FilePredicate: boolean apply(java.lang.Object)
io.flutter.plugin.editing.FlutterTextUtils: int getOffsetBefore(java.lang.CharSequence,int)
com.google.gson.internal.$Gson$Types: java.lang.reflect.ParameterizedType newParameterizedTypeWithOwner(java.lang.reflect.Type,java.lang.reflect.Type,java.lang.reflect.Type[])
com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper: com.google.common.collect.MapMakerInternalMap$WeakKeyWeakValueEntry$Helper instance()
io.sentry.exception.ExceptionMechanismException: ExceptionMechanismException(io.sentry.protocol.Mechanism,java.lang.Throwable,java.lang.Thread)
io.sentry.SentryTracer: io.sentry.ISpan startChild(java.lang.String)
kotlinx.coroutines.flow.internal.SafeCollectorKt$emitFun$1: java.lang.Object invoke(kotlinx.coroutines.flow.FlowCollector,java.lang.Object,kotlin.coroutines.Continuation)
kotlin.collections.EmptyIterator: java.lang.Void next()
com.google.android.gms.common.api.internal.zabq: void zaD(com.google.android.gms.common.api.Status)
com.google.android.gms.internal.maps.zzah: com.google.android.gms.maps.model.Tile zzb(int,int,int)
com.google.android.gms.common.internal.GetServiceRequest: void writeToParcel(android.os.Parcel,int)
com.google.gson.stream.JsonReader: void beginArray()
io.flutter.embedding.engine.systemchannels.RestorationChannel: io.flutter.plugin.common.MethodChannel$Result access$402(io.flutter.embedding.engine.systemchannels.RestorationChannel,io.flutter.plugin.common.MethodChannel$Result)
kotlinx.coroutines.scheduling.LimitingDispatcher: void close()
androidx.fragment.app.FragmentManagerImpl: androidx.fragment.app.Fragment findFragmentByTag(java.lang.String)
io.sentry.flutter.SentryFlutterPlugin$initNativeSdk$2$9: SentryFlutterPlugin$initNativeSdk$2$9(io.sentry.android.core.SentryAndroidOptions)
io.sentry.android.core.ManifestMetadataReader: long readLong(android.os.Bundle,io.sentry.ILogger,java.lang.String,long)
io.sentry.protocol.Mechanism: java.lang.Boolean getSynthetic()
kotlin.Pair: java.lang.String toString()
com.google.common.hash.Hashing$ChecksumType: com.google.common.hash.Hashing$ChecksumType valueOf(java.lang.String)
io.flutter.plugin.common.BasicMessageChannel: BasicMessageChannel(io.flutter.plugin.common.BinaryMessenger,java.lang.String,io.flutter.plugin.common.MessageCodec,io.flutter.plugin.common.BinaryMessenger$TaskQueue)
io.sentry.Hub: io.sentry.SentryOptions getOptions()
androidx.window.layout.ExtensionInterfaceCompat$ExtensionCallbackInterface: void onWindowLayoutChanged(android.app.Activity,androidx.window.layout.WindowLayoutInfo)
io.flutter.embedding.android.FlutterActivity: void onPause()
androidx.core.graphics.drawable.IconCompat: IconCompat()
kotlin.collections.EmptyList: java.lang.String toString()
io.sentry.Scope: io.sentry.ISpan getSpan()
io.sentry.SpanStatus: SpanStatus(java.lang.String,int,int,int)
androidx.fragment.app.FragmentController: android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet)
io.flutter.embedding.android.FlutterImageView: void detachFromRenderer()
com.google.android.gms.maps.model.LatLng: java.lang.String toString()
io.sentry.HostnameCache: HostnameCache(long,java.util.concurrent.Callable)
com.google.gson.internal.ConstructorConstructor$9: java.lang.Object construct()
com.google.common.base.Preconditions: java.lang.String badPositionIndexes(int,int,int)
kotlinx.coroutines.NonDisposableHandle: NonDisposableHandle()
io.flutter.plugins.googlemaps.GoogleMapBuilder: void setRotateGesturesEnabled(boolean)
io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness: io.flutter.embedding.engine.systemchannels.PlatformChannel$Brightness valueOf(java.lang.String)
com.google.gson.internal.LinkedHashTreeMap: int size()
com.google.android.gms.maps.internal.zzw: zzw()
com.google.android.gms.maps.model.PolygonOptions: com.google.android.gms.maps.model.PolygonOptions geodesic(boolean)
com.google.android.gms.common.GoogleApiAvailability: boolean zah(android.content.Context,com.google.android.gms.common.ConnectionResult,int)
io.sentry.SentryEnvelopeItemHeader: java.lang.String getFileName()
com.google.common.hash.HashCode$BytesHashCode: int asInt()
com.google.android.gms.common.internal.zzf: zzf(com.google.android.gms.common.internal.BaseGmsClient,int,android.os.IBinder,android.os.Bundle)
io.sentry.NoOpSpan: java.lang.Throwable getThrowable()
io.sentry.Attachment: byte[] getBytes()
kotlinx.coroutines.scheduling.WorkQueue: kotlinx.coroutines.scheduling.Task poll()
io.sentry.DateUtils$2: java.text.SimpleDateFormat initialValue()
io.sentry.protocol.Request: java.lang.String getUrl()
kotlin.sequences.TransformingSequence$iterator$1: java.lang.Object next()
com.google.gson.internal.bind.TypeAdapters$4: TypeAdapters$4()
com.google.android.gms.common.internal.BaseGmsClient: void onPostInitHandler(int,android.os.IBinder,android.os.Bundle,int)
io.sentry.util.StringUtils: java.lang.String getStringAfterDot(java.lang.String)
io.sentry.transport.ITransport: void send(io.sentry.SentryEnvelope)
com.google.common.collect.MapMakerInternalMap$WriteThroughEntry: java.lang.Object setValue(java.lang.Object)
io.sentry.transport.AsyncHttpTransport: void close()
io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat: io.flutter.embedding.engine.systemchannels.PlatformChannel$ClipboardContentFormat valueOf(java.lang.String)
com.google.gson.stream.JsonReader: int nextInt()
io.sentry.transport.AuthenticatorWrapper: AuthenticatorWrapper()
kotlin.text.StringsKt__StringsKt: java.lang.String substringAfterLast(java.lang.String,char,java.lang.String)
com.google.android.gms.common.internal.zzo: void onServiceConnected(android.content.ComponentName,android.os.IBinder)
com.google.common.collect.MapMakerInternalMap$KeySet: boolean isEmpty()
kotlinx.coroutines.channels.ArrayChannel: void enqueueElement(int,java.lang.Object)
androidx.collection.MapCollections: MapCollections()
com.google.android.gms.common.api.internal.zabm: void run()
io.flutter.plugin.common.StandardMessageCodec: java.nio.ByteBuffer encodeMessage(java.lang.Object)
androidx.core.app.ComponentActivity: boolean dispatchKeyEvent(android.view.KeyEvent)
io.sentry.CircularFifoQueue: int access$300(io.sentry.CircularFifoQueue,int)
com.google.common.base.Joiner: Joiner(com.google.common.base.Joiner,com.google.common.base.Joiner$1)
io.sentry.UserFeedback: java.lang.String getComments()
io.flutter.view.AccessibilityBridge: android.view.accessibility.AccessibilityNodeInfo obtainAccessibilityNodeInfo(android.view.View,int)
io.flutter.embedding.engine.loader.FlutterLoader$1: FlutterLoader$1(io.flutter.embedding.engine.loader.FlutterLoader,android.content.Context)
androidx.arch.core.internal.SafeIterableMap$IteratorWithAdditions: java.lang.Object next()
com.google.android.gms.internal.base.zaa: void zac(int,android.os.Parcel)
androidx.fragment.app.FragmentManagerImpl: void throwException(java.lang.RuntimeException)
com.google.android.gms.internal.maps.zzj: void zzu(float)
io.flutter.plugins.googlemaps.PolygonsController: void addPolygons(java.util.List)
com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueEntry$Helper: com.google.common.collect.MapMakerInternalMap$Segment newSegment(com.google.common.collect.MapMakerInternalMap,int,int)
kotlinx.coroutines.AbstractCoroutine: void afterResume(java.lang.Object)
io.sentry.SentryEvent: void acceptUnknownProperties(java.util.Map)
kotlin.text.StringsKt__StringNumberConversionsKt: java.lang.Long toLongOrNull(java.lang.String,int)
kotlinx.coroutines.internal.OnUndeliveredElementKt: kotlinx.coroutines.internal.UndeliveredElementException callUndeliveredElementCatchingException$default(kotlin.jvm.functions.Function1,java.lang.Object,kotlinx.coroutines.internal.UndeliveredElementException,int,java.lang.Object)
io.sentry.Hub: io.sentry.protocol.SentryId captureTransaction(io.sentry.protocol.SentryTransaction,java.lang.Object)
com.google.common.collect.MapMakerInternalMap$WeakKeyStrongValueSegment: void maybeClearReferenceQueues()
io.flutter.embedding.android.FlutterActivityAndFragmentDelegate: void detachFromFlutterEngine()
io.sentry.Breadcrumb: void setLevel(io.sentry.SentryLevel)
com.tekartik.sqflite.SqlCommand: java.lang.Object toValue(java.lang.Object)
com.google.android.gms.common.internal.zzac: void getService(com.google.android.gms.common.internal.IGmsCallbacks,com.google.android.gms.common.internal.GetServiceRequest)
androidx.fragment.app.FragmentManagerImpl: boolean popBackStackImmediate(java.lang.String,int,int)
androidx.core.app.NotificationCompatBuilder: void addAction(androidx.core.app.NotificationCompat$Action)
com.google.gson.JsonObject: JsonObject()
androidx.collection.ArrayMap$1: int colIndexOfKey(java.lang.Object)
io.flutter.view.AccessibilityBridge$SemanticsNode: boolean access$5100(io.flutter.view.AccessibilityBridge$SemanticsNode)
com.google.gson.internal.UnsafeAllocator$1: UnsafeAllocator$1(java.lang.reflect.Method,java.lang.Object)
com.google.android.gms.maps.CameraUpdateFactory: com.google.android.gms.maps.CameraUpdate newCameraPosition(com.google.android.gms.maps.model.CameraPosition)
com.google.gson.internal.bind.TypeAdapters$17: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
kotlin.text.StringsKt__StringsJVMKt: boolean endsWith$default(java.lang.String,java.lang.String,boolean,int,java.lang.Object)
io.sentry.android.ndk.NdkScopeObserver: void removeExtra(java.lang.String)
io.sentry.protocol.App: java.util.Date getAppStartTime()
io.sentry.Scope: void withTransaction(io.sentry.Scope$IWithTransaction)
io.sentry.protocol.Device: java.lang.String getBrand()
io.sentry.Breadcrumb: void removeData(java.lang.String)
io.sentry.SentryTracer: java.util.Date getTimestamp()
kotlinx.coroutines.JobSupport: boolean cancelImpl$kotlinx_coroutines_core(java.lang.Object)
io.sentry.Sentry: io.sentry.IHub getCurrentHub()
com.google.android.gms.common.GooglePlayServicesIncorrectManifestValueException: GooglePlayServicesIncorrectManifestValueException(int)
com.google.common.hash.LittleEndianByteArray$LittleEndianBytes: void putLongLittleEndian(byte[],int,long)
androidx.fragment.app.FragmentManagerImpl: void freeBackStackIndex(int)
kotlinx.coroutines.CompletionHandlerException: CompletionHandlerException(java.lang.String,java.lang.Throwable)
kotlin.coroutines.jvm.internal.BaseContinuationImpl: void resumeWith(java.lang.Object)
kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.Throwable access$recoverFromStackFrame(java.lang.Throwable,kotlin.coroutines.jvm.internal.CoroutineStackFrame)
io.flutter.embedding.engine.mutatorsstack.FlutterMutatorsStack: void pushTransform(float[])
com.google.android.gms.common.api.GoogleApi$Settings$Builder: com.google.android.gms.common.api.GoogleApi$Settings build()
com.google.gson.internal.bind.TreeTypeAdapter: TreeTypeAdapter(com.google.gson.JsonSerializer,com.google.gson.JsonDeserializer,com.google.gson.Gson,com.google.gson.reflect.TypeToken,com.google.gson.TypeAdapterFactory)
androidx.collection.ArraySet: boolean remove(java.lang.Object)
io.flutter.plugin.platform.SingleViewPresentation$PresentationState: io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler access$102(io.flutter.plugin.platform.SingleViewPresentation$PresentationState,io.flutter.plugin.platform.SingleViewPresentation$WindowManagerHandler)
androidx.fragment.app.FragmentActivity: void onCreate(android.os.Bundle)
androidx.versionedparcelable.VersionedParcel: int readInt(int,int)
io.flutter.embedding.android.FlutterActivity: void onCreate(android.os.Bundle)
io.sentry.transport.CurrentDateProvider: CurrentDateProvider()
com.google.android.gms.common.api.internal.GoogleApiManager: int zaa()
io.sentry.IHub: io.sentry.ITransaction startTransaction(java.lang.String,java.lang.String,boolean)
io.flutter.view.AccessibilityBridge: void sendAccessibilityEvent(int,int)
io.sentry.SpanStatus: SpanStatus(java.lang.String,int,int)
com.tekartik.sqflite.Database: void deleteDatabase(java.lang.String)
com.google.android.gms.common.api.internal.zabq: void onConnectionSuspended(int)
io.sentry.Scope: io.sentry.ITransaction getTransaction()
io.flutter.util.ViewUtils: android.app.Activity getActivity(android.content.Context)
kotlinx.coroutines.internal.ExceptionsConstuctorKt$createConstructor$$inlined$safeCtor$1: ExceptionsConstuctorKt$createConstructor$$inlined$safeCtor$1(java.lang.reflect.Constructor)
io.flutter.plugins.googlemaps.TileOverlayBuilder: void setTransparency(float)
io.flutter.embedding.engine.renderer.FlutterRenderer$SurfaceTextureRegistryEntry: io.flutter.embedding.engine.renderer.SurfaceTextureWrapper textureWrapper()
kotlinx.coroutines.internal.StackTraceRecoveryKt: java.lang.Throwable recoverStackTrace(java.lang.Throwable)
io.flutter.plugins.urllauncher.MethodCallHandlerImpl: void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
com.google.gson.internal.bind.TypeAdapters: com.google.gson.TypeAdapterFactory newFactory(java.lang.Class,java.lang.Class,com.google.gson.TypeAdapter)
kotlin.jvm.internal.CallableReference: java.lang.String getName()
com.google.gson.internal.bind.TypeAdapters$19: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
com.google.android.gms.common.internal.safeparcel.SafeParcelWriter: int beginObjectHeader(android.os.Parcel)
io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler$EventSinkImplementation: EventChannel$IncomingStreamRequestHandler$EventSinkImplementation(io.flutter.plugin.common.EventChannel$IncomingStreamRequestHandler)
io.sentry.Session: java.lang.Double getDuration()
io.flutter.plugin.platform.PlatformPlugin: PlatformPlugin(android.app.Activity,io.flutter.embedding.engine.systemchannels.PlatformChannel,io.flutter.plugin.platform.PlatformPlugin$PlatformPluginDelegate)
io.sentry.flutter.SentryFlutterPluginKt: void getIfNotNull(java.util.Map,java.lang.String,kotlin.jvm.functions.Function1)
androidx.fragment.app.FragmentTransaction$Op: FragmentTransaction$Op()
androidx.fragment.app.FragmentManagerImpl$EndViewTransitionAnimation: boolean getTransformation(long,android.view.animation.Transformation)
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$InsetsListener: ImeSyncDeferringInsetsCallback$InsetsListener(io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback,io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$1)
io.sentry.Scope$SessionPair: Scope$SessionPair(io.sentry.Session,io.sentry.Session)
com.google.common.hash.LittleEndianByteArray$UnsafeByteArray: LittleEndianByteArray$UnsafeByteArray(java.lang.String,int,com.google.common.hash.LittleEndianByteArray$1)
kotlinx.coroutines.internal.ExceptionsConstuctorKt$createConstructor$$inlined$safeCtor$2: java.lang.Throwable invoke(java.lang.Throwable)
com.google.android.gms.maps.Projection: Projection(com.google.android.gms.maps.internal.IProjectionDelegate)
com.google.gson.internal.bind.TimeTypeAdapter$1: com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken)
kotlinx.coroutines.CancellableContinuationImpl: boolean cancelLater(java.lang.Throwable)
io.flutter.embedding.engine.systemchannels.LocalizationChannel$1: void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.sentry.OutboxSender: boolean isRelevantFileName(java.lang.String)
kotlin.coroutines.CombinedContext: boolean contains(kotlin.coroutines.CoroutineContext$Element)
com.google.android.gms.dynamic.zag: zag(com.google.android.gms.dynamic.DeferredLifecycleHelper)
io.sentry.android.core.Installation: java.lang.String readInstallationFile(java.io.File)
com.google.android.gms.common.api.internal.zabq: void zan()
io.sentry.SpanContext: java.lang.String getOperation()
io.flutter.embedding.engine.FlutterEngineConnectionRegistry: void onRestoreInstanceState(android.os.Bundle)
kotlinx.coroutines.internal.DispatchedContinuation: void awaitReusability()
com.google.android.gms.common.GooglePlayServicesUtilLight: boolean zza(android.content.Context,java.lang.String)
androidx.fragment.app.Fragment: boolean onContextItemSelected(android.view.MenuItem)
kotlinx.coroutines.internal.OpDescriptor: OpDescriptor()
com.google.android.gms.common.internal.safeparcel.SafeParcelReader: byte[] createByteArray(android.os.Parcel,int)
com.google.common.util.concurrent.CycleDetectingLockFactory$1: java.lang.Object initialValue()
androidx.collection.SimpleArrayMap: int size()
kotlinx.coroutines.JobNode: void dispose()
com.google.gson.Gson: com.google.gson.stream.JsonWriter newJsonWriter(java.io.Writer)
io.sentry.IScopeObserver: void setTag(java.lang.String,java.lang.String)
io.sentry.flutter.SentryFlutterPlugin: io.sentry.SentryEvent initNativeSdk$lambda-1$lambda-0(io.sentry.flutter.SentryFlutterPlugin,io.sentry.android.core.SentryAndroidOptions,io.sentry.SentryEvent,java.lang.Object)
com.google.common.collect.AbstractIndexedListIterator: int previousIndex()
com.google.android.gms.common.internal.BaseGmsClient: java.lang.String zze()
androidx.lifecycle.LiveData: void dispatchingValue(androidx.lifecycle.LiveData$ObserverWrapper)
io.sentry.ISentryClient: io.sentry.protocol.SentryId captureEvent(io.sentry.SentryEvent)
io.flutter.embedding.engine.renderer.FlutterRenderer: android.os.Handler access$600(io.flutter.embedding.engine.renderer.FlutterRenderer)
androidx.collection.ArraySet: java.lang.Object valueAt(int)
androidx.fragment.app.FragmentController: void dispatchOptionsMenuClosed(android.view.Menu)
io.sentry.NoOpSentryClient: io.sentry.protocol.SentryId captureEvent(io.sentry.SentryEvent,io.sentry.Scope,java.lang.Object)
kotlinx.coroutines.internal.ArrayQueue: boolean isEmpty()
com.google.gson.TypeAdapter$1: java.lang.Object read(com.google.gson.stream.JsonReader)
androidx.fragment.app.FragmentManagerImpl$AnimationOrAnimator: FragmentManagerImpl$AnimationOrAnimator(android.view.animation.Animation)
io.sentry.protocol.Device: java.lang.Boolean isLowMemory()
io.flutter.embedding.engine.FlutterJNI: void dispatchSemanticsAction(int,io.flutter.view.AccessibilityBridge$Action,java.lang.Object)
io.sentry.cache.EnvelopeCache: void writeEnvelopeToDisk(java.io.File,io.sentry.SentryEnvelope)
kotlinx.coroutines.internal.ThreadState: ThreadState(kotlin.coroutines.CoroutineContext,int)
androidx.core.app.CoreComponentFactory: android.app.Service instantiateService(java.lang.ClassLoader,java.lang.String,android.content.Intent)
kotlin.coroutines.jvm.internal.DebugProbesKt: void probeCoroutineResumed(kotlin.coroutines.Continuation)
io.sentry.Hub: void pushScope()
kotlin.coroutines.CombinedContext: kotlin.coroutines.CoroutineContext plus(kotlin.coroutines.CoroutineContext)
com.google.android.gms.common.internal.TelemetryLoggingOptions: android.os.Bundle zaa()
androidx.fragment.app.FragmentTransitionCompat21: java.lang.Object mergeTransitionsInSequence(java.lang.Object,java.lang.Object,java.lang.Object)
io.flutter.plugins.urllauncher.WebViewActivity: void onCreate(android.os.Bundle)
com.google.android.gms.common.api.internal.zad: void zad(com.google.android.gms.common.api.Status)
com.google.android.gms.common.internal.BaseGmsClient: java.lang.String getLastDisconnectMessage()
com.google.android.gms.common.internal.zaab: java.lang.Object[] newArray(int)
kotlinx.coroutines.internal.ThreadSafeHeap: void siftUpFrom(int)
androidx.window.embedding.ExtensionEmbeddingBackend$Companion: androidx.window.embedding.EmbeddingInterfaceCompat initAndVerifyEmbeddingExtension()
io.sentry.HubAdapter: io.sentry.ITransaction startTransaction(io.sentry.TransactionContext)
io.sentry.HubAdapter: void setTag(java.lang.String,java.lang.String)
com.google.android.gms.tasks.TaskCompletionSource: boolean trySetException(java.lang.Exception)
io.flutter.plugin.platform.PlatformPlugin: void restoreSystemChromeSystemUIOverlays()
com.google.gson.internal.bind.TypeAdapters$7: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
io.flutter.plugins.googlemaps.GoogleMapController: void onMethodCall(io.flutter.plugin.common.MethodCall,io.flutter.plugin.common.MethodChannel$Result)
io.flutter.embedding.engine.FlutterJNI: void unregisterTexture(long)
kotlinx.coroutines.EventLoopImplBase: long processNextEvent()
io.sentry.protocol.Contexts: io.sentry.protocol.Device getDevice()
com.google.gson.JsonPrimitive: com.google.gson.JsonElement deepCopy()
io.flutter.embedding.engine.renderer.FlutterRenderer$1: void onFlutterUiNoLongerDisplayed()
io.flutter.plugins.googlemaps.Convert: com.google.android.gms.maps.model.LatLng toLatLng(java.lang.Object)
androidx.fragment.app.FragmentManagerImpl: void dispatchOnFragmentDetached(androidx.fragment.app.Fragment,boolean)
io.sentry.protocol.SentryThread: io.sentry.protocol.SentryStackTrace getStacktrace()
io.sentry.SentryEvent: void setTransaction(java.lang.String)
kotlinx.coroutines.MainCoroutineDispatcher: MainCoroutineDispatcher()
io.flutter.plugin.editing.ListenableEditingState$1: ListenableEditingState$1(io.flutter.plugin.editing.ListenableEditingState,android.view.View,boolean,android.text.Editable)
androidx.fragment.app.FragmentState: void writeToParcel(android.os.Parcel,int)
androidx.window.embedding.EmbeddingCompat$Companion: EmbeddingCompat$Companion(kotlin.jvm.internal.DefaultConstructorMarker)
io.sentry.ITransaction: io.sentry.protocol.Request getRequest()
com.google.android.gms.internal.maps.zzab: java.lang.String zzl()
io.sentry.protocol.SentryException: SentryException()
com.google.android.gms.maps.internal.zzb: com.google.android.gms.dynamic.IObjectWrapper zoomOut()
com.google.gson.internal.bind.DateTypeAdapter: java.util.Date read(com.google.gson.stream.JsonReader)
androidx.tracing.Trace: void beginSection(java.lang.String)
androidx.fragment.app.FragmentManagerImpl: void dispatchOnFragmentCreated(androidx.fragment.app.Fragment,android.os.Bundle,boolean)
androidx.fragment.app.FragmentManagerViewModel: boolean equals(java.lang.Object)
com.google.android.gms.common.api.internal.LifecycleCallback: android.app.Activity getActivity()
io.sentry.UnknownPropertiesTypeAdapterFactory$UnknownPropertiesTypeAdapter: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
kotlinx.coroutines.DebugKt: boolean getASSERTIONS_ENABLED()
kotlinx.coroutines.channels.AbstractSendChannel$SendBuffered: void completeResumeSend()
kotlinx.coroutines.internal.FastServiceLoader: java.util.List parse(java.net.URL)
kotlin.collections.EmptyMap: java.lang.String toString()
com.google.android.gms.maps.model.CircleOptions: CircleOptions()
androidx.fragment.app.FragmentTransition$1: FragmentTransition$1(java.util.ArrayList)
com.google.common.collect.ImmutableList$SubList: java.util.ListIterator listIterator()
com.google.common.hash.HashCode$IntHashCode: HashCode$IntHashCode(int)
io.sentry.SentryOptions: void setEnableUncaughtExceptionHandler(java.lang.Boolean)
io.flutter.plugin.editing.InputConnectionAdaptor: boolean performEditorAction(int)
io.sentry.protocol.SentryRuntime: void setVersion(java.lang.String)
kotlinx.coroutines.CompletedWithCancellation: int hashCode()
com.google.gson.internal.bind.TreeTypeAdapter$SingleTypeFactory: com.google.gson.TypeAdapter create(com.google.gson.Gson,com.google.gson.reflect.TypeToken)
kotlinx.coroutines.internal.ThreadSafeHeap: ThreadSafeHeap()
io.sentry.protocol.Gpu: void setVendorId(java.lang.Integer)
com.google.gson.internal.bind.TypeAdapters$22: void write(com.google.gson.stream.JsonWriter,java.net.URI)
io.sentry.Sentry: io.sentry.ITransaction startTransaction(java.lang.String,java.lang.String,boolean)
kotlin.collections.SetsKt__SetsJVMKt: java.util.Set setOf(java.lang.Object)
com.google.android.gms.maps.internal.zzg: void setMyLocationEnabled(boolean)
io.sentry.SpanId: int hashCode()
com.google.android.gms.common.util.PlatformVersion: boolean isAtLeastKitKatWatch()
io.sentry.protocol.SentryStackTrace: SentryStackTrace()
androidx.fragment.app.FragmentController: void dispatchPictureInPictureModeChanged(boolean)
io.sentry.Sentry: void bindClient(io.sentry.ISentryClient)
io.flutter.embedding.engine.systemchannels.RestorationChannel: java.util.Map access$300(io.flutter.embedding.engine.systemchannels.RestorationChannel,byte[])
com.google.gson.JsonPrimitive: java.lang.String getAsString()
io.sentry.protocol.Gpu: Gpu(io.sentry.protocol.Gpu)
com.google.android.gms.dynamic.DeferredLifecycleHelper: com.google.android.gms.dynamic.LifecycleDelegate getDelegate()
kotlin.KotlinNothingValueException: KotlinNothingValueException()
com.google.gson.internal.LinkedTreeMap$Node: java.lang.Object setValue(java.lang.Object)
io.sentry.Scope: java.util.List getEventProcessors()
io.sentry.protocol.Browser: void acceptUnknownProperties(java.util.Map)
androidx.fragment.app.FragmentTransitionImpl: void setNameOverridesOrdered(android.view.View,java.util.ArrayList,java.util.Map)
io.sentry.ISpan: void finish(io.sentry.SpanStatus)
com.google.gson.internal.Excluder: boolean excludeClass(java.lang.Class,boolean)
io.sentry.protocol.Request: java.lang.Object getData()
com.google.android.gms.common.util.DeviceProperties: boolean isWearableWithoutPlayStore(android.content.Context)
com.google.common.collect.MapMakerInternalMap: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)
com.google.gson.internal.Streams: com.google.gson.JsonElement parse(com.google.gson.stream.JsonReader)
com.google.common.reflect.Types$JavaVersion$4: java.lang.reflect.Type newArrayType(java.lang.reflect.Type)
io.flutter.plugin.editing.InputConnectionAdaptor: android.view.inputmethod.ExtractedText getExtractedText(android.view.inputmethod.ExtractedTextRequest)
kotlinx.coroutines.JobCancellationException: java.lang.Throwable createCopy()
com.google.android.gms.maps.model.Polyline: void setEndCap(com.google.android.gms.maps.model.Cap)
androidx.fragment.app.FragmentActivity: void onResumeFragments()
androidx.core.view.OneShotPreDrawListener: void onViewAttachedToWindow(android.view.View)
androidx.core.app.NotificationCompat$Style: void setBuilder(androidx.core.app.NotificationCompat$Builder)
com.google.android.gms.common.zzi: com.google.android.gms.dynamic.IObjectWrapper zzd()
kotlin.ranges.RangesKt___RangesKt: kotlin.ranges.IntRange until(int,int)
io.flutter.plugins.connectivity.Connectivity: java.lang.String getNetworkTypeLegacy()
io.flutter.plugins.googlemaps.TileOverlayController: void clearTileCache()
io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness: io.flutter.embedding.engine.systemchannels.SettingsChannel$PlatformBrightness[] values()
com.google.android.gms.common.api.internal.LifecycleCallback: void onDestroy()
io.flutter.plugin.platform.VirtualDisplayController: void dispose()
kotlinx.coroutines.EventLoopImplBase: void shutdown()
androidx.fragment.app.Fragment: void setArguments(android.os.Bundle)
androidx.savedstate.SavedStateRegistryController: androidx.savedstate.SavedStateRegistry getSavedStateRegistry()
androidx.window.layout.SidecarAdapter: androidx.window.layout.WindowLayoutInfo translate(androidx.window.sidecar.SidecarWindowLayoutInfo,androidx.window.sidecar.SidecarDeviceState)
io.flutter.plugin.platform.PlatformPlugin: void popSystemNavigator()
io.sentry.transport.ReusableCountLatch$Sync: void access$100(io.sentry.transport.ReusableCountLatch$Sync)
kotlin.jvm.internal.ClassReference: java.util.Map access$getSimpleNames$cp()
io.flutter.plugins.googlemaps.MarkersController: void showMarkerInfoWindow(java.lang.String,io.flutter.plugin.common.MethodChannel$Result)
com.google.gson.Gson: boolean htmlSafe()
io.sentry.IHub: void addBreadcrumb(io.sentry.Breadcrumb,java.lang.Object)
com.google.android.gms.common.api.internal.BackgroundDetector: com.google.android.gms.common.api.internal.BackgroundDetector getInstance()
io.flutter.embedding.engine.renderer.FlutterRenderer: void setViewportMetrics(io.flutter.embedding.engine.renderer.FlutterRenderer$ViewportMetrics)
com.google.android.gms.internal.base.zaq: zaq(android.os.Looper,android.os.Handler$Callback)
io.sentry.SentryEnvelopeItem: io.sentry.SentryEnvelopeItem fromAttachment(io.sentry.Attachment,long)
androidx.fragment.app.FragmentActivity: void startActivityFromFragment(androidx.fragment.app.Fragment,android.content.Intent,int,android.os.Bundle)
io.sentry.NoOpSentryExecutorService: io.sentry.ISentryExecutorService getInstance()
kotlin.collections.EmptyMap: java.lang.Void remove(java.lang.Object)
com.google.android.gms.common.internal.zzk: zzk()
com.google.common.collect.MapMakerInternalMap$Segment: boolean remove(java.lang.Object,int,java.lang.Object)
io.flutter.view.AccessibilityBridge$4: AccessibilityBridge$4(io.flutter.view.AccessibilityBridge,android.view.accessibility.AccessibilityManager)
com.google.android.gms.maps.model.MarkerOptions: boolean isFlat()
com.google.android.gms.common.GooglePlayServicesUtilLight: java.lang.String getErrorString(int)
kotlin.coroutines.CombinedContext$toString$1: CombinedContext$toString$1()
kotlinx.coroutines.Empty: Empty(boolean)
kotlinx.coroutines.channels.AbstractChannel$enqueueReceiveInternal$$inlined$addLastIfPrevAndIf$1: java.lang.Object prepare(kotlinx.coroutines.internal.LockFreeLinkedListNode)
com.google.android.gms.common.zze: byte[] zzb()
com.google.android.gms.common.api.internal.zas: void finalize()
com.google.android.gms.maps.internal.zze: com.google.android.gms.maps.internal.ICameraUpdateFactoryDelegate zze()
com.google.common.util.concurrent.ThreadFactoryBuilder: java.util.concurrent.ThreadFactory doBuild(com.google.common.util.concurrent.ThreadFactoryBuilder)
com.google.common.collect.MapMakerInternalMap: com.google.common.collect.MapMakerInternalMap create(com.google.common.collect.MapMaker)
io.flutter.plugins.googlemaps.MarkersController: void addMarker(java.lang.String,com.google.android.gms.maps.model.MarkerOptions,boolean)
io.sentry.SpanContext: void setStatus(io.sentry.SpanStatus)
io.flutter.plugins.googlemaps.Convert: java.lang.Object circleIdToJson(java.lang.String)
io.sentry.protocol.SdkVersion: void setName(java.lang.String)
com.google.android.gms.common.internal.zzr: void zza(com.google.android.gms.common.internal.zzn,android.content.ServiceConnection,java.lang.String)
kotlin.text.StringsKt__StringNumberConversionsKt: java.lang.Integer toIntOrNull(java.lang.String,int)
com.google.android.gms.common.internal.safeparcel.SafeParcelReader: long readLong(android.os.Parcel,int)
kotlin.text.StringsKt__StringsKt: java.lang.String substringBefore(java.lang.String,char,java.lang.String)
io.flutter.plugins.googlemaps.GoogleMapController: android.view.View getView()
com.google.android.gms.maps.model.Marker: void setSnippet(java.lang.String)
com.google.android.gms.common.internal.zzj: zzj()
com.google.common.reflect.Types$JavaVersion$4: java.lang.String typeName(java.lang.reflect.Type)
com.google.android.gms.internal.maps.zzab: void zzs(boolean)
com.google.gson.Gson$5: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
io.sentry.EnvelopeReader: EnvelopeReader()
androidx.collection.MapCollections: java.util.Set getKeySet()
com.google.gson.internal.$Gson$Types: java.lang.reflect.Type resolve(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type,java.util.Collection)
io.flutter.plugins.googlemaps.MarkerController: MarkerController(com.google.android.gms.maps.model.Marker,boolean)
com.google.android.gms.maps.internal.zzbz: zzbz()
com.google.android.gms.internal.maps.zzab: void zzv(java.util.List)
androidx.fragment.app.FragmentManagerImpl: android.os.Parcelable saveAllState()
io.sentry.EnvelopeSender: EnvelopeSender(io.sentry.IHub,io.sentry.ISerializer,io.sentry.ILogger,long)
com.google.common.util.concurrent.AbstractFuture$Waiter: AbstractFuture$Waiter()
io.sentry.protocol.Gpu: java.util.Map getUnknown()
kotlinx.coroutines.channels.AbstractChannel: void removeReceiveOnCancel(kotlinx.coroutines.CancellableContinuation,kotlinx.coroutines.channels.Receive)
com.google.android.gms.common.internal.zzu: zzu(java.lang.String,java.lang.String,boolean,int,boolean)
androidx.fragment.app.FragmentTransition: void retainValues(androidx.collection.ArrayMap,androidx.collection.ArrayMap)
com.google.gson.internal.bind.TypeAdapters$17: java.lang.Object read(com.google.gson.stream.JsonReader)
kotlinx.coroutines.CancellableContinuationImpl: java.lang.Object getSuccessfulResult$kotlinx_coroutines_core(java.lang.Object)
androidx.window.embedding.SplitRuleParser: androidx.window.embedding.ActivityRule parseSplitActivityRule(android.content.Context,android.content.res.XmlResourceParser)
io.sentry.transport.TransportResult: int getResponseCode()
com.google.gson.internal.bind.TimeTypeAdapter: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
io.flutter.view.AccessibilityBridge$CustomAccessibilityAction: int access$4202(io.flutter.view.AccessibilityBridge$CustomAccessibilityAction,int)
com.google.android.gms.common.api.internal.zag: com.google.android.gms.common.Feature[] zab(com.google.android.gms.common.api.internal.zabq)
kotlinx.coroutines.internal.ScopeCoroutine: kotlinx.coroutines.Job getParent$kotlinx_coroutines_core()
io.sentry.flutter.SentryFlutterPlugin: void setEventEnvironmentTag(io.sentry.SentryEvent,java.lang.String,java.lang.String)
io.flutter.plugins.googlemaps.TileOverlaysController: void setGoogleMap(com.google.android.gms.maps.GoogleMap)
com.google.gson.internal.bind.TypeAdapters$10: void write(com.google.gson.stream.JsonWriter,java.util.concurrent.atomic.AtomicIntegerArray)
io.sentry.HubAdapter: void withScope(io.sentry.ScopeCallback)
io.sentry.Attachment: java.lang.String getFilename()
kotlin.coroutines.CoroutineContext$plus$1: java.lang.Object invoke(java.lang.Object,java.lang.Object)
androidx.collection.SimpleArrayMap: void ensureCapacity(int)
io.sentry.IHub: io.sentry.ITransaction startTransaction(io.sentry.TransactionContext)
com.google.android.gms.maps.model.zzf: zzf()
io.flutter.plugin.editing.ImeSyncDeferringInsetsCallback$AnimationCallback: void onPrepare(android.view.WindowInsetsAnimation)
io.sentry.ISpan: void setThrowable(java.lang.Throwable)
io.sentry.SentryOptions: java.lang.Boolean getEnableDeduplication()
io.flutter.plugin.platform.PlatformViewsController: io.flutter.view.TextureRegistry access$700(io.flutter.plugin.platform.PlatformViewsController)
io.sentry.protocol.SentryException: io.sentry.protocol.Mechanism getMechanism()
com.google.android.gms.signin.internal.SignInClientImpl: void zab()
kotlinx.coroutines.internal.SystemPropsKt__SystemPropsKt: int getAVAILABLE_PROCESSORS()
com.google.android.gms.maps.GoogleMap: void snapshot(com.google.android.gms.maps.GoogleMap$SnapshotReadyCallback,android.graphics.Bitmap)
io.sentry.SpanContext: io.sentry.SpanId getParentSpanId()
io.sentry.android.core.DefaultAndroidEventProcessor: io.sentry.protocol.User getDefaultUser()
com.google.android.gms.maps.internal.zzg: void animateCamera(com.google.android.gms.dynamic.IObjectWrapper)
com.google.common.hash.BloomFilterStrategies$2: long lowerEight(byte[])
kotlinx.coroutines.InvokeOnCancel: InvokeOnCancel(kotlin.jvm.functions.Function1)
androidx.window.layout.ExtensionWindowLayoutInfoBackend: ExtensionWindowLayoutInfoBackend(androidx.window.extensions.layout.WindowLayoutComponent)
io.flutter.embedding.engine.FlutterEngine: FlutterEngine(android.content.Context,java.lang.String[],boolean,boolean)
com.google.gson.internal.bind.ArrayTypeAdapter: void write(com.google.gson.stream.JsonWriter,java.lang.Object)
io.flutter.embedding.android.FlutterView$3: FlutterView$3(io.flutter.embedding.android.FlutterView)
com.google.gson.internal.LinkedTreeMap$EntrySet: boolean remove(java.lang.Object)
kotlinx.coroutines.InvokeOnCancelling: java.lang.Object invoke(java.lang.Object)
